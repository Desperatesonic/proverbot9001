Require Export GeoCoq.Elements.OriginalProofs.proposition_10.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_15.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesreflexive.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_angleorderrespectscongruence.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_angleorderrespectscongruence2.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma proposition_16 : \n   forall A B C D, \n   Triangle A B C -> BetS B C D ->\n   LtA B A C A C D /\ LtA C B A A C D.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D : Point) (_ : Triangle A B C) (_ : BetS B C D), and (LtA B A C A C D) (LtA C B A A C D)
+++++
Proof.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D : Point) (_ : Triangle A B C) (_ : BetS B C D), and (LtA B A C A C D) (LtA C B A A C D)
+++++
intros.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.

*****
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (nCol A B C) by (conclude_def Triangle ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).

*****
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ eq A C).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).

*****
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq A C)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
intro.

*****
H2 : eq A C
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
intro.
assert (Col A B C) by (conclude_def Col ).

*****
H3 : Col A B C
H2 : eq A C
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).

*****
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ eq B C).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).

*****
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq B C)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
intro.

*****
H3 : eq B C
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
intro.
assert (Col A B C) by (conclude_def Col ).

*****
H4 : Col A B C
H3 : eq B C
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).

*****
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq C B) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).

*****
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.

*****
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ eq B E).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).

*****
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq B E)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
intro.

*****
H7 : eq B E
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS A B C) by (conclude cn_equalitysub).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
intro.
assert (BetS A B C) by (conclude cn_equalitysub).

*****
H8 : BetS A B C
H7 : eq B E
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
intro.
assert (BetS A B C) by (conclude cn_equalitysub).
assert (Col A B C) by (conclude_def Col ).

*****
H9 : Col A B C
H8 : BetS A B C
H7 : eq B E
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).

*****
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq E B) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).

*****
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.

*****
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ eq A C).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).

*****
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq A C)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
intro.

*****
H11 : eq A C
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
intro.
assert (Col A B C) by (conclude_def Col ).

*****
H12 : Col A B C
H11 : eq A C
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).

*****
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq C A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).

*****
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq E C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).

*****
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.

*****
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col B E A).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).

*****
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col B E A)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
intro.

*****
H16 : Col B E A
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A E C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
intro.
assert (Col A E C) by (conclude_def Col ).

*****
H17 : Col A E C
H16 : Col B E A
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E A B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
intro.
assert (Col A E C) by (conclude_def Col ).
assert (Col E A B) by (forward_using lemma_collinearorder).

*****
H18 : Col E A B
H17 : Col A E C
H16 : Col B E A
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E A C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
intro.
assert (Col A E C) by (conclude_def Col ).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (Col E A C) by (forward_using lemma_collinearorder).

*****
H19 : Col E A C
H18 : Col E A B
H17 : Col A E C
H16 : Col B E A
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq A E) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
intro.
assert (Col A E C) by (conclude_def Col ).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (Col E A C) by (forward_using lemma_collinearorder).
assert (neq A E) by (forward_using lemma_betweennotequal).

*****
H20 : neq A E
H19 : Col E A C
H18 : Col E A B
H17 : Col A E C
H16 : Col B E A
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
intro.
assert (Col A E C) by (conclude_def Col ).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (Col E A C) by (forward_using lemma_collinearorder).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq E A) by (conclude lemma_inequalitysymmetric).

*****
H21 : neq E A
H20 : neq A E
H19 : Col E A C
H18 : Col E A B
H17 : Col A E C
H16 : Col B E A
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
intro.
assert (Col A E C) by (conclude_def Col ).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (Col E A C) by (forward_using lemma_collinearorder).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq E A) by (conclude lemma_inequalitysymmetric).
assert (Col A B C) by (conclude lemma_collinear4).

*****
H22 : Col A B C
H21 : neq E A
H20 : neq A E
H19 : Col E A C
H18 : Col E A B
H17 : Col A E C
H16 : Col B E A
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).

*****
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B E A C E F) by (conclude proposition_15a).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).

*****
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col A E B).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).

*****
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col A E B)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
intro.

*****
H18 : Col A E B
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B E A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
intro.
assert (Col B E A) by (forward_using lemma_collinearorder).

*****
H19 : Col B E A
H18 : Col A E B
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).

*****
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).

*****
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).

*****
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Cong B E F E) by (forward_using lemma_doublereverse).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).

*****
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).

*****
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col E A B).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).

*****
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col E A B)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
intro.

*****
H23 : Col E A B
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B E A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
intro.
assert (Col B E A) by (forward_using lemma_collinearorder).

*****
H24 : Col B E A
H23 : Col E A B
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).

*****
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert ((Cong A B C F /\ CongA E A B E C F /\ CongA E B A E F C)) by (conclude proposition_04).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).

*****
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col B A E).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).

*****
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col B A E)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
intro.

*****
H25 : Col B A E
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E A B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
intro.
assert (Col E A B) by (forward_using lemma_collinearorder).

*****
H26 : Col E A B
H25 : Col B A E
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).

*****
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out A C E) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).

*****
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (eq B B) by (conclude cn_equalityreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).

*****
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq A B) by (forward_using lemma_angledistinct).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).

*****
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq B A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).

*****
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out A B B) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).

*****
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col B A C).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).

*****
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col B A C)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
intro.

*****
H31 : Col B A C
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
intro.
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H32 : Col A B C
H31 : Col B A C
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).

*****
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).

*****
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).

*****
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).

*****
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).

*****
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).

*****
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).

*****
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq C E) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).

*****
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C E A) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).

*****
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (eq F F) by (conclude cn_equalityreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).

*****
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col E C F).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).

*****
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col E C F)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.

*****
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B E F) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).

*****
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F E B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).

*****
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F E C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).

*****
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E F) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).
assert (neq E F) by (forward_using lemma_betweennotequal).

*****
H45 : neq E F
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq F E) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).
assert (neq E F) by (forward_using lemma_betweennotequal).
assert (neq F E) by (conclude lemma_inequalitysymmetric).

*****
H46 : neq F E
H45 : neq E F
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E B C) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).
assert (neq E F) by (forward_using lemma_betweennotequal).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (Col E B C) by (conclude lemma_collinear4).

*****
H47 : Col E B C
H46 : neq F E
H45 : neq E F
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A E C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).
assert (neq E F) by (forward_using lemma_betweennotequal).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (Col E B C) by (conclude lemma_collinear4).
assert (Col A E C) by (conclude_def Col ).

*****
H48 : Col A E C
H47 : Col E B C
H46 : neq F E
H45 : neq E F
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E C B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).
assert (neq E F) by (forward_using lemma_betweennotequal).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (Col E B C) by (conclude lemma_collinear4).
assert (Col A E C) by (conclude_def Col ).
assert (Col E C B) by (forward_using lemma_collinearorder).

*****
H49 : Col E C B
H48 : Col A E C
H47 : Col E B C
H46 : neq F E
H45 : neq E F
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E C A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).
assert (neq E F) by (forward_using lemma_betweennotequal).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (Col E B C) by (conclude lemma_collinear4).
assert (Col A E C) by (conclude_def Col ).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (Col E C A) by (forward_using lemma_collinearorder).

*****
H50 : Col E C A
H49 : Col E C B
H48 : Col A E C
H47 : Col E B C
H46 : neq F E
H45 : neq E F
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).
assert (neq E F) by (forward_using lemma_betweennotequal).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (Col E B C) by (conclude lemma_collinear4).
assert (Col A E C) by (conclude_def Col ).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (Col E C A) by (forward_using lemma_collinearorder).
assert (neq E C) by (forward_using lemma_betweennotequal).

*****
H51 : neq E C
H50 : Col E C A
H49 : Col E C B
H48 : Col A E C
H47 : Col E B C
H46 : neq F E
H45 : neq E F
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C B A) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).
assert (neq E F) by (forward_using lemma_betweennotequal).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (Col E B C) by (conclude lemma_collinear4).
assert (Col A E C) by (conclude_def Col ).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (Col E C A) by (forward_using lemma_collinearorder).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (Col C B A) by (conclude lemma_collinear4).

*****
H52 : Col C B A
H51 : neq E C
H50 : Col E C A
H49 : Col E C B
H48 : Col A E C
H47 : Col E B C
H46 : neq F E
H45 : neq E F
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
intro.
assert (Col B E F) by (conclude_def Col ).
assert (Col F E B) by (forward_using lemma_collinearorder).
assert (Col F E C) by (forward_using lemma_collinearorder).
assert (neq E F) by (forward_using lemma_betweennotequal).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (Col E B C) by (conclude lemma_collinear4).
assert (Col A E C) by (conclude_def Col ).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (Col E C A) by (forward_using lemma_collinearorder).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (Col C B A) by (conclude lemma_collinear4).
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H53 : Col A B C
H52 : Col C B A
H51 : neq E C
H50 : Col E C A
H49 : Col E C B
H48 : Col A E C
H47 : Col E B C
H46 : neq F E
H45 : neq E F
H44 : Col F E C
H43 : Col F E B
H42 : Col B E F
H41 : Col E C F
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).

*****
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ eq C F).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).

*****
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq C F)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
intro.

*****
H42 : eq C F
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E C F) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
intro.
assert (Col E C F) by (conclude_def Col ).

*****
H43 : Col E C F
H42 : eq C F
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).

*****
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C F F) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).

*****
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).

*****
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).

*****
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).

*****
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).

*****
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).

*****
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col D B F).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).

*****
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col D B F)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.

*****
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F B D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).

*****
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B E F) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).

*****
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F B E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).

*****
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq B F) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).

*****
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq F B) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).

*****
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B D E) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).

*****
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D B E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).

*****
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B C D) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).

*****
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).

*****
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq B D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).

*****
H59 : neq B D
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq D B) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).

*****
H60 : neq D B
H59 : neq B D
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B E C) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).
assert (Col B E C) by (conclude lemma_collinear4).

*****
H61 : Col B E C
H60 : neq D B
H59 : neq B D
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E C B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).
assert (Col B E C) by (conclude lemma_collinear4).
assert (Col E C B) by (forward_using lemma_collinearorder).

*****
H62 : Col E C B
H61 : Col B E C
H60 : neq D B
H59 : neq B D
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A E C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).
assert (Col B E C) by (conclude lemma_collinear4).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (Col A E C) by (conclude_def Col ).

*****
H63 : Col A E C
H62 : Col E C B
H61 : Col B E C
H60 : neq D B
H59 : neq B D
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E C A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).
assert (Col B E C) by (conclude lemma_collinear4).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (Col A E C) by (conclude_def Col ).
assert (Col E C A) by (forward_using lemma_collinearorder).

*****
H64 : Col E C A
H63 : Col A E C
H62 : Col E C B
H61 : Col B E C
H60 : neq D B
H59 : neq B D
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).
assert (Col B E C) by (conclude lemma_collinear4).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (Col A E C) by (conclude_def Col ).
assert (Col E C A) by (forward_using lemma_collinearorder).
assert (neq E C) by (forward_using lemma_betweennotequal).

*****
H65 : neq E C
H64 : Col E C A
H63 : Col A E C
H62 : Col E C B
H61 : Col B E C
H60 : neq D B
H59 : neq B D
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C B A) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).
assert (Col B E C) by (conclude lemma_collinear4).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (Col A E C) by (conclude_def Col ).
assert (Col E C A) by (forward_using lemma_collinearorder).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (Col C B A) by (conclude lemma_collinear4).

*****
H66 : Col C B A
H65 : neq E C
H64 : Col E C A
H63 : Col A E C
H62 : Col E C B
H61 : Col B E C
H60 : neq D B
H59 : neq B D
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
intro.
assert (Col F B D) by (forward_using lemma_collinearorder).
assert (Col B E F) by (conclude_def Col ).
assert (Col F B E) by (forward_using lemma_collinearorder).
assert (neq B F) by (forward_using lemma_betweennotequal).
assert (neq F B) by (conclude lemma_inequalitysymmetric).
assert (Col B D E) by (conclude lemma_collinear4).
assert (Col D B E) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).
assert (Col B E C) by (conclude lemma_collinear4).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (Col A E C) by (conclude_def Col ).
assert (Col E C A) by (forward_using lemma_collinearorder).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (Col C B A) by (conclude lemma_collinear4).
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H67 : Col A B C
H66 : Col C B A
H65 : neq E C
H64 : Col E C A
H63 : Col A E C
H62 : Col E C B
H61 : Col B E C
H60 : neq D B
H59 : neq B D
H58 : Col D B C
H57 : Col B C D
H56 : Col D B E
H55 : Col B D E
H54 : neq F B
H53 : neq B F
H52 : Col F B E
H51 : Col B E F
H50 : Col F B D
H49 : Col D B F
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).

*****
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H24 : and (Cong A B C F) (and (CongA E A B E C F) (CongA E B A E F C))
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.

*****
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).

*****
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C F H) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).

*****
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C A A) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).

*****
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).

*****
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).

*****
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).

*****
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C A E) by (conclude lemma_ray5).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).

*****
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (eq D D) by (conclude cn_equalityreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).

*****
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq D C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).

*****
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq C D) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).

*****
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C D D) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).

*****
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).

*****
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (LtA B A C A C D) by (conclude_def LtA ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).

*****
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq B C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).

*****
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.

*****
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Col B e C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).

*****
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ eq A e).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).

*****
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq A e)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
intro.

*****
H73 : eq A e
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS B A C) by (conclude cn_equalitysub).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
intro.
assert (BetS B A C) by (conclude cn_equalitysub).

*****
H74 : BetS B A C
H73 : eq A e
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
intro.
assert (BetS B A C) by (conclude cn_equalitysub).
assert (Col B A C) by (conclude_def Col ).

*****
H75 : Col B A C
H74 : BetS B A C
H73 : eq A e
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).

*****
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq e A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).

*****
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.

*****
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ eq B C).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).

*****
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq B C)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
intro.

*****
H77 : eq B C
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
intro.
assert (Col B A C) by (conclude_def Col ).

*****
H78 : Col B A C
H77 : eq B C
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).

*****
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col A e B).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).

*****
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col A e B)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
intro.

*****
H78 : Col A e B
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B e C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
intro.
assert (Col B e C) by (conclude_def Col ).

*****
H79 : Col B e C
H78 : Col A e B
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col e B A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
intro.
assert (Col B e C) by (conclude_def Col ).
assert (Col e B A) by (forward_using lemma_collinearorder).

*****
H80 : Col e B A
H79 : Col B e C
H78 : Col A e B
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col e B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
intro.
assert (Col B e C) by (conclude_def Col ).
assert (Col e B A) by (forward_using lemma_collinearorder).
assert (Col e B C) by (forward_using lemma_collinearorder).

*****
H81 : Col e B C
H80 : Col e B A
H79 : Col B e C
H78 : Col A e B
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq B e) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
intro.
assert (Col B e C) by (conclude_def Col ).
assert (Col e B A) by (forward_using lemma_collinearorder).
assert (Col e B C) by (forward_using lemma_collinearorder).
assert (neq B e) by (forward_using lemma_betweennotequal).

*****
H82 : neq B e
H81 : Col e B C
H80 : Col e B A
H79 : Col B e C
H78 : Col A e B
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq e B) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
intro.
assert (Col B e C) by (conclude_def Col ).
assert (Col e B A) by (forward_using lemma_collinearorder).
assert (Col e B C) by (forward_using lemma_collinearorder).
assert (neq B e) by (forward_using lemma_betweennotequal).
assert (neq e B) by (conclude lemma_inequalitysymmetric).

*****
H83 : neq e B
H82 : neq B e
H81 : Col e B C
H80 : Col e B A
H79 : Col B e C
H78 : Col A e B
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A C) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
intro.
assert (Col B e C) by (conclude_def Col ).
assert (Col e B A) by (forward_using lemma_collinearorder).
assert (Col e B C) by (forward_using lemma_collinearorder).
assert (neq B e) by (forward_using lemma_betweennotequal).
assert (neq e B) by (conclude lemma_inequalitysymmetric).
assert (Col B A C) by (conclude lemma_collinear4).

*****
H84 : Col B A C
H83 : neq e B
H82 : neq B e
H81 : Col e B C
H80 : Col e B A
H79 : Col B e C
H78 : Col A e B
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).

*****
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A e B C e f) by (conclude proposition_15a).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).

*****
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col B e A).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).

*****
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col B e A)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
intro.

*****
H80 : Col B e A
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A e B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
intro.
assert (Col A e B) by (forward_using lemma_collinearorder).

*****
H81 : Col A e B
H80 : Col B e A
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).

*****
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).

*****
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).

*****
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Cong A e f e) by (forward_using lemma_doublereverse).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).

*****
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).

*****
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col e B A).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).

*****
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col e B A)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
intro.

*****
H85 : Col e B A
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A e B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
intro.
assert (Col A e B) by (forward_using lemma_collinearorder).

*****
H86 : Col A e B
H85 : Col e B A
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).

*****
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert ((Cong B A C f /\ CongA e B A e C f /\ CongA e A B e f C)) by (conclude proposition_04).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).

*****
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col A B e).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).

*****
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col A B e)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
intro.

*****
H87 : Col A B e
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col e B A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
intro.
assert (Col e B A) by (forward_using lemma_collinearorder).

*****
H88 : Col e B A
H87 : Col A B e
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).

*****
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out B C e) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).

*****
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out B A A) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).

*****
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col A B C).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).

*****
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col A B C)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
intro.

*****
H90 : Col A B C
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
intro.
assert (Col B A C) by (forward_using lemma_collinearorder).

*****
H91 : Col B A C
H90 : Col A B C
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).

*****
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).

*****
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).

*****
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).

*****
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).

*****
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).

*****
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).

*****
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq C e) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).

*****
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C e B) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).

*****
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (eq f f) by (conclude cn_equalityreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).

*****
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (nCol e C f) by (conclude lemma_equalanglesNC).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).

*****
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ eq C f).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).

*****
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq C f)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
intro.

*****
H101 : eq C f
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col e C f) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
intro.
assert (Col e C f) by (conclude_def Col ).

*****
H102 : Col e C f
H101 : eq C f
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).

*****
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C f f) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).

*****
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col e C f).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).

*****
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col e C f)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.

*****
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A e f) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).

*****
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col f e A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).

*****
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col f e C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).
assert (Col f e C) by (forward_using lemma_collinearorder).

*****
H106 : Col f e C
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq e f) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).
assert (Col f e C) by (forward_using lemma_collinearorder).
assert (neq e f) by (forward_using lemma_betweennotequal).

*****
H107 : neq e f
H106 : Col f e C
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq f e) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).
assert (Col f e C) by (forward_using lemma_collinearorder).
assert (neq e f) by (forward_using lemma_betweennotequal).
assert (neq f e) by (conclude lemma_inequalitysymmetric).

*****
H108 : neq f e
H107 : neq e f
H106 : Col f e C
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col e A C) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).
assert (Col f e C) by (forward_using lemma_collinearorder).
assert (neq e f) by (forward_using lemma_betweennotequal).
assert (neq f e) by (conclude lemma_inequalitysymmetric).
assert (Col e A C) by (conclude lemma_collinear4).

*****
H109 : Col e A C
H108 : neq f e
H107 : neq e f
H106 : Col f e C
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col e C A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).
assert (Col f e C) by (forward_using lemma_collinearorder).
assert (neq e f) by (forward_using lemma_betweennotequal).
assert (neq f e) by (conclude lemma_inequalitysymmetric).
assert (Col e A C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).

*****
H110 : Col e C A
H109 : Col e A C
H108 : neq f e
H107 : neq e f
H106 : Col f e C
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col e C B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).
assert (Col f e C) by (forward_using lemma_collinearorder).
assert (neq e f) by (forward_using lemma_betweennotequal).
assert (neq f e) by (conclude lemma_inequalitysymmetric).
assert (Col e A C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).
assert (Col e C B) by (forward_using lemma_collinearorder).

*****
H111 : Col e C B
H110 : Col e C A
H109 : Col e A C
H108 : neq f e
H107 : neq e f
H106 : Col f e C
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq e C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).
assert (Col f e C) by (forward_using lemma_collinearorder).
assert (neq e f) by (forward_using lemma_betweennotequal).
assert (neq f e) by (conclude lemma_inequalitysymmetric).
assert (Col e A C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).
assert (Col e C B) by (forward_using lemma_collinearorder).
assert (neq e C) by (forward_using lemma_betweennotequal).

*****
H112 : neq e C
H111 : Col e C B
H110 : Col e C A
H109 : Col e A C
H108 : neq f e
H107 : neq e f
H106 : Col f e C
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C A B) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).
assert (Col f e C) by (forward_using lemma_collinearorder).
assert (neq e f) by (forward_using lemma_betweennotequal).
assert (neq f e) by (conclude lemma_inequalitysymmetric).
assert (Col e A C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).
assert (Col e C B) by (forward_using lemma_collinearorder).
assert (neq e C) by (forward_using lemma_betweennotequal).
assert (Col C A B) by (conclude lemma_collinear4).

*****
H113 : Col C A B
H112 : neq e C
H111 : Col e C B
H110 : Col e C A
H109 : Col e A C
H108 : neq f e
H107 : neq e f
H106 : Col f e C
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
intro.
assert (Col A e f) by (conclude_def Col ).
assert (Col f e A) by (forward_using lemma_collinearorder).
assert (Col f e C) by (forward_using lemma_collinearorder).
assert (neq e f) by (forward_using lemma_betweennotequal).
assert (neq f e) by (conclude lemma_inequalitysymmetric).
assert (Col e A C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).
assert (Col e C B) by (forward_using lemma_collinearorder).
assert (neq e C) by (forward_using lemma_betweennotequal).
assert (Col C A B) by (conclude lemma_collinear4).
assert (Col B A C) by (forward_using lemma_collinearorder).

*****
H114 : Col B A C
H113 : Col C A B
H112 : neq e C
H111 : Col e C B
H110 : Col e C A
H109 : Col e A C
H108 : neq f e
H107 : neq e f
H106 : Col f e C
H105 : Col f e A
H104 : Col A e f
H103 : Col e C f
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).

*****
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).

*****
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).

*****
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).

*****
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).

*****
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq G C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).

*****
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq C G) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).

*****
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).

*****
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col G A f).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).

*****
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col G A f)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.

*****
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col f A G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).

*****
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A e f) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).

*****
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col f A e) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).

*****
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq A f) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).

*****
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq f A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).

*****
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A G e) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).

*****
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G A e) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).

*****
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A C G) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).

*****
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G A C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).

*****
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq A G) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).
assert (neq A G) by (forward_using lemma_betweennotequal).

*****
H121 : neq A G
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).
assert (neq A G) by (forward_using lemma_betweennotequal).
assert (neq G A) by (conclude lemma_inequalitysymmetric).

*****
H122 : neq G A
H121 : neq A G
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A e C) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).
assert (neq A G) by (forward_using lemma_betweennotequal).
assert (neq G A) by (conclude lemma_inequalitysymmetric).
assert (Col A e C) by (conclude lemma_collinear4).

*****
H123 : Col A e C
H122 : neq G A
H121 : neq A G
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col e C A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).
assert (neq A G) by (forward_using lemma_betweennotequal).
assert (neq G A) by (conclude lemma_inequalitysymmetric).
assert (Col A e C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).

*****
H124 : Col e C A
H123 : Col A e C
H122 : neq G A
H121 : neq A G
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B e C) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).
assert (neq A G) by (forward_using lemma_betweennotequal).
assert (neq G A) by (conclude lemma_inequalitysymmetric).
assert (Col A e C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).
assert (Col B e C) by (conclude_def Col ).

*****
H125 : Col B e C
H124 : Col e C A
H123 : Col A e C
H122 : neq G A
H121 : neq A G
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col e C B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).
assert (neq A G) by (forward_using lemma_betweennotequal).
assert (neq G A) by (conclude lemma_inequalitysymmetric).
assert (Col A e C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).
assert (Col B e C) by (conclude_def Col ).
assert (Col e C B) by (forward_using lemma_collinearorder).

*****
H126 : Col e C B
H125 : Col B e C
H124 : Col e C A
H123 : Col A e C
H122 : neq G A
H121 : neq A G
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq e C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).
assert (neq A G) by (forward_using lemma_betweennotequal).
assert (neq G A) by (conclude lemma_inequalitysymmetric).
assert (Col A e C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).
assert (Col B e C) by (conclude_def Col ).
assert (Col e C B) by (forward_using lemma_collinearorder).
assert (neq e C) by (forward_using lemma_betweennotequal).

*****
H127 : neq e C
H126 : Col e C B
H125 : Col B e C
H124 : Col e C A
H123 : Col A e C
H122 : neq G A
H121 : neq A G
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C A B) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).
assert (neq A G) by (forward_using lemma_betweennotequal).
assert (neq G A) by (conclude lemma_inequalitysymmetric).
assert (Col A e C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).
assert (Col B e C) by (conclude_def Col ).
assert (Col e C B) by (forward_using lemma_collinearorder).
assert (neq e C) by (forward_using lemma_betweennotequal).
assert (Col C A B) by (conclude lemma_collinear4).

*****
H128 : Col C A B
H127 : neq e C
H126 : Col e C B
H125 : Col B e C
H124 : Col e C A
H123 : Col A e C
H122 : neq G A
H121 : neq A G
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
intro.
assert (Col f A G) by (forward_using lemma_collinearorder).
assert (Col A e f) by (conclude_def Col ).
assert (Col f A e) by (forward_using lemma_collinearorder).
assert (neq A f) by (forward_using lemma_betweennotequal).
assert (neq f A) by (conclude lemma_inequalitysymmetric).
assert (Col A G e) by (conclude lemma_collinear4).
assert (Col G A e) by (forward_using lemma_collinearorder).
assert (Col A C G) by (conclude_def Col ).
assert (Col G A C) by (forward_using lemma_collinearorder).
assert (neq A G) by (forward_using lemma_betweennotequal).
assert (neq G A) by (conclude lemma_inequalitysymmetric).
assert (Col A e C) by (conclude lemma_collinear4).
assert (Col e C A) by (forward_using lemma_collinearorder).
assert (Col B e C) by (conclude_def Col ).
assert (Col e C B) by (forward_using lemma_collinearorder).
assert (neq e C) by (forward_using lemma_betweennotequal).
assert (Col C A B) by (conclude lemma_collinear4).
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H129 : Col A B C
H128 : Col C A B
H127 : neq e C
H126 : Col e C B
H125 : Col B e C
H124 : Col e C A
H123 : Col A e C
H122 : neq G A
H121 : neq A G
H120 : Col G A C
H119 : Col A C G
H118 : Col G A e
H117 : Col A G e
H116 : neq f A
H115 : neq A f
H114 : Col f A e
H113 : Col A e f
H112 : Col f A G
H111 : Col G A f
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).

*****
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H86 : and (Cong B A C f) (and (CongA e B A e C f) (CongA e A B e f C))
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.

*****
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).

*****
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq h C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).

*****
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (neq C h) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).

*****
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C h f) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).

*****
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C f h) by (conclude lemma_ray5).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).

*****
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C B B) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).

*****
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).

*****
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).

*****
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).

*****
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).

*****
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C e B) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).

*****
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C B e) by (conclude lemma_ray5).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).

*****
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (eq G G) by (conclude cn_equalityreflexive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).

*****
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (Out C G G) by (conclude lemma_ray4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).

*****
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).

*****
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (LtA A B C B C G) by (conclude_def LtA ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).

*****
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col G C B).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).

*****
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col G C B)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
intro.

*****
H132 : Col G C B
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A C G) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
intro.
assert (Col A C G) by (conclude_def Col ).

*****
H133 : Col A C G
H132 : Col G C B
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G C A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
intro.
assert (Col A C G) by (conclude_def Col ).
assert (Col G C A) by (forward_using lemma_collinearorder).

*****
H134 : Col G C A
H133 : Col A C G
H132 : Col G C B
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq C G) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
intro.
assert (Col A C G) by (conclude_def Col ).
assert (Col G C A) by (forward_using lemma_collinearorder).
assert (neq C G) by (forward_using lemma_betweennotequal).

*****
H135 : neq C G
H134 : Col G C A
H133 : Col A C G
H132 : Col G C B
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G C) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
intro.
assert (Col A C G) by (conclude_def Col ).
assert (Col G C A) by (forward_using lemma_collinearorder).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (neq G C) by (conclude lemma_inequalitysymmetric).

*****
H136 : neq G C
H135 : neq C G
H134 : Col G C A
H133 : Col A C G
H132 : Col G C B
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C B A) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
intro.
assert (Col A C G) by (conclude_def Col ).
assert (Col G C A) by (forward_using lemma_collinearorder).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (Col C B A) by (conclude lemma_collinear4).

*****
H137 : Col C B A
H136 : neq G C
H135 : neq C G
H134 : Col G C A
H133 : Col A C G
H132 : Col G C B
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
intro.
assert (Col A C G) by (conclude_def Col ).
assert (Col G C A) by (forward_using lemma_collinearorder).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (Col C B A) by (conclude lemma_collinear4).
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H138 : Col A B C
H137 : Col C B A
H136 : neq G C
H135 : neq C G
H134 : Col G C A
H133 : Col A C G
H132 : Col G C B
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).

*****
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA G C B D C A) by (conclude proposition_15a).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).

*****
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col A C D).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).

*****
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col A C D)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
intro.

*****
H134 : Col A C D
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D C A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
intro.
assert (Col D C A) by (forward_using lemma_collinearorder).

*****
H135 : Col D C A
H134 : Col A C D
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B C D) by (conclude_def Col ).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
intro.
assert (Col D C A) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).

*****
H136 : Col B C D
H135 : Col D C A
H134 : Col A C D
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D C B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
intro.
assert (Col D C A) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D C B) by (forward_using lemma_collinearorder).

*****
H137 : Col D C B
H136 : Col B C D
H135 : Col D C A
H134 : Col A C D
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq C D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
intro.
assert (Col D C A) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D C B) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).

*****
H138 : neq C D
H137 : Col D C B
H136 : Col B C D
H135 : Col D C A
H134 : Col A C D
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq D C) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
intro.
assert (Col D C A) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D C B) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (neq D C) by (conclude lemma_inequalitysymmetric).

*****
H139 : neq D C
H138 : neq C D
H137 : Col D C B
H136 : Col B C D
H135 : Col D C A
H134 : Col A C D
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C A B) by (conclude lemma_collinear4).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
intro.
assert (Col D C A) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D C B) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C A B) by (conclude lemma_collinear4).

*****
H140 : Col C A B
H139 : neq D C
H138 : neq C D
H137 : Col D C B
H136 : Col B C D
H135 : Col D C A
H134 : Col A C D
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
intro.
assert (Col D C A) by (forward_using lemma_collinearorder).
assert (Col B C D) by (conclude_def Col ).
assert (Col D C B) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C A B) by (conclude lemma_collinear4).
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H141 : Col A B C
H140 : Col C A B
H139 : neq D C
H138 : neq C D
H137 : Col D C B
H136 : Col B C D
H135 : Col D C A
H134 : Col A C D
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).

*****
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).

*****
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).

*****
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col D C A).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).

*****
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col D C A)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
intro.

*****
H137 : Col D C A
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A C D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
intro.
assert (Col A C D) by (forward_using lemma_collinearorder).

*****
H138 : Col A C D
H137 : Col D C A
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).

*****
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).

*****
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).

*****
H139 : CongA G C B A C D
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).

*****
H140 : CongA A C D G C B
H139 : CongA G C B A C D
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).
assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence).

*****
H141 : LtA A B C A C D
H140 : CongA A C D G C B
H139 : CongA G C B A C D
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (~ Col C B A).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).
assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col C B A).

*****
H141 : LtA A B C A C D
H140 : CongA A C D G C B
H139 : CongA G C B A C D
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col C B A)
+++++
intro.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).
assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col C B A).
intro.

*****
H142 : Col C B A
H141 : LtA A B C A C D
H140 : CongA A C D G C B
H139 : CongA G C B A C D
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).
assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col C B A).
intro.
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H143 : Col A B C
H142 : Col C B A
H141 : LtA A B C A C D
H140 : CongA A C D G C B
H139 : CongA G C B A C D
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).
assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col C B A).

*****
H142 : not (Col C B A)
H141 : LtA A B C A C D
H140 : CongA A C D G C B
H139 : CongA G C B A C D
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).
assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col C B A).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).

*****
H143 : CongA C B A A B C
H142 : not (Col C B A)
H141 : LtA A B C A C D
H140 : CongA A C D G C B
H139 : CongA G C B A C D
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
assert (LtA C B A A C D) by (conclude lemma_angleorderrespectscongruence2).
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).
assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col C B A).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
assert (LtA C B A A C D) by (conclude lemma_angleorderrespectscongruence2).

*****
H144 : LtA C B A A C D
H143 : CongA C B A A B C
H142 : not (Col C B A)
H141 : LtA A B C A C D
H140 : CongA A C D G C B
H139 : CongA G C B A C D
H138 : CongA D C A A C D
H137 : not (Col D C A)
H136 : LtA A B C G C B
H135 : CongA G C B B C G
H134 : not (Col A C D)
H133 : CongA G C B D C A
H132 : not (Col G C B)
H131 : LtA A B C B C G
H130 : CongA A B C B C h
H129 : Out C G G
H128 : eq G G
H127 : Out C B e
H126 : Out C e B
H125 : BetS C e B
H124 : BetS e h G
H123 : CongA A B C B C f
H122 : CongA A B C B C h
H121 : Out C B B
H120 : Out C f h
H119 : Out C h f
H118 : neq C h
H117 : neq h C
H116 : BetS C h f
H113 : BetS f h C
H112 : BetS G h e
h : Point
H111 : not (Col G A f)
H110 : BetS f e A
H109 : neq C G
H108 : neq G C
H107 : BetS G C A
H106 : CongA A B C B C f
H105 : CongA e C f B C f
H104 : CongA e C f e C f
H103 : not (Col e C f)
H102 : Out C f f
H101 : not (eq C f)
H100 : nCol e C f
H99 : eq f f
H98 : Out C e B
H97 : neq C e
H96 : BetS C e B
H95 : CongA A B C e C f
H94 : CongA A B C e B A
H93 : CongA A B e e B A
H92 : CongA A B C A B e
H91 : CongA A B C A B C
H90 : not (Col A B C)
H89 : Out B A A
H88 : Out B C e
H87 : not (Col A B e)
H115 : CongA e A B e f C
H114 : CongA e B A e C f
H86 : Cong B A C f
H85 : not (Col e B A)
H84 : Cong e A e f
H83 : Cong A e f e
H82 : CongA B e A C e f
H81 : CongA B e A A e B
H80 : not (Col B e A)
H79 : CongA A e B C e f
H78 : not (Col A e B)
H77 : not (eq B C)
H76 : Cong e f e A
H75 : BetS A e f
f : Point
H74 : neq e A
H73 : not (eq A e)
H72 : Col B e C
H71 : Cong e B e C
H70 : BetS B e C
e : Point
H69 : neq B C
H68 : LtA B A C A C D
H67 : CongA B A C A C H
H66 : Out C D D
H65 : neq C D
H64 : neq D C
H63 : eq D D
H62 : Out C A E
H61 : BetS E H D
H60 : CongA B A C A C F
H59 : CongA B A C A C H
H58 : Out C A A
H57 : eq A A
H56 : Out C F H
H55 : BetS C H F
H52 : BetS F H C
H51 : BetS D H E
H : Point
H49 : not (Col D B F)
H48 : BetS F E B
H47 : BetS D C B
H46 : CongA B A C A C F
H45 : CongA E C F A C F
H44 : CongA E C F E C F
H43 : Out C F F
H42 : not (eq C F)
H41 : not (Col E C F)
H40 : eq F F
H39 : Out C E A
H38 : neq C E
H37 : BetS C E A
H36 : CongA B A C E C F
H35 : CongA B A C E A B
H34 : CongA B A E E A B
H33 : CongA B A C B A E
H32 : CongA B A C B A C
H31 : not (Col B A C)
H30 : Out A B B
H29 : neq B A
H28 : neq A B
H27 : eq B B
H26 : Out A C E
H25 : not (Col B A E)
H54 : CongA E B A E F C
H53 : CongA E A B E C F
H24 : Cong A B C F
H23 : not (Col E A B)
H22 : Cong E B E F
H21 : Cong B E F E
H20 : CongA A E B C E F
H19 : CongA A E B B E A
H18 : not (Col A E B)
H17 : CongA B E A C E F
H16 : not (Col B E A)
H15 : Cong C G E C
H14 : BetS A C G
G : Point
H13 : neq E C
H12 : neq C A
H11 : not (eq A C)
H10 : Cong E F E B
H9 : BetS B E F
F : Point
H8 : neq E B
H7 : not (eq B E)
H6 : Cong E A E C
H5 : BetS A E C
E : Point
H4 : neq C B
H3 : not (eq B C)
H2 : not (eq A C)
H1 : nCol A B C
H0 : BetS B C D
H50 : Triangle A B C
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (LtA B A C A C D) (LtA C B A A C D)
+++++
close.
-----
Lemma proposition_16 : forall A B C D, Triangle A B C -> BetS B C D -> LtA B A C A C D /\\ LtA C B A A C D.
Proof.
intros.
assert (nCol A B C) by (conclude_def Triangle ).
assert (~ eq A C).
assert (~ eq B C).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists E, (BetS A E C /\\ Cong E A E C)) by (conclude proposition_10);destruct Tf as [E];spliter.
assert (~ eq B E).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists F, (BetS B E F /\\ Cong E F E B)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (~ eq A C).
assert (neq C A) by (conclude lemma_inequalitysymmetric).
assert (neq E C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists G, (BetS A C G /\\ Cong C G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.
assert (~ Col B E A).
assert (CongA B E A C E F) by (conclude proposition_15a).
assert (~ Col A E B).
assert (CongA A E B B E A) by (conclude lemma_ABCequalsCBA).
assert (CongA A E B C E F) by (conclude lemma_equalanglestransitive).
assert (Cong B E F E) by (forward_using lemma_doublereverse).
assert (Cong E B E F) by (forward_using lemma_congruenceflip).
assert (~ Col E A B).
assert ((Cong A B C F /\\ CongA E A B E C F /\\ CongA E B A E F C)) by (conclude proposition_04).
assert (~ Col B A E).
assert (Out A C E) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (neq A B) by (forward_using lemma_angledistinct).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out A B B) by (conclude lemma_ray4).
assert (~ Col B A C).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (CongA B A C B A E) by (conclude lemma_equalangleshelper).
assert (CongA B A E E A B) by (conclude lemma_ABCequalsCBA).
assert (CongA B A C E A B) by (conclude lemma_equalanglestransitive).
assert (CongA B A C E C F) by (conclude lemma_equalanglestransitive).
assert (BetS C E A) by (conclude axiom_betweennesssymmetry).
assert (neq C E) by (forward_using lemma_betweennotequal).
assert (Out C E A) by (conclude lemma_ray4).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (~ Col E C F).
assert (~ eq C F).
assert (Out C F F) by (conclude lemma_ray4).
assert (CongA E C F E C F) by (conclude lemma_equalanglesreflexive).
assert (CongA E C F A C F) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalanglestransitive).
assert (BetS D C B) by (conclude axiom_betweennesssymmetry).
assert (BetS F E B) by (conclude axiom_betweennesssymmetry).
assert (~ Col D B F).
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS D H E /\\ BetS F H C)) by (conclude postulate_Pasch_inner);destruct Tf as [H];spliter.
assert (BetS C H F) by (conclude axiom_betweennesssymmetry).
assert (Out C F H) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out C A A) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalangleshelper).
assert (CongA B A C A C F) by (conclude lemma_equalangleshelper).
assert (BetS E H D) by (conclude axiom_betweennesssymmetry).
assert (Out C A E) by (conclude lemma_ray5).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (neq D C) by (forward_using lemma_betweennotequal).
assert (neq C D) by (conclude lemma_inequalitysymmetric).
assert (Out C D D) by (conclude lemma_ray4).
assert (CongA B A C A C H) by (conclude lemma_equalanglestransitive).
assert (LtA B A C A C D) by (conclude_def LtA ).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS B e C /\\ Cong e B e C)) by (conclude proposition_10);destruct Tf as [e];spliter.
assert (Col B e C) by (conclude_def Col ).
assert (~ eq A e).
assert (neq e A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists f, (BetS A e f /\\ Cong e f e A)) by (conclude lemma_extension);destruct Tf as [f];spliter.
assert (~ eq B C).
assert (~ Col A e B).
assert (CongA A e B C e f) by (conclude proposition_15a).
assert (~ Col B e A).
assert (CongA B e A A e B) by (conclude lemma_ABCequalsCBA).
assert (CongA B e A C e f) by (conclude lemma_equalanglestransitive).
assert (Cong A e f e) by (forward_using lemma_doublereverse).
assert (Cong e A e f) by (forward_using lemma_congruenceflip).
assert (~ Col e B A).
assert ((Cong B A C f /\\ CongA e B A e C f /\\ CongA e A B e f C)) by (conclude proposition_04).
assert (~ Col A B e).
assert (Out B C e) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (~ Col A B C).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B e) by (conclude lemma_equalangleshelper).
assert (CongA A B e e B A) by (conclude lemma_ABCequalsCBA).
assert (CongA A B C e B A) by (conclude lemma_equalanglestransitive).
assert (CongA A B C e C f) by (conclude lemma_equalanglestransitive).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (neq C e) by (forward_using lemma_betweennotequal).
assert (Out C e B) by (conclude lemma_ray4).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol e C f) by (conclude lemma_equalanglesNC).
assert (~ eq C f).
assert (Out C f f) by (conclude lemma_ray4).
assert (~ Col e C f).
assert (CongA e C f e C f) by (conclude lemma_equalanglesreflexive).
assert (CongA e C f B C f) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalanglestransitive).
assert (BetS G C A) by (conclude axiom_betweennesssymmetry).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (BetS f e A) by (conclude axiom_betweennesssymmetry).
assert (~ Col G A f).
let Tf:=fresh in assert (Tf:exists h, (BetS G h e /\\ BetS f h C)) by (conclude postulate_Pasch_inner);destruct Tf as [h];spliter.
assert (BetS C h f) by (conclude axiom_betweennesssymmetry).
assert (neq h C) by (forward_using lemma_betweennotequal).
assert (neq C h) by (conclude lemma_inequalitysymmetric).
assert (Out C h f) by (conclude lemma_ray4).
assert (Out C f h) by (conclude lemma_ray5).
assert (Out C B B) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalangleshelper).
assert (CongA A B C B C f) by (conclude lemma_equalangleshelper).
assert (BetS e h G) by (conclude axiom_betweennesssymmetry).
assert (BetS C e B) by (conclude axiom_betweennesssymmetry).
assert (Out C e B) by (conclude lemma_ray4).
assert (Out C B e) by (conclude lemma_ray5).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Out C G G) by (conclude lemma_ray4).
assert (CongA A B C B C h) by (conclude lemma_equalanglestransitive).
assert (LtA A B C B C G) by (conclude_def LtA ).
assert (~ Col G C B).
assert (CongA G C B D C A) by (conclude proposition_15a).
assert (~ Col A C D).
assert (CongA G C B B C G) by (conclude lemma_ABCequalsCBA).
assert (LtA A B C G C B) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col D C A).
assert (CongA D C A A C D) by (conclude lemma_ABCequalsCBA).
assert (CongA G C B A C D) by (conclude lemma_equalanglestransitive).
assert (CongA A C D G C B) by (conclude lemma_equalanglessymmetric).
assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col C B A).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
assert (LtA C B A A C D) by (conclude lemma_angleorderrespectscongruence2).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
