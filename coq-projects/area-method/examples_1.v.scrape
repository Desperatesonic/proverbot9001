Require  Import area_method.
-----
Theorem parallel_transitivity :\n forall A B C D E F : Point,\n A <> B ->\n on_parallel C D A B ->\n on_parallel E F C D ->\n parallel A B E F.
-----
Theorem parallel_transitivity : forall A B C D E F : Point, A <> B -> on_parallel C D A B -> on_parallel E F C D -> parallel A B E F.

*****

*****
forall (A B C D E F : Point) (_ : not (eq A B)) (_ : on_parallel C D A B) (_ : on_parallel E F C D), parallel A B E F
+++++
Proof.
-----
Theorem parallel_transitivity : forall A B C D E F : Point, A <> B -> on_parallel C D A B -> on_parallel E F C D -> parallel A B E F.
Proof.

*****

*****
forall (A B C D E F : Point) (_ : not (eq A B)) (_ : on_parallel C D A B) (_ : on_parallel E F C D), parallel A B E F
+++++
area_method.
-----
Theorem parallel_transitivity : forall A B C D E F : Point, A <> B -> on_parallel C D A B -> on_parallel E F C D -> parallel A B E F.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem parallel_pseudo_transitivity :\n forall A B C D E F : Point,\n A <> B ->\n on_parallel C D A B ->\n on_parallel E F A B ->\n parallel C D E F.
-----
Theorem parallel_pseudo_transitivity : forall A B C D E F : Point, A <> B -> on_parallel C D A B -> on_parallel E F A B -> parallel C D E F.

*****

*****
forall (A B C D E F : Point) (_ : not (eq A B)) (_ : on_parallel C D A B) (_ : on_parallel E F A B), parallel C D E F
+++++
Proof.
-----
Theorem parallel_pseudo_transitivity : forall A B C D E F : Point, A <> B -> on_parallel C D A B -> on_parallel E F A B -> parallel C D E F.
Proof.

*****

*****
forall (A B C D E F : Point) (_ : not (eq A B)) (_ : on_parallel C D A B) (_ : on_parallel E F A B), parallel C D E F
+++++
area_method.
-----
Theorem parallel_pseudo_transitivity : forall A B C D E F : Point, A <> B -> on_parallel C D A B -> on_parallel E F A B -> parallel C D E F.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem parallellogram_second_parallel :\n forall A B C D : Point,\n on_parallel_d D C A B 1 ->\n parallel A C B D.
-----
Theorem parallellogram_second_parallel : forall A B C D : Point, on_parallel_d D C A B 1 -> parallel A C B D.

*****

*****
forall (A B C D : Point) (_ : on_parallel_d D C A B F1), parallel A C B D
+++++
Proof.
-----
Theorem parallellogram_second_parallel : forall A B C D : Point, on_parallel_d D C A B 1 -> parallel A C B D.
Proof.

*****

*****
forall (A B C D : Point) (_ : on_parallel_d D C A B F1), parallel A C B D
+++++
area_method.
-----
Theorem parallellogram_second_parallel : forall A B C D : Point, on_parallel_d D C A B 1 -> parallel A C B D.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem parallellogram_construction :\n forall A B C D I : Point,\n is_midpoint I A C ->\n on_line_d D I B (-(1)) ->\n parallel C D A B.
-----
Theorem parallellogram_construction : forall A B C D I : Point, is_midpoint I A C -> on_line_d D I B (-(1)) -> parallel C D A B.

*****

*****
forall (A B C D I : Point) (_ : is_midpoint I A C) (_ : on_line_d D I B (Fopp F1)), parallel C D A B
+++++
Proof.
-----
Theorem parallellogram_construction : forall A B C D I : Point, is_midpoint I A C -> on_line_d D I B (-(1)) -> parallel C D A B.
Proof.

*****

*****
forall (A B C D I : Point) (_ : is_midpoint I A C) (_ : on_line_d D I B (Fopp F1)), parallel C D A B
+++++
area_method.
-----
Theorem parallellogram_construction : forall A B C D I : Point, is_midpoint I A C -> on_line_d D I B (-(1)) -> parallel C D A B.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma example_construction_simplification: \nforall A B C D E F G Line_3_b Line_6_b, \n on_line C A B -> \n on_parallel Line_3_b C A D -> \n inter_ll E C Line_3_b B D -> \n on_parallel Line_6_b C F A ->\n inter_ll G C Line_6_b F B  -> \n parallel E G D F.
-----
Lemma example_construction_simplification: forall A B C D E F G Line_3_b Line_6_b, on_line C A B -> on_parallel Line_3_b C A D -> inter_ll E C Line_3_b B D -> on_parallel Line_6_b C F A -> inter_ll G C Line_6_b F B -> parallel E G D F.

*****

*****
forall (A B C D E F G Line_3_b Line_6_b : Point) (_ : on_line C A B) (_ : on_parallel Line_3_b C A D) (_ : inter_ll E C Line_3_b B D) (_ : on_parallel Line_6_b C F A) (_ : inter_ll G C Line_6_b F B), parallel E G D F
+++++
Proof.
-----
Lemma example_construction_simplification: forall A B C D E F G Line_3_b Line_6_b, on_line C A B -> on_parallel Line_3_b C A D -> inter_ll E C Line_3_b B D -> on_parallel Line_6_b C F A -> inter_ll G C Line_6_b F B -> parallel E G D F.
Proof.

*****

*****
forall (A B C D E F G Line_3_b Line_6_b : Point) (_ : on_line C A B) (_ : on_parallel Line_3_b C A D) (_ : inter_ll E C Line_3_b B D) (_ : on_parallel Line_6_b C F A) (_ : inter_ll G C Line_6_b F B), parallel E G D F
+++++
area_method.
-----
Lemma example_construction_simplification: forall A B C D E F G Line_3_b Line_6_b, on_line C A B -> on_parallel Line_3_b C A D -> inter_ll E C Line_3_b B D -> on_parallel Line_6_b C F A -> inter_ll G C Line_6_b F B -> parallel E G D F.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem parallellogram_construction_2 :\n forall A B C D I : Point,\n is_midpoint I A C ->\n on_line_d D I B (-(1)) ->\n parallel C D A B /\ parallel A D B C.
-----
Theorem parallellogram_construction_2 : forall A B C D I : Point, is_midpoint I A C -> on_line_d D I B (-(1)) -> parallel C D A B /\\ parallel A D B C.

*****

*****
forall (A B C D I : Point) (_ : is_midpoint I A C) (_ : on_line_d D I B (Fopp F1)), and (parallel C D A B) (parallel A D B C)
+++++
Proof.
-----
Theorem parallellogram_construction_2 : forall A B C D I : Point, is_midpoint I A C -> on_line_d D I B (-(1)) -> parallel C D A B /\\ parallel A D B C.
Proof.

*****

*****
forall (A B C D I : Point) (_ : is_midpoint I A C) (_ : on_line_d D I B (Fopp F1)), and (parallel C D A B) (parallel A D B C)
+++++
area_method.
-----
Theorem parallellogram_construction_2 : forall A B C D I : Point, is_midpoint I A C -> on_line_d D I B (-(1)) -> parallel C D A B /\\ parallel A D B C.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem parallelogram_midpoint : \n  forall A B C D I : Point,\n  on_parallel_d D C A B (0-1) ->\n  inter_ll  I A C B D ->\n  A<>C ->\n  A<>I -> \n  parallel A I A C ->\n  A ** I / A**C = 1 / 2.
-----
Theorem parallelogram_midpoint : forall A B C D I : Point, on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> A<>C -> A<>I -> parallel A I A C -> A ** I / A**C = 1 / 2.

*****

*****
forall (A B C D I : Point) (_ : on_parallel_d D C A B (Fminus F0 F1)) (_ : inter_ll I A C B D) (_ : not (eq A C)) (_ : not (eq A I)) (_ : parallel A I A C), eq (Fdiv (DSeg A I) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
+++++
Proof.
-----
Theorem parallelogram_midpoint : forall A B C D I : Point, on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> A<>C -> A<>I -> parallel A I A C -> A ** I / A**C = 1 / 2.
Proof.

*****

*****
forall (A B C D I : Point) (_ : on_parallel_d D C A B (Fminus F0 F1)) (_ : inter_ll I A C B D) (_ : not (eq A C)) (_ : not (eq A I)) (_ : parallel A I A C), eq (Fdiv (DSeg A I) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
+++++
am_before_field.
-----
Theorem parallelogram_midpoint : forall A B C D I : Point, on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> A<>C -> A<>I -> parallel A I A C -> A ** I / A**C = 1 / 2.
Proof.
am_before_field.

*****
H5 : eq (S B D A) F0
H4 : not (eq F0 F0)
H0 : not (eq (Fopp (DSeg C A)) F0)
H : not (eq (DSeg A I) F0)
H2 : not (eq A I)
H1 : not (eq A C)
H3 : parallel A I A C
A,B,C,D,I : Point
*****
eq F1 (Finv (Fplus F1 F1))
+++++
intuition.
-----
Theorem parallelogram_midpoint : forall A B C D I : Point, on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> A<>C -> A<>I -> parallel A I A C -> A ** I / A**C = 1 / 2.
Proof.
am_before_field.

*****
H5 : not (eq (Fminus (S B C A) (Fmult (Fminus F0 F1) (S B C A))) F0)
H4 : not (eq (S B C A) F0)
H0 : not (eq (Fopp (DSeg C A)) F0)
H : not (eq (DSeg A I) F0)
H2 : not (eq A I)
H1 : not (eq A C)
H3 : parallel A I A C
A,B,C,I : Point
*****
eq (Fmult (S B C A) (Finv (Fminus (S B C A) (Fmult (Fminus F0 F1) (S B C A))))) (Finv (Fplus F1 F1))
+++++
Ffield.
-----
Theorem parallelogram_midpoint : forall A B C D I : Point, on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> A<>C -> A<>I -> parallel A I A C -> A ** I / A**C = 1 / 2.
Proof.
am_before_field.

*****

*****

+++++
Qed.
-----
Theorem Prop51Hartsshornebis :\n  forall A B C D E : Point,\n  ~ Col D A C ->\n  ~ Col A B C ->\n  is_midpoint D A B ->\n  is_midpoint E A C ->\n  parallel D E B C -> \n  B <> C -> \n  D ** E / B ** C = 1 / 2.
-----
Theorem Prop51Hartsshornebis : forall A B C D E : Point, ~ Col D A C -> ~ Col A B C -> is_midpoint D A B -> is_midpoint E A C -> parallel D E B C -> B <> C -> D ** E / B ** C = 1 / 2.

*****

*****
forall (A B C D E : Point) (_ : not (Col D A C)) (_ : not (Col A B C)) (_ : is_midpoint D A B) (_ : is_midpoint E A C) (_ : parallel D E B C) (_ : not (eq B C)), eq (Fdiv (DSeg D E) (DSeg B C)) (Fdiv F1 (Fplus F1 F1))
+++++
Proof.
-----
Theorem Prop51Hartsshornebis : forall A B C D E : Point, ~ Col D A C -> ~ Col A B C -> is_midpoint D A B -> is_midpoint E A C -> parallel D E B C -> B <> C -> D ** E / B ** C = 1 / 2.
Proof.

*****

*****
forall (A B C D E : Point) (_ : not (Col D A C)) (_ : not (Col A B C)) (_ : is_midpoint D A B) (_ : is_midpoint E A C) (_ : parallel D E B C) (_ : not (eq B C)), eq (Fdiv (DSeg D E) (DSeg B C)) (Fdiv F1 (Fplus F1 F1))
+++++
area_method.
-----
Theorem Prop51Hartsshornebis : forall A B C D E : Point, ~ Col D A C -> ~ Col A B C -> is_midpoint D A B -> is_midpoint E A C -> parallel D E B C -> B <> C -> D ** E / B ** C = 1 / 2.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
