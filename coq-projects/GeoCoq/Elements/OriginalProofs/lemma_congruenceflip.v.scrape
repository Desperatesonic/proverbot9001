Require Export GeoCoq.Elements.OriginalProofs.lemma_congruencetransitive.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral}.
-----
Lemma lemma_congruenceflip : \n   forall A B C D, \n   Cong A B C D ->\n   Cong B A D C /\ Cong B A C D /\ Cong A B D C.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.

*****
Ax : euclidean_neutral
*****
forall (A B C D : Point) (_ : Cong A B C D), and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
Proof.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.

*****
Ax : euclidean_neutral
*****
forall (A B C D : Point) (_ : Cong A B C D), and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
intros.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.

*****
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
assert (Cong B A A B).
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).

*****
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
Cong B A A B
+++++
conclude cn_equalityreverse.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).

*****
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
idtac.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.

*****
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
assert (Cong C D D C).
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).

*****
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
Cong C D D C
+++++
conclude cn_equalityreverse.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).

*****
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
idtac.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.

*****
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
assert (Cong B A C D).
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.
assert (Cong B A C D).

*****
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
Cong B A C D
+++++
conclude lemma_congruencetransitive.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.
assert (Cong B A C D).

*****
H2 : Cong B A C D
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
idtac.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.
assert (Cong B A C D).
idtac.

*****
H2 : Cong B A C D
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
assert (Cong A B D C).
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.
assert (Cong B A C D).
idtac.
assert (Cong A B D C).

*****
H2 : Cong B A C D
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
Cong A B D C
+++++
conclude lemma_congruencetransitive.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.
assert (Cong B A C D).
idtac.
assert (Cong A B D C).

*****
H3 : Cong A B D C
H2 : Cong B A C D
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
idtac.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.
assert (Cong B A C D).
idtac.
assert (Cong A B D C).
idtac.

*****
H3 : Cong A B D C
H2 : Cong B A C D
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
assert (Cong B A D C).
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.
assert (Cong B A C D).
idtac.
assert (Cong A B D C).
idtac.
assert (Cong B A D C).

*****
H3 : Cong A B D C
H2 : Cong B A C D
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
Cong B A D C
+++++
conclude lemma_congruencetransitive.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.
assert (Cong B A C D).
idtac.
assert (Cong A B D C).
idtac.
assert (Cong B A D C).

*****
H4 : Cong B A D C
H3 : Cong A B D C
H2 : Cong B A C D
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
idtac.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).
idtac.
assert (Cong C D D C).
idtac.
assert (Cong B A C D).
idtac.
assert (Cong A B D C).
idtac.
assert (Cong B A D C).
idtac.

*****
H4 : Cong B A D C
H3 : Cong A B D C
H2 : Cong B A C D
H1 : Cong C D D C
H0 : Cong B A A B
H : Cong A B C D
A,B,C,D : Point
Ax : euclidean_neutral
*****
and (Cong B A D C) (and (Cong B A C D) (Cong A B D C))
+++++
close.
-----
Lemma lemma_congruenceflip : forall A B C D, Cong A B C D -> Cong B A D C /\\ Cong B A C D /\\ Cong A B D C.
Proof.
intros.
assert (Cong B A A B).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
