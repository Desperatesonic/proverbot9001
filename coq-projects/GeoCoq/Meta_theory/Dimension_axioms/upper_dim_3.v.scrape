Require Export GeoCoq.Tarski_dev.Ch11_angles.
-----
Require Import GeoCoq.Utils.all_equiv.
-----
Section Upper_dim_3.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Definition upper_dim_3_axiom := forall A B C P Q R,\n  P <> Q -> Q <> R -> P <> R ->\n  Cong A P A Q -> Cong B P B Q -> Cong C P C Q ->\n  Cong A P A R -> Cong B P B R -> Cong C P C R ->\n  (Bet A B C \/ Bet B C A \/ Bet C A B).
-----
Definition median_planes_axiom := forall A B C D P Q, P <> Q ->\n  Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Cong D P D Q ->\n  Coplanar A B C D.
-----
Definition plane_intersection_axiom := forall A B C D E F P,\n  Coplanar A B C P -> Coplanar D E F P ->\n  exists Q, Coplanar A B C Q /\ Coplanar D E F Q /\ P <> Q.
-----
Definition space_separation_axiom := forall A B C P Q,\n  ~ Coplanar A B C P -> ~ Coplanar A B C Q -> TSP A B C P Q \/ OSP A B C P Q.
-----
Definition orthonormal_family_axiom := forall S U1' U1 U2 U3 U4,\n  ~ (S <> U1' /\ Bet U1 S U1' /\\n     Cong S U1 S U1' /\ Cong S U2 S U1' /\ Cong S U3 S U1' /\ Cong S U4 S U1' /\\n     Cong U1 U2 U1' U2 /\ Cong U1 U3 U1' U2 /\ Cong U1 U4 U1' U2 /\\n     Cong U2 U3 U1' U2 /\ Cong U2 U4 U1' U2 /\ Cong U3 U4 U1' U2).
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (not upper_dim_3_axiom), upper_dim_3_axiom
+++++
Proof.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (not upper_dim_3_axiom), upper_dim_3_axiom
+++++
intros nnupper A B C P Q R.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.

*****
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : not (eq P Q)) (_ : not (eq Q R)) (_ : not (eq P R)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Cong A P A R) (_ : Cong B P B R) (_ : Cong C P C R), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intros.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
destruct (col_dec A B C) as [|HNCol].
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].

*****
H8 : Col A B C
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].

*****
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.

*****
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
exfalso.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.

*****
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply nnupper.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.

*****
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not upper_dim_3_axiom
+++++
intro upper.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
apply upper with P Q R.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q R.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q)
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q R.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q R)
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q R.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P R)
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q R.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A Q
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q R.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q R.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q R.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A R
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q R.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B R
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q R.

*****
upper : upper_dim_3_axiom
HNCol : not (Col A B C)
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
nnupper : not (not upper_dim_3_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C P C R
+++++
auto.
-----
Lemma upper_dim_3_stab : ~ ~ upper_dim_3_axiom -> upper_dim_3_axiom.
Proof.
intros nnupper A B C P Q R.
intros.
destruct (col_dec A B C) as [|HNCol].

*****

*****

+++++
Qed.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : median_planes_axiom, upper_dim_3_axiom
+++++
Proof.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : median_planes_axiom, upper_dim_3_axiom
+++++
intros mp A B C P Q R HPQ HQR HPR; intros.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.

*****
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
destruct (col_dec A B C); trivial.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.

*****
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
exfalso.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.

*****
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HQR.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.

*****
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q R
+++++
destruct (midpoint_existence P Q) as [X].
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].

*****
H6 : Midpoint X P Q
X : Tpoint
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q R
+++++
apply symmetric_point_uniqueness with P X; trivial.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.

*****
H6 : Midpoint X P Q
X : Tpoint
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint X P R
+++++
destruct (midpoint_existence P R) as [Y].
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.
destruct (midpoint_existence P R) as [Y].

*****
H7 : Midpoint Y P R
Y : Tpoint
H6 : Midpoint X P Q
X : Tpoint
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint X P R
+++++
replace X with Y; trivial.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.
destruct (midpoint_existence P R) as [Y].
replace X with Y; trivial.

*****
H7 : Midpoint Y P R
Y : Tpoint
H6 : Midpoint X P Q
X : Tpoint
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Y X
+++++
apply (l8_7 P); apply l8_2.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.
destruct (midpoint_existence P R) as [Y].
replace X with Y; trivial.
apply (l8_7 P); apply l8_2.

*****
H7 : Midpoint Y P R
Y : Tpoint
H6 : Midpoint X P Q
X : Tpoint
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per X Y P
+++++
-
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.
destruct (midpoint_existence P R) as [Y].
replace X with Y; trivial.
apply (l8_7 P); apply l8_2.
-

*****
H7 : Midpoint Y P R
Y : Tpoint
H6 : Midpoint X P Q
X : Tpoint
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per X Y P
+++++
apply l11_60 with A B C; [|exists R; split..|]; trivial.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.
destruct (midpoint_existence P R) as [Y].
replace X with Y; trivial.
apply (l8_7 P); apply l8_2.
-
apply l11_60 with A B C; [|exists R; split..|]; trivial.

*****
H7 : Midpoint Y P R
Y : Tpoint
H6 : Midpoint X P Q
X : Tpoint
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C X
+++++
apply mp with P Q; Cong.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.
destruct (midpoint_existence P R) as [Y].
replace X with Y; trivial.
apply (l8_7 P); apply l8_2.
-
apply l11_60 with A B C; [|exists R; split..|]; trivial.
apply mp with P Q; Cong.

*****

*****

+++++
-
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.
destruct (midpoint_existence P R) as [Y].
replace X with Y; trivial.
apply (l8_7 P); apply l8_2.
-
apply l11_60 with A B C; [|exists R; split..|]; trivial.
apply mp with P Q; Cong.
-

*****
H7 : Midpoint Y P R
Y : Tpoint
H6 : Midpoint X P Q
X : Tpoint
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Y X P
+++++
apply l11_60 with A B C; [|exists Q; split..|]; trivial.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.
destruct (midpoint_existence P R) as [Y].
replace X with Y; trivial.
apply (l8_7 P); apply l8_2.
-
apply l11_60 with A B C; [|exists R; split..|]; trivial.
apply mp with P Q; Cong.
-
apply l11_60 with A B C; [|exists Q; split..|]; trivial.

*****
H7 : Midpoint Y P R
Y : Tpoint
H6 : Midpoint X P Q
X : Tpoint
H5 : not (Col A B C)
H4 : Cong C P C R
H3 : Cong B P B R
H2 : Cong A P A R
H1 : Cong C P C Q
H0 : Cong B P B Q
H : Cong A P A Q
HPR : not (eq P R)
HQR : not (eq Q R)
HPQ : not (eq P Q)
A,B,C,P,Q,R : Tpoint
mp : median_planes_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C Y
+++++
apply mp with P R; Cong.
-----
Lemma median_planes_implies_upper_dim : median_planes_axiom -> upper_dim_3_axiom.
Proof.
intros mp A B C P Q R HPQ HQR HPR; intros.
destruct (col_dec A B C); trivial.
exfalso.
apply HQR.
destruct (midpoint_existence P Q) as [X].
apply symmetric_point_uniqueness with P X; trivial.
destruct (midpoint_existence P R) as [Y].
replace X with Y; trivial.
apply (l8_7 P); apply l8_2.
-
apply l11_60 with A B C; [|exists R; split..|]; trivial.
apply mp with P Q; Cong.
-
apply l11_60 with A B C; [|exists Q; split..|]; trivial.
apply mp with P R; Cong.

*****

*****

+++++
Qed.
-----
Lemma median_planes_aux :\n  (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q ->\n                       Coplanar M A B C) ->\n  median_planes_axiom.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q), Coplanar M A B C, median_planes_axiom
+++++
Proof.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q), Coplanar M A B C, median_planes_axiom
+++++
intros Haux A B C D P Q.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.

*****
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Cong D P D Q), Coplanar A B C D
+++++
intros.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.

*****
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
destruct (col_dec A B C) as [HCop|].
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].

*****
HCop : Col A B C
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
apply col__coplanar, HCop.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].

*****
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
idtac.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.

*****
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
destruct (midpoint_existence P Q) as [M].
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].

*****
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].

*****
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
assert (Cong A1 P A1 Q).
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).

*****
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A1 P A1 Q
+++++
apply (l11_60_aux A B C).
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
apply (l11_60_aux A B C).

*****
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
apply (l11_60_aux A B C).

*****
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A Q
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
apply (l11_60_aux A B C).

*****
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
apply (l11_60_aux A B C).

*****
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
apply (l11_60_aux A B C).

*****
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A1
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).

*****
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
idtac.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.

*****
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
assert (Cong A2 P A2 Q).
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).

*****
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A2 P A2 Q
+++++
apply (l11_60_aux A B C).
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
apply (l11_60_aux A B C).

*****
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
apply (l11_60_aux A B C).

*****
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A Q
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
apply (l11_60_aux A B C).

*****
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
apply (l11_60_aux A B C).

*****
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
apply (l11_60_aux A B C).

*****
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A2
+++++
assumption.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).

*****
H7 : Cong A2 P A2 Q
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
idtac.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
idtac.

*****
H7 : Cong A2 P A2 Q
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
apply coplanar_pseudo_trans with M A1 A2.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
idtac.
apply coplanar_pseudo_trans with M A1 A2.

*****
H7 : Cong A2 P A2 Q
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col M A1 A2)
+++++
eauto.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
idtac.
apply coplanar_pseudo_trans with M A1 A2.

*****
H7 : Cong A2 P A2 Q
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A1 A2 A
+++++
eauto.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
idtac.
apply coplanar_pseudo_trans with M A1 A2.

*****
H7 : Cong A2 P A2 Q
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A1 A2 B
+++++
eauto.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
idtac.
apply coplanar_pseudo_trans with M A1 A2.

*****
H7 : Cong A2 P A2 Q
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A1 A2 C
+++++
eauto.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].
idtac.
destruct (midpoint_existence P Q) as [M].
destruct (ex_ncol_cop2 A B C M) as [A1 [A2 [HCop1 [HCop2 HNCol1]]]].
assert (Cong A1 P A1 Q).
idtac.
assert (Cong A2 P A2 Q).
idtac.
apply coplanar_pseudo_trans with M A1 A2.

*****
H7 : Cong A2 P A2 Q
H6 : Cong A1 P A1 Q
HNCol1 : not (Col M A1 A2)
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
A1,A2 : Tpoint
H5 : Midpoint M P Q
M : Tpoint
H4 : not (Col A B C)
H3 : Cong D P D Q
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,D,P,Q : Tpoint
Haux : forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q),\nCoplanar M A B C
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A1 A2 D
+++++
eauto.
-----
Lemma median_planes_aux : (forall A B C P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> Midpoint M P Q -> Coplanar M A B C) -> median_planes_axiom.
Proof.
intros Haux A B C D P Q.
intros.
destruct (col_dec A B C) as [HCop|].

*****

*****

+++++
Qed.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <->\n  (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff orthonormal_family_axiom (forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) (_ : Per B X Q), Col A B X)
+++++
Proof.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff orthonormal_family_axiom (forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) (_ : Per B X Q), Col A B X)
+++++
split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : orthonormal_family_axiom) (A B X P Q : Tpoint) (_ : not (Col P Q X)) (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) (_ : Per B X Q), Col A B X
+++++
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.

*****
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
destruct (col_dec A B X) as [|HNCol1].
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].

*****
H : Col A B X
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assumption.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].

*****
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.

*****
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
exfalso.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.

*****
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (segment_construction P X P X) as [P' []].
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].

*****
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.

*****
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (ex_per_cong P X X Q P' X) as [Q'].
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].

*****
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P X)
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].

*****
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P' X)
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].

*****
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P X X
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].

*****
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P X Q)
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].

*****
H13 : and (Per Q' X P) (and (Cong Q' X P' X) (OS P X Q' Q))
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.

*****
H13 : and (Per Q' X P) (and (Cong Q' X P' X) (OS P X Q' Q))
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.

*****
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HAXQ' : Per Q' X A).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).

*****
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q' X A
+++++
apply (l11_60 P Q X).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
apply (l11_60 P Q X).

*****
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q X)
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
apply (l11_60 P Q X).

*****
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X A
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
apply (l11_60 P Q X).

*****
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X A
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
apply (l11_60 P Q X).

*****
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per X X A
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
apply (l11_60 P Q X).

*****
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q X Q'
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
apply (l11_60 P Q X).
Perp.

*****
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q X Q'
+++++
Cop.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).

*****
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.

*****
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HBXQ' : Per Q' X B).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).

*****
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q' X B
+++++
apply (l11_60 P Q X).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
apply (l11_60 P Q X).

*****
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q X)
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
apply (l11_60 P Q X).

*****
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X B
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
apply (l11_60 P Q X).

*****
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X B
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
apply (l11_60 P Q X).

*****
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per X X B
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
apply (l11_60 P Q X).

*****
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q X Q'
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
apply (l11_60 P Q X).
Perp.

*****
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q X Q'
+++++
Cop.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).

*****
HBXQ' : Per Q' X B
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.

*****
HBXQ' : Per Q' X B
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HNCol' : ~ Col P X Q').
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').

*****
HBXQ' : Per Q' X B
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P X Q')
+++++
apply one_side_not_col123 with Q.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
apply one_side_not_col123 with Q.

*****
HBXQ' : Per Q' X B
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P X Q' Q
+++++
assumption.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').

*****
HNCol' : not (Col P X Q')
HBXQ' : Per Q' X B
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.

*****
HNCol' : not (Col P X Q')
HBXQ' : Per Q' X B
HAXQ' : Per Q' X A
H15 : OS P X Q' Q
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H11 : not (eq B Q)
H10 : not (eq A P)
H8 : not (eq A Q)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
clear dependent Q.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.

*****
HNCol' : not (Col P X Q')
HBXQ' : Per Q' X B
HAXQ' : Per Q' X A
H14 : Cong Q' X P' X
H13 : Per Q' X P
Q' : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
rename Q' into Q.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.

*****
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (segment_construction A X P' X) as [A' []].
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].

*****
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HAXP' : Per P X A').
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').

*****
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X A'
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
assert_diffs.

*****
H17 : not (eq Q A)
H16 : not (eq Q B)
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X A'
+++++
apply per_col with A.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
assert_diffs.
apply per_col with A.

*****
H17 : not (eq Q A)
H16 : not (eq Q B)
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X A)
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
assert_diffs.
apply per_col with A.

*****
H17 : not (eq Q A)
H16 : not (eq Q B)
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X A
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
assert_diffs.
apply per_col with A.

*****
H17 : not (eq Q A)
H16 : not (eq Q B)
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X A A'
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
assert_diffs.
apply per_col with A.
Perp.

*****
H17 : not (eq Q A)
H16 : not (eq Q B)
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X A A'
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').

*****
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.

*****
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HAXQ : Per Q X A').
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').

*****
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X A'
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
assert_diffs.

*****
H19 : not (eq Q A)
H17 : not (eq Q B)
H16 : not (eq P A')
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X A'
+++++
apply per_col with A.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
assert_diffs.
apply per_col with A.

*****
H19 : not (eq Q A)
H17 : not (eq Q B)
H16 : not (eq P A')
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X A)
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
assert_diffs.
apply per_col with A.

*****
H19 : not (eq Q A)
H17 : not (eq Q B)
H16 : not (eq P A')
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X A
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
assert_diffs.
apply per_col with A.

*****
H19 : not (eq Q A)
H17 : not (eq Q B)
H16 : not (eq P A')
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X A A'
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
assert_diffs.
apply per_col with A.
Perp.

*****
H19 : not (eq Q A)
H17 : not (eq Q B)
H16 : not (eq P A')
H11 : not (eq X A')
H8 : not (eq A A')
H18 : not (eq P Q)
H15 : not (eq X Q)
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X A A'
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').

*****
HAXQ : Per Q X A'
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.

*****
HAXQ : Per Q X A'
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HNCol : ~ Col A' B X).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).

*****
HAXQ : Per Q X A'
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A' B X)
+++++
intro.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
intro.

*****
H8 : Col A' B X
HAXQ : Per Q X A'
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
intro.
apply HNCol1.

*****
H8 : Col A' B X
HAXQ : Per Q X A'
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
ColR.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).

*****
HNCol : not (Col A' B X)
HAXQ : Per Q X A'
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.

*****
HNCol : not (Col A' B X)
HAXQ : Per Q X A'
HAXP' : Per P X A'
H7 : Cong X A' P' X
H5 : Bet A X A'
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
HAXQ' : Per Q X A
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H10 : not (eq A P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H6 : not (eq A X)
H3 : not (eq B X)
H4 : not (eq A B)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HNCol1 : not (Col A B X)
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
clear dependent A.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.

*****
HNCol : not (Col A' B X)
HAXQ : Per Q X A'
HAXP' : Per P X A'
H7 : Cong X A' P' X
A' : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
rename A' into A.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.

*****
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (ex_per_cong A X X B P' X) as [B'].
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].

*****
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A X)
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.

*****
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A X)
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.

*****
H10 : not (eq Q B)
H5 : not (eq Q A)
H4 : not (eq P A)
H16 : not (eq P Q)
H6 : not (eq X Q)
H11 : not (eq A X)
H8 : not (eq A B)
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A X)
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].

*****
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P' X)
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].

*****
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A X X
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].

*****
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A X B)
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].

*****
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.

*****
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H4 : and (Per B' X A) (and (Cong B' X P' X) (OS A X B' B))
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HBXP' : Per B' X P).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B' X P
+++++
apply (l11_60 A B X).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
apply (l11_60 A B X).

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B X)
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
apply (l11_60 A B X).

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A X P
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
apply (l11_60 A B X).

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X P
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
apply (l11_60 A B X).

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per X X P
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
apply (l11_60 A B X).

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B X B'
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
apply (l11_60 A B X).
Perp.

*****
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B X B'
+++++
Cop.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).

*****
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.

*****
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HBXQ : Per B' X Q).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).

*****
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B' X Q
+++++
apply (l11_60 A B X).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
apply (l11_60 A B X).

*****
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B X)
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
apply (l11_60 A B X).

*****
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
apply (l11_60 A B X).

*****
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
apply (l11_60 A B X).

*****
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per X X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
apply (l11_60 A B X).

*****
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B X B'
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
apply (l11_60 A B X).
Perp.

*****
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B X B'
+++++
Cop.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).

*****
HBXQ : Per B' X Q
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.

*****
HBXQ : Per B' X Q
HBXP' : Per B' X P
H11 : not (eq Q B)
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H10 : not (eq A B)
H18 : OS A X B' B
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HNCol : not (Col A B X)
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
HBXQ' : Per Q X B
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H12 : not (eq B P)
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H3 : not (eq B X)
H0 : Cong X P' P X
H : Bet P X P'
P' : Tpoint
HBXP : Per B X P
B,X,P : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
clear dependent B.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.

*****
HBXQ : Per B' X Q
HBXP' : Per B' X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B' X P' X
H4 : Per B' X A
B' : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
rename B' into B.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.

*****
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HCong : Cong Q P Q P').
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').

*****
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q P Q P'
+++++
apply per_double_cong with X.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
apply per_double_cong with X.

*****
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X P
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
apply per_double_cong with X.
idtac.

*****
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X P
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
apply per_double_cong with X.

*****
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint X P P'
+++++
split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
apply per_double_cong with X.
split.

*****
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P X P'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
apply per_double_cong with X.
split.

*****
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P X X P'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (up X P' P Q A B).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq X P')) (and (Bet P X P') (and (Cong X P X P') (and (Cong X Q X P') (and (Cong X A X P') (and (Cong X B X P') (and (Cong P Q P' Q) (and (Cong P A P' Q) (and (Cong P B P' Q) (and (Cong Q A P' Q) (and (Cong Q B P' Q) (Cong A B P' Q)))))))))))
+++++
repeat split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X P')
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P X P'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X P X P'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X Q X P'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X P'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X P'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q P' Q
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P A P' Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P A P' Q
+++++
apply cong_transitivity with P Q.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P A P Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P A P Q
+++++
apply l10_12 with X X.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X A
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P X P X
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P X P X
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X Q
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q P' Q
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P B P' Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P B P' Q
+++++
apply cong_transitivity with P Q.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P B P Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P B P Q
+++++
apply l10_12 with X X.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X B
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P X P X
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P X P X
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X Q
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q P' Q
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q A P' Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q A P' Q
+++++
apply cong_transitivity with P Q.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q A P Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q A P Q
+++++
apply l10_12 with X X.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X A
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q X P X
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q X P X
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X Q
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q P' Q
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q B P' Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q B P' Q
+++++
apply cong_transitivity with P Q.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q B P Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q B P Q
+++++
apply l10_12 with X X.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X B
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q X P X
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q X P X
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X Q
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q P' Q
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B P' Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B P' Q
+++++
apply cong_transitivity with P Q.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B P Q
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B P Q
+++++
apply l10_12 with X X.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A X B
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A X P X
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A X P X
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X Q
+++++
Perp.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.
idtac.
apply l10_12 with X X.
Perp.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X Q
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (col_dec A B X) as [|HNCol1].
idtac.
exfalso.
destruct (segment_construction P X P X) as [P' []].
assert_diffs.
destruct (ex_per_cong P X X Q P' X) as [Q'].
Col.
spliter.
assert (HAXQ' : Per Q' X A).
idtac.
assert (HBXQ' : Per Q' X B).
idtac.
assert (HNCol' : ~ Col P X Q').
idtac.
clear dependent Q.
rename Q' into Q.
destruct (segment_construction A X P' X) as [A' []].
assert (HAXP' : Per P X A').
idtac.
assert (HAXQ : Per Q X A').
idtac.
assert (HNCol : ~ Col A' B X).
idtac.
clear dependent A.
rename A' into A.
destruct (ex_per_cong A X X B P' X) as [B'].
Col.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
assert_diffs.
auto.
spliter.
assert (HBXP' : Per B' X P).
idtac.
assert (HBXQ : Per B' X Q).
idtac.
clear dependent B.
rename B' into B.
assert (HCong : Cong Q P Q P').
idtac.
apply (up X P' P Q A B).
repeat split.
idtac.
apply cong_transitivity with P Q.

*****
HCong : Cong Q P Q P'
HBXQ : Per B X Q
HBXP' : Per B X P
H6 : not (eq Q A)
H5 : not (eq P A)
H17 : not (eq P Q)
H8 : not (eq X Q)
H15 : not (eq A X)
H16 : Cong B X P' X
H4 : Per B X A
B : Tpoint
HAXQ : Per Q X A
HAXP' : Per P X A
H7 : Cong X A P' X
A : Tpoint
HNCol' : not (Col P X Q)
H14 : Cong Q X P' X
H13 : Per Q X P
Q : Tpoint
H2 : not (eq X P')
H1 : not (eq P P')
H9 : not (eq P X)
H0 : Cong X P' P X
H : Bet P X P'
X,P,P' : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q P' Q
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) (_ : Per B X Q), Col A B X, orthonormal_family_axiom
+++++
intros p4col S U1' U1 U2 U3 U4 H.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.

*****
H : and (not (eq S U1'))\n (and (Bet U1 S U1')\n (and (Cong S U1 S U1')\n (and (Cong S U2 S U1')\n (and (Cong S U3 S U1')\n (and (Cong S U4 S U1')\n (and (Cong U1 U2 U1' U2)\n (and (Cong U1 U3 U1' U2)\n (and (Cong U1 U4 U1' U2)\n (and (Cong U2 U3 U1' U2)\n (and (Cong U2 U4 U1' U2)\n (Cong U3 U4 U1' U2)))))))))))
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.

*****
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HMid : Midpoint S U1 U1').
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').

*****
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint S U1 U1'
+++++
split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
split.

*****
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet U1 S U1'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
split.

*****
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U1 S S U1'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').

*****
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.

*****
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HPer21 : Per U2 S U1).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).

*****
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U1
+++++
exists U1'.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
exists U1'.

*****
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Midpoint S U1 U1') (Cong U2 U1 U2 U1')
+++++
split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
exists U1'.
split.

*****
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint S U1 U1'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
exists U1'.
split.

*****
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 U1 U2 U1'
+++++
Cong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
absurd (Col U2 U1 S).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U2 U1 S)
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
assert_diffs.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U2 U1 S)
+++++
apply not_col_permutation_5, per_not_col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
assert_diffs.
apply not_col_permutation_5, per_not_col.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq U2 S)
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
assert_diffs.
apply not_col_permutation_5, per_not_col.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq S U1)
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
assert_diffs.
apply not_col_permutation_5, per_not_col.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U1
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col U2 U1 S
+++++
apply p4col with U3 U4.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U3 U4 S)
+++++
assert_diffs.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U3 U4 S)
+++++
apply not_col_permutation_2, per_not_col.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq U4 S)
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq S U3)
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U4 S U3
+++++
auto.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.
auto.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U4 S U3
+++++
apply (l8_10 U2 S U1).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.
auto.
apply (l8_10 U2 S U1).

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U1
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.
auto.
apply (l8_10 U2 S U1).

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U4 S U3
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.
auto.
apply (l8_10 U2 S U1).
trivial.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U4 S U3
+++++
repeat split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.
auto.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 S U4 S
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.
auto.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 U1 U4 U3
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
assert_diffs.
apply not_col_permutation_2, per_not_col.
auto.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
H22 : not (eq U1 U3)
H21 : not (eq U1 U4)
H20 : not (eq U2 U3)
H19 : not (eq U2 U4)
H18 : not (eq U3 U4)
H17 : not (eq U1' U2)
H16 : not (eq U2 U1)
H15 : not (eq S U1)
H14 : not (eq S U2)
H13 : not (eq S U3)
H12 : not (eq S U4)
H11 : not (eq U1 U1')
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong S U1 S U3
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U3
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U3
+++++
apply (l8_10 U2 S U1).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U1
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U2 S U3
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U2 S U3
+++++
repeat split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 S U2 S
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 U1 U2 U3
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong S U1 S U3
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U4
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U4
+++++
apply (l8_10 U2 S U1).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U1
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U2 S U4
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U2 S U4
+++++
repeat split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 S U2 S
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 U1 U2 U4
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong S U1 S U4
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U1 S U3
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U1 S U3
+++++
apply (l8_10 U2 S U1).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U1
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U1 S U3
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U1 S U3
+++++
repeat split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 S U1 S
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 U1 U1 U3
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong S U1 S U3
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U1 S U4
+++++
idtac.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U1 S U4
+++++
apply (l8_10 U2 S U1).
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per U2 S U1
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U1 S U4
+++++
trivial.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 U2 S U1 U1 S U4
+++++
repeat split.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 S U1 S
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong U2 U1 U1 U4
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.
intros p4col S U1' U1 U2 U3 U4 H.
spliter.
assert (HMid : Midpoint S U1 U1').
idtac.
assert (HPer21 : Per U2 S U1).
idtac.
absurd (Col U2 U1 S).
apply p4col with U3 U4.
idtac.
apply (l8_10 U2 S U1).
trivial.
repeat split.

*****
HPer21 : Per U2 S U1
HMid : Midpoint S U1 U1'
H10 : Cong U3 U4 U1' U2
H9 : Cong U2 U4 U1' U2
H8 : Cong U2 U3 U1' U2
H7 : Cong U1 U4 U1' U2
H6 : Cong U1 U3 U1' U2
H5 : Cong U1 U2 U1' U2
H4 : Cong S U4 S U1'
H3 : Cong S U3 S U1'
H2 : Cong S U2 S U1'
H1 : Cong S U1 S U1'
H0 : Bet U1 S U1'
H : not (eq S U1')
S,U1',U1,U2,U3,U4 : Tpoint
p4col : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong S U1 S U4
+++++
eCong.
-----
Lemma orthonormal_family_aux : orthonormal_family_axiom <-> (forall A B X P Q, ~ Col P Q X -> Per A X P -> Per A X Q -> Per B X P -> Per B X Q -> Col A B X).
Proof.
split.

*****

*****

+++++
Qed.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : upper_dim_3_axiom, orthonormal_family_axiom
+++++
Proof.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : upper_dim_3_axiom, orthonormal_family_axiom
+++++
rewrite orthonormal_family_aux.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_3_axiom) (A B X P Q : Tpoint) (_ : not (Col P Q X)) (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) (_ : Per B X Q), Col A B X
+++++
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.

*****
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
destruct (segment_construction Q X X P) as [Q' []].
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].

*****
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assert (HNCol' : ~ Col P Q' X).
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).

*****
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q' X)
+++++
intro.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
intro.

*****
H1 : Col P Q' X
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
intro.
apply HNCol.

*****
H1 : Col P Q' X
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
ColR.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).

*****
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
idtac.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.

*****
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assert (HAXQ' : Per A X Q').
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').

*****
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A X Q'
+++++
assert_diffs.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
assert_diffs.

*****
H10 : not (eq A P)
H9 : not (eq B P)
H8 : not (eq A Q)
H2 : not (eq B Q)
H1 : not (eq Q Q')
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A X Q'
+++++
apply per_col with Q.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
assert_diffs.
apply per_col with Q.

*****
H10 : not (eq A P)
H9 : not (eq B P)
H8 : not (eq A Q)
H2 : not (eq B Q)
H1 : not (eq Q Q')
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Q)
+++++
Col.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
assert_diffs.
apply per_col with Q.

*****
H10 : not (eq A P)
H9 : not (eq B P)
H8 : not (eq A Q)
H2 : not (eq B Q)
H1 : not (eq Q Q')
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A X Q
+++++
Col.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
assert_diffs.
apply per_col with Q.

*****
H10 : not (eq A P)
H9 : not (eq B P)
H8 : not (eq A Q)
H2 : not (eq B Q)
H1 : not (eq Q Q')
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Q Q'
+++++
Col.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').

*****
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
idtac.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.

*****
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assert (HBXQ' : Per B X Q').
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').

*****
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Q'
+++++
assert_diffs.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
assert_diffs.

*****
H11 : not (eq A Q')
H10 : not (eq A P)
H9 : not (eq B P)
H8 : not (eq A Q)
H2 : not (eq B Q)
H1 : not (eq Q Q')
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Q'
+++++
apply per_col with Q.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
assert_diffs.
apply per_col with Q.

*****
H11 : not (eq A Q')
H10 : not (eq A P)
H9 : not (eq B P)
H8 : not (eq A Q)
H2 : not (eq B Q)
H1 : not (eq Q Q')
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Q)
+++++
Col.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
assert_diffs.
apply per_col with Q.

*****
H11 : not (eq A Q')
H10 : not (eq A P)
H9 : not (eq B P)
H8 : not (eq A Q)
H2 : not (eq B Q)
H1 : not (eq Q Q')
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Q
+++++
Col.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
assert_diffs.
apply per_col with Q.

*****
H11 : not (eq A Q')
H10 : not (eq A P)
H9 : not (eq B P)
H8 : not (eq A Q)
H2 : not (eq B Q)
H1 : not (eq Q Q')
H5 : not (eq Q X)
H7 : not (eq P Q)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Q Q'
+++++
Col.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').

*****
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
idtac.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.

*****
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
H : Bet Q X Q'
Q' : Tpoint
HBXQ : Per B X Q
HBXP : Per B X P
HAXQ : Per A X Q
HAXP : Per A X P
HNCol : not (Col P Q X)
A,B,X,P,Q : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
clear dependent Q.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.

*****
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
destruct (symmetric_point_construction P X) as [R].
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].

*****
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assert_diffs.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
apply up with P Q' R.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q')
+++++
auto.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q' R)
+++++
intro.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
intro.

*****
H10 : eq Q' R
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
intro.
subst.

*****
H8 : not (eq B R)
H9 : not (eq A R)
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H4 : not (eq P R)
H3 : not (eq R X)
H : Midpoint X P R
H0 : Cong X R X P
HNCol' : not (Col P R X)
HAXQ' : Per A X R
HBXQ' : Per B X R
R : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol'.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
intro.
subst.
apply HNCol'.

*****
H8 : not (eq B R)
H9 : not (eq A R)
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H4 : not (eq P R)
H3 : not (eq R X)
H : Midpoint X P R
H0 : Cong X R X P
HNCol' : not (Col P R X)
HAXQ' : Per A X R
HBXQ' : Per B X R
R : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
Col.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P R)
+++++
auto.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A Q'
+++++
apply l10_12 with X X.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply l10_12 with X X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A X P
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply l10_12 with X X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A X Q'
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply l10_12 with X X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A X A X
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply l10_12 with X X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X P X Q'
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q'
+++++
apply l10_12 with X X.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply l10_12 with X X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X P
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply l10_12 with X X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Q'
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply l10_12 with X X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B X B X
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply l10_12 with X X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X P X Q'
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X P X Q'
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A R
+++++
apply per_double_cong with X.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply per_double_cong with X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A X P
+++++
assumption.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply per_double_cong with X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint X P R
+++++
assumption.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B R
+++++
apply per_double_cong with X.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply per_double_cong with X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X P
+++++
assumption.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.
apply per_double_cong with X.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint X P R
+++++
assumption.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).
idtac.
assert (HAXQ' : Per A X Q').
idtac.
assert (HBXQ' : Per B X Q').
idtac.
clear dependent Q.
destruct (symmetric_point_construction P X) as [R].
assert_diffs.
apply up with P Q' R.

*****
H9 : not (eq A Q')
H8 : not (eq B Q')
H7 : not (eq A P)
H1 : not (eq B P)
H5 : not (eq X R)
H2 : not (eq P R)
H6 : not (eq P X)
H3 : not (eq Q' X)
H4 : not (eq P Q')
H : Midpoint X P R
R : Tpoint
HBXQ' : Per B X Q'
HAXQ' : Per A X Q'
HNCol' : not (Col P Q' X)
H0 : Cong X Q' X P
Q' : Tpoint
HBXP : Per B X P
HAXP : Per A X P
A,B,X,P : Tpoint
up : upper_dim_3_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X P X R
+++++
Cong.
-----
Lemma upper_dim_implies_orthonormal_family_axiom : upper_dim_3_axiom -> orthonormal_family_axiom.
Proof.
rewrite orthonormal_family_aux.
intros up A B X P Q HNCol HAXP HAXQ HBXP HBXQ.
destruct (segment_construction Q X X P) as [Q' []].
assert (HNCol' : ~ Col P Q' X).

*****

*****

+++++
Qed.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col :\n  orthonormal_family_axiom ->\n  (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : orthonormal_family_axiom) (A B C P Q X : Tpoint) (_ : Orth_at X A B C X P) (_ : Orth_at X A B C X Q), Col P Q X
+++++
Proof.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : orthonormal_family_axiom) (A B C P Q X : Tpoint) (_ : Orth_at X A B C X P) (_ : Orth_at X A B C X Q), Col P Q X
+++++
rewrite orthonormal_family_aux.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) (_ : Per B X Q), Col A B X) (A B C P Q X : Tpoint) (_ : Orth_at X A B C X P) (_ : Orth_at X A B C X Q), Col P Q X
+++++
intros up A B C P Q X HP HQ.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.

*****
HQ : Orth_at X A B C X Q
HP : Orth_at X A B C X P
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
apply orth_at_chara in HP.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.

*****
HQ : Orth_at X A B C X Q
HP : and (not (Col A B C))\n (and (not (eq X P))\n (and (Coplanar A B C X)\n (forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P)))
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
apply orth_at_chara in HQ.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.

*****
HQ : and (not (Col A B C))\n (and (not (eq X Q))\n (and (Coplanar A B C X)\n (forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q)))
HP : and (not (Col A B C))\n (and (not (eq X P))\n (and (Coplanar A B C X)\n (forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P)))
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
spliter.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.

*****
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H1 : Coplanar A B C X
H0 : not (eq X Q)
H : not (Col A B C)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
clean.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.

*****
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
apply up with D E.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D E X)
+++++
Col.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X D
+++++
apply l8_2.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.
apply l8_2.

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per D X P
+++++
auto.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P X E
+++++
apply l8_2.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.
apply l8_2.

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per E X P
+++++
auto.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X D
+++++
apply l8_2.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.
apply l8_2.

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per D X Q
+++++
auto.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q X E
+++++
apply l8_2.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.
apply l8_2.

*****
HNCol : not (Col X D E)
HE : Coplanar A B C E
HD : Coplanar A B C D
D,E : Tpoint
H2 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X Q
H0 : not (eq X Q)
H6 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D X P
H5 : Coplanar A B C X
H4 : not (eq X P)
H3 : not (Col A B C)
A,B,C,P,Q,X : Tpoint
up : forall (A B X P Q : Tpoint) (_ : not (Col P Q X)) \n (_ : Per A X P) (_ : Per A X Q) (_ : Per B X P) \n (_ : Per B X Q), Col A B X
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per E X Q
+++++
auto.
-----
Lemma orthonormal_family_axiom_implies_orth_at2__col : orthonormal_family_axiom -> (forall A B C P Q X, Orth_at X A B C X P -> Orth_at X A B C X Q -> Col P Q X).
Proof.
rewrite orthonormal_family_aux.
intros up A B C P Q X HP HQ.
apply orth_at_chara in HP.
apply orth_at_chara in HQ.
spliter.
clean.
destruct (ex_ncol_cop2 A B C X) as [D [E [HD [HE HNCol]]]].
apply up with D E.

*****

*****

+++++
Qed.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side :\n  orthonormal_family_axiom ->\n  (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : orthonormal_family_axiom) (A B C X Y : Tpoint) (_ : not (Coplanar A B C X)) (_ : not (Coplanar A B C Y)) (_ : not (TSP A B C X Y)), OSP A B C X Y
+++++
Proof.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : orthonormal_family_axiom) (A B C X Y : Tpoint) (_ : not (Coplanar A B C X)) (_ : not (Coplanar A B C Y)) (_ : not (TSP A B C X Y)), OSP A B C X Y
+++++
intros up A B C X Y HX HY HNTS.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.

*****
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].

*****
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
assert (HOrth1 := HOrth).
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).

*****
HOrth,HOrth1 : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
apply orth_at_chara in HOrth1.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.

*****
HOrth1 : and (not (Col A B C))\n (and (not (eq P X))\n (and (Coplanar A B C P)\n (forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X)))
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].

*****
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].

*****
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.

*****
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
Col.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.

*****
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
assert (~ Coplanar A B C X').
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').

*****
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C X')
+++++
apply orth_at__ncop with P, HOrth'.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
idtac.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
assert (HTS : TSP A B C Y X').
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP A B C Y X'
+++++
repeat split.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
repeat split.

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C Y)
+++++
trivial.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
repeat split.

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C X')
+++++
trivial.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
repeat split.

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Coplanar A B C T) (Bet Y T X'))
+++++
trivial.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
repeat split.
trivial.

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Coplanar A B C T) (Bet Y T X'))
+++++
exists T.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
repeat split.
trivial.
exists T.

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar A B C T) (Bet Y T X')
+++++
split.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
repeat split.
trivial.
exists T.
split.

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
repeat split.
trivial.
exists T.
split.

*****
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Y T X'
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
exists X'.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (TSP A B C X X') (TSP A B C Y X')
+++++
split.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP A B C X X'
+++++
idtac.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP A B C X X'
+++++
repeat split.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C X)
+++++
trivial.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C X')
+++++
trivial.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Coplanar A B C T) (Bet X T X'))
+++++
trivial.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Coplanar A B C T) (Bet X T X'))
+++++
exists P.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar A B C P) (Bet X P X')
+++++
split.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X P X'
+++++
idtac.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X P X'
+++++
apply not_out_bet.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X P X'
+++++
apply col_permutation_1, (orthonormal_family_axiom_implies_orth_at2__col up A B C).
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.
apply col_permutation_1, (orthonormal_family_axiom_implies_orth_at2__col up A B C).

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Orth_at P A B C P X'
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.
apply col_permutation_1, (orthonormal_family_axiom_implies_orth_at2__col up A B C).

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Orth_at P A B C P X
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Out P X X')
+++++
intro.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.
intro.

*****
H0 : Out P X X'
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNTS.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.
intro.
apply HNTS.

*****
H0 : Out P X X'
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP A B C X Y
+++++
apply l9_41_2 with X'.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.
intro.
apply HNTS.
apply l9_41_2 with X'.

*****
H0 : Out P X X'
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP A B C X' Y
+++++
apply l9_38, HTS.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.
intro.
apply HNTS.
apply l9_41_2 with X'.

*****
H0 : Out P X X'
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X' X
+++++
apply osp_symmetry, cop_out__osp with P.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.
intro.
apply HNTS.
apply l9_41_2 with X'.
apply osp_symmetry, cop_out__osp with P.

*****
H0 : Out P X X'
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C X)
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.
intro.
apply HNTS.
apply l9_41_2 with X'.
apply osp_symmetry, cop_out__osp with P.

*****
H0 : Out P X X'
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.
idtac.
repeat split.
trivial.
exists P.
split.
idtac.
apply not_out_bet.
intro.
apply HNTS.
apply l9_41_2 with X'.
apply osp_symmetry, cop_out__osp with P.

*****
H0 : Out P X X'
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out P X X'
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.
Col.
assert (~ Coplanar A B C X').
idtac.
assert (HTS : TSP A B C Y X').
exists X'.
split.

*****
HTS : TSP A B C Y X'
H : not (Coplanar A B C X')
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth_at P A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP A B C Y X'
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.

*****
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
Col.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.

*****
HBet : Bet Y T X'
HT : Coplanar A B C T
HOrth' : Orth A B C P X'
X',T : Tpoint
HOrth1 : forall (D : Tpoint) (_ : Coplanar A B C D), Per D P X
HP : Coplanar A B C P
HPX : not (eq P X)
HNCol : not (Col A B C)
HOrth : Orth_at P A B C P X
P : Tpoint
HNTS : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P X' P
+++++
Col.
-----
Lemma orthonormal_family_axiom_implies_not_two_sides_one_side : orthonormal_family_axiom -> (forall A B C X Y, ~ Coplanar A B C X -> ~ Coplanar A B C Y -> ~ TSP A B C X Y -> OSP A B C X Y).
Proof.
intros up A B C X Y HX HY HNTS.
destruct (l11_62_existence_bis A B C X HX) as [P HOrth].
assert (HOrth1 := HOrth).
apply orth_at_chara in HOrth1.
destruct HOrth1 as [HNCol [HPX [HP HOrth1]]].
destruct (l8_21_3 A B C P Y HP HY) as [X' [T [HOrth' [HT HBet]]]].
apply (col_cop_orth__orth_at _ _ _ _ _ P) in HOrth'.

*****

*****

+++++
Qed.
-----
Lemma orthonormal_family_axiom_implies_space_separation :\n  orthonormal_family_axiom -> space_separation_axiom.
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : orthonormal_family_axiom, space_separation_axiom
+++++
Proof.
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : orthonormal_family_axiom, space_separation_axiom
+++++
intros up A B C X Y HX HY.
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.
intros up A B C X Y HX HY.

*****
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
destruct (tsp_dec A B C X Y).
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.
intros up A B C X Y HX HY.
destruct (tsp_dec A B C X Y).

*****
H : TSP A B C X Y
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
left.
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.
intros up A B C X Y HX HY.
destruct (tsp_dec A B C X Y).
left.

*****
H : TSP A B C X Y
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP A B C X Y
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.
intros up A B C X Y HX HY.
destruct (tsp_dec A B C X Y).

*****
H : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
right.
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.
intros up A B C X Y HX HY.
destruct (tsp_dec A B C X Y).
right.

*****
H : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
apply (orthonormal_family_axiom_implies_not_two_sides_one_side up).
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.
intros up A B C X Y HX HY.
destruct (tsp_dec A B C X Y).
right.
apply (orthonormal_family_axiom_implies_not_two_sides_one_side up).

*****
H : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C X)
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.
intros up A B C X Y HX HY.
destruct (tsp_dec A B C X Y).
right.
apply (orthonormal_family_axiom_implies_not_two_sides_one_side up).

*****
H : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C Y)
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.
intros up A B C X Y HX HY.
destruct (tsp_dec A B C X Y).
right.
apply (orthonormal_family_axiom_implies_not_two_sides_one_side up).

*****
H : not (TSP A B C X Y)
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
up : orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TSP A B C X Y)
+++++
assumption.
-----
Lemma orthonormal_family_axiom_implies_space_separation : orthonormal_family_axiom -> space_separation_axiom.
Proof.
intros up A B C X Y HX HY.
destruct (tsp_dec A B C X Y).

*****

*****

+++++
Qed.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : space_separation_axiom, plane_intersection_axiom
+++++
Proof.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : space_separation_axiom, plane_intersection_axiom
+++++
intro sep.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.

*****
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
plane_intersection_axiom
+++++
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\ Coplanar D E P Q /\ P <> Q).
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).

*****
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D E P : Tpoint) (_ : Coplanar A B C P) (_ : not (Col D E P)), ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
intros A B C D E P HP1 HP2.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.

*****
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
destruct (cop_dec A B C D).
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).

*****
H : Coplanar A B C D
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
assert_diffs.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
assert_diffs.

*****
H5 : not (eq D P)
H2 : not (eq E P)
H3 : not (eq D E)
H : Coplanar A B C D
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
exists D.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
assert_diffs.
exists D.

*****
H5 : not (eq D P)
H2 : not (eq E P)
H3 : not (eq D E)
H : Coplanar A B C D
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar A B C D) (and (Coplanar D E P D) (not (eq P D)))
+++++
repeat split.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
assert_diffs.
exists D.
repeat split.

*****
H5 : not (eq D P)
H2 : not (eq E P)
H3 : not (eq D E)
H : Coplanar A B C D
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
assert_diffs.
exists D.
repeat split.

*****
H5 : not (eq D P)
H2 : not (eq E P)
H3 : not (eq D E)
H : Coplanar A B C D
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E P D
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
assert_diffs.
exists D.
repeat split.

*****
H5 : not (eq D P)
H2 : not (eq E P)
H3 : not (eq D E)
H : Coplanar A B C D
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P D)
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).

*****
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
destruct (cop_dec A B C E).
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).

*****
H0 : Coplanar A B C E
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
assert_diffs.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
assert_diffs.

*****
H11 : not (eq C D)
H9 : not (eq B D)
H8 : not (eq B C)
H5 : not (eq A D)
H7 : not (eq A C)
H2 : not (eq A B)
H6 : not (eq D P)
H3 : not (eq E P)
H4 : not (eq D E)
H0 : Coplanar A B C E
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
exists E.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
assert_diffs.
exists E.

*****
H11 : not (eq C D)
H9 : not (eq B D)
H8 : not (eq B C)
H5 : not (eq A D)
H7 : not (eq A C)
H2 : not (eq A B)
H6 : not (eq D P)
H3 : not (eq E P)
H4 : not (eq D E)
H0 : Coplanar A B C E
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar A B C E) (and (Coplanar D E P E) (not (eq P E)))
+++++
repeat split.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
assert_diffs.
exists E.
repeat split.

*****
H11 : not (eq C D)
H9 : not (eq B D)
H8 : not (eq B C)
H5 : not (eq A D)
H7 : not (eq A C)
H2 : not (eq A B)
H6 : not (eq D P)
H3 : not (eq E P)
H4 : not (eq D E)
H0 : Coplanar A B C E
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C E
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
assert_diffs.
exists E.
repeat split.

*****
H11 : not (eq C D)
H9 : not (eq B D)
H8 : not (eq B C)
H5 : not (eq A D)
H7 : not (eq A C)
H2 : not (eq A B)
H6 : not (eq D P)
H3 : not (eq E P)
H4 : not (eq D E)
H0 : Coplanar A B C E
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E P E
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
assert_diffs.
exists E.
repeat split.

*****
H11 : not (eq C D)
H9 : not (eq B D)
H8 : not (eq B C)
H5 : not (eq A D)
H7 : not (eq A C)
H2 : not (eq A B)
H6 : not (eq D P)
H3 : not (eq E P)
H4 : not (eq D E)
H0 : Coplanar A B C E
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P E)
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).

*****
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
destruct (sep A B C D E).
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).

*****
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C D)
+++++
auto.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).

*****
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C E)
+++++
auto.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).

*****
H1 : TSP A B C D E
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
auto.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).
auto.

*****
H1 : TSP A B C D E
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
apply cop_tsp__ex_cop2.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).
auto.
apply cop_tsp__ex_cop2.

*****
H1 : TSP A B C D E
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
assumption.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).
auto.
apply cop_tsp__ex_cop2.

*****
H1 : TSP A B C D E
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP A B C D E
+++++
assumption.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).

*****
H1 : OSP A B C D E
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
auto.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).
auto.

*****
H1 : OSP A B C D E
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
+++++
apply cop_osp__ex_cop2.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).
auto.
apply cop_osp__ex_cop2.

*****
H1 : OSP A B C D E
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
assumption.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E P HP1 HP2.
destruct (cop_dec A B C D).
destruct (cop_dec A B C E).
destruct (sep A B C D E).
auto.
apply cop_osp__ex_cop2.

*****
H1 : OSP A B C D E
H0 : not (Coplanar A B C E)
H : not (Coplanar A B C D)
HP2 : not (Col D E P)
HP1 : Coplanar A B C P
A,B,C,D,E,P : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C D E
+++++
assumption.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).

*****
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
plane_intersection_axiom
+++++
intros A B C D E F P HP1 HP2.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.

*****
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E F Q) (not (eq P Q))))
+++++
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].

*****
H : and (Coplanar D E F D') (and (Coplanar D E F E') (not (Col P D' E')))
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E F Q) (not (eq P Q))))
+++++
spliter.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.

*****
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E F Q) (not (eq P Q))))
+++++
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].

*****
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
Col.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].

*****
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D' E' P)
+++++
Col.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].

*****
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E F Q) (not (eq P Q))))
+++++
Col.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.

*****
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q : Tpoint => and (Coplanar A B C Q) (and (Coplanar D E F Q) (not (eq P Q))))
+++++
exists Q.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.

*****
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar A B C Q) (and (Coplanar D E F Q) (not (eq P Q)))
+++++
repeat split.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.

*****
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C Q
+++++
auto.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.

*****
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F Q
+++++
auto.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.

*****
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F Q
+++++
destruct (col_dec D E F) as [HCol|].
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].

*****
HCol : Col D E F
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F Q
+++++
apply col__coplanar, HCol.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F Q
+++++
idtac.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F Q
+++++
apply coplanar_pseudo_trans with D' E' P.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D' E' P)
+++++
Col.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D' E' P D
+++++
Col.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D' E' P D
+++++
apply coplanar_pseudo_trans with D E F.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D E F)
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F D'
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F E'
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F P
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F D
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D' E' P E
+++++
Col.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D' E' P E
+++++
apply coplanar_pseudo_trans with D E F.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D E F)
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F D'
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F E'
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F P
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F E
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D' E' P F
+++++
Col.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D' E' P F
+++++
apply coplanar_pseudo_trans with D E F.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D E F)
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F D'
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F E'
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F P
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.
Col.
apply coplanar_pseudo_trans with D E F.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E F F
+++++
Cop.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.
auto.
destruct (col_dec D E F) as [HCol|].
idtac.
apply coplanar_pseudo_trans with D' E' P.

*****
H2 : not (Col D E F)
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D' E' P Q
+++++
Col.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).
intros A B C D E F P HP1 HP2.
destruct (ex_ncol_cop2 D E F P) as [D' [E']].
spliter.
destruct (Haux A B C D' E' P) as [Q [HQ1 [HQ2 HPQ]]].
Col.
exists Q.
repeat split.

*****
HPQ : not (eq P Q)
HQ2 : Coplanar D' E' P Q
HQ1 : Coplanar A B C Q
Q : Tpoint
H1 : not (Col P D' E')
H0 : Coplanar D E F E'
H : Coplanar D E F D'
D',E' : Tpoint
HP2 : Coplanar D E F P
HP1 : Coplanar A B C P
A,B,C,D,E,F,P : Tpoint
Haux : forall (A B C D E P : Tpoint) (_ : Coplanar A B C P)\n (_ : not (Col D E P)),\nex\n (fun Q : Tpoint =>\n and (Coplanar A B C Q) (and (Coplanar D E P Q) (not (eq P Q))))
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q)
+++++
auto.
-----
Lemma space_separation_implies_plane_intersection : space_separation_axiom -> plane_intersection_axiom.
Proof.
intro sep.
assert (Haux : forall A B C D E P, Coplanar A B C P -> ~ Col D E P -> exists Q, Coplanar A B C Q /\\ Coplanar D E P Q /\\ P <> Q).

*****

*****

+++++
Qed.
-----
Lemma plane_intersection_implies_space_separation :\n  plane_intersection_axiom -> space_separation_axiom.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : plane_intersection_axiom, space_separation_axiom
+++++
Proof.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : plane_intersection_axiom, space_separation_axiom
+++++
intros pint A B C X Y HX HY.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.

*****
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
assert (HA : Coplanar A B C A).
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).

*****
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A
+++++
Cop.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).

*****
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
idtac.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.

*****
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].

*****
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A X Y A
+++++
Cop.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].

*****
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
Cop.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.

*****
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
destruct (cop__one_or_two_sides A D X Y).
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).

*****
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A D X Y
+++++
Cop.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).

*****
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X A D)
+++++
intro.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.

*****
H : Col X A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HX, col_cop2__cop with A D.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.
apply HX, col_cop2__cop with A D.

*****
H : Col X A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A D)
+++++
Col.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.
apply HX, col_cop2__cop with A D.

*****
H : Col X A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A
+++++
Col.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.
apply HX, col_cop2__cop with A D.

*****
H : Col X A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
Col.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.
apply HX, col_cop2__cop with A D.

*****
H : Col X A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A D X
+++++
Col.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).

*****
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y A D)
+++++
intro.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.

*****
H : Col Y A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HY, col_cop2__cop with A D.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.
apply HY, col_cop2__cop with A D.

*****
H : Col Y A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A D)
+++++
Col.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.
apply HY, col_cop2__cop with A D.

*****
H : Col Y A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A
+++++
Col.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.
apply HY, col_cop2__cop with A D.

*****
H : Col Y A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
Col.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
intro.
apply HY, col_cop2__cop with A D.

*****
H : Col Y A D
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A D Y
+++++
Col.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).

*****
H : TS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
left.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
left.

*****
H : TS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP A B C X Y
+++++
apply cop2_ts__tsp with A D.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
left.
apply cop2_ts__tsp with A D.

*****
H : TS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C X)
+++++
assumption.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
left.
apply cop2_ts__tsp with A D.

*****
H : TS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A
+++++
assumption.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
left.
apply cop2_ts__tsp with A D.

*****
H : TS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
assumption.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
left.
apply cop2_ts__tsp with A D.

*****
H : TS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A D X Y
+++++
assumption.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).

*****
H : OS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TSP A B C X Y) (OSP A B C X Y)
+++++
right.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
right.

*****
H : OS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A B C X Y
+++++
apply cop2_os__osp with A D.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
right.
apply cop2_os__osp with A D.

*****
H : OS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar A B C X)
+++++
assumption.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
right.
apply cop2_os__osp with A D.

*****
H : OS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A
+++++
assumption.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
right.
apply cop2_os__osp with A D.

*****
H : OS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
assumption.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).
idtac.
destruct (pint A B C A X Y A HA) as [D [HD1 [HD2 HAD]]].
Cop.
destruct (cop__one_or_two_sides A D X Y).
right.
apply cop2_os__osp with A D.

*****
H : OS A D X Y
HAD : not (eq A D)
HD2 : Coplanar A X Y D
HD1 : Coplanar A B C D
D : Tpoint
HA : Coplanar A B C A
HY : not (Coplanar A B C Y)
HX : not (Coplanar A B C X)
A,B,C,X,Y : Tpoint
pint : plane_intersection_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A D X Y
+++++
assumption.
-----
Lemma plane_intersection_implies_space_separation : plane_intersection_axiom -> space_separation_axiom.
Proof.
intros pint A B C X Y HX HY.
assert (HA : Coplanar A B C A).

*****

*****

+++++
Qed.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : space_separation_axiom, median_planes_axiom
+++++
Proof.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : space_separation_axiom, median_planes_axiom
+++++
intro sep.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.

*****
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
median_planes_axiom
+++++
apply median_planes_aux.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.

*****
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q), Coplanar M A B C
+++++
intros A B.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.

*****
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q), Coplanar M A B C
+++++
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).

*****
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X) (_ : Cong X P X Q), False
+++++
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].

*****
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Cong X P X Q, False
+++++
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).

*****
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
+++++
intros.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
intros.

*****
H : Coplanar M A B C
C : Tpoint
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
apply (l11_60_aux M A B).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
intros.
apply (l11_60_aux M A B).

*****
H : Coplanar M A B C
C : Tpoint
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col M A B)
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
intros.
apply (l11_60_aux M A B).
Cong.

*****
H : Coplanar M A B C
C : Tpoint
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col M A B)
+++++
apply ncop__ncol with Q, HQ.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
intros.
apply (l11_60_aux M A B).

*****
H : Coplanar M A B C
C : Tpoint
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong M P M Q
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
intros.
apply (l11_60_aux M A B).

*****
H : Coplanar M A B C
C : Tpoint
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A Q
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
intros.
apply (l11_60_aux M A B).

*****
H : Coplanar M A B C
C : Tpoint
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
intros.
apply (l11_60_aux M A B).

*****
H : Coplanar M A B C
C : Tpoint
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B C
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).

*****
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Cong X P X Q, False
+++++
apply triangle_strict_inequality with T.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.

*****
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X T Q
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.

*****
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong T P T Q
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.

*****
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet X T P)
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.

*****
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet X T P)
+++++
intro.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.

*****
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_bet_and_out P M Q).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).

*****
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet P M Q) (Out M P Q)
+++++
split.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.

*****
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P M Q
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.

*****
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out M P Q
+++++
idtac.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.

*****
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out M P Q
+++++
assert (~ Coplanar M A B P).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).

*****
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar M A B P)
+++++
intro HP.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
intro HP.

*****
HP : Coplanar M A B P
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HCong in HP.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
intro HP.
apply HCong in HP.

*****
HP : Cong P P P Q
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
intro HP.
apply HCong in HP.
treat_equalities.

*****
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C M C M
HBet : Bet M T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HPQ : not (eq M M)
HQ : not (Coplanar M A B M)
A,B,X,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).

*****
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out M P Q
+++++
idtac.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.

*****
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out M P Q
+++++
assert_all_diffs_by_contradiction.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out M P Q
+++++
replace M with T.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out T P Q
+++++
apply l6_2 with X.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply l6_2 with X.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P T)
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply l6_2 with X.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q T)
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply l6_2 with X.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X T)
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply l6_2 with X.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P T X
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply l6_2 with X.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q T X
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq T M
+++++
apply (col2_cop2__eq M A B P Q).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply (col2_cop2__eq M A B P Q).

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar M A B P)
+++++
Cop.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply (col2_cop2__eq M A B P Q).

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q)
+++++
Cop.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply (col2_cop2__eq M A B P Q).

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B T
+++++
Cop.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply (col2_cop2__eq M A B P Q).

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B M
+++++
Cop.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply (col2_cop2__eq M A B P Q).

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q T
+++++
Cop.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply (col2_cop2__eq M A B P Q).
Cop.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q T
+++++
ColR.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply (col2_cop2__eq M A B P Q).

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q M
+++++
Cop.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros X P Q M HPQ HA HB HM [HQ [HX [T [HT HBet]]]].
assert (HCong : forall C, Coplanar M A B C -> Cong C P C Q).
apply triangle_strict_inequality with T.
Between.
intro.
apply (not_bet_and_out P M Q).
split.
idtac.
assert (~ Coplanar M A B P).
idtac.
assert_all_diffs_by_contradiction.
replace M with T.
apply (col2_cop2__eq M A B P Q).
Cop.

*****
H11 : not (eq A P)
H10 : not (eq B P)
H9 : not (eq X P)
H8 : not (eq A Q)
H7 : not (eq B Q)
H6 : not (eq X Q)
H5 : not (eq P M)
H4 : not (eq Q M)
H3 : not (eq X T)
H2 : not (eq P T)
H1 : not (eq Q T)
H0 : not (Coplanar M A B P)
H : Bet X T P
HCong : forall (C : Tpoint) (_ : Coplanar M A B C), Cong C P C Q
HBet : Bet Q T X
HT : Coplanar M A B T
T : Tpoint
HX : not (Coplanar M A B X)
HQ : not (Coplanar M A B Q)
HM : Midpoint M P Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
A,B,X,P,Q,M : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q M
+++++
ColR.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).

*****
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (C P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Midpoint M P Q), Coplanar M A B C
+++++
intros C P Q M HPQ HA HB HC HM.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.

*****
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B C
+++++
destruct (cop_dec M A B C) as [HCop|HNCop].
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].

*****
HCop : Coplanar M A B C
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B C
+++++
apply HCop.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].

*****
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B C
+++++
idtac.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.

*****
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B C
+++++
assert (~ Col M A B).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).

*****
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col M A B)
+++++
apply ncop__ncol with C, HNCop.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).

*****
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B C
+++++
idtac.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.

*****
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B C
+++++
assert (HQ : ~ Coplanar M A B Q).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).

*****
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar M A B Q)
+++++
intro Ha.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
intro Ha.

*****
Ha : Coplanar M A B Q
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (l11_60_aux _ _ _ _ P Q) in Ha.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Cong Q P Q Q
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.
Cong.

*****
Ha : Cong Q P Q Q
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.
Cong.
treat_equalities.

*****
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HPQ : not (eq M M)
C,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Coplanar M A B Q
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col M A B)
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Coplanar M A B Q
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong M P M Q
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Coplanar M A B Q
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A Q
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Coplanar M A B Q
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).

*****
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B C
+++++
exfalso.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.

*****
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (sep M A B Q C HQ HNCop).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).

*****
H0 : TSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
eauto.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M P Q
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply l7_2 in HM.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (Haux C Q P M).
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q P)
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A Q A P
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B Q B P
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint M Q P
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP M A B P C
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP M A B P C
+++++
apply l9_38, l9_41_2 with Q.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP M A B Q P
+++++
idtac.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TSP M A B Q P
+++++
repeat split.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar M A B Q)
+++++
trivial.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar M A B P)
+++++
trivial.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar M A B P)
+++++
intro Ha.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
intro Ha.

*****
Ha : Coplanar M A B P
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (l11_60_aux _ _ _ _ P Q) in Ha.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Cong P P P Q
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.
Cong.

*****
Ha : Cong P P P Q
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.
Cong.
treat_equalities.

*****
H0 : OSP M A B M C
HQ : not (Coplanar M A B M)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HPQ : not (eq M M)
C,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Coplanar M A B P
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col M A B)
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Coplanar M A B P
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong M P M Q
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Coplanar M A B P
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A Q
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
intro Ha.
apply (l11_60_aux _ _ _ _ P Q) in Ha.

*****
Ha : Coplanar M A B P
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Coplanar M A B T) (Bet Q T P))
+++++
trivial.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Coplanar M A B T) (Bet Q T P))
+++++
exists M.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
exists M.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar M A B M) (Bet Q M P)
+++++
split.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
exists M.
split.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B M
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
exists M.
split.
Between.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar M A B M
+++++
Cop.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.
idtac.
repeat split.
trivial.
exists M.
split.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q M P
+++++
Between.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).
Cong.
apply l9_38, l9_41_2 with Q.

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP M A B Q C
+++++
assumption.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).
intros C P Q M HPQ HA HB HC HM.
destruct (cop_dec M A B C) as [HCop|HNCop].
idtac.
assert (~ Col M A B).
idtac.
assert (HQ : ~ Coplanar M A B Q).
exfalso.
destruct (sep M A B Q C HQ HNCop).
apply l7_2 in HM.
apply (Haux C Q P M).

*****
H0 : OSP M A B Q C
HQ : not (Coplanar M A B Q)
H : not (Col M A B)
HNCop : not (Coplanar M A B C)
HM : Midpoint M Q P
HC : Cong C P C Q
HB : Cong B P B Q
HA : Cong A P A Q
HPQ : not (eq P Q)
C,P,Q,M : Tpoint
Haux : forall (X P Q M : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Midpoint M P Q) (_ : TSP M A B Q X)\n (_ : Cong X P X Q), False
A,B : Tpoint
sep : space_separation_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C Q C P
+++++
Cong.
-----
Lemma space_separation_implies_median_planes : space_separation_axiom -> median_planes_axiom.
Proof.
intro sep.
apply median_planes_aux.
intros A B.
assert (Haux : forall X P Q M, P <> Q -> Cong A P A Q -> Cong B P B Q -> Midpoint M P Q -> TSP M A B Q X -> Cong X P X Q -> False).

*****

*****

+++++
Qed.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom::\n                                                   orthonormal_family_axiom::\n                                                   space_separation_axiom::\n                                                   plane_intersection_axiom::\n                                                   median_planes_axiom::\n                                                   nil).
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
Proof.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
assert (H := upper_dim_implies_orthonormal_family_axiom).
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).

*****
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
assert (I := orthonormal_family_axiom_implies_space_separation).
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).

*****
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
assert (J := space_separation_implies_plane_intersection).
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).

*****
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
assert (K := plane_intersection_implies_space_separation).
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).

*****
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
assert (L := space_separation_implies_median_planes).
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).

*****
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
assert (M := median_planes_implies_upper_dim).
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).

*****
M : forall _ : median_planes_axiom, upper_dim_3_axiom
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
apply all_equiv__equiv.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).
apply all_equiv__equiv.

*****
M : forall _ : median_planes_axiom, upper_dim_3_axiom
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_equiv' (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
unfold all_equiv'.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).
apply all_equiv__equiv.
unfold all_equiv'.

*****
M : forall _ : median_planes_axiom, upper_dim_3_axiom
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
list_rect (fun _ : list Prop => Prop) True (fun (a : Prop) (l : list Prop) (_ : Prop) => and (forall _ : last l a, a) (all_equiv'_aux (cons a l))) (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
simpl.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).
apply all_equiv__equiv.
unfold all_equiv'.
simpl.

*****
M : forall _ : median_planes_axiom, upper_dim_3_axiom
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (forall _ : median_planes_axiom, upper_dim_3_axiom) (and (forall _ : upper_dim_3_axiom, orthonormal_family_axiom) (and (forall _ : orthonormal_family_axiom, space_separation_axiom) (and (forall _ : space_separation_axiom, plane_intersection_axiom) (and (forall _ : plane_intersection_axiom, median_planes_axiom) True))))
+++++
repeat split.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).
apply all_equiv__equiv.
unfold all_equiv'.
simpl.
repeat split.

*****
M : forall _ : median_planes_axiom, upper_dim_3_axiom
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : median_planes_axiom, upper_dim_3_axiom
+++++
tauto.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).
apply all_equiv__equiv.
unfold all_equiv'.
simpl.
repeat split.

*****
M : forall _ : median_planes_axiom, upper_dim_3_axiom
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : upper_dim_3_axiom, orthonormal_family_axiom
+++++
tauto.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).
apply all_equiv__equiv.
unfold all_equiv'.
simpl.
repeat split.

*****
M : forall _ : median_planes_axiom, upper_dim_3_axiom
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : orthonormal_family_axiom, space_separation_axiom
+++++
tauto.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).
apply all_equiv__equiv.
unfold all_equiv'.
simpl.
repeat split.

*****
M : forall _ : median_planes_axiom, upper_dim_3_axiom
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : space_separation_axiom, plane_intersection_axiom
+++++
tauto.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).
apply all_equiv__equiv.
unfold all_equiv'.
simpl.
repeat split.

*****
M : forall _ : median_planes_axiom, upper_dim_3_axiom
L : forall _ : space_separation_axiom, median_planes_axiom
K : forall _ : plane_intersection_axiom, space_separation_axiom
J : forall _ : space_separation_axiom, plane_intersection_axiom
I : forall _ : orthonormal_family_axiom, space_separation_axiom
H : forall _ : upper_dim_3_axiom, orthonormal_family_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : plane_intersection_axiom, median_planes_axiom
+++++
tauto.
-----
Theorem upper_dim_3_equivalent_axioms : all_equiv (upper_dim_3_axiom:: orthonormal_family_axiom:: space_separation_axiom:: plane_intersection_axiom:: median_planes_axiom:: nil).
Proof.
assert (H := upper_dim_implies_orthonormal_family_axiom).
assert (I := orthonormal_family_axiom_implies_space_separation).
assert (J := space_separation_implies_plane_intersection).
assert (K := plane_intersection_implies_space_separation).
assert (L := space_separation_implies_median_planes).
assert (M := median_planes_implies_upper_dim).
apply all_equiv__equiv.
unfold all_equiv'.
simpl.
repeat split.

*****

*****

+++++
Qed.
-----
End Upper_dim_3.
-----
