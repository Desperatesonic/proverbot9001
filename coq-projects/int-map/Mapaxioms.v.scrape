From Coq Require Import Bool.
-----
Require Import Coq.Bool.Sumbool.
-----
Require Import Coq.NArith.NArith.
-----
Require Import Coq.NArith.Ndigits.
-----
Require Import Coq.NArith.Ndec.
-----
Require Import Map.
-----
Require Import Fset.
-----
Section MapAxioms.
-----
Variables A B C : Type.
-----
Lemma eqm_sym : forall f f':ad -> option A, eqm A f f' -> eqm A f' f.
-----
Lemma eqm_sym : forall f f':ad -> option A, eqm A f f' -> eqm A f' f.

*****
A,B,C : Type
*****
forall (f f' : forall _ : ad, option A) (_ : eqm A f f'), eqm A f' f
+++++
Proof.
-----
Lemma eqm_sym : forall f f':ad -> option A, eqm A f f' -> eqm A f' f.
Proof.

*****
A,B,C : Type
*****
forall (f f' : forall _ : ad, option A) (_ : eqm A f f'), eqm A f' f
+++++
unfold eqm in |- *.
-----
Lemma eqm_sym : forall f f':ad -> option A, eqm A f f' -> eqm A f' f.
Proof.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (f f' : forall _ : ad, option A) (_ : forall a : ad, eq (f a) (f' a)) (a : ad), eq (f' a) (f a)
+++++
intros.
-----
Lemma eqm_sym : forall f f':ad -> option A, eqm A f f' -> eqm A f' f.
Proof.
unfold eqm in |- *.
intros.

*****
a : ad
H : forall a : ad, eq (f a) (f' a)
f,f' : forall _ : ad, option A
A,B,C : Type
*****
eq (f' a) (f a)
+++++
rewrite H.
-----
Lemma eqm_sym : forall f f':ad -> option A, eqm A f f' -> eqm A f' f.
Proof.
unfold eqm in |- *.
intros.
rewrite H.

*****
a : ad
H : forall a : ad, eq (f a) (f' a)
f,f' : forall _ : ad, option A
A,B,C : Type
*****
eq (f' a) (f' a)
+++++
reflexivity.
-----
Lemma eqm_sym : forall f f':ad -> option A, eqm A f f' -> eqm A f' f.
Proof.
unfold eqm in |- *.
intros.
rewrite H.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma eqm_refl : forall f:ad -> option A, eqm A f f.
-----
Lemma eqm_refl : forall f:ad -> option A, eqm A f f.

*****
A,B,C : Type
*****
forall f : forall _ : ad, option A, eqm A f f
+++++
Proof.
-----
Lemma eqm_refl : forall f:ad -> option A, eqm A f f.
Proof.

*****
A,B,C : Type
*****
forall f : forall _ : ad, option A, eqm A f f
+++++
unfold eqm in |- *.
-----
Lemma eqm_refl : forall f:ad -> option A, eqm A f f.
Proof.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (f : forall _ : ad, option A) (a : ad), eq (f a) (f a)
+++++
trivial.
-----
Lemma eqm_refl : forall f:ad -> option A, eqm A f f.
Proof.
unfold eqm in |- *.
trivial.

*****

*****

+++++
Qed.
-----
Lemma eqm_trans :\n   forall f f' f'':ad -> option A, eqm A f f' -> eqm A f' f'' -> eqm A f f''.
-----
Lemma eqm_trans : forall f f' f'':ad -> option A, eqm A f f' -> eqm A f' f'' -> eqm A f f''.

*****
A,B,C : Type
*****
forall (f f' f'' : forall _ : ad, option A) (_ : eqm A f f') (_ : eqm A f' f''), eqm A f f''
+++++
Proof.
-----
Lemma eqm_trans : forall f f' f'':ad -> option A, eqm A f f' -> eqm A f' f'' -> eqm A f f''.
Proof.

*****
A,B,C : Type
*****
forall (f f' f'' : forall _ : ad, option A) (_ : eqm A f f') (_ : eqm A f' f''), eqm A f f''
+++++
unfold eqm in |- *.
-----
Lemma eqm_trans : forall f f' f'':ad -> option A, eqm A f f' -> eqm A f' f'' -> eqm A f f''.
Proof.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (f f' f'' : forall _ : ad, option A) (_ : forall a : ad, eq (f a) (f' a)) (_ : forall a : ad, eq (f' a) (f'' a)) (a : ad), eq (f a) (f'' a)
+++++
intros.
-----
Lemma eqm_trans : forall f f' f'':ad -> option A, eqm A f f' -> eqm A f' f'' -> eqm A f f''.
Proof.
unfold eqm in |- *.
intros.

*****
a : ad
H0 : forall a : ad, eq (f' a) (f'' a)
H : forall a : ad, eq (f a) (f' a)
f,f',f'' : forall _ : ad, option A
A,B,C : Type
*****
eq (f a) (f'' a)
+++++
rewrite H.
-----
Lemma eqm_trans : forall f f' f'':ad -> option A, eqm A f f' -> eqm A f' f'' -> eqm A f f''.
Proof.
unfold eqm in |- *.
intros.
rewrite H.

*****
a : ad
H0 : forall a : ad, eq (f' a) (f'' a)
H : forall a : ad, eq (f a) (f' a)
f,f',f'' : forall _ : ad, option A
A,B,C : Type
*****
eq (f' a) (f'' a)
+++++
exact (H0 a).
-----
Lemma eqm_trans : forall f f' f'':ad -> option A, eqm A f f' -> eqm A f' f'' -> eqm A f f''.
Proof.
unfold eqm in |- *.
intros.
rewrite H.
exact (H0 a).

*****

*****

+++++
Qed.
-----
Definition eqmap (m m':Map A) := eqm A (MapGet A m) (MapGet A m').
-----
Lemma eqmap_sym : forall m m':Map A, eqmap m m' -> eqmap m' m.
-----
Lemma eqmap_sym : forall m m':Map A, eqmap m m' -> eqmap m' m.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap m m'), eqmap m' m
+++++
Proof.
-----
Lemma eqmap_sym : forall m m':Map A, eqmap m m' -> eqmap m' m.
Proof.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap m m'), eqmap m' m
+++++
intros.
-----
Lemma eqmap_sym : forall m m':Map A, eqmap m m' -> eqmap m' m.
Proof.
intros.

*****
H : eqmap m m'
m,m' : Map A
A,B,C : Type
*****
eqmap m' m
+++++
unfold eqmap in |- *.
-----
Lemma eqmap_sym : forall m m':Map A, eqmap m m' -> eqmap m' m.
Proof.
intros.
unfold eqmap in |- *.

*****
H : eqmap m m'
m,m' : Map A
A,B,C : Type
*****
eqm A (MapGet A m') (MapGet A m)
+++++
apply eqm_sym.
-----
Lemma eqmap_sym : forall m m':Map A, eqmap m m' -> eqmap m' m.
Proof.
intros.
unfold eqmap in |- *.
apply eqm_sym.

*****
H : eqmap m m'
m,m' : Map A
A,B,C : Type
*****
eqm A (MapGet A m) (MapGet A m')
+++++
assumption.
-----
Lemma eqmap_sym : forall m m':Map A, eqmap m m' -> eqmap m' m.
Proof.
intros.
unfold eqmap in |- *.
apply eqm_sym.
assumption.

*****

*****

+++++
Qed.
-----
Lemma eqmap_refl : forall m:Map A, eqmap m m.
-----
Lemma eqmap_refl : forall m:Map A, eqmap m m.

*****
A,B,C : Type
*****
forall m : Map A, eqmap m m
+++++
Proof.
-----
Lemma eqmap_refl : forall m:Map A, eqmap m m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap m m
+++++
intros.
-----
Lemma eqmap_refl : forall m:Map A, eqmap m m.
Proof.
intros.

*****
m : Map A
A,B,C : Type
*****
eqmap m m
+++++
unfold eqmap in |- *.
-----
Lemma eqmap_refl : forall m:Map A, eqmap m m.
Proof.
intros.
unfold eqmap in |- *.

*****
m : Map A
A,B,C : Type
*****
eqm A (MapGet A m) (MapGet A m)
+++++
apply eqm_refl.
-----
Lemma eqmap_refl : forall m:Map A, eqmap m m.
Proof.
intros.
unfold eqmap in |- *.
apply eqm_refl.

*****

*****

+++++
Qed.
-----
Lemma eqmap_trans :\n   forall m m' m'':Map A, eqmap m m' -> eqmap m' m'' -> eqmap m m''.
-----
Lemma eqmap_trans : forall m m' m'':Map A, eqmap m m' -> eqmap m' m'' -> eqmap m m''.

*****
A,B,C : Type
*****
forall (m m' m'' : Map A) (_ : eqmap m m') (_ : eqmap m' m''), eqmap m m''
+++++
Proof.
-----
Lemma eqmap_trans : forall m m' m'':Map A, eqmap m m' -> eqmap m' m'' -> eqmap m m''.
Proof.

*****
A,B,C : Type
*****
forall (m m' m'' : Map A) (_ : eqmap m m') (_ : eqmap m' m''), eqmap m m''
+++++
intros.
-----
Lemma eqmap_trans : forall m m' m'':Map A, eqmap m m' -> eqmap m' m'' -> eqmap m m''.
Proof.
intros.

*****
H0 : eqmap m' m''
H : eqmap m m'
m,m',m'' : Map A
A,B,C : Type
*****
eqmap m m''
+++++
exact (eqm_trans (MapGet A m) (MapGet A m') (MapGet A m'') H H0).
-----
Lemma eqmap_trans : forall m m' m'':Map A, eqmap m m' -> eqmap m' m'' -> eqmap m m''.
Proof.
intros.
exact (eqm_trans (MapGet A m) (MapGet A m') (MapGet A m'') H H0).

*****

*****

+++++
Qed.
-----
Lemma MapPut_as_Merge :\n   forall (m:Map A) (a:ad) (y:A),\n     eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y))
+++++
Proof.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y))
+++++
unfold eqmap in |- *.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : A), eqm A (MapGet A (MapPut A m a y)) (MapGet A (MapMerge A m (M1 A a y)))
+++++
unfold eqm in |- *.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : A) (a0 : ad), eq (MapGet A (MapPut A m a y) a0) (MapGet A (MapMerge A m (M1 A a y)) a0)
+++++
intros.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapPut A m a y) a0) (MapGet A (MapMerge A m (M1 A a y)) a0)
+++++
rewrite (MapPut_semantics A m a y a0).
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).

*****
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then Some y else MapGet A m a0) (MapGet A (MapMerge A m (M1 A a y)) a0)
+++++
rewrite (MapMerge_semantics A m (M1 A a y) a0).
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).
rewrite (MapMerge_semantics A m (M1 A a y) a0).

*****
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then Some y else MapGet A m a0) match MapGet A (M1 A a y) a0 with | Some y' => Some y' | None => MapGet A m a0 end
+++++
unfold MapGet at 2.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).
rewrite (MapMerge_semantics A m (M1 A a y) a0).
unfold MapGet at 2.

*****
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then Some y else MapGet A m a0) match (if N.eqb a a0 then Some y else None) with | Some y' => Some y' | None => MapGet A m a0 end
+++++
elim (sumbool_of_bool (Neqb a a0)).
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).
rewrite (MapMerge_semantics A m (M1 A a y) a0).
unfold MapGet at 2.
elim (sumbool_of_bool (Neqb a a0)).

*****
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
forall _ : eq (N.eqb a a0) true, eq (if N.eqb a a0 then Some y else MapGet A m a0) match (if N.eqb a a0 then Some y else None) with | Some y' => Some y' | None => MapGet A m a0 end
+++++
intro H.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).
rewrite (MapMerge_semantics A m (M1 A a y) a0).
unfold MapGet at 2.
elim (sumbool_of_bool (Neqb a a0)).
intro H.

*****
H : eq (N.eqb a a0) true
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then Some y else MapGet A m a0) match (if N.eqb a a0 then Some y else None) with | Some y' => Some y' | None => MapGet A m a0 end
+++++
rewrite H.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).
rewrite (MapMerge_semantics A m (M1 A a y) a0).
unfold MapGet at 2.
elim (sumbool_of_bool (Neqb a a0)).
intro H.
rewrite H.

*****
H : eq (N.eqb a a0) true
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq (Some y) (Some y)
+++++
reflexivity.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).
rewrite (MapMerge_semantics A m (M1 A a y) a0).
unfold MapGet at 2.
elim (sumbool_of_bool (Neqb a a0)).

*****
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
forall _ : eq (N.eqb a a0) false, eq (if N.eqb a a0 then Some y else MapGet A m a0) match (if N.eqb a a0 then Some y else None) with | Some y' => Some y' | None => MapGet A m a0 end
+++++
intro H.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).
rewrite (MapMerge_semantics A m (M1 A a y) a0).
unfold MapGet at 2.
elim (sumbool_of_bool (Neqb a a0)).
intro H.

*****
H : eq (N.eqb a a0) false
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then Some y else MapGet A m a0) match (if N.eqb a a0 then Some y else None) with | Some y' => Some y' | None => MapGet A m a0 end
+++++
rewrite H.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).
rewrite (MapMerge_semantics A m (M1 A a y) a0).
unfold MapGet at 2.
elim (sumbool_of_bool (Neqb a a0)).
intro H.
rewrite H.

*****
H : eq (N.eqb a a0) false
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A m a0) (MapGet A m a0)
+++++
reflexivity.
-----
Lemma MapPut_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut A m a y) (MapMerge A m (M1 A a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m a y a0).
rewrite (MapMerge_semantics A m (M1 A a y) a0).
unfold MapGet at 2.
elim (sumbool_of_bool (Neqb a a0)).

*****

*****

+++++
Qed.
-----
Lemma MapPut_ext :\n   forall m m':Map A,\n     eqmap m m' ->\n     forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap m m') (a : ad) (y : A), eqmap (MapPut A m a y) (MapPut A m' a y)
+++++
Proof.
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
Proof.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap m m') (a : ad) (y : A), eqmap (MapPut A m a y) (MapPut A m' a y)
+++++
unfold eqmap in |- *.
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqm A (MapGet A m) (MapGet A m')) (a : ad) (y : A), eqm A (MapGet A (MapPut A m a y)) (MapGet A (MapPut A m' a y))
+++++
unfold eqm in |- *.
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : forall a : ad, eq (MapGet A m a) (MapGet A m' a)) (a : ad) (y : A) (a0 : ad), eq (MapGet A (MapPut A m a y) a0) (MapGet A (MapPut A m' a y) a0)
+++++
intros.
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a0 : ad
y : A
a : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapPut A m a y) a0) (MapGet A (MapPut A m' a y) a0)
+++++
rewrite (MapPut_semantics A m' a y a0).
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m' a y a0).

*****
a0 : ad
y : A
a : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapPut A m a y) a0) (if N.eqb a a0 then Some y else MapGet A m' a0)
+++++
rewrite (MapPut_semantics A m a y a0).
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m' a y a0).
rewrite (MapPut_semantics A m a y a0).

*****
a0 : ad
y : A
a : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then Some y else MapGet A m a0) (if N.eqb a a0 then Some y else MapGet A m' a0)
+++++
case (Neqb a a0).
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m' a y a0).
rewrite (MapPut_semantics A m a y a0).
case (Neqb a a0).

*****
a0 : ad
y : A
a : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (Some y) (Some y)
+++++
reflexivity.
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m' a y a0).
rewrite (MapPut_semantics A m a y a0).
case (Neqb a a0).

*****
a0 : ad
y : A
a : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A m a0) (MapGet A m' a0)
+++++
apply H.
-----
Lemma MapPut_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut A m a y) (MapPut A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_semantics A m' a y a0).
rewrite (MapPut_semantics A m a y a0).
case (Neqb a a0).

*****

*****

+++++
Qed.
-----
Lemma MapPut_behind_as_Merge :\n   forall (m:Map A) (a:ad) (y:A),\n     eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m).
-----
Lemma MapPut_behind_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m).

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m)
+++++
Proof.
-----
Lemma MapPut_behind_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m)
+++++
unfold eqmap in |- *.
-----
Lemma MapPut_behind_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : A), eqm A (MapGet A (MapPut_behind A m a y)) (MapGet A (MapMerge A (M1 A a y) m))
+++++
unfold eqm in |- *.
-----
Lemma MapPut_behind_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : A) (a0 : ad), eq (MapGet A (MapPut_behind A m a y) a0) (MapGet A (MapMerge A (M1 A a y) m) a0)
+++++
intros.
-----
Lemma MapPut_behind_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapPut_behind A m a y) a0) (MapGet A (MapMerge A (M1 A a y) m) a0)
+++++
rewrite (MapPut_behind_semantics A m a y a0).
-----
Lemma MapPut_behind_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_behind_semantics A m a y a0).

*****
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq match MapGet A m a0 with | Some y' => Some y' | None => if N.eqb a a0 then Some y else None end (MapGet A (MapMerge A (M1 A a y) m) a0)
+++++
rewrite (MapMerge_semantics A (M1 A a y) m a0).
-----
Lemma MapPut_behind_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_behind_semantics A m a y a0).
rewrite (MapMerge_semantics A (M1 A a y) m a0).

*****
a0 : ad
y : A
a : ad
m : Map A
A,B,C : Type
*****
eq match MapGet A m a0 with | Some y' => Some y' | None => if N.eqb a a0 then Some y else None end match MapGet A m a0 with | Some y' => Some y' | None => MapGet A (M1 A a y) a0 end
+++++
reflexivity.
-----
Lemma MapPut_behind_as_Merge : forall (m:Map A) (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapMerge A (M1 A a y) m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_behind_semantics A m a y a0).
rewrite (MapMerge_semantics A (M1 A a y) m a0).
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapPut_behind_ext :\n   forall m m':Map A,\n     eqmap m m' ->\n     forall (a:ad) (y:A),\n       eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).
-----
Lemma MapPut_behind_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap m m') (a : ad) (y : A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y)
+++++
Proof.
-----
Lemma MapPut_behind_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).
Proof.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap m m') (a : ad) (y : A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y)
+++++
unfold eqmap in |- *.
-----
Lemma MapPut_behind_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqm A (MapGet A m) (MapGet A m')) (a : ad) (y : A), eqm A (MapGet A (MapPut_behind A m a y)) (MapGet A (MapPut_behind A m' a y))
+++++
unfold eqm in |- *.
-----
Lemma MapPut_behind_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : forall a : ad, eq (MapGet A m a) (MapGet A m' a)) (a : ad) (y : A) (a0 : ad), eq (MapGet A (MapPut_behind A m a y) a0) (MapGet A (MapPut_behind A m' a y) a0)
+++++
intros.
-----
Lemma MapPut_behind_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a0 : ad
y : A
a : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapPut_behind A m a y) a0) (MapGet A (MapPut_behind A m' a y) a0)
+++++
rewrite (MapPut_behind_semantics A m' a y a0).
-----
Lemma MapPut_behind_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_behind_semantics A m' a y a0).

*****
a0 : ad
y : A
a : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapPut_behind A m a y) a0) match MapGet A m' a0 with | Some y' => Some y' | None => if N.eqb a a0 then Some y else None end
+++++
rewrite (MapPut_behind_semantics A m a y a0).
-----
Lemma MapPut_behind_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_behind_semantics A m' a y a0).
rewrite (MapPut_behind_semantics A m a y a0).

*****
a0 : ad
y : A
a : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a0 with | Some y' => Some y' | None => if N.eqb a a0 then Some y else None end match MapGet A m' a0 with | Some y' => Some y' | None => if N.eqb a a0 then Some y else None end
+++++
rewrite (H a0).
-----
Lemma MapPut_behind_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_behind_semantics A m' a y a0).
rewrite (MapPut_behind_semantics A m a y a0).
rewrite (H a0).

*****
a0 : ad
y : A
a : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m' a0 with | Some y' => Some y' | None => if N.eqb a a0 then Some y else None end match MapGet A m' a0 with | Some y' => Some y' | None => if N.eqb a a0 then Some y else None end
+++++
reflexivity.
-----
Lemma MapPut_behind_ext : forall m m':Map A, eqmap m m' -> forall (a:ad) (y:A), eqmap (MapPut_behind A m a y) (MapPut_behind A m' a y).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapPut_behind_semantics A m' a y a0).
rewrite (MapPut_behind_semantics A m a y a0).
rewrite (H a0).
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapMerge_empty_m_1 : forall m:Map A, MapMerge A (M0 A) m = m.
-----
Lemma MapMerge_empty_m_1 : forall m:Map A, MapMerge A (M0 A) m = m.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapMerge A (M0 A) m) m
+++++
Proof.
-----
Lemma MapMerge_empty_m_1 : forall m:Map A, MapMerge A (M0 A) m = m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapMerge A (M0 A) m) m
+++++
trivial.
-----
Lemma MapMerge_empty_m_1 : forall m:Map A, MapMerge A (M0 A) m = m.
Proof.
trivial.

*****

*****

+++++
Qed.
-----
Lemma MapMerge_empty_m : forall m:Map A, eqmap (MapMerge A (M0 A) m) m.
-----
Lemma MapMerge_empty_m : forall m:Map A, eqmap (MapMerge A (M0 A) m) m.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapMerge A (M0 A) m) m
+++++
Proof.
-----
Lemma MapMerge_empty_m : forall m:Map A, eqmap (MapMerge A (M0 A) m) m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapMerge A (M0 A) m) m
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_empty_m : forall m:Map A, eqmap (MapMerge A (M0 A) m) m.
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapMerge A (M0 A) m)) (MapGet A m)
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_empty_m : forall m:Map A, eqmap (MapMerge A (M0 A) m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapMerge A (M0 A) m) a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapMerge_empty_m : forall m:Map A, eqmap (MapMerge A (M0 A) m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
trivial.

*****

*****

+++++
Qed.
-----
Lemma MapMerge_m_empty_1 : forall m:Map A, MapMerge A m (M0 A) = m.
-----
Lemma MapMerge_m_empty_1 : forall m:Map A, MapMerge A m (M0 A) = m.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapMerge A m (M0 A)) m
+++++
Proof.
-----
Lemma MapMerge_m_empty_1 : forall m:Map A, MapMerge A m (M0 A) = m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapMerge A m (M0 A)) m
+++++
simple induction m.
-----
Lemma MapMerge_m_empty_1 : forall m:Map A, MapMerge A m (M0 A) = m.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
eq (MapMerge A (M0 A) (M0 A)) (M0 A)
+++++
trivial.
-----
Lemma MapMerge_m_empty_1 : forall m:Map A, MapMerge A m (M0 A) = m.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
forall (a : ad) (a0 : A), eq (MapMerge A (M1 A a a0) (M0 A)) (M1 A a a0)
+++++
trivial.
-----
Lemma MapMerge_m_empty_1 : forall m:Map A, MapMerge A m (M0 A) = m.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
forall (m : Map A) (_ : eq (MapMerge A m (M0 A)) m) (m0 : Map A) (_ : eq (MapMerge A m0 (M0 A)) m0), eq (MapMerge A (M2 A m m0) (M0 A)) (M2 A m m0)
+++++
trivial.
-----
Lemma MapMerge_m_empty_1 : forall m:Map A, MapMerge A m (M0 A) = m.
Proof.
simple induction m.

*****

*****

+++++
Qed.
-----
Lemma MapMerge_m_empty : forall m:Map A, eqmap (MapMerge A m (M0 A)) m.
-----
Lemma MapMerge_m_empty : forall m:Map A, eqmap (MapMerge A m (M0 A)) m.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapMerge A m (M0 A)) m
+++++
Proof.
-----
Lemma MapMerge_m_empty : forall m:Map A, eqmap (MapMerge A m (M0 A)) m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapMerge A m (M0 A)) m
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_m_empty : forall m:Map A, eqmap (MapMerge A m (M0 A)) m.
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapMerge A m (M0 A))) (MapGet A m)
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_m_empty : forall m:Map A, eqmap (MapMerge A m (M0 A)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapMerge A m (M0 A)) a) (MapGet A m a)
+++++
intros.
-----
Lemma MapMerge_m_empty : forall m:Map A, eqmap (MapMerge A m (M0 A)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapMerge A m (M0 A)) a) (MapGet A m a)
+++++
rewrite MapMerge_m_empty_1.
-----
Lemma MapMerge_m_empty : forall m:Map A, eqmap (MapMerge A m (M0 A)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite MapMerge_m_empty_1.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A m a)
+++++
reflexivity.
-----
Lemma MapMerge_m_empty : forall m:Map A, eqmap (MapMerge A m (M0 A)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite MapMerge_m_empty_1.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapMerge_empty_l :\n   forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap (MapMerge A m m') (M0 A)), eqmap m (M0 A)
+++++
Proof.
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap (MapMerge A m m') (M0 A)), eqmap m (M0 A)
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqm A (MapGet A (MapMerge A m m')) (MapGet A (M0 A))), eqm A (MapGet A m) (MapGet A (M0 A))
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)) (a : ad), eq (MapGet A m a) (MapGet A (M0 A) a)
+++++
intros.
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A (M0 A) a)
+++++
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
forall _ : eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a), eq (MapGet A m a) (MapGet A (M0 A) a)
+++++
rewrite (MapMerge_semantics A m m' a).
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
rewrite (MapMerge_semantics A m m' a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
forall _ : eq match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end (MapGet A (M0 A) a), eq (MapGet A m a) (MapGet A (M0 A) a)
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m' a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
forall (a0 : A) (_ : eq (Some a0) (MapGet A (M0 A) a)), eq (MapGet A m a) (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m' a).
trivial.

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
forall (a0 : A) (_ : eq (Some a0) (MapGet A (M0 A) a)), eq (MapGet A m a) (MapGet A (M0 A) a)
+++++
intros.
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m' a).
trivial.
intros.

*****
H0 : eq (Some a0) (MapGet A (M0 A) a)
a0 : A
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A (M0 A) a)
+++++
discriminate H0.
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m' a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
forall _ : eq (MapGet A m a) (MapGet A (M0 A) a), eq (MapGet A m a) (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
+++++
exact (H a).
-----
Lemma MapMerge_empty_l : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).

*****

*****

+++++
Qed.
-----
Lemma MapMerge_empty_r :\n   forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap (MapMerge A m m') (M0 A)), eqmap m' (M0 A)
+++++
Proof.
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap (MapMerge A m m') (M0 A)), eqmap m' (M0 A)
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqm A (MapGet A (MapMerge A m m')) (MapGet A (M0 A))), eqm A (MapGet A m') (MapGet A (M0 A))
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)) (a : ad), eq (MapGet A m' a) (MapGet A (M0 A) a)
+++++
intros.
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A m' a) (MapGet A (M0 A) a)
+++++
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
forall _ : eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a), eq (MapGet A m' a) (MapGet A (M0 A) a)
+++++
rewrite (MapMerge_semantics A m m' a).
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
rewrite (MapMerge_semantics A m m' a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
forall _ : eq match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end (MapGet A (M0 A) a), eq (MapGet A m' a) (MapGet A (M0 A) a)
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m' a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
forall (a0 : A) (_ : eq (Some a0) (MapGet A (M0 A) a)), eq (Some a0) (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m' a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
forall _ : eq (MapGet A m a) (MapGet A (M0 A) a), eq None (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).

*****
a : ad
H : forall a : ad, eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapMerge A m m') a) (MapGet A (M0 A) a)
+++++
exact (H a).
-----
Lemma MapMerge_empty_r : forall m m':Map A, eqmap (MapMerge A m m') (M0 A) -> eqmap m' (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
cut (MapGet A (MapMerge A m m') a = MapGet A (M0 A) a).

*****

*****

+++++
Qed.
-----
Lemma MapMerge_assoc :\n   forall m m' m'':Map A,\n     eqmap (MapMerge A (MapMerge A m m') m'')\n       (MapMerge A m (MapMerge A m' m'')).
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).

*****
A,B,C : Type
*****
forall m m' m'' : Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m''))
+++++
Proof.
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.

*****
A,B,C : Type
*****
forall m m' m'' : Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m''))
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m m' m'' : Map A, eqm A (MapGet A (MapMerge A (MapMerge A m m') m'')) (MapGet A (MapMerge A m (MapMerge A m' m'')))
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' m'' : Map A) (a : ad), eq (MapGet A (MapMerge A (MapMerge A m m') m'') a) (MapGet A (MapMerge A m (MapMerge A m' m'')) a)
+++++
intros.
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq (MapGet A (MapMerge A (MapMerge A m m') m'') a) (MapGet A (MapMerge A m (MapMerge A m' m'')) a)
+++++
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m'' a with | Some y' => Some y' | None => MapGet A (MapMerge A m m') a end (MapGet A (MapMerge A m (MapMerge A m' m'')) a)
+++++
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m'' a with | Some y' => Some y' | None => MapGet A (MapMerge A m m') a end match MapGet A (MapMerge A m' m'') a with | Some y' => Some y' | None => MapGet A m a end
+++++
rewrite (MapMerge_semantics A m m' a).
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m'' a with | Some y' => Some y' | None => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end end match MapGet A (MapMerge A m' m'') a with | Some y' => Some y' | None => MapGet A m a end
+++++
rewrite (MapMerge_semantics A m' m'' a).
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A m' m'' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m'' a with | Some y' => Some y' | None => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end end match match MapGet A m'' a with | Some y' => Some y' | None => MapGet A m' a end with | Some y' => Some y' | None => MapGet A m a end
+++++
case (MapGet A m'' a).
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A m' m'' a).
case (MapGet A m'' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A m' m'' a).
case (MapGet A m'' a).
case (MapGet A m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
forall (_ : A) (a0 : A), eq (Some a0) (Some a0)
+++++
trivial.
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A m' m'' a).
case (MapGet A m'' a).
case (MapGet A m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A m' m'' a).
case (MapGet A m'' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A m' m'' a).
case (MapGet A m'' a).
case (MapGet A m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A m' m'' a).
case (MapGet A m'' a).
case (MapGet A m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapMerge_assoc : forall m m' m'':Map A, eqmap (MapMerge A (MapMerge A m m') m'') (MapMerge A m (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A m' m'' a).
case (MapGet A m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapMerge A m m) m
+++++
Proof.
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapMerge A m m) m
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapMerge A m m)) (MapGet A m)
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapMerge A m m) a) (MapGet A m a)
+++++
intros.
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapMerge A m m) a) (MapGet A m a)
+++++
rewrite (MapMerge_semantics A m m a).
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A m m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y' => Some y' | None => MapGet A m a end (MapGet A m a)
+++++
case (MapGet A m a).
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A m m a).
case (MapGet A m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A m m a).
case (MapGet A m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapMerge_idempotent : forall m:Map A, eqmap (MapMerge A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A m m a).
case (MapGet A m a).

*****

*****

+++++
Qed.
-----
Lemma MapMerge_ext :\n   forall m1 m2 m'1 m'2:Map A,\n     eqmap m1 m'1 ->\n     eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).

*****
A,B,C : Type
*****
forall (m1 m2 m'1 m'2 : Map A) (_ : eqmap m1 m'1) (_ : eqmap m2 m'2), eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2)
+++++
Proof.
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
Proof.

*****
A,B,C : Type
*****
forall (m1 m2 m'1 m'2 : Map A) (_ : eqmap m1 m'1) (_ : eqmap m2 m'2), eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2)
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m1 m2 m'1 m'2 : Map A) (_ : eqm A (MapGet A m1) (MapGet A m'1)) (_ : eqm A (MapGet A m2) (MapGet A m'2)), eqm A (MapGet A (MapMerge A m1 m2)) (MapGet A (MapMerge A m'1 m'2))
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m1 m2 m'1 m'2 : Map A) (_ : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)) (_ : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)) (a : ad), eq (MapGet A (MapMerge A m1 m2) a) (MapGet A (MapMerge A m'1 m'2) a)
+++++
intros.
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq (MapGet A (MapMerge A m1 m2) a) (MapGet A (MapMerge A m'1 m'2) a)
+++++
rewrite (MapMerge_semantics A m1 m2 a).
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A m1 m2 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq match MapGet A m2 a with | Some y' => Some y' | None => MapGet A m1 a end (MapGet A (MapMerge A m'1 m'2) a)
+++++
rewrite (MapMerge_semantics A m'1 m'2 a).
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A m1 m2 a).
rewrite (MapMerge_semantics A m'1 m'2 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq match MapGet A m2 a with | Some y' => Some y' | None => MapGet A m1 a end match MapGet A m'2 a with | Some y' => Some y' | None => MapGet A m'1 a end
+++++
rewrite (H a).
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A m1 m2 a).
rewrite (MapMerge_semantics A m'1 m'2 a).
rewrite (H a).

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq match MapGet A m2 a with | Some y' => Some y' | None => MapGet A m'1 a end match MapGet A m'2 a with | Some y' => Some y' | None => MapGet A m'1 a end
+++++
rewrite (H0 a).
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A m1 m2 a).
rewrite (MapMerge_semantics A m'1 m'2 a).
rewrite (H a).
rewrite (H0 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq match MapGet A m'2 a with | Some y' => Some y' | None => MapGet A m'1 a end match MapGet A m'2 a with | Some y' => Some y' | None => MapGet A m'1 a end
+++++
reflexivity.
-----
Lemma MapMerge_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A m1 m2 a).
rewrite (MapMerge_semantics A m'1 m'2 a).
rewrite (H a).
rewrite (H0 a).
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapMerge_ext_l :\n   forall m1 m'1 m2:Map A,\n     eqmap m1 m'1 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2).
-----
Lemma MapMerge_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2).

*****
A,B,C : Type
*****
forall (m1 m'1 m2 : Map A) (_ : eqmap m1 m'1), eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2)
+++++
Proof.
-----
Lemma MapMerge_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2).
Proof.

*****
A,B,C : Type
*****
forall (m1 m'1 m2 : Map A) (_ : eqmap m1 m'1), eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2)
+++++
intros.
-----
Lemma MapMerge_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2).
Proof.
intros.

*****
H : eqmap m1 m'1
m1,m'1,m2 : Map A
A,B,C : Type
*****
eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2)
+++++
apply MapMerge_ext.
-----
Lemma MapMerge_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2).
Proof.
intros.
apply MapMerge_ext.

*****
H : eqmap m1 m'1
m1,m'1,m2 : Map A
A,B,C : Type
*****
eqmap m1 m'1
+++++
assumption.
-----
Lemma MapMerge_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2).
Proof.
intros.
apply MapMerge_ext.

*****
H : eqmap m1 m'1
m1,m'1,m2 : Map A
A,B,C : Type
*****
eqmap m2 m2
+++++
apply eqmap_refl.
-----
Lemma MapMerge_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapMerge A m1 m2) (MapMerge A m'1 m2).
Proof.
intros.
apply MapMerge_ext.

*****

*****

+++++
Qed.
-----
Lemma MapMerge_ext_r :\n   forall m1 m2 m'2:Map A,\n     eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2).
-----
Lemma MapMerge_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2).

*****
A,B,C : Type
*****
forall (m1 m2 m'2 : Map A) (_ : eqmap m2 m'2), eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2)
+++++
Proof.
-----
Lemma MapMerge_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2).
Proof.

*****
A,B,C : Type
*****
forall (m1 m2 m'2 : Map A) (_ : eqmap m2 m'2), eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2)
+++++
intros.
-----
Lemma MapMerge_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2).
Proof.
intros.

*****
H : eqmap m2 m'2
m1,m2,m'2 : Map A
A,B,C : Type
*****
eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2)
+++++
apply MapMerge_ext.
-----
Lemma MapMerge_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2).
Proof.
intros.
apply MapMerge_ext.

*****
H : eqmap m2 m'2
m1,m2,m'2 : Map A
A,B,C : Type
*****
eqmap m1 m1
+++++
apply eqmap_refl.
-----
Lemma MapMerge_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2).
Proof.
intros.
apply MapMerge_ext.

*****
H : eqmap m2 m'2
m1,m2,m'2 : Map A
A,B,C : Type
*****
eqmap m2 m'2
+++++
assumption.
-----
Lemma MapMerge_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapMerge A m1 m2) (MapMerge A m1 m'2).
Proof.
intros.
apply MapMerge_ext.

*****

*****

+++++
Qed.
-----
Lemma MapMerge_RestrTo_l :\n   forall m m' m'':Map A,\n     eqmap (MapMerge A (MapDomRestrTo A A m m') m'')\n       (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).

*****
A,B,C : Type
*****
forall m m' m'' : Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m''))
+++++
Proof.
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.

*****
A,B,C : Type
*****
forall m m' m'' : Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m''))
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m m' m'' : Map A, eqm A (MapGet A (MapMerge A (MapDomRestrTo A A m m') m'')) (MapGet A (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')))
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' m'' : Map A) (a : ad), eq (MapGet A (MapMerge A (MapDomRestrTo A A m m') m'') a) (MapGet A (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')) a)
+++++
intros.
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq (MapGet A (MapMerge A (MapDomRestrTo A A m m') m'') a) (MapGet A (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')) a)
+++++
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m'' a with | Some y' => Some y' | None => MapGet A (MapDomRestrTo A A m m') a end (MapGet A (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')) a)
+++++
rewrite (MapDomRestrTo_semantics A A m m' a).
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m'' a with | Some y' => Some y' | None => match MapGet A m' a with | Some _ => MapGet A m a | None => None end end (MapGet A (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')) a)
+++++
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m'' a with | Some y' => Some y' | None => match MapGet A m' a with | Some _ => MapGet A m a | None => None end end match MapGet A (MapMerge A m' m'') a with | Some _ => MapGet A (MapMerge A m m'') a | None => None end
+++++
rewrite (MapMerge_semantics A m' m'' a).
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m' m'' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m'' a with | Some y' => Some y' | None => match MapGet A m' a with | Some _ => MapGet A m a | None => None end end match match MapGet A m'' a with | Some y' => Some y' | None => MapGet A m' a end with | Some _ => MapGet A (MapMerge A m m'') a | None => None end
+++++
rewrite (MapMerge_semantics A m m'' a).
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m' m'' a).
rewrite (MapMerge_semantics A m m'' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m'' a with | Some y' => Some y' | None => match MapGet A m' a with | Some _ => MapGet A m a | None => None end end match match MapGet A m'' a with | Some y' => Some y' | None => MapGet A m' a end with | Some _ => match MapGet A m'' a with | Some y' => Some y' | None => MapGet A m a end | None => None end
+++++
case (MapGet A m'' a).
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m' m'' a).
rewrite (MapMerge_semantics A m m'' a).
case (MapGet A m'' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m' m'' a).
rewrite (MapMerge_semantics A m m'' a).
case (MapGet A m'' a).
case (MapGet A m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
forall (_ : A) (a0 : A), eq (Some a0) (Some a0)
+++++
reflexivity.
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m' m'' a).
rewrite (MapMerge_semantics A m m'' a).
case (MapGet A m'' a).
case (MapGet A m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
reflexivity.
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m' m'' a).
rewrite (MapMerge_semantics A m m'' a).
case (MapGet A m'' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq match MapGet A m' a with | Some _ => MapGet A m a | None => None end match MapGet A m' a with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m' m'' a).
rewrite (MapMerge_semantics A m m'' a).
case (MapGet A m'' a).
case (MapGet A m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
forall _ : A, eq (MapGet A m a) (MapGet A m a)
+++++
reflexivity.
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m' m'' a).
rewrite (MapMerge_semantics A m m'' a).
case (MapGet A m'' a).
case (MapGet A m' a).

*****
a : ad
m,m',m'' : Map A
A,B,C : Type
*****
eq None None
+++++
reflexivity.
-----
Lemma MapMerge_RestrTo_l : forall m m' m'':Map A, eqmap (MapMerge A (MapDomRestrTo A A m m') m'') (MapDomRestrTo A A (MapMerge A m m'') (MapMerge A m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A A m m') m'' a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapDomRestrTo_semantics A A (MapMerge A m m'') (MapMerge A m' m'') a).
rewrite (MapMerge_semantics A m' m'' a).
rewrite (MapMerge_semantics A m m'' a).
case (MapGet A m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapRemove_as_RestrBy :\n   forall (m:Map A) (a:ad) (y:B),\n     eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y))
+++++
Proof.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y))
+++++
unfold eqmap in |- *.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : B), eqm A (MapGet A (MapRemove A m a)) (MapGet A (MapDomRestrBy A B m (M1 B a y)))
+++++
unfold eqm in |- *.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad) (y : B) (a0 : ad), eq (MapGet A (MapRemove A m a) a0) (MapGet A (MapDomRestrBy A B m (M1 B a y)) a0)
+++++
intros.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapRemove A m a) a0) (MapGet A (MapDomRestrBy A B m (M1 B a y)) a0)
+++++
rewrite (MapRemove_semantics A m a a0).
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).

*****
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then None else MapGet A m a0) (MapGet A (MapDomRestrBy A B m (M1 B a y)) a0)
+++++
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).

*****
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then None else MapGet A m a0) match MapGet B (M1 B a y) a0 with | Some _ => None | None => MapGet A m a0 end
+++++
elim (sumbool_of_bool (Neqb a a0)).
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).

*****
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
forall _ : eq (N.eqb a a0) true, eq (if N.eqb a a0 then None else MapGet A m a0) match MapGet B (M1 B a y) a0 with | Some _ => None | None => MapGet A m a0 end
+++++
intro H.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).
intro H.

*****
H : eq (N.eqb a a0) true
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then None else MapGet A m a0) match MapGet B (M1 B a y) a0 with | Some _ => None | None => MapGet A m a0 end
+++++
rewrite H.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).
intro H.
rewrite H.

*****
H : eq (N.eqb a a0) true
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq None match MapGet B (M1 B a y) a0 with | Some _ => None | None => MapGet A m a0 end
+++++
rewrite (Neqb_complete a a0 H).
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).
intro H.
rewrite H.
rewrite (Neqb_complete a a0 H).

*****
H : eq (N.eqb a a0) true
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq None match MapGet B (M1 B a0 y) a0 with | Some _ => None | None => MapGet A m a0 end
+++++
rewrite (M1_semantics_1 B a0 y).
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).
intro H.
rewrite H.
rewrite (Neqb_complete a a0 H).
rewrite (M1_semantics_1 B a0 y).

*****
H : eq (N.eqb a a0) true
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq None None
+++++
reflexivity.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).

*****
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
forall _ : eq (N.eqb a a0) false, eq (if N.eqb a a0 then None else MapGet A m a0) match MapGet B (M1 B a y) a0 with | Some _ => None | None => MapGet A m a0 end
+++++
intro H.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).
intro H.

*****
H : eq (N.eqb a a0) false
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then None else MapGet A m a0) match MapGet B (M1 B a y) a0 with | Some _ => None | None => MapGet A m a0 end
+++++
rewrite H.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).
intro H.
rewrite H.

*****
H : eq (N.eqb a a0) false
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A m a0) match MapGet B (M1 B a y) a0 with | Some _ => None | None => MapGet A m a0 end
+++++
rewrite (M1_semantics_2 B a a0 y H).
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).
intro H.
rewrite H.
rewrite (M1_semantics_2 B a a0 y H).

*****
H : eq (N.eqb a a0) false
a0 : ad
y : B
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A m a0) (MapGet A m a0)
+++++
reflexivity.
-----
Lemma MapRemove_as_RestrBy : forall (m:Map A) (a:ad) (y:B), eqmap (MapRemove A m a) (MapDomRestrBy A B m (M1 B a y)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m a a0).
rewrite (MapDomRestrBy_semantics A B m (M1 B a y) a0).
elim (sumbool_of_bool (Neqb a a0)).

*****

*****

+++++
Qed.
-----
Lemma MapRemove_ext :\n   forall m m':Map A,\n     eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap m m') (a : ad), eqmap (MapRemove A m a) (MapRemove A m' a)
+++++
Proof.
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
Proof.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqmap m m') (a : ad), eqmap (MapRemove A m a) (MapRemove A m' a)
+++++
unfold eqmap in |- *.
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : eqm A (MapGet A m) (MapGet A m')) (a : ad), eqm A (MapGet A (MapRemove A m a)) (MapGet A (MapRemove A m' a))
+++++
unfold eqm in |- *.
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (_ : forall a : ad, eq (MapGet A m a) (MapGet A m' a)) (a a0 : ad), eq (MapGet A (MapRemove A m a) a0) (MapGet A (MapRemove A m' a) a0)
+++++
intros.
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a,a0 : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapRemove A m a) a0) (MapGet A (MapRemove A m' a) a0)
+++++
rewrite (MapRemove_semantics A m' a a0).
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m' a a0).

*****
a,a0 : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapRemove A m a) a0) (if N.eqb a a0 then None else MapGet A m' a0)
+++++
rewrite (MapRemove_semantics A m a a0).
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m' a a0).
rewrite (MapRemove_semantics A m a a0).

*****
a,a0 : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (if N.eqb a a0 then None else MapGet A m a0) (if N.eqb a a0 then None else MapGet A m' a0)
+++++
case (Neqb a a0).
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m' a a0).
rewrite (MapRemove_semantics A m a a0).
case (Neqb a a0).

*****
a,a0 : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq None None
+++++
reflexivity.
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m' a a0).
rewrite (MapRemove_semantics A m a a0).
case (Neqb a a0).

*****
a,a0 : ad
H : forall a : ad, eq (MapGet A m a) (MapGet A m' a)
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A m a0) (MapGet A m' a0)
+++++
apply H.
-----
Lemma MapRemove_ext : forall m m':Map A, eqmap m m' -> forall a:ad, eqmap (MapRemove A m a) (MapRemove A m' a).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapRemove_semantics A m' a a0).
rewrite (MapRemove_semantics A m a a0).
case (Neqb a a0).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_empty_m_1 :\n   forall m:Map B, MapDomRestrTo A B (M0 A) m = M0 A.
-----
Lemma MapDomRestrTo_empty_m_1 : forall m:Map B, MapDomRestrTo A B (M0 A) m = M0 A.

*****
A,B,C : Type
*****
forall m : Map B, eq (MapDomRestrTo A B (M0 A) m) (M0 A)
+++++
Proof.
-----
Lemma MapDomRestrTo_empty_m_1 : forall m:Map B, MapDomRestrTo A B (M0 A) m = M0 A.
Proof.

*****
A,B,C : Type
*****
forall m : Map B, eq (MapDomRestrTo A B (M0 A) m) (M0 A)
+++++
trivial.
-----
Lemma MapDomRestrTo_empty_m_1 : forall m:Map B, MapDomRestrTo A B (M0 A) m = M0 A.
Proof.
trivial.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_empty_m :\n   forall m:Map B, eqmap (MapDomRestrTo A B (M0 A) m) (M0 A).
-----
Lemma MapDomRestrTo_empty_m : forall m:Map B, eqmap (MapDomRestrTo A B (M0 A) m) (M0 A).

*****
A,B,C : Type
*****
forall m : Map B, eqmap (MapDomRestrTo A B (M0 A) m) (M0 A)
+++++
Proof.
-----
Lemma MapDomRestrTo_empty_m : forall m:Map B, eqmap (MapDomRestrTo A B (M0 A) m) (M0 A).
Proof.

*****
A,B,C : Type
*****
forall m : Map B, eqmap (MapDomRestrTo A B (M0 A) m) (M0 A)
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrTo_empty_m : forall m:Map B, eqmap (MapDomRestrTo A B (M0 A) m) (M0 A).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map B, eqm A (MapGet A (MapDomRestrTo A B (M0 A) m)) (MapGet A (M0 A))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrTo_empty_m : forall m:Map B, eqmap (MapDomRestrTo A B (M0 A) m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map B) (a : ad), eq (MapGet A (MapDomRestrTo A B (M0 A) m) a) (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDomRestrTo_empty_m : forall m:Map B, eqmap (MapDomRestrTo A B (M0 A) m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
trivial.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_m_empty_1 :\n   forall m:Map A, MapDomRestrTo A B m (M0 B) = M0 A.
-----
Lemma MapDomRestrTo_m_empty_1 : forall m:Map A, MapDomRestrTo A B m (M0 B) = M0 A.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapDomRestrTo A B m (M0 B)) (M0 A)
+++++
Proof.
-----
Lemma MapDomRestrTo_m_empty_1 : forall m:Map A, MapDomRestrTo A B m (M0 B) = M0 A.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapDomRestrTo A B m (M0 B)) (M0 A)
+++++
simple induction m.
-----
Lemma MapDomRestrTo_m_empty_1 : forall m:Map A, MapDomRestrTo A B m (M0 B) = M0 A.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
eq (MapDomRestrTo A B (M0 A) (M0 B)) (M0 A)
+++++
trivial.
-----
Lemma MapDomRestrTo_m_empty_1 : forall m:Map A, MapDomRestrTo A B m (M0 B) = M0 A.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
forall (a : ad) (a0 : A), eq (MapDomRestrTo A B (M1 A a a0) (M0 B)) (M0 A)
+++++
trivial.
-----
Lemma MapDomRestrTo_m_empty_1 : forall m:Map A, MapDomRestrTo A B m (M0 B) = M0 A.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
forall (m : Map A) (_ : eq (MapDomRestrTo A B m (M0 B)) (M0 A)) (m0 : Map A) (_ : eq (MapDomRestrTo A B m0 (M0 B)) (M0 A)), eq (MapDomRestrTo A B (M2 A m m0) (M0 B)) (M0 A)
+++++
trivial.
-----
Lemma MapDomRestrTo_m_empty_1 : forall m:Map A, MapDomRestrTo A B m (M0 B) = M0 A.
Proof.
simple induction m.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_m_empty :\n   forall m:Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A).
-----
Lemma MapDomRestrTo_m_empty : forall m:Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A).

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A)
+++++
Proof.
-----
Lemma MapDomRestrTo_m_empty : forall m:Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A).
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A)
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrTo_m_empty : forall m:Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapDomRestrTo A B m (M0 B))) (MapGet A (M0 A))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrTo_m_empty : forall m:Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapDomRestrTo A B m (M0 B)) a) (MapGet A (M0 A) a)
+++++
intros.
-----
Lemma MapDomRestrTo_m_empty : forall m:Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrTo A B m (M0 B)) a) (MapGet A (M0 A) a)
+++++
rewrite (MapDomRestrTo_m_empty_1 m).
-----
Lemma MapDomRestrTo_m_empty : forall m:Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_m_empty_1 m).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (M0 A) a) (MapGet A (M0 A) a)
+++++
reflexivity.
-----
Lemma MapDomRestrTo_m_empty : forall m:Map A, eqmap (MapDomRestrTo A B m (M0 B)) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_m_empty_1 m).
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_assoc :\n   forall (m:Map A) (m':Map B) (m'':Map C),\n     eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'')\n       (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m''))
+++++
Proof.
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m''))
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqm A (MapGet A (MapDomRestrTo A C (MapDomRestrTo A B m m') m'')) (MapGet A (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C) (a : ad), eq (MapGet A (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') a) (MapGet A (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')) a)
+++++
intros.
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') a) (MapGet A (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')) a)
+++++
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => MapGet A (MapDomRestrTo A B m m') a | None => None end (MapGet A (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')) a)
+++++
rewrite (MapDomRestrTo_semantics A B m m' a).
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => MapGet A m a | None => None end | None => None end (MapGet A (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')) a)
+++++
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => MapGet A m a | None => None end | None => None end match MapGet B (MapDomRestrTo B C m' m'') a with | Some _ => MapGet A m a | None => None end
+++++
rewrite (MapDomRestrTo_semantics B C m' m'' a).
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).
rewrite (MapDomRestrTo_semantics B C m' m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => MapGet A m a | None => None end | None => None end match match MapGet C m'' a with | Some _ => MapGet B m' a | None => None end with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet C m'' a).
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).
rewrite (MapDomRestrTo_semantics B C m' m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet B m' a with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).
rewrite (MapDomRestrTo_semantics B C m' m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : B) (_ : C), eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).
rewrite (MapDomRestrTo_semantics B C m' m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).
rewrite (MapDomRestrTo_semantics B C m' m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None None
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).
rewrite (MapDomRestrTo_semantics B C m' m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).
rewrite (MapDomRestrTo_semantics B C m' m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_assoc : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrTo B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrTo B C m' m'') a).
rewrite (MapDomRestrTo_semantics B C m' m'' a).
case (MapGet C m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_idempotent :\n   forall m:Map A, eqmap (MapDomRestrTo A A m m) m.
-----
Lemma MapDomRestrTo_idempotent : forall m:Map A, eqmap (MapDomRestrTo A A m m) m.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDomRestrTo A A m m) m
+++++
Proof.
-----
Lemma MapDomRestrTo_idempotent : forall m:Map A, eqmap (MapDomRestrTo A A m m) m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDomRestrTo A A m m) m
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrTo_idempotent : forall m:Map A, eqmap (MapDomRestrTo A A m m) m.
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapDomRestrTo A A m m)) (MapGet A m)
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrTo_idempotent : forall m:Map A, eqmap (MapDomRestrTo A A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapDomRestrTo A A m m) a) (MapGet A m a)
+++++
intros.
-----
Lemma MapDomRestrTo_idempotent : forall m:Map A, eqmap (MapDomRestrTo A A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrTo A A m m) a) (MapGet A m a)
+++++
rewrite (MapDomRestrTo_semantics A A m m a).
-----
Lemma MapDomRestrTo_idempotent : forall m:Map A, eqmap (MapDomRestrTo A A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A m m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some _ => MapGet A m a | None => None end (MapGet A m a)
+++++
case (MapGet A m a).
-----
Lemma MapDomRestrTo_idempotent : forall m:Map A, eqmap (MapDomRestrTo A A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A m m a).
case (MapGet A m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDomRestrTo_idempotent : forall m:Map A, eqmap (MapDomRestrTo A A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A m m a).
case (MapGet A m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_idempotent : forall m:Map A, eqmap (MapDomRestrTo A A m m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A m m a).
case (MapGet A m a).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_Dom :\n   forall (m:Map A) (m':Map B),\n     eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m'))
+++++
Proof.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m'))
+++++
unfold eqmap, eqm in |- *.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (a : ad), eq (MapGet A (MapDomRestrTo A B m m') a) (MapGet A (MapDomRestrTo A unit m (MapDom B m')) a)
+++++
intros.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrTo A B m m') a) (MapGet A (MapDomRestrTo A unit m (MapDom B m')) a)
+++++
rewrite (MapDomRestrTo_semantics A B m m' a).
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end (MapGet A (MapDomRestrTo A unit m (MapDom B m')) a)
+++++
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq (in_FSet a (MapDom B m')) true, eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
intro H.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.

*****
H : eq (in_FSet a (MapDom B m')) true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
elim (MapDom_semantics_2 B m' a H).
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).

*****
H : eq (in_FSet a (MapDom B m')) true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall (x : B) (_ : eq (MapGet B m' a) (Some x)), eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
intros y H0.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq (in_FSet a (MapDom B m')) true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
rewrite H0.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq (in_FSet a (MapDom B m')) true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
unfold in_FSet, in_dom in H.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
generalize H.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq match MapGet unit (MapDom B m') a with | Some _ => true | None => false end true, eq (MapGet A m a) match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet unit (MapDom B m') a); trivial.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq false true, eq (MapGet A m a) None
+++++
intro H1.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.

*****
H1 : eq false true
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) None
+++++
discriminate H1.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq (in_FSet a (MapDom B m')) false, eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
intro H.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.

*****
H : eq (in_FSet a (MapDom B m')) false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
rewrite (MapDom_semantics_4 B m' a H).
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).

*****
H : eq (in_FSet a (MapDom B m')) false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq None match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
unfold in_FSet, in_dom in H.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.

*****
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq None match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
generalize H.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.
generalize H.

*****
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq match MapGet unit (MapDom B m') a with | Some _ => true | None => false end false, eq None match MapGet unit (MapDom B m') a with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet unit (MapDom B m') a); trivial.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.

*****
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : unit) (_ : eq true false), eq None (MapGet A m a)
+++++
intros H0 H1.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intros H0 H1.

*****
H1 : eq true false
H0 : unit
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq None (MapGet A m a)
+++++
discriminate H1.
-----
Lemma MapDomRestrTo_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A B m m') (MapDomRestrTo A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intros H0 H1.
discriminate H1.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_empty_m_1 :\n   forall m:Map B, MapDomRestrBy A B (M0 A) m = M0 A.
-----
Lemma MapDomRestrBy_empty_m_1 : forall m:Map B, MapDomRestrBy A B (M0 A) m = M0 A.

*****
A,B,C : Type
*****
forall m : Map B, eq (MapDomRestrBy A B (M0 A) m) (M0 A)
+++++
Proof.
-----
Lemma MapDomRestrBy_empty_m_1 : forall m:Map B, MapDomRestrBy A B (M0 A) m = M0 A.
Proof.

*****
A,B,C : Type
*****
forall m : Map B, eq (MapDomRestrBy A B (M0 A) m) (M0 A)
+++++
trivial.
-----
Lemma MapDomRestrBy_empty_m_1 : forall m:Map B, MapDomRestrBy A B (M0 A) m = M0 A.
Proof.
trivial.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_empty_m :\n   forall m:Map B, eqmap (MapDomRestrBy A B (M0 A) m) (M0 A).
-----
Lemma MapDomRestrBy_empty_m : forall m:Map B, eqmap (MapDomRestrBy A B (M0 A) m) (M0 A).

*****
A,B,C : Type
*****
forall m : Map B, eqmap (MapDomRestrBy A B (M0 A) m) (M0 A)
+++++
Proof.
-----
Lemma MapDomRestrBy_empty_m : forall m:Map B, eqmap (MapDomRestrBy A B (M0 A) m) (M0 A).
Proof.

*****
A,B,C : Type
*****
forall m : Map B, eqmap (MapDomRestrBy A B (M0 A) m) (M0 A)
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrBy_empty_m : forall m:Map B, eqmap (MapDomRestrBy A B (M0 A) m) (M0 A).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map B, eqm A (MapGet A (MapDomRestrBy A B (M0 A) m)) (MapGet A (M0 A))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrBy_empty_m : forall m:Map B, eqmap (MapDomRestrBy A B (M0 A) m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map B) (a : ad), eq (MapGet A (MapDomRestrBy A B (M0 A) m) a) (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDomRestrBy_empty_m : forall m:Map B, eqmap (MapDomRestrBy A B (M0 A) m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
trivial.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_m_empty_1 :\n   forall m:Map A, MapDomRestrBy A B m (M0 B) = m.
-----
Lemma MapDomRestrBy_m_empty_1 : forall m:Map A, MapDomRestrBy A B m (M0 B) = m.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapDomRestrBy A B m (M0 B)) m
+++++
Proof.
-----
Lemma MapDomRestrBy_m_empty_1 : forall m:Map A, MapDomRestrBy A B m (M0 B) = m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapDomRestrBy A B m (M0 B)) m
+++++
simple induction m.
-----
Lemma MapDomRestrBy_m_empty_1 : forall m:Map A, MapDomRestrBy A B m (M0 B) = m.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
eq (MapDomRestrBy A B (M0 A) (M0 B)) (M0 A)
+++++
trivial.
-----
Lemma MapDomRestrBy_m_empty_1 : forall m:Map A, MapDomRestrBy A B m (M0 B) = m.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
forall (a : ad) (a0 : A), eq (MapDomRestrBy A B (M1 A a a0) (M0 B)) (M1 A a a0)
+++++
trivial.
-----
Lemma MapDomRestrBy_m_empty_1 : forall m:Map A, MapDomRestrBy A B m (M0 B) = m.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
forall (m : Map A) (_ : eq (MapDomRestrBy A B m (M0 B)) m) (m0 : Map A) (_ : eq (MapDomRestrBy A B m0 (M0 B)) m0), eq (MapDomRestrBy A B (M2 A m m0) (M0 B)) (M2 A m m0)
+++++
trivial.
-----
Lemma MapDomRestrBy_m_empty_1 : forall m:Map A, MapDomRestrBy A B m (M0 B) = m.
Proof.
simple induction m.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_m_empty :\n   forall m:Map A, eqmap (MapDomRestrBy A B m (M0 B)) m.
-----
Lemma MapDomRestrBy_m_empty : forall m:Map A, eqmap (MapDomRestrBy A B m (M0 B)) m.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDomRestrBy A B m (M0 B)) m
+++++
Proof.
-----
Lemma MapDomRestrBy_m_empty : forall m:Map A, eqmap (MapDomRestrBy A B m (M0 B)) m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDomRestrBy A B m (M0 B)) m
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrBy_m_empty : forall m:Map A, eqmap (MapDomRestrBy A B m (M0 B)) m.
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapDomRestrBy A B m (M0 B))) (MapGet A m)
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrBy_m_empty : forall m:Map A, eqmap (MapDomRestrBy A B m (M0 B)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapDomRestrBy A B m (M0 B)) a) (MapGet A m a)
+++++
intros.
-----
Lemma MapDomRestrBy_m_empty : forall m:Map A, eqmap (MapDomRestrBy A B m (M0 B)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrBy A B m (M0 B)) a) (MapGet A m a)
+++++
rewrite (MapDomRestrBy_m_empty_1 m).
-----
Lemma MapDomRestrBy_m_empty : forall m:Map A, eqmap (MapDomRestrBy A B m (M0 B)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_m_empty_1 m).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A m a)
+++++
reflexivity.
-----
Lemma MapDomRestrBy_m_empty : forall m:Map A, eqmap (MapDomRestrBy A B m (M0 B)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_m_empty_1 m).
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_Dom :\n   forall (m:Map A) (m':Map B),\n     eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m'))
+++++
Proof.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m'))
+++++
unfold eqmap, eqm in |- *.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (a : ad), eq (MapGet A (MapDomRestrBy A B m m') a) (MapGet A (MapDomRestrBy A unit m (MapDom B m')) a)
+++++
intros.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrBy A B m m') a) (MapGet A (MapDomRestrBy A unit m (MapDom B m')) a)
+++++
rewrite (MapDomRestrBy_semantics A B m m' a).
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end (MapGet A (MapDomRestrBy A unit m (MapDom B m')) a)
+++++
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq (in_FSet a (MapDom B m')) true, eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
intro H.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.

*****
H : eq (in_FSet a (MapDom B m')) true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
elim (MapDom_semantics_2 B m' a H).
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).

*****
H : eq (in_FSet a (MapDom B m')) true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall (x : B) (_ : eq (MapGet B m' a) (Some x)), eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
intros y H0.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq (in_FSet a (MapDom B m')) true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
rewrite H0.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq (in_FSet a (MapDom B m')) true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq None match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
unfold in_FSet, in_dom in H.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq None match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
generalize H.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq match MapGet unit (MapDom B m') a with | Some _ => true | None => false end true, eq None match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
case (MapGet unit (MapDom B m') a); trivial.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.

*****
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq false true, eq None (MapGet A m a)
+++++
intro H1.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.

*****
H1 : eq false true
H0 : eq (MapGet B m' a) (Some y)
y : B
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end true
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq None (MapGet A m a)
+++++
discriminate H1.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq (in_FSet a (MapDom B m')) false, eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
intro H.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.

*****
H : eq (in_FSet a (MapDom B m')) false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
rewrite (MapDom_semantics_4 B m' a H).
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).

*****
H : eq (in_FSet a (MapDom B m')) false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
unfold in_FSet, in_dom in H.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.

*****
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
generalize H.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.
generalize H.

*****
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : eq match MapGet unit (MapDom B m') a with | Some _ => true | None => false end false, eq (MapGet A m a) match MapGet unit (MapDom B m') a with | Some _ => None | None => MapGet A m a end
+++++
case (MapGet unit (MapDom B m') a); trivial.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.

*****
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : unit) (_ : eq true false), eq (MapGet A m a) None
+++++
intros H0 H1.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intros H0 H1.

*****
H1 : eq true false
H0 : unit
H : eq\n match MapGet unit (MapDom B m') a with\n | Some _ => true\n | None => false\n end false
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) None
+++++
discriminate H1.
-----
Lemma MapDomRestrBy_Dom : forall (m:Map A) (m':Map B), eqmap (MapDomRestrBy A B m m') (MapDomRestrBy A unit m (MapDom B m')).
Proof.
unfold eqmap, eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A unit m (MapDom B m') a).
elim (sumbool_of_bool (in_FSet a (MapDom B m'))).
intro H.
elim (MapDom_semantics_2 B m' a H).
intros y H0.
rewrite H0.
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intro H1.
discriminate H1.
intro H.
rewrite (MapDom_semantics_4 B m' a H).
unfold in_FSet, in_dom in H.
generalize H.
case (MapGet unit (MapDom B m') a); trivial.
intros H0 H1.
discriminate H1.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_m_m_1 :\n   forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).
-----
Lemma MapDomRestrBy_m_m_1 : forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDomRestrBy A A m m) (M0 A)
+++++
Proof.
-----
Lemma MapDomRestrBy_m_m_1 : forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDomRestrBy A A m m) (M0 A)
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrBy_m_m_1 : forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapDomRestrBy A A m m)) (MapGet A (M0 A))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrBy_m_m_1 : forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapDomRestrBy A A m m) a) (MapGet A (M0 A) a)
+++++
intros.
-----
Lemma MapDomRestrBy_m_m_1 : forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrBy A A m m) a) (MapGet A (M0 A) a)
+++++
rewrite (MapDomRestrBy_semantics A A m m a).
-----
Lemma MapDomRestrBy_m_m_1 : forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A A m m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some _ => None | None => MapGet A m a end (MapGet A (M0 A) a)
+++++
case (MapGet A m a).
-----
Lemma MapDomRestrBy_m_m_1 : forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A A m m a).
case (MapGet A m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
forall _ : A, eq None (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDomRestrBy_m_m_1 : forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A A m m a).
case (MapGet A m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq None (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDomRestrBy_m_m_1 : forall m:Map A, eqmap (MapDomRestrBy A A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A A m m a).
case (MapGet A m a).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_By :\n   forall (m:Map A) (m' m'':Map B),\n     eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'')\n       (MapDomRestrBy A B m (MapMerge B m' m'')).
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).

*****
A,B,C : Type
*****
forall (m : Map A) (m' m'' : Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m''))
+++++
Proof.
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' m'' : Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m''))
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' m'' : Map B), eqm A (MapGet A (MapDomRestrBy A B (MapDomRestrBy A B m m') m'')) (MapGet A (MapDomRestrBy A B m (MapMerge B m' m'')))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' m'' : Map B) (a : ad), eq (MapGet A (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') a) (MapGet A (MapDomRestrBy A B m (MapMerge B m' m'')) a)
+++++
intros.
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') a) (MapGet A (MapDomRestrBy A B m (MapMerge B m' m'')) a)
+++++
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => None | None => MapGet A (MapDomRestrBy A B m m') a end (MapGet A (MapDomRestrBy A B m (MapMerge B m' m'')) a)
+++++
rewrite (MapDomRestrBy_semantics A B m m' a).
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => None | None => MapGet A m a end end (MapGet A (MapDomRestrBy A B m (MapMerge B m' m'')) a)
+++++
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => None | None => MapGet A m a end end match MapGet B (MapMerge B m' m'') a with | Some _ => None | None => MapGet A m a end
+++++
rewrite (MapMerge_semantics B m' m'' a).
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).
rewrite (MapMerge_semantics B m' m'' a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => None | None => MapGet A m a end end match match MapGet B m'' a with | Some y' => Some y' | None => MapGet B m' a end with | Some _ => None | None => MapGet A m a end
+++++
case (MapGet B m'' a).
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).
rewrite (MapMerge_semantics B m' m'' a).
case (MapGet B m'' a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).
rewrite (MapMerge_semantics B m' m'' a).
case (MapGet B m'' a).
case (MapGet B m' a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : B) (_ : B), eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).
rewrite (MapMerge_semantics B m' m'' a).
case (MapGet B m'' a).
case (MapGet B m' a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).
rewrite (MapMerge_semantics B m' m'' a).
case (MapGet B m'' a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet B m' a with | Some _ => None | None => MapGet A m a end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).
rewrite (MapMerge_semantics B m' m'' a).
case (MapGet B m'' a).
case (MapGet B m' a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).
rewrite (MapMerge_semantics B m' m'' a).
case (MapGet B m'' a).
case (MapGet B m' a).

*****
a : ad
m',m'' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapDomRestrBy_By : forall (m:Map A) (m' m'':Map B), eqmap (MapDomRestrBy A B (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B m (MapMerge B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B m (MapMerge B m' m'') a).
rewrite (MapMerge_semantics B m' m'' a).
case (MapGet B m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_By_comm :\n   forall (m:Map A) (m':Map B) (m'':Map C),\n     eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'')\n       (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m')
+++++
Proof.
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m')
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqm A (MapGet A (MapDomRestrBy A C (MapDomRestrBy A B m m') m'')) (MapGet A (MapDomRestrBy A B (MapDomRestrBy A C m m'') m'))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C) (a : ad), eq (MapGet A (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') a) (MapGet A (MapDomRestrBy A B (MapDomRestrBy A C m m'') m') a)
+++++
intros.
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') a) (MapGet A (MapDomRestrBy A B (MapDomRestrBy A C m m'') m') a)
+++++
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => MapGet A (MapDomRestrBy A B m m') a end (MapGet A (MapDomRestrBy A B (MapDomRestrBy A C m m'') m') a)
+++++
rewrite (MapDomRestrBy_semantics A B m m' a).
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => None | None => MapGet A m a end end (MapGet A (MapDomRestrBy A B (MapDomRestrBy A C m m'') m') a)
+++++
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => None | None => MapGet A m a end end match MapGet B m' a with | Some _ => None | None => MapGet A (MapDomRestrBy A C m m'') a end
+++++
rewrite (MapDomRestrBy_semantics A C m m'' a).
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => None | None => MapGet A m a end end match MapGet B m' a with | Some _ => None | None => match MapGet C m'' a with | Some _ => None | None => MapGet A m a end end
+++++
case (MapGet C m'' a).
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq None match MapGet B m' a with | Some _ | _ => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : B) (_ : C), eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet B m' a with | Some _ => None | None => MapGet A m a end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapDomRestrBy_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_To :\n   forall (m:Map A) (m':Map B) (m'':Map C),\n     eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'')\n       (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m''))
+++++
Proof.
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m''))
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqm A (MapGet A (MapDomRestrBy A C (MapDomRestrTo A B m m') m'')) (MapGet A (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C) (a : ad), eq (MapGet A (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') a) (MapGet A (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')) a)
+++++
intros.
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') a) (MapGet A (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')) a)
+++++
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => MapGet A (MapDomRestrTo A B m m') a end (MapGet A (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')) a)
+++++
rewrite (MapDomRestrTo_semantics A B m m' a).
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => MapGet A m a | None => None end end (MapGet A (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')) a)
+++++
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => MapGet A m a | None => None end end match MapGet B (MapDomRestrBy B C m' m'') a with | Some _ => MapGet A m a | None => None end
+++++
rewrite (MapDomRestrBy_semantics B C m' m'' a).
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).
rewrite (MapDomRestrBy_semantics B C m' m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => MapGet A m a | None => None end end match match MapGet C m'' a with | Some _ => None | None => MapGet B m' a end with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet C m'' a).
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).
rewrite (MapDomRestrBy_semantics B C m' m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq None None
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).
rewrite (MapDomRestrBy_semantics B C m' m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : B) (_ : C), eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).
rewrite (MapDomRestrBy_semantics B C m' m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).
rewrite (MapDomRestrBy_semantics B C m' m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet B m' a with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).
rewrite (MapDomRestrBy_semantics B C m' m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).
rewrite (MapDomRestrBy_semantics B C m' m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_To : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B m (MapDomRestrBy B C m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m (MapDomRestrBy B C m' m'') a).
rewrite (MapDomRestrBy_semantics B C m' m'' a).
case (MapGet C m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_To_comm :\n   forall (m:Map A) (m':Map B) (m'':Map C),\n     eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'')\n       (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m')
+++++
Proof.
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m')
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqm A (MapGet A (MapDomRestrBy A C (MapDomRestrTo A B m m') m'')) (MapGet A (MapDomRestrTo A B (MapDomRestrBy A C m m'') m'))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C) (a : ad), eq (MapGet A (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') a) (MapGet A (MapDomRestrTo A B (MapDomRestrBy A C m m'') m') a)
+++++
intros.
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') a) (MapGet A (MapDomRestrTo A B (MapDomRestrBy A C m m'') m') a)
+++++
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => MapGet A (MapDomRestrTo A B m m') a end (MapGet A (MapDomRestrTo A B (MapDomRestrBy A C m m'') m') a)
+++++
rewrite (MapDomRestrTo_semantics A B m m' a).
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => MapGet A m a | None => None end end (MapGet A (MapDomRestrTo A B (MapDomRestrBy A C m m'') m') a)
+++++
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => MapGet A m a | None => None end end match MapGet B m' a with | Some _ => MapGet A (MapDomRestrBy A C m m'') a | None => None end
+++++
rewrite (MapDomRestrBy_semantics A C m m'' a).
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => None | None => match MapGet B m' a with | Some _ => MapGet A m a | None => None end end match MapGet B m' a with | Some _ => match MapGet C m'' a with | Some _ => None | None => MapGet A m a end | None => None end
+++++
case (MapGet C m'' a).
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq None match MapGet B m' a with | Some _ | _ => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : B) (_ : C), eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet B m' a with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDomRestrBy_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrBy A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrBy A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrBy A C m m'') m' a).
rewrite (MapDomRestrBy_semantics A C m m'' a).
case (MapGet C m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_By :\n   forall (m:Map A) (m':Map B) (m'':Map C),\n     eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'')\n       (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m'))
+++++
Proof.
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m'))
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqm A (MapGet A (MapDomRestrTo A C (MapDomRestrBy A B m m') m'')) (MapGet A (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C) (a : ad), eq (MapGet A (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') a) (MapGet A (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')) a)
+++++
intros.
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') a) (MapGet A (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')) a)
+++++
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => MapGet A (MapDomRestrBy A B m m') a | None => None end (MapGet A (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')) a)
+++++
rewrite (MapDomRestrBy_semantics A B m m' a).
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => None | None => MapGet A m a end | None => None end (MapGet A (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')) a)
+++++
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => None | None => MapGet A m a end | None => None end match MapGet C (MapDomRestrBy C B m'' m') a with | Some _ => MapGet A m a | None => None end
+++++
rewrite (MapDomRestrBy_semantics C B m'' m' a).
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).
rewrite (MapDomRestrBy_semantics C B m'' m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => None | None => MapGet A m a end | None => None end match match MapGet B m' a with | Some _ => None | None => MapGet C m'' a end with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet C m'' a).
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).
rewrite (MapDomRestrBy_semantics C B m'' m' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall c : C, eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match match MapGet B m' a with | Some _ => None | None => Some c end with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).
rewrite (MapDomRestrBy_semantics C B m'' m' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : B) (_ : C), eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).
rewrite (MapDomRestrBy_semantics C B m'' m' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).
rewrite (MapDomRestrBy_semantics C B m'' m' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None match match MapGet B m' a with | Some _ | _ => None end with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).
rewrite (MapDomRestrBy_semantics C B m'' m' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).
rewrite (MapDomRestrBy_semantics C B m'' m' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_By : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrTo A C m (MapDomRestrBy C B m'' m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A C m (MapDomRestrBy C B m'' m') a).
rewrite (MapDomRestrBy_semantics C B m'' m' a).
case (MapGet C m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_By_comm :\n   forall (m:Map A) (m':Map B) (m'':Map C),\n     eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'')\n       (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m')
+++++
Proof.
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m')
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqm A (MapGet A (MapDomRestrTo A C (MapDomRestrBy A B m m') m'')) (MapGet A (MapDomRestrBy A B (MapDomRestrTo A C m m'') m'))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C) (a : ad), eq (MapGet A (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') a) (MapGet A (MapDomRestrBy A B (MapDomRestrTo A C m m'') m') a)
+++++
intros.
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') a) (MapGet A (MapDomRestrBy A B (MapDomRestrTo A C m m'') m') a)
+++++
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => MapGet A (MapDomRestrBy A B m m') a | None => None end (MapGet A (MapDomRestrBy A B (MapDomRestrTo A C m m'') m') a)
+++++
rewrite (MapDomRestrBy_semantics A B m m' a).
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => None | None => MapGet A m a end | None => None end (MapGet A (MapDomRestrBy A B (MapDomRestrTo A C m m'') m') a)
+++++
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => None | None => MapGet A m a end | None => None end match MapGet B m' a with | Some _ => None | None => MapGet A (MapDomRestrTo A C m m'') a end
+++++
rewrite (MapDomRestrTo_semantics A C m m'' a).
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => None | None => MapGet A m a end | None => None end match MapGet B m' a with | Some _ => None | None => match MapGet C m'' a with | Some _ => MapGet A m a | None => None end end
+++++
case (MapGet C m'' a).
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq match MapGet B m' a with | Some _ => None | None => MapGet A m a end match MapGet B m' a with | Some _ => None | None => MapGet A m a end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : B) (_ : C), eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None match MapGet B m' a with | Some _ | _ => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_By_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrBy A B m m') m'') (MapDomRestrBy A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrBy A B m m') m'' a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrBy_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_To_comm :\n   forall (m:Map A) (m':Map B) (m'':Map C),\n     eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'')\n       (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m')
+++++
Proof.
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m')
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C), eqm A (MapGet A (MapDomRestrTo A C (MapDomRestrTo A B m m') m'')) (MapGet A (MapDomRestrTo A B (MapDomRestrTo A C m m'') m'))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (m'' : Map C) (a : ad), eq (MapGet A (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') a) (MapGet A (MapDomRestrTo A B (MapDomRestrTo A C m m'') m') a)
+++++
intros.
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') a) (MapGet A (MapDomRestrTo A B (MapDomRestrTo A C m m'') m') a)
+++++
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => MapGet A (MapDomRestrTo A B m m') a | None => None end (MapGet A (MapDomRestrTo A B (MapDomRestrTo A C m m'') m') a)
+++++
rewrite (MapDomRestrTo_semantics A B m m' a).
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => MapGet A m a | None => None end | None => None end (MapGet A (MapDomRestrTo A B (MapDomRestrTo A C m m'') m') a)
+++++
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => MapGet A m a | None => None end | None => None end match MapGet B m' a with | Some _ => MapGet A (MapDomRestrTo A C m m'') a | None => None end
+++++
rewrite (MapDomRestrTo_semantics A C m m'' a).
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet C m'' a with | Some _ => match MapGet B m' a with | Some _ => MapGet A m a | None => None end | None => None end match MapGet B m' a with | Some _ => match MapGet C m'' a with | Some _ => MapGet A m a | None => None end | None => None end
+++++
case (MapGet C m'' a).
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq match MapGet B m' a with | Some _ => MapGet A m a | None => None end match MapGet B m' a with | Some _ => MapGet A m a | None => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : B) (_ : C), eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : C, eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None match MapGet B m' a with | Some _ | _ => None end
+++++
case (MapGet B m' a).
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).
case (MapGet B m' a).

*****
a : ad
m'' : Map C
m' : Map B
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDomRestrTo_To_comm : forall (m:Map A) (m':Map B) (m'':Map C), eqmap (MapDomRestrTo A C (MapDomRestrTo A B m m') m'') (MapDomRestrTo A B (MapDomRestrTo A C m m'') m').
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A C (MapDomRestrTo A B m m') m'' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B (MapDomRestrTo A C m m'') m' a).
rewrite (MapDomRestrTo_semantics A C m m'' a).
case (MapGet C m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapMerge_DomRestrTo :\n   forall (m m':Map A) (m'':Map B),\n     eqmap (MapDomRestrTo A B (MapMerge A m m') m'')\n       (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).

*****
A,B,C : Type
*****
forall (m m' : Map A) (m'' : Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m''))
+++++
Proof.
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.

*****
A,B,C : Type
*****
forall (m m' : Map A) (m'' : Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m''))
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (m'' : Map B), eqm A (MapGet A (MapDomRestrTo A B (MapMerge A m m') m'')) (MapGet A (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')))
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (m'' : Map B) (a : ad), eq (MapGet A (MapDomRestrTo A B (MapMerge A m m') m'') a) (MapGet A (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')) a)
+++++
intros.
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrTo A B (MapMerge A m m') m'') a) (MapGet A (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')) a)
+++++
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => MapGet A (MapMerge A m m') a | None => None end (MapGet A (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')) a)
+++++
rewrite (MapMerge_semantics A m m' a).
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end | None => None end (MapGet A (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')) a)
+++++
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end | None => None end match MapGet A (MapDomRestrTo A B m' m'') a with | Some y' => Some y' | None => MapGet A (MapDomRestrTo A B m m'') a end
+++++
rewrite (MapDomRestrTo_semantics A B m' m'' a).
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
rewrite (MapDomRestrTo_semantics A B m' m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end | None => None end match match MapGet B m'' a with | Some _ => MapGet A m' a | None => None end with | Some y' => Some y' | None => MapGet A (MapDomRestrTo A B m m'') a end
+++++
rewrite (MapDomRestrTo_semantics A B m m'' a).
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
rewrite (MapDomRestrTo_semantics A B m' m'' a).
rewrite (MapDomRestrTo_semantics A B m m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end | None => None end match match MapGet B m'' a with | Some _ => MapGet A m' a | None => None end with | Some y' => Some y' | None => match MapGet B m'' a with | Some _ => MapGet A m a | None => None end end
+++++
case (MapGet B m'' a).
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
rewrite (MapDomRestrTo_semantics A B m' m'' a).
rewrite (MapDomRestrTo_semantics A B m m'' a).
case (MapGet B m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
forall _ : B, eq match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
rewrite (MapDomRestrTo_semantics A B m' m'' a).
rewrite (MapDomRestrTo_semantics A B m m'' a).
case (MapGet B m'' a).
case (MapGet A m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
forall (a : A) (_ : B), eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
rewrite (MapDomRestrTo_semantics A B m' m'' a).
rewrite (MapDomRestrTo_semantics A B m m'' a).
case (MapGet B m'' a).
case (MapGet A m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
forall _ : B, eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
rewrite (MapDomRestrTo_semantics A B m' m'' a).
rewrite (MapDomRestrTo_semantics A B m m'' a).
case (MapGet B m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq None None
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
rewrite (MapDomRestrTo_semantics A B m' m'' a).
rewrite (MapDomRestrTo_semantics A B m m'' a).
case (MapGet B m'' a).
case (MapGet A m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
forall _ : A, eq None None
+++++
trivial.
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
rewrite (MapDomRestrTo_semantics A B m' m'' a).
rewrite (MapDomRestrTo_semantics A B m m'' a).
case (MapGet B m'' a).
case (MapGet A m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapMerge_DomRestrTo : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrTo A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m'') (MapDomRestrTo A B m' m'') a).
rewrite (MapDomRestrTo_semantics A B m' m'' a).
rewrite (MapDomRestrTo_semantics A B m m'' a).
case (MapGet B m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapMerge_DomRestrBy :\n   forall (m m':Map A) (m'':Map B),\n     eqmap (MapDomRestrBy A B (MapMerge A m m') m'')\n       (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).

*****
A,B,C : Type
*****
forall (m m' : Map A) (m'' : Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m''))
+++++
Proof.
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.

*****
A,B,C : Type
*****
forall (m m' : Map A) (m'' : Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m''))
+++++
unfold eqmap in |- *.
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (m'' : Map B), eqm A (MapGet A (MapDomRestrBy A B (MapMerge A m m') m'')) (MapGet A (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')))
+++++
unfold eqm in |- *.
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (m'' : Map B) (a : ad), eq (MapGet A (MapDomRestrBy A B (MapMerge A m m') m'') a) (MapGet A (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')) a)
+++++
intros.
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrBy A B (MapMerge A m m') m'') a) (MapGet A (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')) a)
+++++
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => None | None => MapGet A (MapMerge A m m') a end (MapGet A (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')) a)
+++++
rewrite (MapMerge_semantics A m m' a).
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => None | None => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end end (MapGet A (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')) a)
+++++
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => None | None => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end end match MapGet A (MapDomRestrBy A B m' m'') a with | Some y' => Some y' | None => MapGet A (MapDomRestrBy A B m m'') a end
+++++
rewrite (MapDomRestrBy_semantics A B m' m'' a).
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
rewrite (MapDomRestrBy_semantics A B m' m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => None | None => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end end match match MapGet B m'' a with | Some _ => None | None => MapGet A m' a end with | Some y' => Some y' | None => MapGet A (MapDomRestrBy A B m m'') a end
+++++
rewrite (MapDomRestrBy_semantics A B m m'' a).
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
rewrite (MapDomRestrBy_semantics A B m' m'' a).
rewrite (MapDomRestrBy_semantics A B m m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet B m'' a with | Some _ => None | None => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end end match match MapGet B m'' a with | Some _ => None | None => MapGet A m' a end with | Some y' => Some y' | None => match MapGet B m'' a with | Some _ => None | None => MapGet A m a end end
+++++
case (MapGet B m'' a).
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
rewrite (MapDomRestrBy_semantics A B m' m'' a).
rewrite (MapDomRestrBy_semantics A B m m'' a).
case (MapGet B m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
rewrite (MapDomRestrBy_semantics A B m' m'' a).
rewrite (MapDomRestrBy_semantics A B m m'' a).
case (MapGet B m'' a).
case (MapGet A m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
forall (_ : A) (_ : B), eq None None
+++++
trivial.
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
rewrite (MapDomRestrBy_semantics A B m' m'' a).
rewrite (MapDomRestrBy_semantics A B m m'' a).
case (MapGet B m'' a).
case (MapGet A m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
rewrite (MapDomRestrBy_semantics A B m' m'' a).
rewrite (MapDomRestrBy_semantics A B m m'' a).
case (MapGet B m'' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end
+++++
case (MapGet A m' a).
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
rewrite (MapDomRestrBy_semantics A B m' m'' a).
rewrite (MapDomRestrBy_semantics A B m m'' a).
case (MapGet B m'' a).
case (MapGet A m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
rewrite (MapDomRestrBy_semantics A B m' m'' a).
rewrite (MapDomRestrBy_semantics A B m m'' a).
case (MapGet B m'' a).
case (MapGet A m' a).

*****
a : ad
m'' : Map B
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapMerge_DomRestrBy : forall (m m':Map A) (m'':Map B), eqmap (MapDomRestrBy A B (MapMerge A m m') m'') (MapMerge A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B (MapMerge A m m') m'' a).
rewrite (MapMerge_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m'') (MapDomRestrBy A B m' m'') a).
rewrite (MapDomRestrBy_semantics A B m' m'' a).
rewrite (MapDomRestrBy_semantics A B m m'' a).
case (MapGet B m'' a).

*****

*****

+++++
Qed.
-----
Lemma MapDelta_empty_m_1 : forall m:Map A, MapDelta A (M0 A) m = m.
-----
Lemma MapDelta_empty_m_1 : forall m:Map A, MapDelta A (M0 A) m = m.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapDelta A (M0 A) m) m
+++++
Proof.
-----
Lemma MapDelta_empty_m_1 : forall m:Map A, MapDelta A (M0 A) m = m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapDelta A (M0 A) m) m
+++++
trivial.
-----
Lemma MapDelta_empty_m_1 : forall m:Map A, MapDelta A (M0 A) m = m.
Proof.
trivial.

*****

*****

+++++
Qed.
-----
Lemma MapDelta_empty_m : forall m:Map A, eqmap (MapDelta A (M0 A) m) m.
-----
Lemma MapDelta_empty_m : forall m:Map A, eqmap (MapDelta A (M0 A) m) m.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDelta A (M0 A) m) m
+++++
Proof.
-----
Lemma MapDelta_empty_m : forall m:Map A, eqmap (MapDelta A (M0 A) m) m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDelta A (M0 A) m) m
+++++
unfold eqmap in |- *.
-----
Lemma MapDelta_empty_m : forall m:Map A, eqmap (MapDelta A (M0 A) m) m.
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapDelta A (M0 A) m)) (MapGet A m)
+++++
unfold eqm in |- *.
-----
Lemma MapDelta_empty_m : forall m:Map A, eqmap (MapDelta A (M0 A) m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapDelta A (M0 A) m) a) (MapGet A m a)
+++++
trivial.
-----
Lemma MapDelta_empty_m : forall m:Map A, eqmap (MapDelta A (M0 A) m) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
trivial.

*****

*****

+++++
Qed.
-----
Lemma MapDelta_m_empty_1 : forall m:Map A, MapDelta A m (M0 A) = m.
-----
Lemma MapDelta_m_empty_1 : forall m:Map A, MapDelta A m (M0 A) = m.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapDelta A m (M0 A)) m
+++++
Proof.
-----
Lemma MapDelta_m_empty_1 : forall m:Map A, MapDelta A m (M0 A) = m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eq (MapDelta A m (M0 A)) m
+++++
simple induction m.
-----
Lemma MapDelta_m_empty_1 : forall m:Map A, MapDelta A m (M0 A) = m.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
eq (MapDelta A (M0 A) (M0 A)) (M0 A)
+++++
trivial.
-----
Lemma MapDelta_m_empty_1 : forall m:Map A, MapDelta A m (M0 A) = m.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
forall (a : ad) (a0 : A), eq (MapDelta A (M1 A a a0) (M0 A)) (M1 A a a0)
+++++
trivial.
-----
Lemma MapDelta_m_empty_1 : forall m:Map A, MapDelta A m (M0 A) = m.
Proof.
simple induction m.

*****
m : Map A
A,B,C : Type
*****
forall (m : Map A) (_ : eq (MapDelta A m (M0 A)) m) (m0 : Map A) (_ : eq (MapDelta A m0 (M0 A)) m0), eq (MapDelta A (M2 A m m0) (M0 A)) (M2 A m m0)
+++++
trivial.
-----
Lemma MapDelta_m_empty_1 : forall m:Map A, MapDelta A m (M0 A) = m.
Proof.
simple induction m.

*****

*****

+++++
Qed.
-----
Lemma MapDelta_m_empty : forall m:Map A, eqmap (MapDelta A m (M0 A)) m.
-----
Lemma MapDelta_m_empty : forall m:Map A, eqmap (MapDelta A m (M0 A)) m.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDelta A m (M0 A)) m
+++++
Proof.
-----
Lemma MapDelta_m_empty : forall m:Map A, eqmap (MapDelta A m (M0 A)) m.
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDelta A m (M0 A)) m
+++++
unfold eqmap in |- *.
-----
Lemma MapDelta_m_empty : forall m:Map A, eqmap (MapDelta A m (M0 A)) m.
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapDelta A m (M0 A))) (MapGet A m)
+++++
unfold eqm in |- *.
-----
Lemma MapDelta_m_empty : forall m:Map A, eqmap (MapDelta A m (M0 A)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapDelta A m (M0 A)) a) (MapGet A m a)
+++++
intros.
-----
Lemma MapDelta_m_empty : forall m:Map A, eqmap (MapDelta A m (M0 A)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDelta A m (M0 A)) a) (MapGet A m a)
+++++
rewrite MapDelta_m_empty_1.
-----
Lemma MapDelta_m_empty : forall m:Map A, eqmap (MapDelta A m (M0 A)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite MapDelta_m_empty_1.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A m a)
+++++
reflexivity.
-----
Lemma MapDelta_m_empty : forall m:Map A, eqmap (MapDelta A m (M0 A)) m.
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite MapDelta_m_empty_1.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDelta A m m) (M0 A)
+++++
Proof.
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).
Proof.

*****
A,B,C : Type
*****
forall m : Map A, eqmap (MapDelta A m m) (M0 A)
+++++
unfold eqmap in |- *.
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m : Map A, eqm A (MapGet A (MapDelta A m m)) (MapGet A (M0 A))
+++++
unfold eqm in |- *.
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (a : ad), eq (MapGet A (MapDelta A m m) a) (MapGet A (M0 A) a)
+++++
intros.
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDelta A m m) a) (MapGet A (M0 A) a)
+++++
rewrite (MapDelta_semantics A m m a).
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m a with | Some _ => None | None => Some y end | None => match MapGet A m a with | Some y' => Some y' | None => None end end (MapGet A (M0 A) a)
+++++
case (MapGet A m a).
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m a).
case (MapGet A m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
forall _ : A, eq None (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m a).
case (MapGet A m a).

*****
a : ad
m : Map A
A,B,C : Type
*****
eq None (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDelta_nilpotent : forall m:Map A, eqmap (MapDelta A m m) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m a).
case (MapGet A m a).

*****

*****

+++++
Qed.
-----
Lemma MapDelta_as_Merge :\n   forall m m':Map A,\n     eqmap (MapDelta A m m')\n       (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).

*****
A,B,C : Type
*****
forall m m' : Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m))
+++++
Proof.
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.

*****
A,B,C : Type
*****
forall m m' : Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m))
+++++
unfold eqmap in |- *.
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m m' : Map A, eqm A (MapGet A (MapDelta A m m')) (MapGet A (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)))
+++++
unfold eqm in |- *.
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (a : ad), eq (MapGet A (MapDelta A m m') a) (MapGet A (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)) a)
+++++
intros.
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapDelta A m m') a) (MapGet A (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)) a)
+++++
rewrite (MapDelta_semantics A m m' a).
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end (MapGet A (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)) a)
+++++
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match MapGet A (MapDomRestrBy A A m' m) a with | Some y' => Some y' | None => MapGet A (MapDomRestrBy A A m m') a end
+++++
rewrite (MapDomRestrBy_semantics A A m' m a).
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
rewrite (MapDomRestrBy_semantics A A m' m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match match MapGet A m a with | Some _ => None | None => MapGet A m' a end with | Some y' => Some y' | None => MapGet A (MapDomRestrBy A A m m') a end
+++++
rewrite (MapDomRestrBy_semantics A A m m' a).
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
rewrite (MapDomRestrBy_semantics A A m' m a).
rewrite (MapDomRestrBy_semantics A A m m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match match MapGet A m a with | Some _ => None | None => MapGet A m' a end with | Some y' => Some y' | None => match MapGet A m' a with | Some _ => None | None => MapGet A m a end end
+++++
case (MapGet A m a).
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
rewrite (MapDomRestrBy_semantics A A m' m a).
rewrite (MapDomRestrBy_semantics A A m m' a).
case (MapGet A m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a0 : A, eq match MapGet A m' a with | Some _ => None | None => Some a0 end match MapGet A m' a with | Some _ => None | None => Some a0 end
+++++
case (MapGet A m' a).
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
rewrite (MapDomRestrBy_semantics A A m' m a).
rewrite (MapDomRestrBy_semantics A A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall (_ : A) (_ : A), eq None None
+++++
trivial.
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
rewrite (MapDomRestrBy_semantics A A m' m a).
rewrite (MapDomRestrBy_semantics A A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
rewrite (MapDomRestrBy_semantics A A m' m a).
rewrite (MapDomRestrBy_semantics A A m m' a).
case (MapGet A m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m' a with | Some y' => Some y' | None => None end match MapGet A m' a with | Some y' => Some y' | None => match MapGet A m' a with | Some _ | _ => None end end
+++++
case (MapGet A m' a).
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
rewrite (MapDomRestrBy_semantics A A m' m a).
rewrite (MapDomRestrBy_semantics A A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
rewrite (MapDomRestrBy_semantics A A m' m a).
rewrite (MapDomRestrBy_semantics A A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDelta_as_Merge : forall m m':Map A, eqmap (MapDelta A m m') (MapMerge A (MapDomRestrBy A A m m') (MapDomRestrBy A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapMerge_semantics A (MapDomRestrBy A A m m') ( MapDomRestrBy A A m' m) a).
rewrite (MapDomRestrBy_semantics A A m' m a).
rewrite (MapDomRestrBy_semantics A A m m' a).
case (MapGet A m a).

*****

*****

+++++
Qed.
-----
Lemma MapDelta_as_DomRestrBy :\n   forall m m':Map A,\n     eqmap (MapDelta A m m')\n       (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).

*****
A,B,C : Type
*****
forall m m' : Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m'))
+++++
Proof.
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.

*****
A,B,C : Type
*****
forall m m' : Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m'))
+++++
unfold eqmap in |- *.
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m m' : Map A, eqm A (MapGet A (MapDelta A m m')) (MapGet A (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')))
+++++
unfold eqm in |- *.
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (a : ad), eq (MapGet A (MapDelta A m m') a) (MapGet A (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')) a)
+++++
intros.
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapDelta A m m') a) (MapGet A (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')) a)
+++++
rewrite (MapDelta_semantics A m m' a).
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end (MapGet A (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')) a)
+++++
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match MapGet A (MapDomRestrTo A A m m') a with | Some _ => None | None => MapGet A (MapMerge A m m') a end
+++++
rewrite (MapDomRestrTo_semantics A A m m' a).
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
rewrite (MapDomRestrTo_semantics A A m m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match match MapGet A m' a with | Some _ => MapGet A m a | None => None end with | Some _ => None | None => MapGet A (MapMerge A m m') a end
+++++
rewrite (MapMerge_semantics A m m' a).
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapMerge_semantics A m m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match match MapGet A m' a with | Some _ => MapGet A m a | None => None end with | Some _ => None | None => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end end
+++++
case (MapGet A m a).
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a0 : A, eq match MapGet A m' a with | Some _ => None | None => Some a0 end match match MapGet A m' a with | Some _ => Some a0 | None => None end with | Some _ => None | None => match MapGet A m' a with | Some y' => Some y' | None => Some a0 end end
+++++
case (MapGet A m' a).
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall (_ : A) (_ : A), eq None None
+++++
trivial.
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m' a with | Some y' => Some y' | None => None end match match MapGet A m' a with | Some _ | _ => None end with | Some _ => None | None => match MapGet A m' a with | Some y' => Some y' | None => None end end
+++++
case (MapGet A m' a).
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDelta_as_DomRestrBy : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m m') a).
rewrite (MapDomRestrTo_semantics A A m m' a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).

*****

*****

+++++
Qed.
-----
Lemma MapDelta_as_DomRestrBy_2 :\n   forall m m':Map A,\n     eqmap (MapDelta A m m')\n       (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).

*****
A,B,C : Type
*****
forall m m' : Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m))
+++++
Proof.
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.

*****
A,B,C : Type
*****
forall m m' : Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m))
+++++
unfold eqmap in |- *.
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m m' : Map A, eqm A (MapGet A (MapDelta A m m')) (MapGet A (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)))
+++++
unfold eqm in |- *.
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (a : ad), eq (MapGet A (MapDelta A m m') a) (MapGet A (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)) a)
+++++
intros.
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapDelta A m m') a) (MapGet A (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)) a)
+++++
rewrite (MapDelta_semantics A m m' a).
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end (MapGet A (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)) a)
+++++
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match MapGet A (MapDomRestrTo A A m' m) a with | Some _ => None | None => MapGet A (MapMerge A m m') a end
+++++
rewrite (MapDomRestrTo_semantics A A m' m a).
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
rewrite (MapDomRestrTo_semantics A A m' m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match match MapGet A m a with | Some _ => MapGet A m' a | None => None end with | Some _ => None | None => MapGet A (MapMerge A m m') a end
+++++
rewrite (MapMerge_semantics A m m' a).
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
rewrite (MapDomRestrTo_semantics A A m' m a).
rewrite (MapMerge_semantics A m m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match match MapGet A m a with | Some _ => MapGet A m' a | None => None end with | Some _ => None | None => match MapGet A m' a with | Some y' => Some y' | None => MapGet A m a end end
+++++
case (MapGet A m a).
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
rewrite (MapDomRestrTo_semantics A A m' m a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a0 : A, eq match MapGet A m' a with | Some _ => None | None => Some a0 end match MapGet A m' a with | Some _ => None | None => match MapGet A m' a with | Some y' => Some y' | None => Some a0 end end
+++++
case (MapGet A m' a).
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
rewrite (MapDomRestrTo_semantics A A m' m a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall (_ : A) (_ : A), eq None None
+++++
trivial.
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
rewrite (MapDomRestrTo_semantics A A m' m a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
rewrite (MapDomRestrTo_semantics A A m' m a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m' a with | Some y' => Some y' | None => None end match MapGet A m' a with | Some y' => Some y' | None => None end
+++++
case (MapGet A m' a).
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
rewrite (MapDomRestrTo_semantics A A m' m a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
rewrite (MapDomRestrTo_semantics A A m' m a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDelta_as_DomRestrBy_2 : forall m m':Map A, eqmap (MapDelta A m m') (MapDomRestrBy A A (MapMerge A m m') (MapDomRestrTo A A m' m)).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDomRestrBy_semantics A A (MapMerge A m m') ( MapDomRestrTo A A m' m) a).
rewrite (MapDomRestrTo_semantics A A m' m a).
rewrite (MapMerge_semantics A m m' a).
case (MapGet A m a).

*****

*****

+++++
Qed.
-----
Lemma MapDelta_sym :\n   forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).

*****
A,B,C : Type
*****
forall m m' : Map A, eqmap (MapDelta A m m') (MapDelta A m' m)
+++++
Proof.
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.

*****
A,B,C : Type
*****
forall m m' : Map A, eqmap (MapDelta A m m') (MapDelta A m' m)
+++++
unfold eqmap in |- *.
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall m m' : Map A, eqm A (MapGet A (MapDelta A m m')) (MapGet A (MapDelta A m' m))
+++++
unfold eqm in |- *.
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m m' : Map A) (a : ad), eq (MapGet A (MapDelta A m m') a) (MapGet A (MapDelta A m' m) a)
+++++
intros.
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq (MapGet A (MapDelta A m m') a) (MapGet A (MapDelta A m' m) a)
+++++
rewrite (MapDelta_semantics A m m' a).
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end (MapGet A (MapDelta A m' m) a)
+++++
rewrite (MapDelta_semantics A m' m a).
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDelta_semantics A m' m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some y => match MapGet A m' a with | Some _ => None | None => Some y end | None => match MapGet A m' a with | Some y' => Some y' | None => None end end match MapGet A m' a with | Some y => match MapGet A m a with | Some _ => None | None => Some y end | None => match MapGet A m a with | Some y' => Some y' | None => None end end
+++++
case (MapGet A m a).
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDelta_semantics A m' m a).
case (MapGet A m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a0 : A, eq match MapGet A m' a with | Some _ => None | None => Some a0 end match MapGet A m' a with | Some _ => None | None => Some a0 end
+++++
case (MapGet A m' a).
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDelta_semantics A m' m a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall (_ : A) (_ : A), eq None None
+++++
trivial.
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDelta_semantics A m' m a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDelta_semantics A m' m a).
case (MapGet A m a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq match MapGet A m' a with | Some y' => Some y' | None => None end match MapGet A m' a with | Some y => Some y | None => None end
+++++
case (MapGet A m' a).
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDelta_semantics A m' m a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDelta_semantics A m' m a).
case (MapGet A m a).
case (MapGet A m' a).

*****
a : ad
m,m' : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDelta_sym : forall m m':Map A, eqmap (MapDelta A m m') (MapDelta A m' m).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m m' a).
rewrite (MapDelta_semantics A m' m a).
case (MapGet A m a).

*****

*****

+++++
Qed.
-----
Lemma MapDelta_ext :\n   forall m1 m2 m'1 m'2:Map A,\n     eqmap m1 m'1 ->\n     eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).

*****
A,B,C : Type
*****
forall (m1 m2 m'1 m'2 : Map A) (_ : eqmap m1 m'1) (_ : eqmap m2 m'2), eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2)
+++++
Proof.
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
Proof.

*****
A,B,C : Type
*****
forall (m1 m2 m'1 m'2 : Map A) (_ : eqmap m1 m'1) (_ : eqmap m2 m'2), eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2)
+++++
unfold eqmap in |- *.
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m1 m2 m'1 m'2 : Map A) (_ : eqm A (MapGet A m1) (MapGet A m'1)) (_ : eqm A (MapGet A m2) (MapGet A m'2)), eqm A (MapGet A (MapDelta A m1 m2)) (MapGet A (MapDelta A m'1 m'2))
+++++
unfold eqm in |- *.
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m1 m2 m'1 m'2 : Map A) (_ : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)) (_ : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)) (a : ad), eq (MapGet A (MapDelta A m1 m2) a) (MapGet A (MapDelta A m'1 m'2) a)
+++++
intros.
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq (MapGet A (MapDelta A m1 m2) a) (MapGet A (MapDelta A m'1 m'2) a)
+++++
rewrite (MapDelta_semantics A m1 m2 a).
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m1 m2 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq match MapGet A m1 a with | Some y => match MapGet A m2 a with | Some _ => None | None => Some y end | None => match MapGet A m2 a with | Some y' => Some y' | None => None end end (MapGet A (MapDelta A m'1 m'2) a)
+++++
rewrite (MapDelta_semantics A m'1 m'2 a).
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m1 m2 a).
rewrite (MapDelta_semantics A m'1 m'2 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq match MapGet A m1 a with | Some y => match MapGet A m2 a with | Some _ => None | None => Some y end | None => match MapGet A m2 a with | Some y' => Some y' | None => None end end match MapGet A m'1 a with | Some y => match MapGet A m'2 a with | Some _ => None | None => Some y end | None => match MapGet A m'2 a with | Some y' => Some y' | None => None end end
+++++
rewrite (H a).
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m1 m2 a).
rewrite (MapDelta_semantics A m'1 m'2 a).
rewrite (H a).

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq match MapGet A m'1 a with | Some y => match MapGet A m2 a with | Some _ => None | None => Some y end | None => match MapGet A m2 a with | Some y' => Some y' | None => None end end match MapGet A m'1 a with | Some y => match MapGet A m'2 a with | Some _ => None | None => Some y end | None => match MapGet A m'2 a with | Some y' => Some y' | None => None end end
+++++
rewrite (H0 a).
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m1 m2 a).
rewrite (MapDelta_semantics A m'1 m'2 a).
rewrite (H a).
rewrite (H0 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet A m2 a) (MapGet A m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m1,m2,m'1,m'2 : Map A
A,B,C : Type
*****
eq match MapGet A m'1 a with | Some y => match MapGet A m'2 a with | Some _ => None | None => Some y end | None => match MapGet A m'2 a with | Some y' => Some y' | None => None end end match MapGet A m'1 a with | Some y => match MapGet A m'2 a with | Some _ => None | None => Some y end | None => match MapGet A m'2 a with | Some y' => Some y' | None => None end end
+++++
reflexivity.
-----
Lemma MapDelta_ext : forall m1 m2 m'1 m'2:Map A, eqmap m1 m'1 -> eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics A m1 m2 a).
rewrite (MapDelta_semantics A m'1 m'2 a).
rewrite (H a).
rewrite (H0 a).
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapDelta_ext_l :\n   forall m1 m'1 m2:Map A,\n     eqmap m1 m'1 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2).
-----
Lemma MapDelta_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2).

*****
A,B,C : Type
*****
forall (m1 m'1 m2 : Map A) (_ : eqmap m1 m'1), eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2)
+++++
Proof.
-----
Lemma MapDelta_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2).
Proof.

*****
A,B,C : Type
*****
forall (m1 m'1 m2 : Map A) (_ : eqmap m1 m'1), eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2)
+++++
intros.
-----
Lemma MapDelta_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2).
Proof.
intros.

*****
H : eqmap m1 m'1
m1,m'1,m2 : Map A
A,B,C : Type
*****
eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2)
+++++
apply MapDelta_ext.
-----
Lemma MapDelta_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2).
Proof.
intros.
apply MapDelta_ext.

*****
H : eqmap m1 m'1
m1,m'1,m2 : Map A
A,B,C : Type
*****
eqmap m1 m'1
+++++
assumption.
-----
Lemma MapDelta_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2).
Proof.
intros.
apply MapDelta_ext.

*****
H : eqmap m1 m'1
m1,m'1,m2 : Map A
A,B,C : Type
*****
eqmap m2 m2
+++++
apply eqmap_refl.
-----
Lemma MapDelta_ext_l : forall m1 m'1 m2:Map A, eqmap m1 m'1 -> eqmap (MapDelta A m1 m2) (MapDelta A m'1 m2).
Proof.
intros.
apply MapDelta_ext.

*****

*****

+++++
Qed.
-----
Lemma MapDelta_ext_r :\n   forall m1 m2 m'2:Map A,\n     eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2).
-----
Lemma MapDelta_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2).

*****
A,B,C : Type
*****
forall (m1 m2 m'2 : Map A) (_ : eqmap m2 m'2), eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2)
+++++
Proof.
-----
Lemma MapDelta_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2).
Proof.

*****
A,B,C : Type
*****
forall (m1 m2 m'2 : Map A) (_ : eqmap m2 m'2), eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2)
+++++
intros.
-----
Lemma MapDelta_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2).
Proof.
intros.

*****
H : eqmap m2 m'2
m1,m2,m'2 : Map A
A,B,C : Type
*****
eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2)
+++++
apply MapDelta_ext.
-----
Lemma MapDelta_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2).
Proof.
intros.
apply MapDelta_ext.

*****
H : eqmap m2 m'2
m1,m2,m'2 : Map A
A,B,C : Type
*****
eqmap m1 m1
+++++
apply eqmap_refl.
-----
Lemma MapDelta_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2).
Proof.
intros.
apply MapDelta_ext.

*****
H : eqmap m2 m'2
m1,m2,m'2 : Map A
A,B,C : Type
*****
eqmap m2 m'2
+++++
assumption.
-----
Lemma MapDelta_ext_r : forall m1 m2 m'2:Map A, eqmap m2 m'2 -> eqmap (MapDelta A m1 m2) (MapDelta A m1 m'2).
Proof.
intros.
apply MapDelta_ext.

*****

*****

+++++
Qed.
-----
Lemma MapDom_Split_1 :\n   forall (m:Map A) (m':Map B),\n     eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m'))
+++++
Proof.
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m'))
+++++
unfold eqmap in |- *.
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqm A (MapGet A m) (MapGet A (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')))
+++++
unfold eqm in |- *.
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (a : ad), eq (MapGet A m a) (MapGet A (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) a)
+++++
intros.
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) a)
+++++
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match MapGet A (MapDomRestrBy A B m m') a with | Some y' => Some y' | None => MapGet A (MapDomRestrTo A B m m') a end
+++++
rewrite (MapDomRestrBy_semantics A B m m' a).
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match match MapGet B m' a with | Some _ => None | None => MapGet A m a end with | Some y' => Some y' | None => MapGet A (MapDomRestrTo A B m m') a end
+++++
rewrite (MapDomRestrTo_semantics A B m m' a).
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match match MapGet B m' a with | Some _ => None | None => MapGet A m a end with | Some y' => Some y' | None => match MapGet B m' a with | Some _ => MapGet A m a | None => None end end
+++++
case (MapGet B m' a).
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq (MapGet A m a) (MapGet A m a)
+++++
case (MapGet A m a).
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall (a : A) (_ : B), eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match MapGet A m a with | Some y' => Some y' | None => None end
+++++
case (MapGet A m a).
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDom_Split_1 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrTo A B m m') ( MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).

*****

*****

+++++
Qed.
-----
Lemma MapDom_Split_2 :\n   forall (m:Map A) (m':Map B),\n     eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m'))
+++++
Proof.
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m'))
+++++
unfold eqmap in |- *.
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqm A (MapGet A m) (MapGet A (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')))
+++++
unfold eqm in |- *.
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (a : ad), eq (MapGet A m a) (MapGet A (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')) a)
+++++
intros.
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')) a)
+++++
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match MapGet A (MapDomRestrTo A B m m') a with | Some y' => Some y' | None => MapGet A (MapDomRestrBy A B m m') a end
+++++
rewrite (MapDomRestrBy_semantics A B m m' a).
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match MapGet A (MapDomRestrTo A B m m') a with | Some y' => Some y' | None => match MapGet B m' a with | Some _ => None | None => MapGet A m a end end
+++++
rewrite (MapDomRestrTo_semantics A B m m' a).
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) match match MapGet B m' a with | Some _ => MapGet A m a | None => None end with | Some y' => Some y' | None => match MapGet B m' a with | Some _ => None | None => MapGet A m a end end
+++++
case (MapGet B m' a).
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq (MapGet A m a) match MapGet A m a with | Some y' => Some y' | None => None end
+++++
case (MapGet A m a).
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall (a : A) (_ : B), eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None None
+++++
trivial.
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A m a) (MapGet A m a)
+++++
case (MapGet A m a).
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall a : A, eq (Some a) (Some a)
+++++
trivial.
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq None None
+++++
trivial.
-----
Lemma MapDom_Split_2 : forall (m:Map A) (m':Map B), eqmap m (MapMerge A (MapDomRestrBy A B m m') (MapDomRestrTo A B m m')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapMerge_semantics A (MapDomRestrBy A B m m') ( MapDomRestrTo A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).

*****

*****

+++++
Qed.
-----
Lemma MapDom_Split_3 :\n   forall (m:Map A) (m':Map B),\n     eqmap\n       (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m'))\n       (M0 A).
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A)
+++++
Proof.
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A)
+++++
unfold eqmap in |- *.
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B), eqm A (MapGet A (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m'))) (MapGet A (M0 A))
+++++
unfold eqm in |- *.
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****
A,B,C : Type
*****
forall (m : Map A) (m' : Map B) (a : ad), eq (MapGet A (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) a) (MapGet A (M0 A) a)
+++++
intros.
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq (MapGet A (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) a) (MapGet A (M0 A) a)
+++++
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet A (MapDomRestrBy A B m m') a with | Some _ => MapGet A (MapDomRestrTo A B m m') a | None => None end (MapGet A (M0 A) a)
+++++
rewrite (MapDomRestrBy_semantics A B m m' a).
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match match MapGet B m' a with | Some _ => None | None => MapGet A m a end with | Some _ => MapGet A (MapDomRestrTo A B m m') a | None => None end (MapGet A (M0 A) a)
+++++
rewrite (MapDomRestrTo_semantics A B m m' a).
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match match MapGet B m' a with | Some _ => None | None => MapGet A m a end with | Some _ => match MapGet B m' a with | Some _ => MapGet A m a | None => None end | None => None end (MapGet A (M0 A) a)
+++++
case (MapGet B m' a).
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None (MapGet A (M0 A) a)
+++++
case (MapGet A m a).
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall (_ : A) (_ : B), eq None (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : B, eq None (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq match MapGet A m a with | Some _ | _ => None end (MapGet A (M0 A) a)
+++++
case (MapGet A m a).
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
forall _ : A, eq None (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).
case (MapGet A m a).

*****
a : ad
m' : Map B
m : Map A
A,B,C : Type
*****
eq None (MapGet A (M0 A) a)
+++++
trivial.
-----
Lemma MapDom_Split_3 : forall (m:Map A) (m':Map B), eqmap (MapDomRestrTo A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m')) (M0 A).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A A (MapDomRestrTo A B m m') (MapDomRestrBy A B m m') a).
rewrite (MapDomRestrBy_semantics A B m m' a).
rewrite (MapDomRestrTo_semantics A B m m' a).
case (MapGet B m' a).

*****

*****

+++++
Qed.
-----
End MapAxioms.
-----
Lemma MapDomRestrTo_ext :\n forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) \n   (m'2:Map B),\n   eqmap A m1 m'1 ->\n   eqmap B m2 m'2 ->\n   eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (m'2 : Map B) (_ : eqmap A m1 m'1) (_ : eqmap B m2 m'2), eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2)
+++++
Proof.
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
Proof.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (m'2 : Map B) (_ : eqmap A m1 m'1) (_ : eqmap B m2 m'2), eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2)
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
Proof.
unfold eqmap in |- *.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (m'2 : Map B) (_ : eqm A (MapGet A m1) (MapGet A m'1)) (_ : eqm B (MapGet B m2) (MapGet B m'2)), eqm A (MapGet A (MapDomRestrTo A B m1 m2)) (MapGet A (MapDomRestrTo A B m'1 m'2))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (m'2 : Map B) (_ : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)) (_ : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)) (a : ad), eq (MapGet A (MapDomRestrTo A B m1 m2) a) (MapGet A (MapDomRestrTo A B m'1 m'2) a)
+++++
intros.
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq (MapGet A (MapDomRestrTo A B m1 m2) a) (MapGet A (MapDomRestrTo A B m'1 m'2) a)
+++++
rewrite (MapDomRestrTo_semantics A B m1 m2 a).
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m1 m2 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq match MapGet B m2 a with | Some _ => MapGet A m1 a | None => None end (MapGet A (MapDomRestrTo A B m'1 m'2) a)
+++++
rewrite (MapDomRestrTo_semantics A B m'1 m'2 a).
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m1 m2 a).
rewrite (MapDomRestrTo_semantics A B m'1 m'2 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq match MapGet B m2 a with | Some _ => MapGet A m1 a | None => None end match MapGet B m'2 a with | Some _ => MapGet A m'1 a | None => None end
+++++
rewrite (H a).
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m1 m2 a).
rewrite (MapDomRestrTo_semantics A B m'1 m'2 a).
rewrite (H a).

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq match MapGet B m2 a with | Some _ => MapGet A m'1 a | None => None end match MapGet B m'2 a with | Some _ => MapGet A m'1 a | None => None end
+++++
rewrite (H0 a).
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m1 m2 a).
rewrite (MapDomRestrTo_semantics A B m'1 m'2 a).
rewrite (H a).
rewrite (H0 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq match MapGet B m'2 a with | Some _ => MapGet A m'1 a | None => None end match MapGet B m'2 a with | Some _ => MapGet A m'1 a | None => None end
+++++
reflexivity.
-----
Lemma MapDomRestrTo_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrTo_semantics A B m1 m2 a).
rewrite (MapDomRestrTo_semantics A B m'1 m'2 a).
rewrite (H a).
rewrite (H0 a).
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_ext_l :\n forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A),\n   eqmap A m1 m'1 ->\n   eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2).
-----
Lemma MapDomRestrTo_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2).

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (_ : eqmap A m1 m'1), eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2)
+++++
Proof.
-----
Lemma MapDomRestrTo_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2).
Proof.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (_ : eqmap A m1 m'1), eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2)
+++++
intros.
-----
Lemma MapDomRestrTo_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2).
Proof.
intros.

*****
H : eqmap A m1 m'1
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2)
+++++
apply MapDomRestrTo_ext.
-----
Lemma MapDomRestrTo_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2).
Proof.
intros.
apply MapDomRestrTo_ext.

*****
H : eqmap A m1 m'1
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap A m1 m'1
+++++
assumption.
-----
Lemma MapDomRestrTo_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2).
Proof.
intros.
apply MapDomRestrTo_ext.

*****
H : eqmap A m1 m'1
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap B m2 m2
+++++
apply eqmap_refl.
-----
Lemma MapDomRestrTo_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m'1 m2).
Proof.
intros.
apply MapDomRestrTo_ext.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrTo_ext_r :\n forall (A B:Type) (m1:Map A) (m2 m'2:Map B),\n   eqmap B m2 m'2 ->\n   eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2).
-----
Lemma MapDomRestrTo_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2).

*****

*****
forall (A B : Type) (m1 : Map A) (m2 m'2 : Map B) (_ : eqmap B m2 m'2), eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2)
+++++
Proof.
-----
Lemma MapDomRestrTo_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2).
Proof.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 m'2 : Map B) (_ : eqmap B m2 m'2), eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2)
+++++
intros.
-----
Lemma MapDomRestrTo_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2).
Proof.
intros.

*****
H : eqmap B m2 m'2
m2,m'2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2)
+++++
apply MapDomRestrTo_ext.
-----
Lemma MapDomRestrTo_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2).
Proof.
intros.
apply MapDomRestrTo_ext.

*****
H : eqmap B m2 m'2
m2,m'2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap A m1 m1
+++++
apply eqmap_refl.
-----
Lemma MapDomRestrTo_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2).
Proof.
intros.
apply MapDomRestrTo_ext.

*****
H : eqmap B m2 m'2
m2,m'2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap B m2 m'2
+++++
assumption.
-----
Lemma MapDomRestrTo_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrTo A B m1 m2) (MapDomRestrTo A B m1 m'2).
Proof.
intros.
apply MapDomRestrTo_ext.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_ext :\n forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) \n   (m'2:Map B),\n   eqmap A m1 m'1 ->\n   eqmap B m2 m'2 ->\n   eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (m'2 : Map B) (_ : eqmap A m1 m'1) (_ : eqmap B m2 m'2), eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2)
+++++
Proof.
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
Proof.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (m'2 : Map B) (_ : eqmap A m1 m'1) (_ : eqmap B m2 m'2), eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2)
+++++
unfold eqmap in |- *.
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
Proof.
unfold eqmap in |- *.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (m'2 : Map B) (_ : eqm A (MapGet A m1) (MapGet A m'1)) (_ : eqm B (MapGet B m2) (MapGet B m'2)), eqm A (MapGet A (MapDomRestrBy A B m1 m2)) (MapGet A (MapDomRestrBy A B m'1 m'2))
+++++
unfold eqm in |- *.
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (m'2 : Map B) (_ : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)) (_ : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)) (a : ad), eq (MapGet A (MapDomRestrBy A B m1 m2) a) (MapGet A (MapDomRestrBy A B m'1 m'2) a)
+++++
intros.
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq (MapGet A (MapDomRestrBy A B m1 m2) a) (MapGet A (MapDomRestrBy A B m'1 m'2) a)
+++++
rewrite (MapDomRestrBy_semantics A B m1 m2 a).
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m1 m2 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq match MapGet B m2 a with | Some _ => None | None => MapGet A m1 a end (MapGet A (MapDomRestrBy A B m'1 m'2) a)
+++++
rewrite (MapDomRestrBy_semantics A B m'1 m'2 a).
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m1 m2 a).
rewrite (MapDomRestrBy_semantics A B m'1 m'2 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq match MapGet B m2 a with | Some _ => None | None => MapGet A m1 a end match MapGet B m'2 a with | Some _ => None | None => MapGet A m'1 a end
+++++
rewrite (H a).
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m1 m2 a).
rewrite (MapDomRestrBy_semantics A B m'1 m'2 a).
rewrite (H a).

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq match MapGet B m2 a with | Some _ => None | None => MapGet A m'1 a end match MapGet B m'2 a with | Some _ => None | None => MapGet A m'1 a end
+++++
rewrite (H0 a).
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m1 m2 a).
rewrite (MapDomRestrBy_semantics A B m'1 m'2 a).
rewrite (H a).
rewrite (H0 a).

*****
a : ad
H0 : forall a : ad, eq (MapGet B m2 a) (MapGet B m'2 a)
H : forall a : ad, eq (MapGet A m1 a) (MapGet A m'1 a)
m'2 : Map B
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eq match MapGet B m'2 a with | Some _ => None | None => MapGet A m'1 a end match MapGet B m'2 a with | Some _ => None | None => MapGet A m'1 a end
+++++
reflexivity.
-----
Lemma MapDomRestrBy_ext : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A) (m'2:Map B), eqmap A m1 m'1 -> eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m'2).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDomRestrBy_semantics A B m1 m2 a).
rewrite (MapDomRestrBy_semantics A B m'1 m'2 a).
rewrite (H a).
rewrite (H0 a).
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_ext_l :\n forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A),\n   eqmap A m1 m'1 ->\n   eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2).
-----
Lemma MapDomRestrBy_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2).

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (_ : eqmap A m1 m'1), eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2)
+++++
Proof.
-----
Lemma MapDomRestrBy_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2).
Proof.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 : Map B) (m'1 : Map A) (_ : eqmap A m1 m'1), eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2)
+++++
intros.
-----
Lemma MapDomRestrBy_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2).
Proof.
intros.

*****
H : eqmap A m1 m'1
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2)
+++++
apply MapDomRestrBy_ext.
-----
Lemma MapDomRestrBy_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2).
Proof.
intros.
apply MapDomRestrBy_ext.

*****
H : eqmap A m1 m'1
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap A m1 m'1
+++++
assumption.
-----
Lemma MapDomRestrBy_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2).
Proof.
intros.
apply MapDomRestrBy_ext.

*****
H : eqmap A m1 m'1
m'1 : Map A
m2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap B m2 m2
+++++
apply eqmap_refl.
-----
Lemma MapDomRestrBy_ext_l : forall (A B:Type) (m1:Map A) (m2:Map B) (m'1:Map A), eqmap A m1 m'1 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m'1 m2).
Proof.
intros.
apply MapDomRestrBy_ext.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_ext_r :\n forall (A B:Type) (m1:Map A) (m2 m'2:Map B),\n   eqmap B m2 m'2 ->\n   eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2).
-----
Lemma MapDomRestrBy_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2).

*****

*****
forall (A B : Type) (m1 : Map A) (m2 m'2 : Map B) (_ : eqmap B m2 m'2), eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2)
+++++
Proof.
-----
Lemma MapDomRestrBy_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2).
Proof.

*****

*****
forall (A B : Type) (m1 : Map A) (m2 m'2 : Map B) (_ : eqmap B m2 m'2), eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2)
+++++
intros.
-----
Lemma MapDomRestrBy_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2).
Proof.
intros.

*****
H : eqmap B m2 m'2
m2,m'2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2)
+++++
apply MapDomRestrBy_ext.
-----
Lemma MapDomRestrBy_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2).
Proof.
intros.
apply MapDomRestrBy_ext.

*****
H : eqmap B m2 m'2
m2,m'2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap A m1 m1
+++++
apply eqmap_refl.
-----
Lemma MapDomRestrBy_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2).
Proof.
intros.
apply MapDomRestrBy_ext.

*****
H : eqmap B m2 m'2
m2,m'2 : Map B
m1 : Map A
B : Type
A : Type
*****
eqmap B m2 m'2
+++++
assumption.
-----
Lemma MapDomRestrBy_ext_r : forall (A B:Type) (m1:Map A) (m2 m'2:Map B), eqmap B m2 m'2 -> eqmap A (MapDomRestrBy A B m1 m2) (MapDomRestrBy A B m1 m'2).
Proof.
intros.
apply MapDomRestrBy_ext.

*****

*****

+++++
Qed.
-----
Lemma MapDomRestrBy_m_m :\n forall (A:Type) (m:Map A),\n   eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A).
-----
Lemma MapDomRestrBy_m_m : forall (A:Type) (m:Map A), eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A).

*****

*****
forall (A : Type) (m : Map A), eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A)
+++++
Proof.
-----
Lemma MapDomRestrBy_m_m : forall (A:Type) (m:Map A), eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A).
Proof.

*****

*****
forall (A : Type) (m : Map A), eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A)
+++++
intros.
-----
Lemma MapDomRestrBy_m_m : forall (A:Type) (m:Map A), eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A).
Proof.
intros.

*****
m : Map A
A : Type
*****
eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A)
+++++
apply eqmap_trans with (m' := MapDomRestrBy A A m m).
-----
Lemma MapDomRestrBy_m_m : forall (A:Type) (m:Map A), eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A).
Proof.
intros.
apply eqmap_trans with (m' := MapDomRestrBy A A m m).

*****
m : Map A
A : Type
*****
eqmap A (MapDomRestrBy A unit m (MapDom A m)) (MapDomRestrBy A A m m)
+++++
apply eqmap_sym.
-----
Lemma MapDomRestrBy_m_m : forall (A:Type) (m:Map A), eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A).
Proof.
intros.
apply eqmap_trans with (m' := MapDomRestrBy A A m m).
apply eqmap_sym.

*****
m : Map A
A : Type
*****
eqmap A (MapDomRestrBy A A m m) (MapDomRestrBy A unit m (MapDom A m))
+++++
apply MapDomRestrBy_Dom.
-----
Lemma MapDomRestrBy_m_m : forall (A:Type) (m:Map A), eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A).
Proof.
intros.
apply eqmap_trans with (m' := MapDomRestrBy A A m m).

*****
m : Map A
A : Type
*****
eqmap A (MapDomRestrBy A A m m) (M0 A)
+++++
apply MapDomRestrBy_m_m_1.
-----
Lemma MapDomRestrBy_m_m : forall (A:Type) (m:Map A), eqmap A (MapDomRestrBy A unit m (MapDom A m)) (M0 A).
Proof.
intros.
apply eqmap_trans with (m' := MapDomRestrBy A A m m).

*****

*****

+++++
Qed.
-----
Lemma FSetDelta_assoc :\n forall s s' s'':FSet,\n   eqmap unit (MapDelta _ (MapDelta _ s s') s'')\n     (MapDelta _ s (MapDelta _ s' s'')).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).

*****

*****
forall s s' s'' : FSet, eqmap unit (MapDelta unit (MapDelta unit s s') s'') (MapDelta unit s (MapDelta unit s' s''))
+++++
Proof.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.

*****

*****
forall s s' s'' : FSet, eqmap unit (MapDelta unit (MapDelta unit s s') s'') (MapDelta unit s (MapDelta unit s' s''))
+++++
unfold eqmap in |- *.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.

*****

*****
forall s s' s'' : FSet, eqm unit (MapGet unit (MapDelta unit (MapDelta unit s s') s'')) (MapGet unit (MapDelta unit s (MapDelta unit s' s'')))
+++++
unfold eqm in |- *.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.

*****

*****
forall (s s' s'' : FSet) (a : ad), eq (MapGet unit (MapDelta unit (MapDelta unit s s') s'') a) (MapGet unit (MapDelta unit s (MapDelta unit s' s'')) a)
+++++
intros.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
s,s',s'' : FSet
*****
eq (MapGet unit (MapDelta unit (MapDelta unit s s') s'') a) (MapGet unit (MapDelta unit s (MapDelta unit s' s'')) a)
+++++
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).

*****
a : ad
s,s',s'' : FSet
*****
eq match MapGet unit (MapDelta unit s s') a with | Some y => match MapGet unit s'' a with | Some _ => None | None => Some y end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end (MapGet unit (MapDelta unit s (MapDelta unit s' s'')) a)
+++++
rewrite (MapDelta_semantics unit s s' a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).

*****
a : ad
s,s',s'' : FSet
*****
eq match match MapGet unit s a with | Some y => match MapGet unit s' a with | Some _ => None | None => Some y end | None => match MapGet unit s' a with | Some y' => Some y' | None => None end end with | Some y => match MapGet unit s'' a with | Some _ => None | None => Some y end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end (MapGet unit (MapDelta unit s (MapDelta unit s' s'')) a)
+++++
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).

*****
a : ad
s,s',s'' : FSet
*****
eq match match MapGet unit s a with | Some y => match MapGet unit s' a with | Some _ => None | None => Some y end | None => match MapGet unit s' a with | Some y' => Some y' | None => None end end with | Some y => match MapGet unit s'' a with | Some _ => None | None => Some y end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end match MapGet unit s a with | Some y => match MapGet unit (MapDelta unit s' s'') a with | Some _ => None | None => Some y end | None => match MapGet unit (MapDelta unit s' s'') a with | Some y' => Some y' | None => None end end
+++++
rewrite (MapDelta_semantics unit s' s'' a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).

*****
a : ad
s,s',s'' : FSet
*****
eq match match MapGet unit s a with | Some y => match MapGet unit s' a with | Some _ => None | None => Some y end | None => match MapGet unit s' a with | Some y' => Some y' | None => None end end with | Some y => match MapGet unit s'' a with | Some _ => None | None => Some y end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end match MapGet unit s a with | Some y => match match MapGet unit s' a with | Some y0 => match MapGet unit s'' a with | Some _ => None | None => Some y0 end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end with | Some _ => None | None => Some y end | None => match match MapGet unit s' a with | Some y => match MapGet unit s'' a with | Some _ => None | None => Some y end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end with | Some y' => Some y' | None => None end end
+++++
case (MapGet _ s a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).

*****
a : ad
s,s',s'' : FSet
*****
forall u : unit, eq match match MapGet unit s' a with | Some _ => None | None => Some u end with | Some y => match MapGet unit s'' a with | Some _ => None | None => Some y end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end match match MapGet unit s' a with | Some y => match MapGet unit s'' a with | Some _ => None | None => Some y end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end with | Some _ => None | None => Some u end
+++++
case (MapGet _ s' a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).

*****
a : ad
s,s',s'' : FSet
*****
forall u u0 : unit, eq match MapGet unit s'' a with | Some y' => Some y' | None => None end match match MapGet unit s'' a with | Some _ => None | None => Some u end with | Some _ => None | None => Some u0 end
+++++
case (MapGet _ s'' a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).

*****
a : ad
s,s',s'' : FSet
*****
forall (u _ : unit) (u1 : unit), eq (Some u) (Some u1)
+++++
trivial.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).
trivial.

*****
a : ad
s,s',s'' : FSet
*****
forall (u _ : unit) (u1 : unit), eq (Some u) (Some u1)
+++++
intros.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).
trivial.
intros.

*****
u,u0,u1 : unit
a : ad
s,s',s'' : FSet
*****
eq (Some u) (Some u1)
+++++
elim u.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).
trivial.
intros.
elim u.

*****
u,u0,u1 : unit
a : ad
s,s',s'' : FSet
*****
eq (Some tt) (Some u1)
+++++
elim u1.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).
trivial.
intros.
elim u.
elim u1.

*****
u,u0,u1 : unit
a : ad
s,s',s'' : FSet
*****
eq (Some tt) (Some tt)
+++++
reflexivity.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).

*****
a : ad
s,s',s'' : FSet
*****
forall (_ : unit) (_ : unit), eq None None
+++++
trivial.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).

*****
a : ad
s,s',s'' : FSet
*****
forall u : unit, eq match MapGet unit s'' a with | Some _ => None | None => Some u end match match MapGet unit s'' a with | Some y' => Some y' | None => None end with | Some _ => None | None => Some u end
+++++
case (MapGet _ s'' a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).

*****
a : ad
s,s',s'' : FSet
*****
forall (_ : unit) (_ : unit), eq None None
+++++
trivial.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).

*****
a : ad
s,s',s'' : FSet
*****
forall u : unit, eq (Some u) (Some u)
+++++
trivial.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).

*****
a : ad
s,s',s'' : FSet
*****
eq match match MapGet unit s' a with | Some y' => Some y' | None => None end with | Some y => match MapGet unit s'' a with | Some _ => None | None => Some y end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end match match MapGet unit s' a with | Some y => match MapGet unit s'' a with | Some _ => None | None => Some y end | None => match MapGet unit s'' a with | Some y' => Some y' | None => None end end with | Some y' => Some y' | None => None end
+++++
case (MapGet _ s' a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).

*****
a : ad
s,s',s'' : FSet
*****
forall u : unit, eq match MapGet unit s'' a with | Some _ => None | None => Some u end match match MapGet unit s'' a with | Some _ => None | None => Some u end with | Some y' => Some y' | None => None end
+++++
case (MapGet _ s'' a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).

*****
a : ad
s,s',s'' : FSet
*****
forall (_ : unit) (_ : unit), eq None None
+++++
trivial.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).

*****
a : ad
s,s',s'' : FSet
*****
forall u : unit, eq (Some u) (Some u)
+++++
trivial.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).

*****
a : ad
s,s',s'' : FSet
*****
eq match MapGet unit s'' a with | Some y' => Some y' | None => None end match match MapGet unit s'' a with | Some y' => Some y' | None => None end with | Some y' => Some y' | None => None end
+++++
case (MapGet _ s'' a).
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).

*****
a : ad
s,s',s'' : FSet
*****
forall u : unit, eq (Some u) (Some u)
+++++
trivial.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).
case (MapGet _ s' a).
case (MapGet _ s'' a).

*****
a : ad
s,s',s'' : FSet
*****
eq None None
+++++
trivial.
-----
Lemma FSetDelta_assoc : forall s s' s'':FSet, eqmap unit (MapDelta _ (MapDelta _ s s') s'') (MapDelta _ s (MapDelta _ s' s'')).
Proof.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
rewrite (MapDelta_semantics unit (MapDelta unit s s') s'' a).
rewrite (MapDelta_semantics unit s s' a).
rewrite (MapDelta_semantics unit s (MapDelta unit s' s'') a).
rewrite (MapDelta_semantics unit s' s'' a).
case (MapGet _ s a).

*****

*****

+++++
Qed.
-----
Lemma FSet_ext :\n forall s s':FSet,\n   (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.

*****

*****
forall (s s' : FSet) (_ : forall a : ad, eq (in_FSet a s) (in_FSet a s')), eqmap unit s s'
+++++
Proof.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.

*****

*****
forall (s s' : FSet) (_ : forall a : ad, eq (in_FSet a s) (in_FSet a s')), eqmap unit s s'
+++++
unfold in_FSet.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.

*****

*****
forall (s s' : FSet) (_ : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')), eqmap unit s s'
+++++
unfold eqmap in |- *.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.

*****

*****
forall (s s' : FSet) (_ : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')), eqm unit (MapGet unit s) (MapGet unit s')
+++++
unfold eqm in |- *.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.

*****

*****
forall (s s' : FSet) (_ : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')) (a : ad), eq (MapGet unit s a) (MapGet unit s' a)
+++++
intros.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.

*****
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (MapGet unit s a) (MapGet unit s' a)
+++++
elim (sumbool_of_bool (in_dom _ a s)).
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).

*****
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
forall _ : eq (in_dom unit a s) true, eq (MapGet unit s a) (MapGet unit s' a)
+++++
intro H0.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.

*****
H0 : eq (in_dom unit a s) true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (MapGet unit s a) (MapGet unit s' a)
+++++
elim (in_dom_some _ s a H0).
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
elim (in_dom_some _ s a H0).

*****
H0 : eq (in_dom unit a s) true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
forall (x : unit) (_ : eq (MapGet unit s a) (Some x)), eq (MapGet unit s a) (MapGet unit s' a)
+++++
intros y H1.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
elim (in_dom_some _ s a H0).
intros y H1.

*****
H1 : eq (MapGet unit s a) (Some y)
y : unit
H0 : eq (in_dom unit a s) true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (MapGet unit s a) (MapGet unit s' a)
+++++
rewrite (H a) in H0.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
elim (in_dom_some _ s a H0).
intros y H1.
rewrite (H a) in H0.

*****
H1 : eq (MapGet unit s a) (Some y)
y : unit
H0 : eq (in_dom unit a s') true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (MapGet unit s a) (MapGet unit s' a)
+++++
elim (in_dom_some _ s' a H0).
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
elim (in_dom_some _ s a H0).
intros y H1.
rewrite (H a) in H0.
elim (in_dom_some _ s' a H0).

*****
H1 : eq (MapGet unit s a) (Some y)
y : unit
H0 : eq (in_dom unit a s') true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
forall (x : unit) (_ : eq (MapGet unit s' a) (Some x)), eq (MapGet unit s a) (MapGet unit s' a)
+++++
intros y' H2.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
elim (in_dom_some _ s a H0).
intros y H1.
rewrite (H a) in H0.
elim (in_dom_some _ s' a H0).
intros y' H2.

*****
H2 : eq (MapGet unit s' a) (Some y')
y' : unit
H1 : eq (MapGet unit s a) (Some y)
y : unit
H0 : eq (in_dom unit a s') true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (MapGet unit s a) (MapGet unit s' a)
+++++
rewrite H1.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
elim (in_dom_some _ s a H0).
intros y H1.
rewrite (H a) in H0.
elim (in_dom_some _ s' a H0).
intros y' H2.
rewrite H1.

*****
H2 : eq (MapGet unit s' a) (Some y')
y' : unit
H1 : eq (MapGet unit s a) (Some y)
y : unit
H0 : eq (in_dom unit a s') true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (Some y) (MapGet unit s' a)
+++++
rewrite H2.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
elim (in_dom_some _ s a H0).
intros y H1.
rewrite (H a) in H0.
elim (in_dom_some _ s' a H0).
intros y' H2.
rewrite H1.
rewrite H2.

*****
H2 : eq (MapGet unit s' a) (Some y')
y' : unit
H1 : eq (MapGet unit s a) (Some y)
y : unit
H0 : eq (in_dom unit a s') true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (Some y) (Some y')
+++++
elim y.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
elim (in_dom_some _ s a H0).
intros y H1.
rewrite (H a) in H0.
elim (in_dom_some _ s' a H0).
intros y' H2.
rewrite H1.
rewrite H2.
elim y.

*****
H2 : eq (MapGet unit s' a) (Some y')
y' : unit
H1 : eq (MapGet unit s a) (Some y)
y : unit
H0 : eq (in_dom unit a s') true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (Some tt) (Some y')
+++++
elim y'.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
elim (in_dom_some _ s a H0).
intros y H1.
rewrite (H a) in H0.
elim (in_dom_some _ s' a H0).
intros y' H2.
rewrite H1.
rewrite H2.
elim y.
elim y'.

*****
H2 : eq (MapGet unit s' a) (Some y')
y' : unit
H1 : eq (MapGet unit s a) (Some y)
y : unit
H0 : eq (in_dom unit a s') true
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (Some tt) (Some tt)
+++++
reflexivity.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).

*****
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
forall _ : eq (in_dom unit a s) false, eq (MapGet unit s a) (MapGet unit s' a)
+++++
intro H0.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.

*****
H0 : eq (in_dom unit a s) false
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq (MapGet unit s a) (MapGet unit s' a)
+++++
rewrite (in_dom_none _ s a H0).
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
rewrite (in_dom_none _ s a H0).

*****
H0 : eq (in_dom unit a s) false
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq None (MapGet unit s' a)
+++++
rewrite (H a) in H0.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
rewrite (in_dom_none _ s a H0).
rewrite (H a) in H0.

*****
H0 : eq (in_dom unit a s') false
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq None (MapGet unit s' a)
+++++
rewrite (in_dom_none _ s' a H0).
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).
intro H0.
rewrite (in_dom_none _ s a H0).
rewrite (H a) in H0.
rewrite (in_dom_none _ s' a H0).

*****
H0 : eq (in_dom unit a s') false
a : ad
H : forall a : ad, eq (in_dom unit a s) (in_dom unit a s')
s,s' : FSet
*****
eq None None
+++++
reflexivity.
-----
Lemma FSet_ext : forall s s':FSet, (forall a:ad, in_FSet a s = in_FSet a s') -> eqmap unit s s'.
Proof.
unfold in_FSet.
unfold eqmap in |- *.
unfold eqm in |- *.
intros.
elim (sumbool_of_bool (in_dom _ a s)).

*****

*****

+++++
Qed.
-----
Lemma FSetUnion_comm :\n forall s s':FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s).
-----
Lemma FSetUnion_comm : forall s s':FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s).

*****

*****
forall s s' : FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s)
+++++
Proof.
-----
Lemma FSetUnion_comm : forall s s':FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s).
Proof.

*****

*****
forall s s' : FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s)
+++++
intros.
-----
Lemma FSetUnion_comm : forall s s':FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s).
Proof.
intros.

*****
s,s' : FSet
*****
eqmap unit (FSetUnion s s') (FSetUnion s' s)
+++++
apply FSet_ext.
-----
Lemma FSetUnion_comm : forall s s':FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s).
Proof.
intros.
apply FSet_ext.

*****
s,s' : FSet
*****
forall a : ad, eq (in_FSet a (FSetUnion s s')) (in_FSet a (FSetUnion s' s))
+++++
intro.
-----
Lemma FSetUnion_comm : forall s s':FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s).
Proof.
intros.
apply FSet_ext.
intro.

*****
a : ad
s,s' : FSet
*****
eq (in_FSet a (FSetUnion s s')) (in_FSet a (FSetUnion s' s))
+++++
rewrite in_FSet_union.
-----
Lemma FSetUnion_comm : forall s s':FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.

*****
a : ad
s,s' : FSet
*****
eq (orb (in_FSet a s) (in_FSet a s')) (in_FSet a (FSetUnion s' s))
+++++
rewrite in_FSet_union.
-----
Lemma FSetUnion_comm : forall s s':FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_union.

*****
a : ad
s,s' : FSet
*****
eq (orb (in_FSet a s) (in_FSet a s')) (orb (in_FSet a s') (in_FSet a s))
+++++
apply orb_comm.
-----
Lemma FSetUnion_comm : forall s s':FSet, eqmap unit (FSetUnion s s') (FSetUnion s' s).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_union.
apply orb_comm.

*****

*****

+++++
Qed.
-----
Lemma FSetUnion_assoc :\n forall s s' s'':FSet,\n   eqmap unit (FSetUnion (FSetUnion s s') s'')\n     (FSetUnion s (FSetUnion s' s'')).
-----
Lemma FSetUnion_assoc : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetUnion s s') s'') (FSetUnion s (FSetUnion s' s'')).

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetUnion (FSetUnion s s') s'') (FSetUnion s (FSetUnion s' s''))
+++++
Proof.
-----
Lemma FSetUnion_assoc : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetUnion s s') s'') (FSetUnion s (FSetUnion s' s'')).
Proof.

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetUnion (FSetUnion s s') s'') (FSetUnion s (FSetUnion s' s''))
+++++
exact (MapMerge_assoc unit).
-----
Lemma FSetUnion_assoc : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetUnion s s') s'') (FSetUnion s (FSetUnion s' s'')).
Proof.
exact (MapMerge_assoc unit).

*****

*****

+++++
Qed.
-----
Lemma FSetUnion_M0_s : forall s:FSet, eqmap unit (FSetUnion (M0 unit) s) s.
-----
Lemma FSetUnion_M0_s : forall s:FSet, eqmap unit (FSetUnion (M0 unit) s) s.

*****

*****
forall s : FSet, eqmap unit (FSetUnion (M0 unit) s) s
+++++
Proof.
-----
Lemma FSetUnion_M0_s : forall s:FSet, eqmap unit (FSetUnion (M0 unit) s) s.
Proof.

*****

*****
forall s : FSet, eqmap unit (FSetUnion (M0 unit) s) s
+++++
exact (MapMerge_empty_m unit).
-----
Lemma FSetUnion_M0_s : forall s:FSet, eqmap unit (FSetUnion (M0 unit) s) s.
Proof.
exact (MapMerge_empty_m unit).

*****

*****

+++++
Qed.
-----
Lemma FSetUnion_s_M0 : forall s:FSet, eqmap unit (FSetUnion s (M0 unit)) s.
-----
Lemma FSetUnion_s_M0 : forall s:FSet, eqmap unit (FSetUnion s (M0 unit)) s.

*****

*****
forall s : FSet, eqmap unit (FSetUnion s (M0 unit)) s
+++++
Proof.
-----
Lemma FSetUnion_s_M0 : forall s:FSet, eqmap unit (FSetUnion s (M0 unit)) s.
Proof.

*****

*****
forall s : FSet, eqmap unit (FSetUnion s (M0 unit)) s
+++++
exact (MapMerge_m_empty unit).
-----
Lemma FSetUnion_s_M0 : forall s:FSet, eqmap unit (FSetUnion s (M0 unit)) s.
Proof.
exact (MapMerge_m_empty unit).

*****

*****

+++++
Qed.
-----
Lemma FSetUnion_idempotent : forall s:FSet, eqmap unit (FSetUnion s s) s.
-----
Lemma FSetUnion_idempotent : forall s:FSet, eqmap unit (FSetUnion s s) s.

*****

*****
forall s : FSet, eqmap unit (FSetUnion s s) s
+++++
Proof.
-----
Lemma FSetUnion_idempotent : forall s:FSet, eqmap unit (FSetUnion s s) s.
Proof.

*****

*****
forall s : FSet, eqmap unit (FSetUnion s s) s
+++++
exact (MapMerge_idempotent unit).
-----
Lemma FSetUnion_idempotent : forall s:FSet, eqmap unit (FSetUnion s s) s.
Proof.
exact (MapMerge_idempotent unit).

*****

*****

+++++
Qed.
-----
Lemma FSetInter_comm :\n forall s s':FSet, eqmap unit (FSetInter s s') (FSetInter s' s).
-----
Lemma FSetInter_comm : forall s s':FSet, eqmap unit (FSetInter s s') (FSetInter s' s).

*****

*****
forall s s' : FSet, eqmap unit (FSetInter s s') (FSetInter s' s)
+++++
Proof.
-----
Lemma FSetInter_comm : forall s s':FSet, eqmap unit (FSetInter s s') (FSetInter s' s).
Proof.

*****

*****
forall s s' : FSet, eqmap unit (FSetInter s s') (FSetInter s' s)
+++++
intros.
-----
Lemma FSetInter_comm : forall s s':FSet, eqmap unit (FSetInter s s') (FSetInter s' s).
Proof.
intros.

*****
s,s' : FSet
*****
eqmap unit (FSetInter s s') (FSetInter s' s)
+++++
apply FSet_ext.
-----
Lemma FSetInter_comm : forall s s':FSet, eqmap unit (FSetInter s s') (FSetInter s' s).
Proof.
intros.
apply FSet_ext.

*****
s,s' : FSet
*****
forall a : ad, eq (in_FSet a (FSetInter s s')) (in_FSet a (FSetInter s' s))
+++++
intro.
-----
Lemma FSetInter_comm : forall s s':FSet, eqmap unit (FSetInter s s') (FSetInter s' s).
Proof.
intros.
apply FSet_ext.
intro.

*****
a : ad
s,s' : FSet
*****
eq (in_FSet a (FSetInter s s')) (in_FSet a (FSetInter s' s))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetInter_comm : forall s s':FSet, eqmap unit (FSetInter s s') (FSetInter s' s).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.

*****
a : ad
s,s' : FSet
*****
eq (andb (in_FSet a s) (in_FSet a s')) (in_FSet a (FSetInter s' s))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetInter_comm : forall s s':FSet, eqmap unit (FSetInter s s') (FSetInter s' s).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_inter.

*****
a : ad
s,s' : FSet
*****
eq (andb (in_FSet a s) (in_FSet a s')) (andb (in_FSet a s') (in_FSet a s))
+++++
apply andb_comm.
-----
Lemma FSetInter_comm : forall s s':FSet, eqmap unit (FSetInter s s') (FSetInter s' s).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
apply andb_comm.

*****

*****

+++++
Qed.
-----
Lemma FSetInter_assoc :\n forall s s' s'':FSet,\n   eqmap unit (FSetInter (FSetInter s s') s'')\n     (FSetInter s (FSetInter s' s'')).
-----
Lemma FSetInter_assoc : forall s s' s'':FSet, eqmap unit (FSetInter (FSetInter s s') s'') (FSetInter s (FSetInter s' s'')).

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetInter (FSetInter s s') s'') (FSetInter s (FSetInter s' s''))
+++++
Proof.
-----
Lemma FSetInter_assoc : forall s s' s'':FSet, eqmap unit (FSetInter (FSetInter s s') s'') (FSetInter s (FSetInter s' s'')).
Proof.

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetInter (FSetInter s s') s'') (FSetInter s (FSetInter s' s''))
+++++
exact (MapDomRestrTo_assoc unit unit unit).
-----
Lemma FSetInter_assoc : forall s s' s'':FSet, eqmap unit (FSetInter (FSetInter s s') s'') (FSetInter s (FSetInter s' s'')).
Proof.
exact (MapDomRestrTo_assoc unit unit unit).

*****

*****

+++++
Qed.
-----
Lemma FSetInter_M0_s :\n forall s:FSet, eqmap unit (FSetInter (M0 unit) s) (M0 unit).
-----
Lemma FSetInter_M0_s : forall s:FSet, eqmap unit (FSetInter (M0 unit) s) (M0 unit).

*****

*****
forall s : FSet, eqmap unit (FSetInter (M0 unit) s) (M0 unit)
+++++
Proof.
-----
Lemma FSetInter_M0_s : forall s:FSet, eqmap unit (FSetInter (M0 unit) s) (M0 unit).
Proof.

*****

*****
forall s : FSet, eqmap unit (FSetInter (M0 unit) s) (M0 unit)
+++++
exact (MapDomRestrTo_empty_m unit unit).
-----
Lemma FSetInter_M0_s : forall s:FSet, eqmap unit (FSetInter (M0 unit) s) (M0 unit).
Proof.
exact (MapDomRestrTo_empty_m unit unit).

*****

*****

+++++
Qed.
-----
Lemma FSetInter_s_M0 :\n forall s:FSet, eqmap unit (FSetInter s (M0 unit)) (M0 unit).
-----
Lemma FSetInter_s_M0 : forall s:FSet, eqmap unit (FSetInter s (M0 unit)) (M0 unit).

*****

*****
forall s : FSet, eqmap unit (FSetInter s (M0 unit)) (M0 unit)
+++++
Proof.
-----
Lemma FSetInter_s_M0 : forall s:FSet, eqmap unit (FSetInter s (M0 unit)) (M0 unit).
Proof.

*****

*****
forall s : FSet, eqmap unit (FSetInter s (M0 unit)) (M0 unit)
+++++
exact (MapDomRestrTo_m_empty unit unit).
-----
Lemma FSetInter_s_M0 : forall s:FSet, eqmap unit (FSetInter s (M0 unit)) (M0 unit).
Proof.
exact (MapDomRestrTo_m_empty unit unit).

*****

*****

+++++
Qed.
-----
Lemma FSetInter_idempotent : forall s:FSet, eqmap unit (FSetInter s s) s.
-----
Lemma FSetInter_idempotent : forall s:FSet, eqmap unit (FSetInter s s) s.

*****

*****
forall s : FSet, eqmap unit (FSetInter s s) s
+++++
Proof.
-----
Lemma FSetInter_idempotent : forall s:FSet, eqmap unit (FSetInter s s) s.
Proof.

*****

*****
forall s : FSet, eqmap unit (FSetInter s s) s
+++++
exact (MapDomRestrTo_idempotent unit).
-----
Lemma FSetInter_idempotent : forall s:FSet, eqmap unit (FSetInter s s) s.
Proof.
exact (MapDomRestrTo_idempotent unit).

*****

*****

+++++
Qed.
-----
Lemma FSetUnion_Inter_l :\n forall s s' s'':FSet,\n   eqmap unit (FSetUnion (FSetInter s s') s'')\n     (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s''))
+++++
Proof.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s''))
+++++
intros.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.

*****
s,s',s'' : FSet
*****
eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s''))
+++++
apply FSet_ext.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.

*****
s,s',s'' : FSet
*****
forall a : ad, eq (in_FSet a (FSetUnion (FSetInter s s') s'')) (in_FSet a (FSetInter (FSetUnion s s'') (FSetUnion s' s'')))
+++++
intro.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.

*****
a : ad
s,s',s'' : FSet
*****
eq (in_FSet a (FSetUnion (FSetInter s s') s'')) (in_FSet a (FSetInter (FSetUnion s s'') (FSetUnion s' s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (in_FSet a (FSetInter s s')) (in_FSet a s'')) (in_FSet a (FSetInter (FSetUnion s s'') (FSetUnion s' s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb (in_FSet a s) (in_FSet a s')) (in_FSet a s'')) (in_FSet a (FSetInter (FSetUnion s s'') (FSetUnion s' s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb (in_FSet a s) (in_FSet a s')) (in_FSet a s'')) (andb (in_FSet a (FSetUnion s s'')) (in_FSet a (FSetUnion s' s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb (in_FSet a s) (in_FSet a s')) (in_FSet a s'')) (andb (orb (in_FSet a s) (in_FSet a s'')) (in_FSet a (FSetUnion s' s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb (in_FSet a s) (in_FSet a s')) (in_FSet a s'')) (andb (orb (in_FSet a s) (in_FSet a s'')) (orb (in_FSet a s') (in_FSet a s'')))
+++++
case (in_FSet a s).
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb true (in_FSet a s')) (in_FSet a s'')) (andb (orb true (in_FSet a s'')) (orb (in_FSet a s') (in_FSet a s'')))
+++++
case (in_FSet a s').
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb true true) (in_FSet a s'')) (andb (orb true (in_FSet a s'')) (orb true (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb true true) true) (andb (orb true true) (orb true true))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb true true) false) (andb (orb true false) (orb true false))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb true false) (in_FSet a s'')) (andb (orb true (in_FSet a s'')) (orb false (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb true false) true) (andb (orb true true) (orb false true))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb true false) false) (andb (orb true false) (orb false false))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb false (in_FSet a s')) (in_FSet a s'')) (andb (orb false (in_FSet a s'')) (orb (in_FSet a s') (in_FSet a s'')))
+++++
case (in_FSet a s').
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb false true) (in_FSet a s'')) (andb (orb false (in_FSet a s'')) (orb true (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb false true) true) (andb (orb false true) (orb true true))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb false true) false) (andb (orb false false) (orb true false))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb false false) (in_FSet a s'')) (andb (orb false (in_FSet a s'')) (orb false (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb false false) true) (andb (orb false true) (orb false true))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (andb false false) false) (andb (orb false false) (orb false false))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_l : forall s s' s'':FSet, eqmap unit (FSetUnion (FSetInter s s') s'') (FSetInter (FSetUnion s s'') (FSetUnion s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).

*****

*****

+++++
Qed.
-----
Lemma FSetUnion_Inter_r :\n forall s s' s'':FSet,\n   eqmap unit (FSetUnion s (FSetInter s' s''))\n     (FSetInter (FSetUnion s s') (FSetUnion s s'')).
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s''))
+++++
Proof.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s''))
+++++
intros.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.

*****
s,s',s'' : FSet
*****
eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s''))
+++++
apply FSet_ext.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.

*****
s,s',s'' : FSet
*****
forall a : ad, eq (in_FSet a (FSetUnion s (FSetInter s' s''))) (in_FSet a (FSetInter (FSetUnion s s') (FSetUnion s s'')))
+++++
intro.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.

*****
a : ad
s,s',s'' : FSet
*****
eq (in_FSet a (FSetUnion s (FSetInter s' s''))) (in_FSet a (FSetInter (FSetUnion s s') (FSetUnion s s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (in_FSet a s) (in_FSet a (FSetInter s' s''))) (in_FSet a (FSetInter (FSetUnion s s') (FSetUnion s s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (in_FSet a s) (andb (in_FSet a s') (in_FSet a s''))) (in_FSet a (FSetInter (FSetUnion s s') (FSetUnion s s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (in_FSet a s) (andb (in_FSet a s') (in_FSet a s''))) (andb (in_FSet a (FSetUnion s s')) (in_FSet a (FSetUnion s s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (in_FSet a s) (andb (in_FSet a s') (in_FSet a s''))) (andb (orb (in_FSet a s) (in_FSet a s')) (in_FSet a (FSetUnion s s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (orb (in_FSet a s) (andb (in_FSet a s') (in_FSet a s''))) (andb (orb (in_FSet a s) (in_FSet a s')) (orb (in_FSet a s) (in_FSet a s'')))
+++++
case (in_FSet a s).
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).

*****
a : ad
s,s',s'' : FSet
*****
eq (orb true (andb (in_FSet a s') (in_FSet a s''))) (andb (orb true (in_FSet a s')) (orb true (in_FSet a s'')))
+++++
case (in_FSet a s').
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb true (andb true (in_FSet a s''))) (andb (orb true true) (orb true (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb true (andb true true)) (andb (orb true true) (orb true true))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb true (andb true false)) (andb (orb true true) (orb true false))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb true (andb false (in_FSet a s''))) (andb (orb true false) (orb true (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb true (andb false true)) (andb (orb true false) (orb true true))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb true (andb false false)) (andb (orb true false) (orb true false))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).

*****
a : ad
s,s',s'' : FSet
*****
eq (orb false (andb (in_FSet a s') (in_FSet a s''))) (andb (orb false (in_FSet a s')) (orb false (in_FSet a s'')))
+++++
case (in_FSet a s').
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb false (andb true (in_FSet a s''))) (andb (orb false true) (orb false (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb false (andb true true)) (andb (orb false true) (orb false true))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb false (andb true false)) (andb (orb false true) (orb false false))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb false (andb false (in_FSet a s''))) (andb (orb false false) (orb false (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb false (andb false true)) (andb (orb false false) (orb false true))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (orb false (andb false false)) (andb (orb false false) (orb false false))
+++++
reflexivity.
-----
Lemma FSetUnion_Inter_r : forall s s' s'':FSet, eqmap unit (FSetUnion s (FSetInter s' s'')) (FSetInter (FSetUnion s s') (FSetUnion s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
case (in_FSet a s).

*****

*****

+++++
Qed.
-----
Lemma FSetInter_Union_l :\n forall s s' s'':FSet,\n   eqmap unit (FSetInter (FSetUnion s s') s'')\n     (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s''))
+++++
Proof.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s''))
+++++
intros.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.

*****
s,s',s'' : FSet
*****
eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s''))
+++++
apply FSet_ext.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.

*****
s,s',s'' : FSet
*****
forall a : ad, eq (in_FSet a (FSetInter (FSetUnion s s') s'')) (in_FSet a (FSetUnion (FSetInter s s'') (FSetInter s' s'')))
+++++
intro.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.

*****
a : ad
s,s',s'' : FSet
*****
eq (in_FSet a (FSetInter (FSetUnion s s') s'')) (in_FSet a (FSetUnion (FSetInter s s'') (FSetInter s' s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (in_FSet a (FSetUnion s s')) (in_FSet a s'')) (in_FSet a (FSetUnion (FSetInter s s'') (FSetInter s' s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb (in_FSet a s) (in_FSet a s')) (in_FSet a s'')) (in_FSet a (FSetUnion (FSetInter s s'') (FSetInter s' s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb (in_FSet a s) (in_FSet a s')) (in_FSet a s'')) (orb (in_FSet a (FSetInter s s'')) (in_FSet a (FSetInter s' s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb (in_FSet a s) (in_FSet a s')) (in_FSet a s'')) (orb (andb (in_FSet a s) (in_FSet a s'')) (in_FSet a (FSetInter s' s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb (in_FSet a s) (in_FSet a s')) (in_FSet a s'')) (orb (andb (in_FSet a s) (in_FSet a s'')) (andb (in_FSet a s') (in_FSet a s'')))
+++++
case (in_FSet a s).
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb true (in_FSet a s')) (in_FSet a s'')) (orb (andb true (in_FSet a s'')) (andb (in_FSet a s') (in_FSet a s'')))
+++++
case (in_FSet a s').
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb true true) (in_FSet a s'')) (orb (andb true (in_FSet a s'')) (andb true (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb true true) true) (orb (andb true true) (andb true true))
+++++
reflexivity.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb true true) false) (orb (andb true false) (andb true false))
+++++
reflexivity.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb true false) (in_FSet a s'')) (orb (andb true (in_FSet a s'')) (andb false (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb true false) true) (orb (andb true true) (andb false true))
+++++
reflexivity.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb true false) false) (orb (andb true false) (andb false false))
+++++
reflexivity.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb false (in_FSet a s')) (in_FSet a s'')) (orb (andb false (in_FSet a s'')) (andb (in_FSet a s') (in_FSet a s'')))
+++++
case (in_FSet a s').
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb false true) (in_FSet a s'')) (orb (andb false (in_FSet a s'')) (andb true (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb false true) true) (orb (andb false true) (andb true true))
+++++
reflexivity.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb false true) false) (orb (andb false false) (andb true false))
+++++
reflexivity.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb false false) (in_FSet a s'')) (orb (andb false (in_FSet a s'')) (andb false (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb false false) true) (orb (andb false true) (andb false true))
+++++
reflexivity.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (orb false false) false) (orb (andb false false) (andb false false))
+++++
reflexivity.
-----
Lemma FSetInter_Union_l : forall s s' s'':FSet, eqmap unit (FSetInter (FSetUnion s s') s'') (FSetUnion (FSetInter s s'') (FSetInter s' s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).

*****

*****

+++++
Qed.
-----
Lemma FSetInter_Union_r :\n forall s s' s'':FSet,\n   eqmap unit (FSetInter s (FSetUnion s' s''))\n     (FSetUnion (FSetInter s s') (FSetInter s s'')).
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s''))
+++++
Proof.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.

*****

*****
forall s s' s'' : FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s''))
+++++
intros.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.

*****
s,s',s'' : FSet
*****
eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s''))
+++++
apply FSet_ext.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.

*****
s,s',s'' : FSet
*****
forall a : ad, eq (in_FSet a (FSetInter s (FSetUnion s' s''))) (in_FSet a (FSetUnion (FSetInter s s') (FSetInter s s'')))
+++++
intro.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.

*****
a : ad
s,s',s'' : FSet
*****
eq (in_FSet a (FSetInter s (FSetUnion s' s''))) (in_FSet a (FSetUnion (FSetInter s s') (FSetInter s s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (in_FSet a s) (in_FSet a (FSetUnion s' s''))) (in_FSet a (FSetUnion (FSetInter s s') (FSetInter s s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (in_FSet a s) (orb (in_FSet a s') (in_FSet a s''))) (in_FSet a (FSetUnion (FSetInter s s') (FSetInter s s'')))
+++++
rewrite in_FSet_union.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (in_FSet a s) (orb (in_FSet a s') (in_FSet a s''))) (orb (in_FSet a (FSetInter s s')) (in_FSet a (FSetInter s s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (in_FSet a s) (orb (in_FSet a s') (in_FSet a s''))) (orb (andb (in_FSet a s) (in_FSet a s')) (in_FSet a (FSetInter s s'')))
+++++
rewrite in_FSet_inter.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.

*****
a : ad
s,s',s'' : FSet
*****
eq (andb (in_FSet a s) (orb (in_FSet a s') (in_FSet a s''))) (orb (andb (in_FSet a s) (in_FSet a s')) (andb (in_FSet a s) (in_FSet a s'')))
+++++
case (in_FSet a s).
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).

*****
a : ad
s,s',s'' : FSet
*****
eq (andb true (orb (in_FSet a s') (in_FSet a s''))) (orb (andb true (in_FSet a s')) (andb true (in_FSet a s'')))
+++++
case (in_FSet a s').
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb true (orb true (in_FSet a s''))) (orb (andb true true) (andb true (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb true (orb true true)) (orb (andb true true) (andb true true))
+++++
reflexivity.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb true (orb true false)) (orb (andb true true) (andb true false))
+++++
reflexivity.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb true (orb false (in_FSet a s''))) (orb (andb true false) (andb true (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb true (orb false true)) (orb (andb true false) (andb true true))
+++++
reflexivity.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb true (orb false false)) (orb (andb true false) (andb true false))
+++++
reflexivity.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).

*****
a : ad
s,s',s'' : FSet
*****
eq (andb false (orb (in_FSet a s') (in_FSet a s''))) (orb (andb false (in_FSet a s')) (andb false (in_FSet a s'')))
+++++
case (in_FSet a s').
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb false (orb true (in_FSet a s''))) (orb (andb false true) (andb false (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb false (orb true true)) (orb (andb false true) (andb false true))
+++++
reflexivity.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb false (orb true false)) (orb (andb false true) (andb false false))
+++++
reflexivity.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb false (orb false (in_FSet a s''))) (orb (andb false false) (andb false (in_FSet a s'')))
+++++
case (in_FSet a s'').
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb false (orb false true)) (orb (andb false false) (andb false true))
+++++
reflexivity.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).
case (in_FSet a s').
case (in_FSet a s'').

*****
a : ad
s,s',s'' : FSet
*****
eq (andb false (orb false false)) (orb (andb false false) (andb false false))
+++++
reflexivity.
-----
Lemma FSetInter_Union_r : forall s s' s'':FSet, eqmap unit (FSetInter s (FSetUnion s' s'')) (FSetUnion (FSetInter s s') (FSetInter s s'')).
Proof.
intros.
apply FSet_ext.
intro.
rewrite in_FSet_inter.
rewrite in_FSet_union.
rewrite in_FSet_union.
rewrite in_FSet_inter.
rewrite in_FSet_inter.
case (in_FSet a s).

*****

*****

+++++
Qed.
-----
