Require Import ExtLib.Structures.Functor.
-----
Require Import ExtLib.Structures.Applicative.
-----
Require Import ExtLib.Tactics.Injection.
-----
Set Printing Universes.
-----
Section poption.
-----
Polymorphic Universe i.
-----
Polymorphic Variable T : Type@{i}.
-----
Polymorphic Inductive poption : Type@{i} :=\n  | pSome : T -> poption\n  | pNone.
-----
Global Polymorphic Instance Injective_pSome a b\n  : Injective (pSome a = pSome b) :=\n  { result := a = b\n  ; injection := fun pf =>\n                   match pf in _ = X\n                         return a = match X with\n                                    | pSome y => y\n                                    | _ => a\n                                    end\n                   with\n                   | eq_refl => eq_refl\n                   end }.
-----
Global Polymorphic Instance Injective_pSome_pNone a\n  : Injective (pSome a = pNone) :=\n  { result := False\n  ; injection := fun pf =>\n                   match pf in _ = X\n                         return match X with\n                                | pSome y => True\n                                | _ => False\n                                end\n                   with\n                   | eq_refl => I\n                   end }.
-----
Global Polymorphic Instance Injective_pNone_pSome a\n  : Injective (pNone = pSome a) :=\n  { result := False\n  ; injection := fun pf =>\n                   match pf in _ = X\n                         return match X with\n                                | pNone => True\n                                | _ => False\n                                end\n                   with\n                   | eq_refl => I\n                   end }.
-----
End poption.
-----
Arguments pSome {_} _.
-----
Arguments pNone {_}.
-----
Section poption_map.
-----
Polymorphic Universes i j.
-----
Polymorphic Context {T : Type@{i}} {U : Type@{j}}.
-----
Polymorphic Variable f : T -> U.
-----
Polymorphic Definition fmap_poption (x : poption@{i} T) : poption@{j} U :=\n    match x with\n    | pNone => pNone@{j}\n    | pSome x => pSome@{j} (f x)\n    end.
-----
Polymorphic Definition ap_poption\n              (f : poption@{i} (T -> U)) (x : poption@{i} T)\n  : poption@{j} U :=\n    match f , x with\n    | pSome f , pSome x => pSome (f x)\n    | _ , _ => pNone\n    end.
-----
End poption_map.
-----
Polymorphic Definition Functor_poption@{i} : Functor@{i i} poption@{i} :=\n{| fmap := @fmap_poption@{i i} |}.
-----
Existing Instance Functor_poption.
-----
Polymorphic Definition Applicative_poption@{i} : Applicative@{i i} poption@{i} :=\n{| pure := @pSome@{i}\n ; ap   := @ap_poption |}.
-----
Existing Instance Applicative_poption.
-----
