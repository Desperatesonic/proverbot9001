Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Annexes.suma.
-----
Section euclid_5_original_euclid.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : euclid_5, euclid_s_parallel_postulate
+++++
Proof.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : euclid_5, euclid_s_parallel_postulate
+++++
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.

*****
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HM := midpoint_existence B C).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).

*****
HM : ex (fun X : Tpoint => Midpoint X B C)
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
destruct HM as [M].
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].

*****
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HD' := symmetric_point_construction D C).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).

*****
HD' : ex (fun P' : Tpoint => Midpoint C D P')
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
destruct HD' as [D'].
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].

*****
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HE := symmetric_point_construction D' M).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).

*****
HE : ex (fun P' : Tpoint => Midpoint M D' P')
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
destruct HE as [E].
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].

*****
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(Hdiff := HSuma).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).

*****
Hdiff : SumA A B C B C D P Q R
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
apply suma_distincts in Hdiff.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.

*****
Hdiff : and (not (eq A B))\n (and (not (eq B C))\n (and (not (eq B C))\n (and (not (eq C D)) (and (not (eq P Q)) (not (eq Q R))))))
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
spliter.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.

*****
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3,H4 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert_diffs.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.

*****
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).

*****
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).

*****
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).

*****
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).

*****
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert_diffs.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.

*****
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).

*****
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).

*****
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HSAS := l11_49 C M D' B M E).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).

*****
HSAS : forall (_ : CongA C M D' B M E) (_ : Cong M C M B) (_ : Cong M D' M E),\nand (Cong C D' B E)\n (forall _ : not (eq C D'),\n and (CongA M C D' M B E) (CongA M D' C M E B))
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
destruct HSAS as [HCong HSAS]; eCong.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.

*****
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C M D' B M E
+++++
apply l11_14; Between.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.

*****
HSAS : forall _ : not (eq C D'), and (CongA M C D' M B E) (CongA M D' C M E B)
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
destruct HSAS as [HConga1 HConga2]; auto.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.

*****
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert_diffs.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HA' : InAngle A C B E).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle A C B E
+++++
apply lea_in_angle; auto.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA C B A C B E
+++++
-
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA C B A C B E
+++++
apply (l11_30 A B C B C D').
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA A B C B C D'
+++++
apply (sams_chara D); Between; SumA.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C C B A
+++++
apply conga_pseudo_refl; auto.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B C D' C B E
+++++
apply (out_conga M C D' M B E); try (apply bet_out); Between.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.
apply (out_conga M C D' M B E); try (apply bet_out); Between.

*****

*****

+++++
-
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.
apply (out_conga M C D' M B E); try (apply bet_out); Between.
-

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS C B E A
+++++
exists D'.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.
apply (out_conga M C D' M B E); try (apply bet_out); Between.
-
exists D'.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (TS C B E D') (TS C B A D')
+++++
split.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.
apply (out_conga M C D' M B E); try (apply bet_out); Between.
-
exists D'.
split.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS C B E D'
+++++
repeat split; auto; try (intro; apply HNCol4; ColR).
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.
apply (out_conga M C D' M B E); try (apply bet_out); Between.
-
exists D'.
split.
repeat split; auto; try (intro; apply HNCol4; ColR).

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T C B) (Bet E T D'))
+++++
exists M.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.
apply (out_conga M C D' M B E); try (apply bet_out); Between.
-
exists D'.
split.
repeat split; auto; try (intro; apply HNCol4; ColR).
exists M.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col M C B) (Bet E M D')
+++++
split; Col; Between.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.
apply (out_conga M C D' M B E); try (apply bet_out); Between.
-
exists D'.
split.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS C B A D'
+++++
apply (l9_8_2 _ _ D); Side.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.
apply (out_conga M C D' M B E); try (apply bet_out); Between.
-
exists D'.
split.
apply (l9_8_2 _ _ D); Side.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS C B D D'
+++++
repeat split; Col.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
apply lea_in_angle; auto.
-
apply (l11_30 A B C B C D').
apply (sams_chara D); Between; SumA.
apply conga_pseudo_refl; auto.
apply (out_conga M C D' M B E); try (apply bet_out); Between.
-
exists D'.
split.
apply (l9_8_2 _ _ D); Side.
repeat split; Col.

*****
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T C B) (Bet D T D'))
+++++
exists C; Col; Between.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).

*****
HA' : InAngle A C B E
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].

*****
Habs : eq A' B
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
subst.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
subst.

*****
HBet : Bet C B E
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
exfalso.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
subst.
exfalso.

*****
HBet : Bet C B E
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol5; ColR.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].

*****
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
assert(HY := eucl B C E D' M A').
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').

*****
HY : forall (_ : BetS B M C) (_ : BetS E M D') (_ : BetS C A' E)\n (_ : not (Col B C D')) (_ : Cong B M C M) (_ : Cong E M D' M),\nex (fun I : Tpoint => and (BetS D' C I) (BetS B A' I))
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.

*****
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C A')
+++++
intro; subst; apply HNCol1; ColR.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.

*****
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A' E)
+++++
intro.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.

*****
H16 : eq A' E
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNBet.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.
apply HNBet.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P Q R
+++++
apply (bet_conga__bet D' C D); Between.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.
apply HNBet.
apply (bet_conga__bet D' C D); Between.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA D' C D P Q R
+++++
apply (suma2__conga A B C B C D); auto.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.
apply HNBet.
apply (bet_conga__bet D' C D); Between.
apply (suma2__conga A B C B C D); auto.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA A B C B C D D' C D
+++++
apply (conga3_suma__suma D' C B B C D D' C D); try (apply conga_refl); auto.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.
apply HNBet.
apply (bet_conga__bet D' C D); Between.
apply (suma2__conga A B C B C D); auto.
apply (conga3_suma__suma D' C B B C D D' C D); try (apply conga_refl); auto.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA D' C B B C D D' C D
+++++
2: apply (out_conga D' C M E B M); try (apply out_trivial); CongA; try (apply bet_out); Between.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.
apply HNBet.
apply (bet_conga__bet D' C D); Between.
apply (suma2__conga A B C B C D); auto.
apply (conga3_suma__suma D' C B B C D D' C D); try (apply conga_refl); auto.
2: apply (out_conga D' C M E B M); try (apply out_trivial); CongA; try (apply bet_out); Between.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA D' C B B C D D' C D
+++++
exists D.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.
apply HNBet.
apply (bet_conga__bet D' C D); Between.
apply (suma2__conga A B C B C D); auto.
apply (conga3_suma__suma D' C B B C D D' C D); try (apply conga_refl); auto.
2: apply (out_conga D' C M E B M); try (apply out_trivial); CongA; try (apply bet_out); Between.
exists D.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B C D B C D) (and (not (OS C B D' D)) (and (Coplanar D' C B D) (CongA D' C D D' C D)))
+++++
repeat (split; CongA); Cop.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.
apply HNBet.
apply (bet_conga__bet D' C D); Between.
apply (suma2__conga A B C B C D); auto.
apply (conga3_suma__suma D' C B B C D D' C D); try (apply conga_refl); auto.
2: apply (out_conga D' C M E B M); try (apply out_trivial); CongA; try (apply bet_out); Between.
exists D.
repeat (split; CongA); Cop.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (OS C B D' D)
+++++
apply l9_9.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.
apply HNBet.
apply (bet_conga__bet D' C D); Between.
apply (suma2__conga A B C B C D); auto.
apply (conga3_suma__suma D' C B B C D D' C D); try (apply conga_refl); auto.
2: apply (out_conga D' C M E B M); try (apply out_trivial); CongA; try (apply bet_out); Between.
exists D.
repeat (split; CongA); Cop.
apply l9_9.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS C B D' D
+++++
repeat split; Col.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
intro.
subst.
apply HNBet.
apply (bet_conga__bet D' C D); Between.
apply (suma2__conga A B C B C D); auto.
apply (conga3_suma__suma D' C B B C D D' C D); try (apply conga_refl); auto.
2: apply (out_conga D' C M E B M); try (apply out_trivial); CongA; try (apply bet_out); Between.
exists D.
repeat (split; CongA); Cop.
apply l9_9.
repeat split; Col.

*****
HBet : Bet C E E
Hout : Out B E A
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T C B) (Bet D' T D))
+++++
exists C; Col; Between.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.

*****
HY : and (BetS D' C Y) (BetS B A' Y)
Y : Tpoint
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
unfold BetS in HY.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
unfold BetS in HY.

*****
HY : and (and (Bet D' C Y) (and (not (eq D' C)) (not (eq C Y))))\n (and (Bet B A' Y) (and (not (eq B A')) (not (eq A' Y))))
Y : Tpoint
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
spliter.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
unfold BetS in HY.
spliter.

*****
H22 : not (eq A' Y)
H21 : not (eq B A')
H20 : Bet B A' Y
H25 : not (eq C Y)
H24 : not (eq D' C)
H16 : Bet D' C Y
Y : Tpoint
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A Y) (Out C D Y))
+++++
exists Y.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
unfold BetS in HY.
spliter.
exists Y.

*****
H22 : not (eq A' Y)
H21 : not (eq B A')
H20 : Bet B A' Y
H25 : not (eq C Y)
H24 : not (eq D' C)
H16 : Bet D' C Y
Y : Tpoint
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A Y) (Out C D Y)
+++++
split.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
unfold BetS in HY.
spliter.
exists Y.
split.

*****
H22 : not (eq A' Y)
H21 : not (eq B A')
H20 : Bet B A' Y
H25 : not (eq C Y)
H24 : not (eq D' C)
H16 : Bet D' C Y
Y : Tpoint
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A Y
+++++
apply (l6_7 _ _ A'); try solve [apply l6_6; auto]; apply (bet_out); auto.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
unfold BetS in HY.
spliter.
exists Y.
split.
apply (l6_7 _ _ A'); try solve [apply l6_6; auto]; apply (bet_out); auto.

*****
H22 : not (eq A' Y)
H21 : not (eq B A')
H20 : Bet B A' Y
H25 : not (eq C Y)
H24 : not (eq D' C)
H16 : Bet D' C Y
Y : Tpoint
Hout : Out B A' A
HBet : Bet C A' E
A' : Tpoint
H4 : not (eq B E)
H23 : not (eq D' B)
H17 : not (eq C E)
HConga2 : CongA M D' C M E B
HConga1 : CongA M C D' M B E
HCong : Cong C D' B E
HNCol6 : not (Col M C E)
HNCol5 : not (Col D' C B)
H14 : not (eq M E)
H12 : not (eq D' E)
H19 : not (eq M D)
H18 : not (eq M D')
HNCol4 : not (Col M C D')
HNCol3 : not (Col M C D)
HNCol2 : not (Col B C D)
HNCol1 : not (Col B C A)
H15 : not (eq C A)
H13 : not (eq B D)
H11 : not (eq C D')
H8 : not (eq D D')
H10 : not (eq M C)
H9 : not (eq M B)
H7 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq C D)
H3 : not (eq B C)
H2 : not (eq A B)
H1 : Midpoint M D' E
E : Tpoint
H0 : Midpoint C D D'
D' : Tpoint
H : Midpoint M B C
M : Tpoint
HNBet : not (Bet P Q R)
HSuma : SumA A B C B C D P Q R
HIsi : SAMS A B C B C D
Hos : OS B C A D
A,B,C,D,P,Q,R : Tpoint
eucl : euclid_5
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out C D Y
+++++
apply (l6_2 _ _ D'); Between.
-----
Lemma euclid_5__original_euclid : euclid_5 -> euclid_s_parallel_postulate.
Proof.
intros eucl A B C D P Q R Hos HIsi HSuma HNBet.
assert(HM := midpoint_existence B C).
destruct HM as [M].
assert(HD' := symmetric_point_construction D C).
destruct HD' as [D'].
assert(HE := symmetric_point_construction D' M).
destruct HE as [E].
assert(Hdiff := HSuma).
apply suma_distincts in Hdiff.
spliter.
assert_diffs.
assert(HNCol1 : ~ Col B C A) by (apply (one_side_not_col123 _ _ _ D); auto).
assert(HNCol2 : ~ Col B C D) by (apply (one_side_not_col123 _ _ _ A); Side).
assert(HNCol3 : ~ Col M C D) by (intro; apply HNCol2; ColR).
assert(HNCol4 : ~ Col M C D') by (intro; apply HNCol3; ColR).
assert_diffs.
assert(HNCol5 : ~ Col D' C B) by (intro; apply HNCol4; ColR).
assert(HNCol6 : ~ Col M C E) by (intro; apply HNCol4; ColR).
assert(HSAS := l11_49 C M D' B M E).
destruct HSAS as [HCong HSAS]; eCong.
apply l11_14; Between.
destruct HSAS as [HConga1 HConga2]; auto.
assert_diffs.
assert(HA' : InAngle A C B E).
destruct HA' as [_ [_ [_ [A' [HBet [Habs|Hout]]]]]].
assert(HY := eucl B C E D' M A').
destruct HY as [Y HY]; Col; eCong; repeat split; Between.
intro; subst; apply HNCol1; ColR.
unfold BetS in HY.
spliter.
exists Y.
split.
apply (l6_7 _ _ A'); try solve [apply l6_6; auto]; apply (bet_out); auto.
apply (l6_2 _ _ D'); Between.

*****

*****

+++++
Qed.
-----
End euclid_5_original_euclid.
-----
