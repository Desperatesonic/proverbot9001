Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Annexes.saccheri.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section posidonius_postulate_rah.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : posidonius_postulate, postulate_of_right_saccheri_quadrilaterals
+++++
Proof.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : posidonius_postulate, postulate_of_right_saccheri_quadrilaterals
+++++
intro H.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.

*****
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\ Per A1 A2 B2 /\ Cong A1 B1 A2 B2 /\ OS A1 A2 B1 B2 /\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).

*****
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A1 : Tpoint => ex (fun A2 : Tpoint => ex (fun B1 : Tpoint => ex (fun B2 : Tpoint => and (Per A2 A1 B1) (and (Per A1 A2 B2) (and (Cong A1 B1 A2 B2) (and (OS A1 A2 B1 B2) (forall (A3 B3 : Tpoint) (_ : Col A1 A2 A3) (_ : Col B1 B2 B3) (_ : Perp A1 A2 A3 B3), Cong A3 B3 A1 B1))))))))
+++++
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].

*****
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A1 : Tpoint => ex (fun A2 : Tpoint => ex (fun B1 : Tpoint => ex (fun B2 : Tpoint => and (Per A2 A1 B1) (and (Per A1 A2 B2) (and (Cong A1 B1 A2 B2) (and (OS A1 A2 B1 B2) (forall (A3 B3 : Tpoint) (_ : Col A1 A2 A3) (_ : Col B1 B2 B3) (_ : Perp A1 A2 A3 B3), Cong A3 B3 A1 B1))))))))
+++++
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].

*****
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A1 : Tpoint => ex (fun A2 : Tpoint => ex (fun B1 : Tpoint => ex (fun B2 : Tpoint => and (Per A2 A1 B1) (and (Per A1 A2 B2) (and (Cong A1 B1 A2 B2) (and (OS A1 A2 B1 B2) (forall (A3 B3 : Tpoint) (_ : Col A1 A2 A3) (_ : Col B1 B2 B3) (_ : Perp A1 A2 A3 B3), Cong A3 B3 A1 B1))))))))
+++++
assert (HNC' : ~ Col A1' A2' B2).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).

*****
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1' A2' B2)
+++++
intro HC2.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.

*****
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (midpoint_existence B1 B2) as [B3 HB3].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].

*****
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).

*****
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).

*****
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).

*****
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HCong' : Cong B1 B2 B3 B2).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B1 B2 B3 B2
+++++
assert (HNE''' : A3 <> B2).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A3 B2)
+++++
intro; assert (A1 = A3); treat_equalities.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
intro; assert (A1 = A3); treat_equalities.

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HNE'' : not (eq B1 B3)
HB3 : Midpoint B3 B1 A3
B3 : Tpoint
HC2 : Col A1' A2' A3
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HNE : not (eq B1 A3)
HCop : Coplanar A1' A2' B1 A3
HF : forall (A4 A5 B3 B4 : Tpoint) (_ : Col A1' A2' A4) \n (_ : Col B1 A3 B3) (_ : Perp A1' A2' A4 B3) (_ : Col A1' A2' A5)\n (_ : Col B1 A3 B4) (_ : Perp A1' A2' A5 B4), Cong A4 B3 A5 B4
A3 : Tpoint
HNC : not (Col A1' A2' B1)
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A1 A3
+++++
apply l8_18_uniqueness with A1' A2' B1; Col.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
intro; assert (A1 = A3); treat_equalities.
apply l8_18_uniqueness with A1' A2' B1; Col.

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HNE'' : not (eq B1 B3)
HB3 : Midpoint B3 B1 A3
B3 : Tpoint
HC2 : Col A1' A2' A3
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HNE : not (eq B1 A3)
HCop : Coplanar A1' A2' B1 A3
HF : forall (A4 A5 B3 B4 : Tpoint) (_ : Col A1' A2' A4) \n (_ : Col B1 A3 B3) (_ : Perp A1' A2' A4 B3) (_ : Col A1' A2' A5)\n (_ : Col B1 A3 B4) (_ : Perp A1' A2' A5 B4), Cong A4 B3 A5 B4
A3 : Tpoint
HNC : not (Col A1' A2' B1)
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A1' A2' B1 A3
+++++
apply perp_col0 with A3 B3; Col; Perp.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
intro; assert (A1 = A3); treat_equalities.

*****
HCong : Cong A1 B1 A1 B3
HPerp3 : Perp A1' A2' B3 A1
HNE'' : not (eq B1 B3)
HB3 : Midpoint B3 B1 A1
B3 : Tpoint
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
HNE : not (eq B1 A1)
HCop : Coplanar A1' A2' B1 A1
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 A1 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 A1 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
A1 : Tpoint
HNC : not (Col A1' A2' B1)
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HFalse : B3 <> B1) by (assert_diffs; auto).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
intro; assert (A1 = A3); treat_equalities.
assert (HFalse : B3 <> B1) by (assert_diffs; auto).

*****
HFalse : not (eq B3 B1)
HCong : Cong A1 B1 A1 B3
HPerp3 : Perp A1' A2' B3 A1
HNE'' : not (eq B1 B3)
HB3 : Midpoint B3 B1 A1
B3 : Tpoint
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
HNE : not (eq B1 A1)
HCop : Coplanar A1' A2' B1 A1
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 A1 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 A1 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
A1 : Tpoint
HNC : not (Col A1' A2' B1)
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HFalse; apply between_cong with A1; Cong.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
intro; assert (A1 = A3); treat_equalities.
assert (HFalse : B3 <> B1) by (assert_diffs; auto).
apply HFalse; apply between_cong with A1; Cong.

*****
HFalse : not (eq B3 B1)
HCong : Cong A1 B1 A1 B3
HPerp3 : Perp A1' A2' B3 A1
HNE'' : not (eq B1 B3)
HB3 : Midpoint B3 B1 A1
B3 : Tpoint
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
HNE : not (eq B1 A1)
HCop : Coplanar A1' A2' B1 A1
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 A1 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 A1 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
A1 : Tpoint
HNC : not (Col A1' A2' B1)
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A1 B3 B1
+++++
unfold Midpoint in *; spliter; Between.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).

*****
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B1 B2 B3 B2
+++++
assert (HNE'''' : B3 <> B2).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).

*****
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B3 B2)
+++++
intro; assert (A1 = A3); treat_equalities; [|intuition].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
intro; assert (A1 = A3); treat_equalities; [|intuition].

*****
HPerp3 : Perp A1' A2' B1 A3
HCong : Cong A1 B1 A3 B1
HNE''' : not (eq A3 B1)
HC4 : Col A1' A2' A3
A3 : Tpoint
HC2 : Col A1' A2' B1
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HNE' : not (eq B1 B1)
HB3 : Midpoint B1 B1 B1
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B1 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B1 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B1
HNC : not (Col A1' A2' B1)
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A1 A3
+++++
apply l8_18_uniqueness with A1' A2' B1; Col.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).

*****
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B1 B2 B3 B2
+++++
assert (HNE''''' : A1 <> B2).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).

*****
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A1 B2)
+++++
intro; treat_equalities; apply HNE'''; apply l8_18_uniqueness with A1' A2' B3; Col; Perp; try (intro; assert_diffs; assert_cols; apply HNC; ColR).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
intro; treat_equalities; apply HNE'''; apply l8_18_uniqueness with A1' A2' B3; Col; Perp; try (intro; assert_diffs; assert_cols; apply HNC; ColR).

*****
HNE''' : not (eq A3 A1)
HNE'''' : not (eq B3 A1)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HB3 : Midpoint B3 B1 A1
B3 : Tpoint
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
HNE : not (eq B1 A1)
HCop : Coplanar A1' A2' B1 A1
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 A1 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 A1 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
A1 : Tpoint
HNC : not (Col A1' A2' B1)
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A1' A2' B3 A1
+++++
apply perp_col0 with A1 B1; assert_cols; Col; Perp; try (intro; treat_equalities; Col).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B1 B2 B3 B2
+++++
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B1 A1 B2)
+++++
intro H.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
intro H.

*****
H : Col B1 A1 B2
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (A1 = B2); auto.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
intro H.
assert (A1 = B2); auto.

*****
H : Col B1 A1 B2
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A1 B2
+++++
apply perp_sym in HPerp1.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
intro H.
assert (A1 = B2); auto.
apply perp_sym in HPerp1.

*****
H : Col B1 A1 B2
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp B1 A1 A1' A2'
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A1 B2
+++++
elim (perp_not_col2 _ _ _ _ HPerp1); intro H'; [apply l6_21 with A1 B1 A1' A2'|apply l6_21 with A1 B1 A2' A1']; assert_diffs; Col; assert_cols; ColR.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A1 B2 B1 A3 B2 B3
+++++
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet B2 A3 A1) (Bet B2 A1 A3)
+++++
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A3 B3 B1 B2
+++++
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col B2 A3 B3)) (ex (fun T : Tpoint => and (Col T A3 B3) (Bet B1 T B2)))
+++++
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T A3 B3) (Bet B1 T B2))
+++++
exists B3; split; Col; unfold Midpoint in *; spliter; auto.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A3 B3 B1 A1
+++++
apply l12_6; apply par_not_col_strict with B1; Col; try (apply l12_9 with A1' A2'; Perp); Cop; try (apply col2_cop__cop with B1 B2; Col; intro; apply HNC; ColR).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
apply l12_6; apply par_not_col_strict with B1; Col; try (apply l12_9 with A1' A2'; Perp); Cop; try (apply col2_cop__cop with B1 B2; Col; intro; apply HNC; ColR).

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A3 B3 B1)
+++++
intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HNE''' : A3 <> B2).
assert (HNE'''' : B3 <> B2).
assert (HNE''''' : A1 <> B2).
destruct (l11_50_2 B1 A1 B2 B3 A3 B2); try solve[unfold Midpoint in *; spliter; Cong].

*****
HNE''''' : not (eq A1 B2)
HNE'''' : not (eq B3 B2)
HNE''' : not (eq A3 B2)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B1 A1 B2 B3 A3 B2
+++++
apply l11_16; try apply perp_per_1; try solve[assert_diffs; auto]; apply perp_col0 with A1' A2'; Perp; ColR.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).

*****
HCong' : Cong B1 B2 B3 B2
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HFalse : B3 <> B1) by (assert_diffs; auto).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HFalse : B3 <> B1) by (assert_diffs; auto).

*****
HFalse : not (eq B3 B1)
HCong' : Cong B1 B2 B3 B2
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HFalse; apply between_cong with B2; Cong.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
intro HC2.
destruct (midpoint_existence B1 B2) as [B3 HB3].
assert (HNE' : B1 <> B2) by (intro; treat_equalities; Col).
assert (HNE'' : B1 <> B3) by (assert_diffs; auto).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 B2 B3 B2).
assert (HFalse : B3 <> B1) by (assert_diffs; auto).
apply HFalse; apply between_cong with B2; Cong.

*****
HFalse : not (eq B3 B1)
HCong' : Cong B1 B2 B3 B2
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B3)
HNE' : not (eq B1 B2)
HB3 : Midpoint B3 B1 B2
B3 : Tpoint
HC2 : Col A1' A2' B2
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B2 B3 B1
+++++
unfold Midpoint in *; spliter; Between.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).

*****
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A1 : Tpoint => ex (fun A2 : Tpoint => ex (fun B1 : Tpoint => ex (fun B2 : Tpoint => and (Per A2 A1 B1) (and (Per A1 A2 B2) (and (Cong A1 B1 A2 B2) (and (OS A1 A2 B1 B2) (forall (A3 B3 : Tpoint) (_ : Col A1 A2 A3) (_ : Col B1 B2 B3) (_ : Perp A1 A2 A3 B3), Cong A3 B3 A1 B1))))))))
+++++
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.

*****
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A1 : Tpoint => ex (fun A2 : Tpoint => ex (fun B1 : Tpoint => ex (fun B2 : Tpoint => and (Per A2 A1 B1) (and (Per A1 A2 B2) (and (Cong A1 B1 A2 B2) (and (OS A1 A2 B1 B2) (forall (A3 B3 : Tpoint) (_ : Col A1 A2 A3) (_ : Col B1 B2 B3) (_ : Perp A1 A2 A3 B3), Cong A3 B3 A1 B1))))))))
+++++
assert (HNE' : A1 <> A2).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).

*****
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A1 A2)
+++++
intro; treat_equalities.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.

*****
HPerp2 : Perp A1' A2' B2 A1
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).

*****
HCong : Cong A1 B1 A1 B2
HPerp2 : Perp A1' A2' B2 A1
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HC2 : Col A1 B1 B2).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
assert (HC2 : Col A1 B1 B2).

*****
HCong : Cong A1 B1 A1 B2
HPerp2 : Perp A1' A2' B2 A1
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A1 B1 B2
+++++
apply cop_perp2__col with A1' A2'; Perp.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
assert (HC2 : Col A1 B1 B2).
apply cop_perp2__col with A1' A2'; Perp.

*****
HC2 : Col A1 B1 B2
HCong : Cong A1 B1 A1 B2
HPerp2 : Perp A1' A2' B2 A1
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim (l7_20 A1 B1 B2); Col; intro HMid.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
assert (HC2 : Col A1 B1 B2).
apply cop_perp2__col with A1' A2'; Perp.
elim (l7_20 A1 B1 B2); Col; intro HMid.

*****
HMid : Midpoint A1 B1 B2
HC2 : Col A1 B1 B2
HCong : Cong A1 B1 A1 B2
HPerp2 : Perp A1' A2' B2 A1
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (midpoint_existence A1 B1) as [M HM].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
assert (HC2 : Col A1 B1 B2).
apply cop_perp2__col with A1' A2'; Perp.
elim (l7_20 A1 B1 B2); Col; intro HMid.
destruct (midpoint_existence A1 B1) as [M HM].

*****
HM : Midpoint M A1 B1
M : Tpoint
HMid : Midpoint A1 B1 B2
HC2 : Col A1 B1 B2
HCong : Cong A1 B1 A1 B2
HPerp2 : Perp A1' A2' B2 A1
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim (l7_20 A1 B1 M); try apply HF; Col; Perp; try (ColR); try (apply perp_col0 with A1 B1; assert_diffs; Col; Perp).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
assert (HC2 : Col A1 B1 B2).
apply cop_perp2__col with A1' A2'; Perp.
elim (l7_20 A1 B1 B2); Col; intro HMid.
destruct (midpoint_existence A1 B1) as [M HM].
elim (l7_20 A1 B1 M); try apply HF; Col; Perp; try (ColR); try (apply perp_col0 with A1 B1; assert_diffs; Col; Perp).

*****
HM : Midpoint M A1 B1
M : Tpoint
HMid : Midpoint A1 B1 B2
HC2 : Col A1 B1 B2
HCong : Cong A1 B1 A1 B2
HPerp2 : Perp A1' A2' B2 A1
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Midpoint A1 B1 M, False
+++++
intro; treat_equalities; intuition.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
assert (HC2 : Col A1 B1 B2).
apply cop_perp2__col with A1' A2'; Perp.
elim (l7_20 A1 B1 B2); Col; intro HMid.
destruct (midpoint_existence A1 B1) as [M HM].
elim (l7_20 A1 B1 M); try apply HF; Col; Perp; try (ColR); try (apply perp_col0 with A1 B1; assert_diffs; Col; Perp).
intro; treat_equalities; intuition.

*****
HM : Midpoint M A1 B1
HNC' : forall _ : Col A1' A2' M, False
HPerp2 : Perp A1' A2' M A1
HCong : Cong A1 B1 A1 M
HC2 : Col A1 B1 M
HMid : Midpoint A1 B1 M
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HNE : forall _ : eq B1 M, False
HCop : Coplanar A1' A2' B1 M
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 M B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 M B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
M : Tpoint
HNC : forall _ : Col A1' A2' B1, False
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
assert (HC2 : Col A1 B1 B2).
apply cop_perp2__col with A1' A2'; Perp.
elim (l7_20 A1 B1 B2); Col; intro HMid.
destruct (midpoint_existence A1 B1) as [M HM].
elim (l7_20 A1 B1 M); try apply HF; Col; Perp; try (ColR); try (apply perp_col0 with A1 B1; assert_diffs; Col; Perp).
intro; treat_equalities; intuition.
assert_diffs.

*****
H4 : not (eq M B1)
H : not (eq A1 B1)
H1 : not (eq M A1)
H0 : not (eq A1' A2')
HM : Midpoint M A1 B1
HNC' : forall _ : Col A1' A2' M, False
HPerp2 : Perp A1' A2' M A1
HCong : Cong A1 B1 A1 M
HC2 : Col A1 B1 M
HMid : Midpoint A1 B1 M
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HNE : forall _ : eq B1 M, False
HCop : Coplanar A1' A2' B1 M
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 M B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 M B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
M : Tpoint
HNC : forall _ : Col A1' A2' B1, False
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HX : M<>A1) by auto.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
assert (HC2 : Col A1 B1 B2).
apply cop_perp2__col with A1' A2'; Perp.
elim (l7_20 A1 B1 B2); Col; intro HMid.
destruct (midpoint_existence A1 B1) as [M HM].
elim (l7_20 A1 B1 M); try apply HF; Col; Perp; try (ColR); try (apply perp_col0 with A1 B1; assert_diffs; Col; Perp).
intro; treat_equalities; intuition.
assert_diffs.
assert (HX : M<>A1) by auto.

*****
HX : not (eq M A1)
H4 : not (eq M B1)
H : not (eq A1 B1)
H1 : not (eq M A1)
H0 : not (eq A1' A2')
HM : Midpoint M A1 B1
HNC' : forall _ : Col A1' A2' M, False
HPerp2 : Perp A1' A2' M A1
HCong : Cong A1 B1 A1 M
HC2 : Col A1 B1 M
HMid : Midpoint A1 B1 M
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HNE : forall _ : eq B1 M, False
HCop : Coplanar A1' A2' B1 M
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 M B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 M B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
M : Tpoint
HNC : forall _ : Col A1' A2' B1, False
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HX.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
intro; treat_equalities.
assert (HCong : Cong A1 B1 A1 B2) by (apply HF; Col; Perp).
assert (HC2 : Col A1 B1 B2).
apply cop_perp2__col with A1' A2'; Perp.
elim (l7_20 A1 B1 B2); Col; intro HMid.
destruct (midpoint_existence A1 B1) as [M HM].
elim (l7_20 A1 B1 M); try apply HF; Col; Perp; try (ColR); try (apply perp_col0 with A1 B1; assert_diffs; Col; Perp).
intro; treat_equalities; intuition.
assert_diffs.
assert (HX : M<>A1) by auto.
apply HX.

*****
HX : not (eq M A1)
H4 : not (eq M B1)
H : not (eq A1 B1)
H1 : not (eq M A1)
H0 : not (eq A1' A2')
HM : Midpoint M A1 B1
HNC' : forall _ : Col A1' A2' M, False
HPerp2 : Perp A1' A2' M A1
HCong : Cong A1 B1 A1 M
HC2 : Col A1 B1 M
HMid : Midpoint A1 B1 M
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HNE : forall _ : eq B1 M, False
HCop : Coplanar A1' A2' B1 M
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 M B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 M B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
M : Tpoint
HNC : forall _ : Col A1' A2' B1, False
A1',A2',B1 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq M A1
+++++
apply between_equality with B1; unfold Midpoint in *; spliter; Between.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).

*****
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A1 : Tpoint => ex (fun A2 : Tpoint => ex (fun B1 : Tpoint => ex (fun B2 : Tpoint => and (Per A2 A1 B1) (and (Per A1 A2 B2) (and (Cong A1 B1 A2 B2) (and (OS A1 A2 B1 B2) (forall (A3 B3 : Tpoint) (_ : Col A1 A2 A3) (_ : Col B1 B2 B3) (_ : Perp A1 A2 A3 B3), Cong A3 B3 A1 B1))))))))
+++++
exists A1, A2, B1, B2.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.

*****
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Per A2 A1 B1) (and (Per A1 A2 B2) (and (Cong A1 B1 A2 B2) (and (OS A1 A2 B1 B2) (forall (A3 B3 : Tpoint) (_ : Col A1 A2 A3) (_ : Col B1 B2 B3) (_ : Perp A1 A2 A3 B3), Cong A3 B3 A1 B1))))
+++++
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).

*****
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A1 A2 B1 B2
+++++
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].

*****
HTS : TS A1 A2 B1 B2
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].

*****
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (midpoint_existence B1 I) as [B3 HB3].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].

*****
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).

*****
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).

*****
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HCong' : Cong B1 I B3 I).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B1 I B3 I
+++++
assert (HNE''' : A3 <> I).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A3 I)
+++++
intro; assert (A1 = A3); treat_equalities.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
intro; assert (A1 = A3); treat_equalities.

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
HB3 : Midpoint B3 B1 A3
HNE'' : not (eq B1 A3)
B3 : Tpoint
HC3 : Col A3 A1 A2
HBet : Bet B1 A3 B2
A3 : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A1 A3
+++++
apply l8_18_uniqueness with A1' A2' B1; Col.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
intro; assert (A1 = A3); treat_equalities.
apply l8_18_uniqueness with A1' A2' B1; Col.

*****
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
HB3 : Midpoint B3 B1 A3
HNE'' : not (eq B1 A3)
B3 : Tpoint
HC3 : Col A3 A1 A2
HBet : Bet B1 A3 B2
A3 : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A1' A2' B1 A3
+++++
apply perp_col0 with A3 B3; Col; Perp.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
intro; assert (A1 = A3); treat_equalities.

*****
HB3 : Midpoint B3 B1 A1
HNE'' : not (eq B1 A1)
HCong : Cong A1 B1 A1 B3
HPerp3 : Perp A1' A2' B3 A1
B3 : Tpoint
HBet : Bet B1 A1 B2
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNE'; apply l8_18_uniqueness with A1' A2' B2; Col.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
intro; assert (A1 = A3); treat_equalities.
apply HNE'; apply l8_18_uniqueness with A1' A2' B2; Col.

*****
HB3 : Midpoint B3 B1 A1
HNE'' : not (eq B1 A1)
HCong : Cong A1 B1 A1 B3
HPerp3 : Perp A1' A2' B3 A1
B3 : Tpoint
HBet : Bet B1 A1 B2
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A1' A2' B2 A1
+++++
apply perp_col0 with A1 B1; Col; Perp; intro; treat_equalities; Col.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).

*****
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B1 I B3 I
+++++
assert (HNE'''' : B3 <> I).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).

*****
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B3 I)
+++++
intro; assert (A1 = A3); treat_equalities; [|intuition].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
intro; assert (A1 = A3); treat_equalities; [|intuition].

*****
HPerp3 : Perp A1' A2' B1 A3
HCong : Cong A1 B1 A3 B1
HNE''' : not (eq A3 B1)
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 B1)
HB3 : Midpoint B1 B1 B1
HC3 : Col B1 A1 A2
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A1 A3
+++++
apply l8_18_uniqueness with A1' A2' B1; Col.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).

*****
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B1 I B3 I
+++++
assert (HNE''''' : A1 <> I).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).

*****
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A1 I)
+++++
intro; treat_equalities; apply HNE'; apply l8_18_uniqueness with A1' A2' B2; Col; Perp.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
intro; treat_equalities; apply HNE'; apply l8_18_uniqueness with A1' A2' B2; Col; Perp.

*****
HNE''' : not (eq A3 A1)
HNE'''' : not (eq B3 A1)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HB3 : Midpoint B3 B1 A1
HNE'' : not (eq B1 A1)
B3 : Tpoint
HBet : Bet B1 A1 B2
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A1' A2' B2 A1
+++++
apply perp_col0 with A1 B1; assert_cols; Col; Perp.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
intro; treat_equalities; apply HNE'; apply l8_18_uniqueness with A1' A2' B2; Col; Perp.
apply perp_col0 with A1 B1; assert_cols; Col; Perp.

*****
H0 : Col B3 B1 A1
H : Col B1 A1 B2
HNE''' : not (eq A3 A1)
HNE'''' : not (eq B3 A1)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HB3 : Midpoint B3 B1 A1
HNE'' : not (eq B1 A1)
B3 : Tpoint
HBet : Bet B1 A1 B2
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B2 A1)
+++++
intro; treat_equalities; Col.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B1 I B3 I
+++++
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B1 A1 I)
+++++
intro H.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
intro H.

*****
H : Col B1 A1 I
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (A1 = I); auto.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
intro H.
assert (A1 = I); auto.

*****
H : Col B1 A1 I
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A1 I
+++++
apply perp_sym in HPerp1.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
intro H.
assert (A1 = I); auto.
apply perp_sym in HPerp1.

*****
H : Col B1 A1 I
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp B1 A1 A1' A2'
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A1 I
+++++
elim (perp_not_col2 _ _ _ _ HPerp1); intro H'; [apply l6_21 with A1 B1 A1' A2'|apply l6_21 with A1 B1 A2' A1']; assert_diffs; Col; assert_cols; ColR.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A1 I B1 A3 I B3
+++++
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet I A3 A1) (Bet I A1 A3)
+++++
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A3 B3 B1 I
+++++
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col I A3 B3)) (ex (fun T : Tpoint => and (Col T A3 B3) (Bet B1 T I)))
+++++
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].
split; [intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR|].

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T A3 B3) (Bet B1 T I))
+++++
exists B3; split; Col; unfold Midpoint in *; spliter; auto.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A3 B3 B1 A1
+++++
apply l12_6; apply par_not_col_strict with B1; Col.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
apply l12_6; apply par_not_col_strict with B1; Col.

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A3 B3 B1 A1
+++++
apply l12_9 with A1' A2'; Perp; Cop.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
apply l12_6; apply par_not_col_strict with B1; Col.
apply l12_9 with A1' A2'; Perp; Cop.

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1' A2' B3 B1
+++++
assert_cols; apply col2_cop__cop with B1 B2; Col; Cop; ColR.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].
apply out_conga with A3 B3 A3 B3; try apply conga_refl; try apply out_trivial; auto; do 2(split; auto); [|unfold Midpoint in *; spliter; Between].
left; apply col_two_sides_bet with B3; [assert_diffs; assert_cols; ColR|apply l9_2; apply l9_8_2 with B1].
apply l12_6; apply par_not_col_strict with B1; Col.

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A3 B3 B1)
+++++
intro; apply HNE'''; apply l6_21 with A1' A2' B1 B3; Col; try (intro; treat_equalities; auto); ColR.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HNE''' : A3 <> I).
assert (HNE'''' : B3 <> I).
assert (HNE''''' : A1 <> I).
destruct (l11_50_2 B1 A1 I B3 A3 I); try solve[unfold Midpoint in *; spliter; Cong].

*****
HNE''''' : not (eq A1 I)
HNE'''' : not (eq B3 I)
HNE''' : not (eq A3 I)
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B1 A1 I B3 A3 I
+++++
apply l11_16; try apply perp_per_1; try solve[assert_diffs; auto]; apply perp_col0 with A1' A2'; Perp; ColR.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).

*****
HCong' : Cong B1 I B3 I
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HFalse : B3 <> B1) by (assert_diffs; auto).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HFalse : B3 <> B1) by (assert_diffs; auto).

*****
HFalse : not (eq B3 B1)
HCong' : Cong B1 I B3 I
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HFalse; apply between_cong with I; Cong.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
apply cop__not_two_sides_one_side; auto; try intro HTS; try (apply HNC; ColR); try (apply HNC'; ColR); [assert_diffs; apply coplanar_perm_16, col2_cop__cop with A1' A2'; Col; Cop|].
destruct HTS as [HNC'' [_ [I [HC3 HBet]]]].
destruct (midpoint_existence B1 I) as [B3 HB3].
assert (HNE'' : B1 <> I) by (intro; treat_equalities; Col).
destruct (l8_18_existence A1' A2' B3) as [A3 [HC4 HPerp3]]; try (intro; apply HNC; assert_diffs; assert_cols; ColR).
assert (HCong : Cong A1 B1 A3 B3) by (apply HF; Col; Perp; ColR).
assert (HCong' : Cong B1 I B3 I).
assert (HFalse : B3 <> B1) by (assert_diffs; auto).
apply HFalse; apply between_cong with I; Cong.

*****
HFalse : not (eq B3 B1)
HCong' : Cong B1 I B3 I
HCong : Cong A1 B1 A3 B3
HPerp3 : Perp A1' A2' B3 A3
HC4 : Col A1' A2' A3
A3 : Tpoint
HNE'' : not (eq B1 I)
HB3 : Midpoint B3 B1 I
B3 : Tpoint
HBet : Bet B1 I B2
HC3 : Col I A1 A2
I : Tpoint
HNC'' : not (Col B1 A1 A2)
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet I B3 B1
+++++
unfold Midpoint in *; spliter; Between.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).

*****
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A3 B3 : Tpoint) (_ : Col A1 A2 A3) (_ : Col B1 B2 B3) (_ : Perp A1 A2 A3 B3), Cong A3 B3 A1 B1
+++++
intros A3 B3 HC3 HC4 HPerp3.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
intros A3 B3 HC3 HC4 HPerp3.

*****
HPerp3 : Perp A1 A2 A3 B3
HC4 : Col B1 B2 B3
HC3 : Col A1 A2 A3
A3,B3 : Tpoint
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A3 B3 A1 B1
+++++
apply HF; Col; Perp.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
intros A3 B3 HC3 HC4 HPerp3.
apply HF; Col; Perp.

*****
HPerp3 : Perp A1 A2 A3 B3
HC4 : Col B1 B2 B3
HC3 : Col A1 A2 A3
A3,B3 : Tpoint
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A1' A2' A3
+++++
ColR.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct H as [A1' [A2' [B1 [B2 [HNC [HNE [HCop HF]]]]]]].
destruct (l8_18_existence _ _ _ HNC) as [A1 [HC1 HPerp1]].
assert (HNC' : ~ Col A1' A2' B2).
destruct (l8_18_existence A1' A2' B2) as [A2 [HC2 HPerp2]]; Col.
assert (HNE' : A1 <> A2).
exists A1, A2, B1, B2.
split; [|split; [|split; [apply HF; Col; Perp|split]]]; try (apply l8_2; apply perp_per_2; apply perp_col0 with A1' A2'; Perp).
intros A3 B3 HC3 HC4 HPerp3.
apply HF; Col; Perp.
ColR.

*****
HPerp3 : Perp A1 A2 A3 B3
HC4 : Col B1 B2 B3
HC3 : Col A1 A2 A3
A3,B3 : Tpoint
HNE' : not (eq A1 A2)
HPerp2 : Perp A1' A2' B2 A2
HC2 : Col A1' A2' A2
A2 : Tpoint
HNC' : not (Col A1' A2' B2)
HPerp1 : Perp A1' A2' B1 A1
HC1 : Col A1' A2' A1
A1 : Tpoint
HF : forall (A3 A4 B3 B4 : Tpoint) (_ : Col A1' A2' A3) \n (_ : Col B1 B2 B3) (_ : Perp A1' A2' A3 B3) (_ : Col A1' A2' A4)\n (_ : Col B1 B2 B4) (_ : Perp A1' A2' A4 B4), Cong A3 B3 A4 B4
HCop : Coplanar A1' A2' B1 B2
HNE : not (eq B1 B2)
HNC : not (Col A1' A2' B1)
A1',A2',B1,B2 : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A1' A2' A3 B3
+++++
apply perp_sym; apply perp_col0 with A1 A2; assert_diffs; Col; ColR.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).

*****
HF : ex\n (fun A1 : Tpoint =>\n ex\n (fun A2 : Tpoint =>\n ex\n (fun B1 : Tpoint =>\n ex\n (fun B2 : Tpoint =>\n and (Per A2 A1 B1)\n (and (Per A1 A2 B2)\n (and (Cong A1 B1 A2 B2)\n (and (OS A1 A2 B1 B2)\n (forall (A3 B3 : Tpoint) (_ : Col A1 A2 A3)\n (_ : Col B1 B2 B3) (_ : Perp A1 A2 A3 B3),\n Cong A3 B3 A1 B1))))))))
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].

*****
posid : forall (A3 B3 : Tpoint) (_ : Col A D A3) (_ : Col B C B3)\n (_ : Perp A D A3 B3), Cong A3 B3 A B
HOS : OS A D B C
HCong : Cong A B D C
HPer2 : Per A D C
HPer1 : Per D A B
A,D,B,C : Tpoint
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert (HSac : Saccheri A B C D) by repeat (split; finish).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
assert (HSac : Saccheri A B C D) by repeat (split; finish).

*****
HSac : Saccheri A B C D
posid : forall (A3 B3 : Tpoint) (_ : Col A D A3) (_ : Col B C B3)\n (_ : Perp A D A3 B3), Cong A3 B3 A B
HOS : OS A D B C
HCong : Cong A B D C
HPer2 : Per A D C
HPer1 : Per D A B
A,D,B,C : Tpoint
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
apply (per_sac__rah A B C D); auto.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
assert (HSac : Saccheri A B C D) by repeat (split; finish).
apply (per_sac__rah A B C D); auto.

*****
HSac : Saccheri A B C D
posid : forall (A3 B3 : Tpoint) (_ : Col A D A3) (_ : Col B C B3)\n (_ : Perp A D A3 B3), Cong A3 B3 A B
HOS : OS A D B C
HCong : Cong A B D C
HPer2 : Per A D C
HPer1 : Per D A B
A,D,B,C : Tpoint
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
destruct (midpoint_existence B C) as [M HM].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
assert (HSac : Saccheri A B C D) by repeat (split; finish).
apply (per_sac__rah A B C D); auto.
destruct (midpoint_existence B C) as [M HM].

*****
HM : Midpoint M B C
M : Tpoint
HSac : Saccheri A B C D
posid : forall (A3 B3 : Tpoint) (_ : Col A D A3) (_ : Col B C B3)\n (_ : Perp A D A3 B3), Cong A3 B3 A B
HOS : OS A D B C
HCong : Cong A B D C
HPer2 : Per A D C
HPer1 : Per D A B
A,D,B,C : Tpoint
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
destruct (midpoint_existence A D) as [N HN].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
assert (HSac : Saccheri A B C D) by repeat (split; finish).
apply (per_sac__rah A B C D); auto.
destruct (midpoint_existence B C) as [M HM].
destruct (midpoint_existence A D) as [N HN].

*****
HN : Midpoint N A D
N : Tpoint
HM : Midpoint M B C
M : Tpoint
HSac : Saccheri A B C D
posid : forall (A3 B3 : Tpoint) (_ : Col A D A3) (_ : Col B C B3)\n (_ : Perp A D A3 B3), Cong A3 B3 A B
HOS : OS A D B C
HCong : Cong A B D C
HPer2 : Per A D C
HPer1 : Per D A B
A,D,B,C : Tpoint
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
assert(HPerp := mid2_sac__perp_lower A B C D M N HSac HM HN).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
assert (HSac : Saccheri A B C D) by repeat (split; finish).
apply (per_sac__rah A B C D); auto.
destruct (midpoint_existence B C) as [M HM].
destruct (midpoint_existence A D) as [N HN].
assert(HPerp := mid2_sac__perp_lower A B C D M N HSac HM HN).

*****
HPerp : Perp A D M N
HN : Midpoint N A D
N : Tpoint
HM : Midpoint M B C
M : Tpoint
HSac : Saccheri A B C D
posid : forall (A3 B3 : Tpoint) (_ : Col A D A3) (_ : Col B C B3)\n (_ : Perp A D A3 B3), Cong A3 B3 A B
HOS : OS A D B C
HCong : Cong A B D C
HPer2 : Per A D C
HPer1 : Per D A B
A,D,B,C : Tpoint
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
assert(Hdiff := sac_distincts A B C D HSac).
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
assert (HSac : Saccheri A B C D) by repeat (split; finish).
apply (per_sac__rah A B C D); auto.
destruct (midpoint_existence B C) as [M HM].
destruct (midpoint_existence A D) as [N HN].
assert(HPerp := mid2_sac__perp_lower A B C D M N HSac HM HN).
assert(Hdiff := sac_distincts A B C D HSac).

*****
Hdiff : and (not (eq A B))\n (and (not (eq B C))\n (and (not (eq C D))\n (and (not (eq A D)) (and (not (eq A C)) (not (eq B D))))))
HPerp : Perp A D M N
HN : Midpoint N A D
N : Tpoint
HM : Midpoint M B C
M : Tpoint
HSac : Saccheri A B C D
posid : forall (A3 B3 : Tpoint) (_ : Col A D A3) (_ : Col B C B3)\n (_ : Perp A D A3 B3), Cong A3 B3 A B
HOS : OS A D B C
HCong : Cong A B D C
HPer2 : Per A D C
HPer1 : Per D A B
A,D,B,C : Tpoint
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
spliter.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
assert (HSac : Saccheri A B C D) by repeat (split; finish).
apply (per_sac__rah A B C D); auto.
destruct (midpoint_existence B C) as [M HM].
destruct (midpoint_existence A D) as [N HN].
assert(HPerp := mid2_sac__perp_lower A B C D M N HSac HM HN).
assert(Hdiff := sac_distincts A B C D HSac).
spliter.

*****
H5 : not (eq B D)
H4 : not (eq A C)
H3 : not (eq A D)
H2 : not (eq C D)
H1 : not (eq B C)
H0 : not (eq A B)
HPerp : Perp A D M N
HN : Midpoint N A D
N : Tpoint
HM : Midpoint M B C
M : Tpoint
HSac : Saccheri A B C D
posid : forall (A3 B3 : Tpoint) (_ : Col A D A3) (_ : Col B C B3)\n (_ : Perp A D A3 B3), Cong A3 B3 A B
HOS : OS A D B C
HCong : Cong A B D C
HPer2 : Per A D C
HPer1 : Per D A B
A,D,B,C : Tpoint
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
assert_diffs.
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
assert (HSac : Saccheri A B C D) by repeat (split; finish).
apply (per_sac__rah A B C D); auto.
destruct (midpoint_existence B C) as [M HM].
destruct (midpoint_existence A D) as [N HN].
assert(HPerp := mid2_sac__perp_lower A B C D M N HSac HM HN).
assert(Hdiff := sac_distincts A B C D HSac).
spliter.
assert_diffs.

*****
H12 : not (eq M N)
H10 : not (eq M C)
H9 : not (eq M B)
H8 : not (eq N D)
H7 : not (eq N A)
H5 : not (eq B D)
H4 : not (eq A C)
H3 : not (eq A D)
H2 : not (eq C D)
H1 : not (eq B C)
H0 : not (eq A B)
HPerp : Perp A D M N
HN : Midpoint N A D
N : Tpoint
HM : Midpoint M B C
M : Tpoint
HSac : Saccheri A B C D
posid : forall (A3 B3 : Tpoint) (_ : Col A D A3) (_ : Col B C B3)\n (_ : Perp A D A3 B3), Cong A3 B3 A B
HOS : OS A D B C
HCong : Cong A B D C
HPer2 : Per A D C
HPer1 : Per D A B
A,D,B,C : Tpoint
H : posidonius_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
apply (t22_7__per _ _ _ D M N); Between; [apply perp_per_1; auto; apply (perp_col1 _ _ _ D); Col; Perp| apply cong_left_commutativity; apply posid; Col; Perp].
-----
Lemma posidonius_postulate__rah : posidonius_postulate -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro H.
assert (HF : exists A1 A2 B1 B2, Per A2 A1 B1 /\\ Per A1 A2 B2 /\\ Cong A1 B1 A2 B2 /\\ OS A1 A2 B1 B2 /\\ forall A3 B3, Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 -> Cong A3 B3 A1 B1).
destruct HF as [A [D [B [C [HPer1 [HPer2 [HCong [HOS posid]]]]]]]].
assert (HSac : Saccheri A B C D) by repeat (split; finish).
apply (per_sac__rah A B C D); auto.
destruct (midpoint_existence B C) as [M HM].
destruct (midpoint_existence A D) as [N HN].
assert(HPerp := mid2_sac__perp_lower A B C D M N HSac HM HN).
assert(Hdiff := sac_distincts A B C D HSac).
spliter.
assert_diffs.
apply (t22_7__per _ _ _ D M N); Between; [apply perp_per_1; auto; apply (perp_col1 _ _ _ D); Col; Perp| apply cong_left_commutativity; apply posid; Col; Perp].

*****

*****

+++++
Qed.
-----
End posidonius_postulate_rah.
-----
