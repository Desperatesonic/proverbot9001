Require Import ExtLib.Structures.Monads.
-----
Require Import ExtLib.Structures.Monoid.
-----
Set Implicit Arguments.
-----
Set Maximal Implicit Insertion.
-----
Section ReaderType.
-----
Variable S : Type.
-----
Record reader (t : Type) : Type := mkReader\n  { runReader : S -> t }.
-----
Global Instance Monad_reader : Monad reader :=\n  { ret  := fun _ v => mkReader (fun _ => v)\n  ; bind := fun _ _ c1 c2 =>\n    mkReader (fun s =>\n      let v := runReader c1 s in\n      runReader (c2 v) s)\n  }.
-----
Global Instance MonadReader_reader : MonadReader S reader :=\n  { ask := mkReader (fun x => x)\n  ; local := fun _ f cmd => mkReader (fun x => runReader cmd (f x))\n  }.
-----
Variable m : Type -> Type.
-----
Record readerT (t : Type) : Type := mkReaderT\n  { runReaderT : S -> m t }.
-----
Variable M : Monad m.
-----
Global Instance Monad_readerT : Monad readerT :=\n  { ret := fun _ x => mkReaderT (fun s => @ret _ M _ x)\n  ; bind := fun _ _ c1 c2 =>\n    mkReaderT (fun s =>\n      @bind _ M _ _ (runReaderT c1 s) (fun v =>\n        runReaderT (c2 v) s))\n  }.
-----
Global Instance MonadReader_readerT : MonadReader S readerT :=\n  { ask := mkReaderT (fun x => ret x)\n  ; local := fun _ f cmd => mkReaderT (fun x => runReaderT cmd (f x))\n  }.
-----
Global Instance MonadT_readerT : MonadT readerT m :=\n  { lift := fun _ c => mkReaderT (fun _ => c)\n  }.
-----
Global Instance MonadZero_readerT (MZ : MonadZero m) : MonadZero readerT :=\n  { mzero := fun _ => lift mzero }.
-----
Global Instance MonadState_readerT T (MS : MonadState T m) : MonadState T readerT :=\n  { get := lift get\n  ; put := fun x => lift (put x)\n  }.
-----
Global Instance MonadWriter_readerT T (Mon : Monoid T) (MW : MonadWriter Mon m) : MonadWriter Mon readerT :=\n  { tell := fun v => lift (tell v)\n  ; listen := fun _ c => mkReaderT (fun s => listen (runReaderT c s))\n  ; pass := fun _ c => mkReaderT (fun s => pass (runReaderT c s))\n  }.
-----
Global Instance MonadExc_readerT {E} (ME : MonadExc E m) : MonadExc E readerT :=\n  { raise := fun _ v => lift (raise v)\n  ; catch := fun _ c h => mkReaderT (fun s => catch (runReaderT c s) (fun x => runReaderT (h x) s))\n  }.
-----
Global Instance MonadPlus_readerT {MP:MonadPlus m} : MonadPlus readerT :=\n  { mplus _A _B mA mB := mkReaderT (fun r => mplus (runReaderT mA r)\n                                                   (runReaderT mB r))\n  }.
-----
Global Instance MonadFix_readerT (MF : MonadFix m) : MonadFix readerT :=\n  { mfix := fun _ _ r x =>\n    mkReaderT (fun s => mfix2 _ (fun f x => runReaderT (r (fun x => mkReaderT (f x)) x)) x s)\n  }.
-----
End ReaderType.
-----
Arguments mkReaderT {S} {m} {t} _.
-----
Arguments MonadWriter_readerT {S} {m} {T} {Mon} (_).
-----
Global Instance MonadReader_lift_readerT T S m (R : MonadReader T m) : MonadReader T (readerT S m) :=\n{ ask := mkReaderT (fun _ => ask)\n; local := fun _ f c =>\n  mkReaderT (fun s => local f (runReaderT c s))\n}.
-----
