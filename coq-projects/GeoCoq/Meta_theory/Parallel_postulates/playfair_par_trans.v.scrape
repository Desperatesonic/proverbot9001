Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section playfair_par_trans.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma playfair_implies_par_trans :\n  playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_s_postulate, postulate_of_transitivity_of_parallelism
+++++
Proof.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_s_postulate, postulate_of_transitivity_of_parallelism
+++++
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.

*****
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
assert_diffs.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.

*****
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].

*****
H3 : Col A1 A2 C1
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
-
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-

*****
H3 : Col A1 A2 C1
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
right.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.

*****
H3 : Col A1 A2 C1
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A1 A2)) (and (not (eq C1 C2)) (and (Col A1 C1 C2) (Col A2 C1 C2)))
+++++
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.

*****

*****

+++++
-
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-

*****
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
left.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.

*****
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A1 A2 C1 C2
+++++
repeat split; auto.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.

*****
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
apply par_symmetry in HBC.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
apply par_symmetry in HBC.

*****
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par C1 C2 B1 B2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
destruct HBC; [destruct HAB|]; [|spliter..].
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
apply par_symmetry in HBC.
destruct HBC; [destruct HAB|]; [|spliter..].

*****
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
H4 : Par_strict C1 C2 B1 B2
H5 : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
-
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
apply par_symmetry in HBC.
destruct HBC; [destruct HAB|]; [|spliter..].
-

*****
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
H4 : Par_strict C1 C2 B1 B2
H5 : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
assert_ncols; apply coplanar_pseudo_trans with B1 B2 C1; [Col| | |Cop..]; apply coplanar_pseudo_trans with A1 A2 B1; Col; Cop.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
apply par_symmetry in HBC.
destruct HBC; [destruct HAB|]; [|spliter..].
-
assert_ncols; apply coplanar_pseudo_trans with B1 B2 C1; [Col| | |Cop..]; apply coplanar_pseudo_trans with A1 A2 B1; Col; Cop.

*****

*****

+++++
-
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
apply par_symmetry in HBC.
destruct HBC; [destruct HAB|]; [|spliter..].
-
assert_ncols; apply coplanar_pseudo_trans with B1 B2 C1; [Col| | |Cop..]; apply coplanar_pseudo_trans with A1 A2 B1; Col; Cop.
-

*****
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
H4 : Par_strict C1 C2 B1 B2
H8 : Col A2 B1 B2
H7 : Col A1 B1 B2
H6 : not (eq B1 B2)
H5 : not (eq A1 A2)
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
apply coplanar_perm_16, col2_cop__cop with B1 B2; Col; Cop.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
apply par_symmetry in HBC.
destruct HBC; [destruct HAB|]; [|spliter..].
-
assert_ncols; apply coplanar_pseudo_trans with B1 B2 C1; [Col| | |Cop..]; apply coplanar_pseudo_trans with A1 A2 B1; Col; Cop.
-
apply coplanar_perm_16, col2_cop__cop with B1 B2; Col; Cop.

*****

*****

+++++
-
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
apply par_symmetry in HBC.
destruct HBC; [destruct HAB|]; [|spliter..].
-
assert_ncols; apply coplanar_pseudo_trans with B1 B2 C1; [Col| | |Cop..]; apply coplanar_pseudo_trans with A1 A2 B1; Col; Cop.
-
apply coplanar_perm_16, col2_cop__cop with B1 B2; Col; Cop.
-

*****
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
H7 : Col C2 B1 B2
H6 : Col C1 B1 B2
H5 : not (eq B1 B2)
H4 : not (eq C1 C2)
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
apply col2_cop__cop with B1 B2; Col; Cop.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.

*****
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
+++++
intros [X []].
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].

*****
H5 : Col X C1 C2
H4 : Col X A1 A2
X : Tpoint
H3 : not (Col A1 A2 C1)
H2 : Coplanar A1 A2 C1 B1
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.

*****

*****

+++++
-
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-

*****
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].

*****
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].

*****
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.

*****
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OSP A1 A2 C1 B1 B2
+++++
apply cop2_os__osp with A1 A2; Cop; Side.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.

*****
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').

*****
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
+++++
intros X HX1 HX2.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
intros X HX1 HX2.

*****
HX2 : Col X C1 C'
HX1 : Coplanar A1 A2 B1 X
X : Tpoint
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (par_not_col A1 A2 B1 B2 X HAB).
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
intros X HX1 HX2.
apply (par_not_col A1 A2 B1 B2 X HAB).

*****
HX2 : Col X C1 C'
HX1 : Coplanar A1 A2 B1 X
X : Tpoint
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X A1 A2
+++++
-
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
intros X HX1 HX2.
apply (par_not_col A1 A2 B1 B2 X HAB).
-

*****
HX2 : Col X C1 C'
HX1 : Coplanar A1 A2 B1 X
X : Tpoint
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X A1 A2
+++++
apply (l9_30 A1 A2 C1 A1 A2 B1 B1); Cop.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
intros X HX1 HX2.
apply (par_not_col A1 A2 B1 B2 X HAB).
-
apply (l9_30 A1 A2 C1 A1 A2 B1 B1); Cop.

*****
HX2 : Col X C1 C'
HX1 : Coplanar A1 A2 B1 X
X : Tpoint
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 B1)
+++++
apply par_strict_not_col_1 with B2, HAB.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
intros X HX1 HX2.
apply (par_not_col A1 A2 B1 B2 X HAB).
-
apply (l9_30 A1 A2 C1 A1 A2 B1 B1); Cop.
apply par_strict_not_col_1 with B2, HAB.

*****
HX2 : Col X C1 C'
HX1 : Coplanar A1 A2 B1 X
X : Tpoint
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 X
+++++
apply col_cop__cop with C'; Col.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
intros X HX1 HX2.
apply (par_not_col A1 A2 B1 B2 X HAB).
-
apply (l9_30 A1 A2 C1 A1 A2 B1 B1); Cop.
apply par_strict_not_col_1 with B2, HAB.
apply col_cop__cop with C'; Col.

*****

*****

+++++
-
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
intros X HX1 HX2.
apply (par_not_col A1 A2 B1 B2 X HAB).
-
apply (l9_30 A1 A2 C1 A1 A2 B1 B1); Cop.
apply par_strict_not_col_1 with B2, HAB.
apply col_cop__cop with C'; Col.
-

*****
HX2 : Col X C1 C'
HX1 : Coplanar A1 A2 B1 X
X : Tpoint
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X B1 B2
+++++
apply (l9_30 A1 A2 B1 B1 B2 C1 C1); Cop.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
intros X HX1 HX2.
apply (par_not_col A1 A2 B1 B2 X HAB).
-
apply (l9_30 A1 A2 C1 A1 A2 B1 B1); Cop.
apply par_strict_not_col_1 with B2, HAB.
apply col_cop__cop with C'; Col.
-
apply (l9_30 A1 A2 B1 B1 B2 C1 C1); Cop.

*****
HX2 : Col X C1 C'
HX1 : Coplanar A1 A2 B1 X
X : Tpoint
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B1 B2 C1)
+++++
apply par_strict_not_col_1 with C2, HBC.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
intros X HX1 HX2.
apply (par_not_col A1 A2 B1 B2 X HAB).
-
apply (l9_30 A1 A2 C1 A1 A2 B1 B1); Cop.
apply par_strict_not_col_1 with B2, HAB.
apply col_cop__cop with C'; Col.
-
apply (l9_30 A1 A2 B1 B1 B2 C1 C1); Cop.
apply par_strict_not_col_1 with C2, HBC.

*****
HX2 : Col X C1 C'
HX1 : Coplanar A1 A2 B1 X
X : Tpoint
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B1 B2 C1 X
+++++
apply col_cop__cop with C'; Col.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').

*****
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
left; apply par_strict_col_par_strict with C'; auto.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.

*****
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A1 A2 C1 C'
+++++
repeat split; auto.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.
repeat split; auto.

*****
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C')))
+++++
intros [X []].
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.
repeat split; auto.
intros [X []].

*****
H3 : Col X C1 C'
H2 : Col X A1 A2
X : Tpoint
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HC' with X; Cop.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.

*****
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C' C2
+++++
assert (HBC' : Par_strict B1 B2 C1 C').
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.
assert (HBC' : Par_strict B1 B2 C1 C').

*****
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B1 B2 C1 C'
+++++
repeat split; Col.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.
assert (HBC' : Par_strict B1 B2 C1 C').
repeat split; Col.

*****
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun X : Tpoint => and (Col X B1 B2) (Col X C1 C')))
+++++
intros [X []].
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.
assert (HBC' : Par_strict B1 B2 C1 C').
repeat split; Col.
intros [X []].

*****
H3 : Col X C1 C'
H2 : Col X B1 B2
X : Tpoint
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HC' with X; trivial.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.
assert (HBC' : Par_strict B1 B2 C1 C').
repeat split; Col.
intros [X []].
apply HC' with X; trivial.

*****
H3 : Col X C1 C'
H2 : Col X B1 B2
X : Tpoint
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 X
+++++
apply col_cop__cop with B2; Col; Cop.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.
assert (HBC' : Par_strict B1 B2 C1 C').

*****
HBC' : Par_strict B1 B2 C1 C'
HC' : forall (X : Tpoint) (_ : Coplanar A1 A2 B1 X), not (Col X C1 C')
HC1C' : not (eq C1 C')
HCop2 : Coplanar B1 B2 C1 C'
HCop1 : Coplanar A1 A2 C1 C'
C' : Tpoint
HNCop : not (Coplanar A1 A2 C1 B1)
H1 : not (eq C1 C2)
H0 : not (eq A1 A2)
H : not (eq B1 B2)
HBC : Par_strict B1 B2 C1 C2
HAB : Par_strict A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C' C2
+++++
destruct (HP B1 B2 C1 C2 C1 C' C1); Par; Col.
-----
Lemma playfair_implies_par_trans : playfair_s_postulate -> postulate_of_transitivity_of_parallelism.
Proof.
intros HP A1 A2 B1 B2 C1 C2 HAB HBC.
assert_diffs.
destruct (cop_dec A1 A2 C1 B1) as [|HNCop]; [induction (col_dec A1 A2 C1)|].
-
right.
destruct (HP B1 B2 C1 C2 A1 A2 C1); Par; Col.
-
left.
repeat split; auto.
intros [X []].
destruct (HP B1 B2 A1 A2 C1 C2 X); Par; Col.
-
apply (par_not_col_strict A1 A2 B1 B2 B1) in HAB; [|Col|intro; apply HNCop; Cop].
apply (par_not_col_strict B1 B2 C1 C2 C1) in HBC; [|Col|intro; apply HNCop, coplanar_perm_1, col_cop__cop with B2; Cop].
destruct (cop_osp__ex_cop2 A1 A2 C1 B1 B2 C1) as [C' [HCop1 [HCop2 HC1C']]]; Cop.
apply cop2_os__osp with A1 A2; Cop; Side.
assert (HC' : forall X, Coplanar A1 A2 B1 X -> ~ Col X C1 C').
left; apply par_strict_col_par_strict with C'; auto.
assert (HBC' : Par_strict B1 B2 C1 C').
destruct (HP B1 B2 C1 C2 C1 C' C1); Par; Col.

*****

*****

+++++
Qed.
-----
End playfair_par_trans.
-----
