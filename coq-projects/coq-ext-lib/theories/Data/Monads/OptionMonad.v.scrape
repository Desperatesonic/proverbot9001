Require Import ExtLib.Structures.Monads.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Import MonadNotation.
-----
Local Open Scope monad_scope.
-----
Global Instance Monad_option : Monad option :=\n{ ret  := @Some\n; bind := fun _ _ c1 c2 => match c1 with\n                             | None => None\n                             | Some v => c2 v\n                           end\n}.
-----
Global Instance Zero_option : MonadZero option :=\n{ mzero := @None }.
-----
Global Instance Plus_option : MonadPlus option :=\n{ mplus _A _B aM bM :=\n    match aM with\n    | None => liftM inr bM\n    | Some a => Some (inl a)\n    end\n}.
-----
Section Trans.
-----
Variable m : Type -> Type.
-----
Inductive optionT a := mkOptionT { unOptionT : m (option a) }.
-----
Context {M : Monad m}.
-----
Global Instance Monad_optionT : Monad optionT :=\n  { ret _A := fun x => mkOptionT (ret (Some x))\n  ; bind _A _B aMM f := mkOptionT\n      (aM <- unOptionT aMM ;;\n       match aM with\n       | None => ret None\n       | Some a => unOptionT (f a)\n       end)\n  }.
-----
Global Instance Zero_optionT : MonadZero optionT :=\n  { mzero _A := mkOptionT (ret None) }.
-----
Global Instance MonadT_optionT : MonadT optionT m :=\n  { lift _A aM := mkOptionT (liftM ret aM) }.
-----
Global Instance State_optionT {T} (SM : MonadState T m) : MonadState T optionT :=\n  { get := lift get\n  ; put v := lift (put v)\n  }.
-----
Instance Plus_optionT_right : MonadPlus optionT :=\n  { mplus _A _B a b :=\n      mkOptionT (bind (unOptionT b) (fun b =>\n        match b with\n          | None =>\n            bind (unOptionT a) (fun a =>\n                                  match a with\n                                    | None => ret None\n                                    | Some a => ret (Some (inl a))\n                                  end)\n          | Some b => ret (Some (inr b))\n        end))\n  }.
-----
Instance Plus_optionT_left : MonadPlus optionT :=\n  { mplus _A _B a b :=\n      mkOptionT (bind (unOptionT a) (fun a =>\n        match a with\n          | None =>\n            bind (unOptionT b) (fun b =>\n                                  match b with\n                                    | None => ret None\n                                    | Some b => ret (Some (inr b))\n                                  end)\n          | Some a => ret (Some (inl a))\n        end))\n  }.
-----
Global Instance Plus_optionT : MonadPlus optionT := Plus_optionT_left.
-----
Global Instance Reader_optionT {T} (SM : MonadReader T m) : MonadReader T optionT :=\n  { ask := lift ask\n  ; local _T v cmd := mkOptionT (local v (unOptionT cmd))\n  }.
-----
Instance OptionTError : MonadExc unit optionT :=\n  { raise _u _A := mzero\n  ; catch _A aMM f := mkOptionT\n      (aM <- unOptionT aMM ;;\n       match aM with\n       | None => unOptionT (f tt)\n       | Some x => ret (Some x)\n       end)\n  }.
-----
End Trans.
-----
