Require Import GeoCoq.Axioms.tarski_axioms.
-----
Require Import GeoCoq.Axioms.gupta_inspired_variant_axioms.
-----
Require Import GeoCoq.Tarski_dev.Ch05_bet_le.
-----
Section Gupta_inspired_variant_of_Tarski_neutral_dimensionless_to_Tarski_neutral_dimensionless.
-----
Context `{ITnEQD:Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma g2_1 : forall A B, CongG A B A B.
-----
Lemma g2_1 : forall A B, CongG A B A B.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B : TpointG, CongG A B A B
+++++
Proof.
-----
Lemma g2_1 : forall A B, CongG A B A B.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B : TpointG, CongG A B A B
+++++
intros A B.
-----
Lemma g2_1 : forall A B, CongG A B A B.
Proof.
intros A B.

*****
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B A B
+++++
apply cong_inner_transitivityG with B A.
-----
Lemma g2_1 : forall A B, CongG A B A B.
Proof.
intros A B.
apply cong_inner_transitivityG with B A.

*****
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B B A
+++++
apply cong_pseudo_reflexivityG.
-----
Lemma g2_1 : forall A B, CongG A B A B.
Proof.
intros A B.
apply cong_inner_transitivityG with B A.

*****
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B B A
+++++
apply cong_pseudo_reflexivityG.
-----
Lemma g2_1 : forall A B, CongG A B A B.
Proof.
intros A B.
apply cong_inner_transitivityG with B A.

*****

*****

+++++
Qed.
-----
Lemma g2_2 : forall A B C D,\n  CongG A B C D -> CongG C D A B.
-----
Lemma g2_2 : forall A B C D, CongG A B C D -> CongG C D A B.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : CongG A B C D), CongG C D A B
+++++
Proof.
-----
Lemma g2_2 : forall A B C D, CongG A B C D -> CongG C D A B.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : CongG A B C D), CongG C D A B
+++++
intros A B C D HCong.
-----
Lemma g2_2 : forall A B C D, CongG A B C D -> CongG C D A B.
Proof.
intros A B C D HCong.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C D A B
+++++
apply cong_inner_transitivityG with C D.
-----
Lemma g2_2 : forall A B C D, CongG A B C D -> CongG C D A B.
Proof.
intros A B C D HCong.
apply cong_inner_transitivityG with C D.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C D C D
+++++
auto.
-----
Lemma g2_2 : forall A B C D, CongG A B C D -> CongG C D A B.
Proof.
intros A B C D HCong.
apply cong_inner_transitivityG with C D.
auto.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C D C D
+++++
apply g2_1.
-----
Lemma g2_2 : forall A B C D, CongG A B C D -> CongG C D A B.
Proof.
intros A B C D HCong.
apply cong_inner_transitivityG with C D.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B C D
+++++
auto.
-----
Lemma g2_2 : forall A B C D, CongG A B C D -> CongG C D A B.
Proof.
intros A B C D HCong.
apply cong_inner_transitivityG with C D.

*****

*****

+++++
Qed.
-----
Lemma cong_inner_transitivityT : forall A B C D E F,\n  CongG A B C D -> CongG A B E F -> CongG C D E F.
-----
Lemma cong_inner_transitivityT : forall A B C D E F, CongG A B C D -> CongG A B E F -> CongG C D E F.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D E F : TpointG) (_ : CongG A B C D) (_ : CongG A B E F), CongG C D E F
+++++
Proof.
-----
Lemma cong_inner_transitivityT : forall A B C D E F, CongG A B C D -> CongG A B E F -> CongG C D E F.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D E F : TpointG) (_ : CongG A B C D) (_ : CongG A B E F), CongG C D E F
+++++
intros A B C D E F HCong1 HCong2.
-----
Lemma cong_inner_transitivityT : forall A B C D E F, CongG A B C D -> CongG A B E F -> CongG C D E F.
Proof.
intros A B C D E F HCong1 HCong2.

*****
HCong2 : CongG A B E F
HCong1 : CongG A B C D
A,B,C,D,E,F : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C D E F
+++++
apply cong_inner_transitivityG with A B.
-----
Lemma cong_inner_transitivityT : forall A B C D E F, CongG A B C D -> CongG A B E F -> CongG C D E F.
Proof.
intros A B C D E F HCong1 HCong2.
apply cong_inner_transitivityG with A B.

*****
HCong2 : CongG A B E F
HCong1 : CongG A B C D
A,B,C,D,E,F : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C D A B
+++++
apply g2_2.
-----
Lemma cong_inner_transitivityT : forall A B C D E F, CongG A B C D -> CongG A B E F -> CongG C D E F.
Proof.
intros A B C D E F HCong1 HCong2.
apply cong_inner_transitivityG with A B.
apply g2_2.

*****
HCong2 : CongG A B E F
HCong1 : CongG A B C D
A,B,C,D,E,F : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B C D
+++++
auto.
-----
Lemma cong_inner_transitivityT : forall A B C D E F, CongG A B C D -> CongG A B E F -> CongG C D E F.
Proof.
intros A B C D E F HCong1 HCong2.
apply cong_inner_transitivityG with A B.

*****
HCong2 : CongG A B E F
HCong1 : CongG A B C D
A,B,C,D,E,F : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG E F A B
+++++
apply g2_2.
-----
Lemma cong_inner_transitivityT : forall A B C D E F, CongG A B C D -> CongG A B E F -> CongG C D E F.
Proof.
intros A B C D E F HCong1 HCong2.
apply cong_inner_transitivityG with A B.
apply g2_2.

*****
HCong2 : CongG A B E F
HCong1 : CongG A B C D
A,B,C,D,E,F : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B E F
+++++
auto.
-----
Lemma cong_inner_transitivityT : forall A B C D E F, CongG A B C D -> CongG A B E F -> CongG C D E F.
Proof.
intros A B C D E F HCong1 HCong2.
apply cong_inner_transitivityG with A B.

*****

*****

+++++
Qed.
-----
Lemma g2_3 : forall A B C D,\n  CongG A B C D -> CongG B A C D.
-----
Lemma g2_3 : forall A B C D, CongG A B C D -> CongG B A C D.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : CongG A B C D), CongG B A C D
+++++
Proof.
-----
Lemma g2_3 : forall A B C D, CongG A B C D -> CongG B A C D.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : CongG A B C D), CongG B A C D
+++++
Proof.
-----
Lemma g2_3 : forall A B C D, CongG A B C D -> CongG B A C D.
Proof.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : CongG A B C D), CongG B A C D
+++++
intros A B C D HCong.
-----
Lemma g2_3 : forall A B C D, CongG A B C D -> CongG B A C D.
Proof.
Proof.
intros A B C D HCong.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B A C D
+++++
apply cong_inner_transitivityT with A B.
-----
Lemma g2_3 : forall A B C D, CongG A B C D -> CongG B A C D.
Proof.
Proof.
intros A B C D HCong.
apply cong_inner_transitivityT with A B.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B B A
+++++
auto.
-----
Lemma g2_3 : forall A B C D, CongG A B C D -> CongG B A C D.
Proof.
Proof.
intros A B C D HCong.
apply cong_inner_transitivityT with A B.
auto.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B B A
+++++
apply cong_pseudo_reflexivityG.
-----
Lemma g2_3 : forall A B C D, CongG A B C D -> CongG B A C D.
Proof.
Proof.
intros A B C D HCong.
apply cong_inner_transitivityT with A B.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B C D
+++++
auto.
-----
Lemma g2_3 : forall A B C D, CongG A B C D -> CongG B A C D.
Proof.
Proof.
intros A B C D HCong.
apply cong_inner_transitivityT with A B.

*****

*****

+++++
Qed.
-----
Lemma g2_4 : forall A B C D,\n  CongG A B C D -> CongG A B D C.
-----
Lemma g2_4 : forall A B C D, CongG A B C D -> CongG A B D C.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : CongG A B C D), CongG A B D C
+++++
Proof.
-----
Lemma g2_4 : forall A B C D, CongG A B C D -> CongG A B D C.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : CongG A B C D), CongG A B D C
+++++
intros A B C D HCong.
-----
Lemma g2_4 : forall A B C D, CongG A B C D -> CongG A B D C.
Proof.
intros A B C D HCong.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B D C
+++++
apply g2_2.
-----
Lemma g2_4 : forall A B C D, CongG A B C D -> CongG A B D C.
Proof.
intros A B C D HCong.
apply g2_2.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG D C A B
+++++
apply g2_3.
-----
Lemma g2_4 : forall A B C D, CongG A B C D -> CongG A B D C.
Proof.
intros A B C D HCong.
apply g2_2.
apply g2_3.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C D A B
+++++
apply g2_2.
-----
Lemma g2_4 : forall A B C D, CongG A B C D -> CongG A B D C.
Proof.
intros A B C D HCong.
apply g2_2.
apply g2_3.
apply g2_2.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B C D
+++++
auto.
-----
Lemma g2_4 : forall A B C D, CongG A B C D -> CongG A B D C.
Proof.
intros A B C D HCong.
apply g2_2.
apply g2_3.
apply g2_2.
auto.

*****

*****

+++++
Qed.
-----
Lemma g2_5 : forall A B C D,\n  CongG A B C D -> (A = B <-> C = D).
-----
Lemma g2_5 : forall A B C D, CongG A B C D -> (A = B <-> C = D).

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : CongG A B C D), iff (eq A B) (eq C D)
+++++
Proof.
-----
Lemma g2_5 : forall A B C D, CongG A B C D -> (A = B <-> C = D).
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : CongG A B C D), iff (eq A B) (eq C D)
+++++
intros A B C D HCong.
-----
Lemma g2_5 : forall A B C D, CongG A B C D -> (A = B <-> C = D).
Proof.
intros A B C D HCong.

*****
HCong : CongG A B C D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
iff (eq A B) (eq C D)
+++++
split; intro H; rewrite H in HCong; [apply g2_2 in HCong|]; apply cong_identityG in HCong; auto.
-----
Lemma g2_5 : forall A B C D, CongG A B C D -> (A = B <-> C = D).
Proof.
intros A B C D HCong.
split; intro H; rewrite H in HCong; [apply g2_2 in HCong|]; apply cong_identityG in HCong; auto.

*****

*****

+++++
Qed.
-----
Lemma g2_6 : forall A B,\n  BetG A B B /\ CongG B B A A.
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B : TpointG, and (BetG A B B) (CongG B B A A)
+++++
Proof.
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B : TpointG, and (BetG A B B) (CongG B B A A)
+++++
intros A B.
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.
intros A B.

*****
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
and (BetG A B B) (CongG B B A A)
+++++
destruct (segment_constructionG A B A A) as [C [HBet HCong]].
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.
intros A B.
destruct (segment_constructionG A B A A) as [C [HBet HCong]].

*****
HCong : CongG B C A A
HBet : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
and (BetG A B B) (CongG B B A A)
+++++
assert (B = C).
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.
intros A B.
destruct (segment_constructionG A B A A) as [C [HBet HCong]].
assert (B = C).

*****
HCong : CongG B C A A
HBet : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq B C
+++++
apply g2_5 with A A.
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.
intros A B.
destruct (segment_constructionG A B A A) as [C [HBet HCong]].
assert (B = C).
apply g2_5 with A A.

*****
HCong : CongG B C A A
HBet : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C A A
+++++
auto.
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.
intros A B.
destruct (segment_constructionG A B A A) as [C [HBet HCong]].
assert (B = C).
apply g2_5 with A A.

*****
HCong : CongG B C A A
HBet : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq A A
+++++
auto.
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.
intros A B.
destruct (segment_constructionG A B A A) as [C [HBet HCong]].
assert (B = C).

*****
H : eq B C
HCong : CongG B C A A
HBet : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
and (BetG A B B) (CongG B B A A)
+++++
idtac.
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.
intros A B.
destruct (segment_constructionG A B A A) as [C [HBet HCong]].
assert (B = C).
idtac.

*****
H : eq B C
HCong : CongG B C A A
HBet : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
and (BetG A B B) (CongG B B A A)
+++++
rewrite H in *.
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.
intros A B.
destruct (segment_constructionG A B A A) as [C [HBet HCong]].
assert (B = C).
idtac.
rewrite H in *.

*****
H : eq B C
HCong : CongG C C A A
HBet : BetG A C C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
and (BetG A C C) (CongG C C A A)
+++++
auto.
-----
Lemma g2_6 : forall A B, BetG A B B /\\ CongG B B A A.
Proof.
intros A B.
destruct (segment_constructionG A B A A) as [C [HBet HCong]].
assert (B = C).

*****

*****

+++++
Qed.
-----
Lemma g2_7 : forall A B C A' B' C',\n  CongG A B A' B' -> CongG B C B' C' ->\n  BetG A B C -> BetG A' B' C' ->\n  CongG A C A' C'.
-----
Lemma g2_7 : forall A B C A' B' C', CongG A B A' B' -> CongG B C B' C' -> BetG A B C -> BetG A' B' C' -> CongG A C A' C'.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C A' B' C' : TpointG) (_ : CongG A B A' B') (_ : CongG B C B' C') (_ : BetG A B C) (_ : BetG A' B' C'), CongG A C A' C'
+++++
Proof.
-----
Lemma g2_7 : forall A B C A' B' C', CongG A B A' B' -> CongG B C B' C' -> BetG A B C -> BetG A' B' C' -> CongG A C A' C'.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C A' B' C' : TpointG) (_ : CongG A B A' B') (_ : CongG B C B' C') (_ : BetG A B C) (_ : BetG A' B' C'), CongG A C A' C'
+++++
intros A B C A' B' C' HCong1 HCong2 HBet1 HBet2.
-----
Lemma g2_7 : forall A B C A' B' C', CongG A B A' B' -> CongG B C B' C' -> BetG A B C -> BetG A' B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HCong1 HCong2 HBet1 HBet2.

*****
HBet2 : BetG A' B' C'
HBet1 : BetG A B C
HCong2 : CongG B C B' C'
HCong1 : CongG A B A' B'
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A C A' C'
+++++
elim (point_equality_decidabilityG A B); intro HDiff1; [rewrite HDiff1 in *; clear HDiff1|].
-----
Lemma g2_7 : forall A B C A' B' C', CongG A B A' B' -> CongG B C B' C' -> BetG A B C -> BetG A' B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HCong1 HCong2 HBet1 HBet2.
elim (point_equality_decidabilityG A B); intro HDiff1; [rewrite HDiff1 in *; clear HDiff1|].

*****
HBet2 : BetG A' B' C'
HBet1 : BetG B B C
HCong2 : CongG B C B' C'
HCong1 : CongG B B A' B'
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C A' C'
+++++
assert (HEq : A' = B') by (apply g2_5 with B B; try apply g2_2; auto).
-----
Lemma g2_7 : forall A B C A' B' C', CongG A B A' B' -> CongG B C B' C' -> BetG A B C -> BetG A' B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HCong1 HCong2 HBet1 HBet2.
elim (point_equality_decidabilityG A B); intro HDiff1; [rewrite HDiff1 in *; clear HDiff1|].
assert (HEq : A' = B') by (apply g2_5 with B B; try apply g2_2; auto).

*****
HEq : eq A' B'
HBet2 : BetG A' B' C'
HBet1 : BetG B B C
HCong2 : CongG B C B' C'
HCong1 : CongG B B A' B'
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C A' C'
+++++
rewrite HEq; auto.
-----
Lemma g2_7 : forall A B C A' B' C', CongG A B A' B' -> CongG B C B' C' -> BetG A B C -> BetG A' B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HCong1 HCong2 HBet1 HBet2.
elim (point_equality_decidabilityG A B); intro HDiff1; [rewrite HDiff1 in *; clear HDiff1|].

*****
HDiff1 : not (eq A B)
HBet2 : BetG A' B' C'
HBet1 : BetG A B C
HCong2 : CongG B C B' C'
HCong1 : CongG A B A' B'
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A C A' C'
+++++
elim (g2_6 A' A); intro HBet3; intro HCong3.
-----
Lemma g2_7 : forall A B C A' B' C', CongG A B A' B' -> CongG B C B' C' -> BetG A B C -> BetG A' B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HCong1 HCong2 HBet1 HBet2.
elim (point_equality_decidabilityG A B); intro HDiff1; [rewrite HDiff1 in *; clear HDiff1|].
elim (g2_6 A' A); intro HBet3; intro HCong3.

*****
HCong3 : CongG A A A' A'
HBet3 : BetG A' A A
HDiff1 : not (eq A B)
HBet2 : BetG A' B' C'
HBet1 : BetG A B C
HCong2 : CongG B C B' C'
HCong1 : CongG A B A' B'
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A C A' C'
+++++
apply g2_3; apply g2_4; apply five_segmentG with A A' B B'; auto.
-----
Lemma g2_7 : forall A B C A' B' C', CongG A B A' B' -> CongG B C B' C' -> BetG A B C -> BetG A' B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HCong1 HCong2 HBet1 HBet2.
elim (point_equality_decidabilityG A B); intro HDiff1; [rewrite HDiff1 in *; clear HDiff1|].
elim (g2_6 A' A); intro HBet3; intro HCong3.
apply g2_3; apply g2_4; apply five_segmentG with A A' B B'; auto.

*****
HCong3 : CongG A A A' A'
HBet3 : BetG A' A A
HDiff1 : not (eq A B)
HBet2 : BetG A' B' C'
HBet1 : BetG A B C
HCong2 : CongG B C B' C'
HCong1 : CongG A B A' B'
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B A B' A'
+++++
apply g2_3; apply g2_4; auto.
-----
Lemma g2_7 : forall A B C A' B' C', CongG A B A' B' -> CongG B C B' C' -> BetG A B C -> BetG A' B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HCong1 HCong2 HBet1 HBet2.
elim (point_equality_decidabilityG A B); intro HDiff1; [rewrite HDiff1 in *; clear HDiff1|].

*****

*****

+++++
Qed.
-----
Lemma g2_8 : forall A B C D,\n  BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : BetG A B C) (_ : BetG A B D) (_ : CongG B C B D) (_ : not (eq A B)), eq C D
+++++
Proof.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : BetG A B C) (_ : BetG A B D) (_ : CongG B C B D) (_ : not (eq A B)), eq C D
+++++
intros A B C D HBet1 HBet2 HCong HDiff.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq C D
+++++
assert (HEq : CongG C C C D).
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C C C D
+++++
apply five_segmentG with A A B B.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B A B
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.
auto.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B A B
+++++
try apply g2_1.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C B C
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.
auto.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C B C
+++++
try apply g2_1.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A C A D
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.
auto.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A C A D
+++++
try apply g2_1.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.
auto.
try apply g2_1.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A C A D
+++++
apply g2_7 with B B.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.
auto.
try apply g2_1.
apply g2_7 with B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B A B
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.
auto.
try apply g2_1.
apply g2_7 with B B.
auto.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A B A B
+++++
apply g2_1.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.
auto.
try apply g2_1.
apply g2_7 with B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C B D
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.
auto.
try apply g2_1.
apply g2_7 with B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B C
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.
auto.
try apply g2_1.
apply g2_7 with B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B D
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C B D
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B C
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B C
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply five_segmentG with A A B B.

*****
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A B)
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).

*****
HEq : CongG C C C D
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq C D
+++++
apply g2_5 with C C.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply g2_5 with C C.

*****
HEq : CongG C C C D
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C D C C
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply g2_5 with C C.
auto.

*****
HEq : CongG C C C D
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C D C C
+++++
apply g2_2.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply g2_5 with C C.
auto.
apply g2_2.

*****
HEq : CongG C C C D
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C C C D
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).
apply g2_5 with C C.

*****
HEq : CongG C C C D
HDiff : not (eq A B)
HCong : CongG B C B D
HBet2 : BetG A B D
HBet1 : BetG A B C
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq C C
+++++
auto.
-----
Lemma g2_8 : forall A B C D, BetG A B C -> BetG A B D -> CongG B C B D -> A <> B -> C = D.
Proof.
intros A B C D HBet1 HBet2 HCong HDiff.
assert (HEq : CongG C C C D).

*****

*****

+++++
Qed.
-----
Lemma g2_9 : forall A B C, BetG A B A -> BetG C A B.
-----
Lemma g2_9 : forall A B C, BetG A B A -> BetG C A B.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A), BetG C A B
+++++
Proof.
-----
Lemma g2_9 : forall A B C, BetG A B A -> BetG C A B.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A), BetG C A B
+++++
intros A B C HBet.
-----
Lemma g2_9 : forall A B C, BetG A B A -> BetG C A B.
Proof.
intros A B C HBet.

*****
HBet : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C A B
+++++
apply bet_inner_transitivityG with A.
-----
Lemma g2_9 : forall A B C, BetG A B A -> BetG C A B.
Proof.
intros A B C HBet.
apply bet_inner_transitivityG with A.

*****
HBet : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C A A
+++++
auto.
-----
Lemma g2_9 : forall A B C, BetG A B A -> BetG C A B.
Proof.
intros A B C HBet.
apply bet_inner_transitivityG with A.
auto.

*****
HBet : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C A A
+++++
apply g2_6.
-----
Lemma g2_9 : forall A B C, BetG A B A -> BetG C A B.
Proof.
intros A B C HBet.
apply bet_inner_transitivityG with A.

*****
HBet : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_9 : forall A B C, BetG A B A -> BetG C A B.
Proof.
intros A B C HBet.
apply bet_inner_transitivityG with A.

*****

*****

+++++
Qed.
-----
Lemma g2_10 : forall A B C, BetG A B A -> BetG C B A.
-----
Lemma g2_10 : forall A B C, BetG A B A -> BetG C B A.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A), BetG C B A
+++++
Proof.
-----
Lemma g2_10 : forall A B C, BetG A B A -> BetG C B A.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A), BetG C B A
+++++
intros A B C HBet.
-----
Lemma g2_10 : forall A B C, BetG A B A -> BetG C B A.
Proof.
intros A B C HBet.

*****
HBet : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C B A
+++++
do 2 apply g2_9.
-----
Lemma g2_10 : forall A B C, BetG A B A -> BetG C B A.
Proof.
intros A B C HBet.
do 2 apply g2_9.

*****
HBet : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_10 : forall A B C, BetG A B A -> BetG C B A.
Proof.
intros A B C HBet.
do 2 apply g2_9.
auto.

*****

*****

+++++
Qed.
-----
Lemma g2_11 : forall A B C,\n  BetG A B A -> A <> B ->\n  exists D, BetG C D C /\ BetG D C D /\ C <> D.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A) (_ : not (eq A B)), ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
Proof.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A) (_ : not (eq A B)), ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
intros A B C HBet1 HDiff1.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.

*****
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].

*****
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
assert (HDiff2 : C <> D).
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).

*****
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq C D)
+++++
intro.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
intro.

*****
H : eq C D
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
False
+++++
apply g2_5 in HCong1.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
intro.
apply g2_5 in HCong1.

*****
H : eq C D
HCong1 : iff (eq C D) (eq A B)
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
False
+++++
apply HDiff1.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
intro.
apply g2_5 in HCong1.
apply HDiff1.

*****
H : eq C D
HCong1 : iff (eq C D) (eq A B)
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq A B
+++++
apply HCong1.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
intro.
apply g2_5 in HCong1.
apply HDiff1.
apply HCong1.

*****
H : eq C D
HCong1 : iff (eq C D) (eq A B)
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq C D
+++++
auto.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).

*****
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
idtac.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.

*****
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].

*****
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
assert (HCong3 : CongG C E A A).
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).

*****
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C E A A
+++++
apply g2_7 with D B.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
apply g2_7 with D B.

*****
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C D A B
+++++
auto.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
apply g2_7 with D B.

*****
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG D E B A
+++++
auto.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
apply g2_7 with D B.

*****
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C D E
+++++
auto.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
apply g2_7 with D B.

*****
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).

*****
HCong3 : CongG C E A A
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
idtac.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.

*****
HCong3 : CongG C E A A
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
assert (HEq : C = E).
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).

*****
HCong3 : CongG C E A A
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq C E
+++++
apply g2_5 in HCong3.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).
apply g2_5 in HCong3.

*****
HCong3 : iff (eq C E) (eq A A)
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq C E
+++++
apply HCong3.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).
apply g2_5 in HCong3.
apply HCong3.

*****
HCong3 : iff (eq C E) (eq A A)
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq A A
+++++
auto.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).

*****
HEq : eq C E
HCong3 : CongG C E A A
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
idtac.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).
idtac.

*****
HEq : eq C E
HCong3 : CongG C E A A
HCong2 : CongG D E B A
HBet3 : BetG C D E
E : TpointG
HDiff2 : not (eq C D)
HCong1 : CongG C D A B
HBet2 : BetG C C D
D : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG C D C) (and (BetG D C D) (not (eq C D))))
+++++
rewrite HEq in *.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).
idtac.
rewrite HEq in *.

*****
HEq : eq C E
HCong3 : CongG E E A A
HCong2 : CongG D E B A
HBet3 : BetG E D E
HDiff2 : not (eq E D)
HCong1 : CongG E D A B
HBet2 : BetG E E D
D,E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG E D E) (and (BetG D E D) (not (eq E D))))
+++++
clear HEq.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).
idtac.
rewrite HEq in *.
clear HEq.

*****
HCong3 : CongG E E A A
HCong2 : CongG D E B A
HBet3 : BetG E D E
HDiff2 : not (eq E D)
HCong1 : CongG E D A B
HBet2 : BetG E E D
D,E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun D : TpointG => and (BetG E D E) (and (BetG D E D) (not (eq E D))))
+++++
exists D.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).
idtac.
rewrite HEq in *.
clear HEq.
exists D.

*****
HCong3 : CongG E E A A
HCong2 : CongG D E B A
HBet3 : BetG E D E
HDiff2 : not (eq E D)
HCong1 : CongG E D A B
HBet2 : BetG E E D
D,E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
and (BetG E D E) (and (BetG D E D) (not (eq E D)))
+++++
do 2 (split; auto).
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).
idtac.
rewrite HEq in *.
clear HEq.
exists D.
do 2 (split; auto).

*****
HCong3 : CongG E E A A
HCong2 : CongG D E B A
HBet3 : BetG E D E
HDiff2 : not (eq E D)
HCong1 : CongG E D A B
HBet2 : BetG E E D
D,E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG D E D
+++++
apply g2_9.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).
idtac.
destruct (segment_constructionG C D B A) as [E [HBet3 HCong2]].
assert (HCong3 : CongG C E A A).
idtac.
assert (HEq : C = E).
idtac.
rewrite HEq in *.
clear HEq.
exists D.
do 2 (split; auto).
apply g2_9.

*****
HCong3 : CongG E E A A
HCong2 : CongG D E B A
HBet3 : BetG E D E
HDiff2 : not (eq E D)
HCong1 : CongG E D A B
HBet2 : BetG E E D
D,E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG E D E
+++++
auto.
-----
Lemma g2_11 : forall A B C, BetG A B A -> A <> B -> exists D, BetG C D C /\\ BetG D C D /\\ C <> D.
Proof.
intros A B C HBet1 HDiff1.
destruct (segment_constructionG C C A B) as [D [HBet2 HCong1]].
assert (HDiff2 : C <> D).

*****

*****

+++++
Qed.
-----
Lemma g2_12 : forall A B C, BetG A B A -> BetG A B C.
-----
Lemma g2_12 : forall A B C, BetG A B A -> BetG A B C.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A), BetG A B C
+++++
Proof.
-----
Lemma g2_12 : forall A B C, BetG A B A -> BetG A B C.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A), BetG A B C
+++++
intros A B C HBet.
-----
Lemma g2_12 : forall A B C, BetG A B A -> BetG A B C.
Proof.
intros A B C HBet.

*****
HBet : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B C
+++++
apply bet_symmetryG.
-----
Lemma g2_12 : forall A B C, BetG A B A -> BetG A B C.
Proof.
intros A B C HBet.
apply bet_symmetryG.

*****
HBet : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C B A
+++++
apply g2_10.
-----
Lemma g2_12 : forall A B C, BetG A B A -> BetG A B C.
Proof.
intros A B C HBet.
apply bet_symmetryG.
apply g2_10.

*****
HBet : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_12 : forall A B C, BetG A B A -> BetG A B C.
Proof.
intros A B C HBet.
apply bet_symmetryG.
apply g2_10.
auto.

*****

*****

+++++
Qed.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A) (_ : not (eq A B)), BetG C B C
+++++
Proof.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C : TpointG) (_ : BetG A B A) (_ : not (eq A B)), BetG C B C
+++++
intros A B C HBet1 HDiff.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.

*****
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C B C
+++++
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C B C
+++++
assert (HEq : C = D).
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq C D
+++++
apply g2_8 with A B.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B C
+++++
try apply g2_2.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.
try apply g2_2.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B C
+++++
try apply g2_12.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.
try apply g2_2.
try apply g2_12.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B D
+++++
try apply g2_2.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.
try apply g2_2.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B D
+++++
try apply g2_12.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.
try apply g2_2.
try apply g2_12.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C B D
+++++
try apply g2_2.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.
try apply g2_2.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B D B C
+++++
try apply g2_12.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.
try apply g2_2.
try apply g2_12.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B D B C
+++++
auto.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A B)
+++++
try apply g2_2.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.
try apply g2_2.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A B)
+++++
try apply g2_12.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
apply g2_8 with A B.
try apply g2_2.
try apply g2_12.

*****
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A B)
+++++
auto.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).

*****
HEq : eq C D
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C B C
+++++
idtac.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
idtac.

*****
HEq : eq C D
HCong1 : CongG B D B C
HBet2 : BetG C B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C B C
+++++
rewrite HEq in *.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).
idtac.
rewrite HEq in *.

*****
HEq : eq C D
HCong1 : CongG B D B D
HBet2 : BetG D B D
D : TpointG
HDiff : not (eq A B)
HBet1 : BetG A B A
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG D B D
+++++
auto.
-----
Lemma g2_13 : forall A B C, BetG A B A -> A <> B -> BetG C B C.
Proof.
intros A B C HBet1 HDiff.
destruct (segment_constructionG C B B C) as [D [HBet2 HCong1]].
assert (HEq : C = D).

*****

*****

+++++
Qed.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\ BetG D C D.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : BetG A B A) (_ : not (eq A B)), and (BetG C D C) (BetG D C D)
+++++
Proof.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D : TpointG) (_ : BetG A B A) (_ : not (eq A B)), and (BetG C D C) (BetG D C D)
+++++
intros A B C D HBet1 HDiff1.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.

*****
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
and (BetG C D C) (BetG D C D)
+++++
split.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.

*****
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C D C
+++++
destruct (g2_11 A B D) as [E [HBet2 [HBet3 HDiff2]]].
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B D) as [E [HBet2 [HBet3 HDiff2]]].

*****
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B D) as [E [HBet2 [HBet3 HDiff2]]].

*****
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A B)
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B D) as [E [HBet2 [HBet3 HDiff2]]].

*****
HDiff2 : not (eq D E)
HBet3 : BetG E D E
HBet2 : BetG D E D
E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C D C
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B D) as [E [HBet2 [HBet3 HDiff2]]].
auto.

*****
HDiff2 : not (eq D E)
HBet3 : BetG E D E
HBet2 : BetG D E D
E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C D C
+++++
apply g2_13 with E.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B D) as [E [HBet2 [HBet3 HDiff2]]].
auto.
apply g2_13 with E.

*****
HDiff2 : not (eq D E)
HBet3 : BetG E D E
HBet2 : BetG D E D
E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG E D E
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B D) as [E [HBet2 [HBet3 HDiff2]]].
auto.
apply g2_13 with E.

*****
HDiff2 : not (eq D E)
HBet3 : BetG E D E
HBet2 : BetG D E D
E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq E D)
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.

*****
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG D C D
+++++
destruct (g2_11 A B C) as [E [HBet2 [HBet3 HDiff2]]].
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B C) as [E [HBet2 [HBet3 HDiff2]]].

*****
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B C) as [E [HBet2 [HBet3 HDiff2]]].

*****
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A B)
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B C) as [E [HBet2 [HBet3 HDiff2]]].

*****
HDiff2 : not (eq C E)
HBet3 : BetG E C E
HBet2 : BetG C E C
E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG D C D
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B C) as [E [HBet2 [HBet3 HDiff2]]].
auto.

*****
HDiff2 : not (eq C E)
HBet3 : BetG E C E
HBet2 : BetG C E C
E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG D C D
+++++
apply g2_13 with E.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B C) as [E [HBet2 [HBet3 HDiff2]]].
auto.
apply g2_13 with E.

*****
HDiff2 : not (eq C E)
HBet3 : BetG E C E
HBet2 : BetG C E C
E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG E C E
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.
destruct (g2_11 A B C) as [E [HBet2 [HBet3 HDiff2]]].
auto.
apply g2_13 with E.

*****
HDiff2 : not (eq C E)
HBet3 : BetG E C E
HBet2 : BetG C E C
E : TpointG
HDiff1 : not (eq A B)
HBet1 : BetG A B A
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq E C)
+++++
auto.
-----
Lemma g2_14 : forall A B C D, BetG A B A -> A <> B -> BetG C D C /\\ BetG D C D.
Proof.
intros A B C D HBet1 HDiff1.
split.

*****

*****

+++++
Qed.
-----
Lemma g2_15 : forall A B C D E, BetG A B A -> A <> B -> BetG C D E.
-----
Lemma g2_15 : forall A B C D E, BetG A B A -> A <> B -> BetG C D E.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D E : TpointG) (_ : BetG A B A) (_ : not (eq A B)), BetG C D E
+++++
Proof.
-----
Lemma g2_15 : forall A B C D E, BetG A B A -> A <> B -> BetG C D E.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D E : TpointG) (_ : BetG A B A) (_ : not (eq A B)), BetG C D E
+++++
intros A B C D E HBet HDiff.
-----
Lemma g2_15 : forall A B C D E, BetG A B A -> A <> B -> BetG C D E.
Proof.
intros A B C D E HBet HDiff.

*****
HDiff : not (eq A B)
HBet : BetG A B A
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C D E
+++++
apply g2_9.
-----
Lemma g2_15 : forall A B C D E, BetG A B A -> A <> B -> BetG C D E.
Proof.
intros A B C D E HBet HDiff.
apply g2_9.

*****
HDiff : not (eq A B)
HBet : BetG A B A
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG D E D
+++++
destruct (g2_14 A B D E) as [HBet1 HBet2].
-----
Lemma g2_15 : forall A B C D E, BetG A B A -> A <> B -> BetG C D E.
Proof.
intros A B C D E HBet HDiff.
apply g2_9.
destruct (g2_14 A B D E) as [HBet1 HBet2].

*****
HDiff : not (eq A B)
HBet : BetG A B A
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_15 : forall A B C D E, BetG A B A -> A <> B -> BetG C D E.
Proof.
intros A B C D E HBet HDiff.
apply g2_9.
destruct (g2_14 A B D E) as [HBet1 HBet2].

*****
HDiff : not (eq A B)
HBet : BetG A B A
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A B)
+++++
auto.
-----
Lemma g2_15 : forall A B C D E, BetG A B A -> A <> B -> BetG C D E.
Proof.
intros A B C D E HBet HDiff.
apply g2_9.
destruct (g2_14 A B D E) as [HBet1 HBet2].

*****
HBet2 : BetG E D E
HBet1 : BetG D E D
HDiff : not (eq A B)
HBet : BetG A B A
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG D E D
+++++
auto.
-----
Lemma g2_15 : forall A B C D E, BetG A B A -> A <> B -> BetG C D E.
Proof.
intros A B C D E HBet HDiff.
apply g2_9.
destruct (g2_14 A B D E) as [HBet1 HBet2].

*****

*****

+++++
Qed.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D E : TpointG) (_ : not (BetG C D E)) (_ : BetG A B A), eq A B
+++++
Proof.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D E : TpointG) (_ : not (BetG C D E)) (_ : BetG A B A), eq A B
+++++
intros A B C D E HNBet HBet.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.

*****
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq A B
+++++
elim (point_equality_decidabilityG A B).
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).

*****
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : eq A B, eq A B
+++++
intro HDiff.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).
intro HDiff.

*****
HDiff : eq A B
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq A B
+++++
auto.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).

*****
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : not (eq A B), eq A B
+++++
intro HDiff.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).
intro HDiff.

*****
HDiff : not (eq A B)
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq A B
+++++
auto.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).
intro HDiff.
auto.

*****
HDiff : not (eq A B)
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq A B
+++++
exfalso.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).
intro HDiff.
auto.
exfalso.

*****
HDiff : not (eq A B)
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
False
+++++
apply HNBet.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).
intro HDiff.
auto.
exfalso.
apply HNBet.

*****
HDiff : not (eq A B)
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C D E
+++++
apply g2_15 with A B.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).
intro HDiff.
auto.
exfalso.
apply HNBet.
apply g2_15 with A B.

*****
HDiff : not (eq A B)
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B A
+++++
auto.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).
intro HDiff.
auto.
exfalso.
apply HNBet.
apply g2_15 with A B.

*****
HDiff : not (eq A B)
HBet : BetG A B A
HNBet : not (BetG C D E)
A,B,C,D,E : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A B)
+++++
auto.
-----
Lemma g2_16 : forall A B C D E, ~ BetG C D E -> BetG A B A -> A = B.
Proof.
intros A B C D E HNBet HBet.
elim (point_equality_decidabilityG A B).

*****

*****

+++++
Qed.
-----
Lemma between_identityT : forall A B, BetG A B A -> A = B.
-----
Lemma between_identityT : forall A B, BetG A B A -> A = B.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B : TpointG) (_ : BetG A B A), eq A B
+++++
Proof.
-----
Lemma between_identityT : forall A B, BetG A B A -> A = B.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B : TpointG) (_ : BetG A B A), eq A B
+++++
intros A B.
-----
Lemma between_identityT : forall A B, BetG A B A -> A = B.
Proof.
intros A B.

*****
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : BetG A B A, eq A B
+++++
apply g2_16 with GPA GPB GPC.
-----
Lemma between_identityT : forall A B, BetG A B A -> A = B.
Proof.
intros A B.
apply g2_16 with GPA GPB GPC.

*****
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (BetG GPA GPB GPC)
+++++
intro HNBet.
-----
Lemma between_identityT : forall A B, BetG A B A -> A = B.
Proof.
intros A B.
apply g2_16 with GPA GPB GPC.
intro HNBet.

*****
HNBet : BetG GPA GPB GPC
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
False
+++++
apply lower_dimG.
-----
Lemma between_identityT : forall A B, BetG A B A -> A = B.
Proof.
intros A B.
apply g2_16 with GPA GPB GPC.
intro HNBet.
apply lower_dimG.

*****
HNBet : BetG GPA GPB GPC
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG GPA GPB GPC) (or (BetG GPB GPC GPA) (BetG GPC GPA GPB))
+++++
left.
-----
Lemma between_identityT : forall A B, BetG A B A -> A = B.
Proof.
intros A B.
apply g2_16 with GPA GPB GPC.
intro HNBet.
apply lower_dimG.
left.

*****
HNBet : BetG GPA GPB GPC
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG GPA GPB GPC
+++++
auto.
-----
Lemma between_identityT : forall A B, BetG A B A -> A = B.
Proof.
intros A B.
apply g2_16 with GPA GPB GPC.
intro HNBet.
apply lower_dimG.
left.
auto.

*****

*****

+++++
Qed.
-----
Lemma cong_trivial_identityT : forall A B, CongG A A B B.
-----
Lemma cong_trivial_identityT : forall A B, CongG A A B B.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B : TpointG, CongG A A B B
+++++
Proof.
-----
Lemma cong_trivial_identityT : forall A B, CongG A A B B.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B : TpointG, CongG A A B B
+++++
intros A B.
-----
Lemma cong_trivial_identityT : forall A B, CongG A A B B.
Proof.
intros A B.

*****
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A A B B
+++++
destruct (g2_6 B A).
-----
Lemma cong_trivial_identityT : forall A B, CongG A A B B.
Proof.
intros A B.
destruct (g2_6 B A).

*****
H0 : CongG A A B B
H : BetG B A A
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A A B B
+++++
auto.
-----
Lemma cong_trivial_identityT : forall A B, CongG A A B B.
Proof.
intros A B.
destruct (g2_6 B A).
auto.

*****

*****

+++++
Qed.
-----
Lemma l2_11T : forall A B C A' B' C',\n  BetG A B C -> BetG A' B' C' ->\n  CongG A B A' B' -> CongG B C B' C' ->\n  CongG A C A' C'.
-----
Lemma l2_11T : forall A B C A' B' C', BetG A B C -> BetG A' B' C' -> CongG A B A' B' -> CongG B C B' C' -> CongG A C A' C'.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C A' B' C' : TpointG) (_ : BetG A B C) (_ : BetG A' B' C') (_ : CongG A B A' B') (_ : CongG B C B' C'), CongG A C A' C'
+++++
Proof.
-----
Lemma l2_11T : forall A B C A' B' C', BetG A B C -> BetG A' B' C' -> CongG A B A' B' -> CongG B C B' C' -> CongG A C A' C'.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C A' B' C' : TpointG) (_ : BetG A B C) (_ : BetG A' B' C') (_ : CongG A B A' B') (_ : CongG B C B' C'), CongG A C A' C'
+++++
intros A B C A' B' C' HBet1 HBet2 HCong1 HCong2.
-----
Lemma l2_11T : forall A B C A' B' C', BetG A B C -> BetG A' B' C' -> CongG A B A' B' -> CongG B C B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HBet1 HBet2 HCong1 HCong2.

*****
HCong2 : CongG B C B' C'
HCong1 : CongG A B A' B'
HBet2 : BetG A' B' C'
HBet1 : BetG A B C
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A C A' C'
+++++
elim (point_equality_decidabilityG A B); intro HDiff; [rewrite HDiff in *; clear HDiff|].
-----
Lemma l2_11T : forall A B C A' B' C', BetG A B C -> BetG A' B' C' -> CongG A B A' B' -> CongG B C B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HBet1 HBet2 HCong1 HCong2.
elim (point_equality_decidabilityG A B); intro HDiff; [rewrite HDiff in *; clear HDiff|].

*****
HCong2 : CongG B C B' C'
HCong1 : CongG B B A' B'
HBet2 : BetG A' B' C'
HBet1 : BetG B B C
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C A' C'
+++++
assert (HEq : A' = B') by (apply g2_5 with B B; try apply g2_2; auto).
-----
Lemma l2_11T : forall A B C A' B' C', BetG A B C -> BetG A' B' C' -> CongG A B A' B' -> CongG B C B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HBet1 HBet2 HCong1 HCong2.
elim (point_equality_decidabilityG A B); intro HDiff; [rewrite HDiff in *; clear HDiff|].
assert (HEq : A' = B') by (apply g2_5 with B B; try apply g2_2; auto).

*****
HEq : eq A' B'
HCong2 : CongG B C B' C'
HCong1 : CongG B B A' B'
HBet2 : BetG A' B' C'
HBet1 : BetG B B C
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B C A' C'
+++++
rewrite HEq in *; auto.
-----
Lemma l2_11T : forall A B C A' B' C', BetG A B C -> BetG A' B' C' -> CongG A B A' B' -> CongG B C B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HBet1 HBet2 HCong1 HCong2.
elim (point_equality_decidabilityG A B); intro HDiff; [rewrite HDiff in *; clear HDiff|].

*****
HDiff : not (eq A B)
HCong2 : CongG B C B' C'
HCong1 : CongG A B A' B'
HBet2 : BetG A' B' C'
HBet1 : BetG A B C
A,B,C,A',B',C' : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A C A' C'
+++++
apply g2_3; apply g2_4; apply five_segmentG with A A' B B'; auto; try apply cong_trivial_identityT; apply g2_3; apply g2_4; auto.
-----
Lemma l2_11T : forall A B C A' B' C', BetG A B C -> BetG A' B' C' -> CongG A B A' B' -> CongG B C B' C' -> CongG A C A' C'.
Proof.
intros A B C A' B' C' HBet1 HBet2 HCong1 HCong2.
elim (point_equality_decidabilityG A B); intro HDiff; [rewrite HDiff in *; clear HDiff|].

*****

*****

+++++
Qed.
-----
Lemma construction_uniquenessT : forall Q A B C X Y,\n  Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (Q A B C X Y : TpointG) (_ : not (eq Q A)) (_ : BetG Q A X) (_ : CongG A X B C) (_ : BetG Q A Y) (_ : CongG A Y B C), eq X Y
+++++
Proof.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (Q A B C X Y : TpointG) (_ : not (eq Q A)) (_ : BetG Q A X) (_ : CongG A X B C) (_ : BetG Q A Y) (_ : CongG A Y B C), eq X Y
+++++
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.

*****
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq X Y
+++++
assert (HCong3 : CongG A X A Y).
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).

*****
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A X A Y
+++++
apply cong_inner_transitivityG with B C.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
apply cong_inner_transitivityG with B C.

*****
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A X B C
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
apply cong_inner_transitivityG with B C.

*****
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A Y B C
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).

*****
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq X Y
+++++
idtac.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.

*****
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq X Y
+++++
assert (HCong4 : CongG Q X Q Y).
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).

*****
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG Q X Q Y
+++++
apply l2_11T with A A.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
apply l2_11T with A A.

*****
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG Q A X
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
apply l2_11T with A A.

*****
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG Q A Y
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
apply l2_11T with A A.

*****
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG Q A Q A
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
apply l2_11T with A A.
auto.

*****
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG Q A Q A
+++++
apply g2_1.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
apply l2_11T with A A.

*****
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A X A Y
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq X Y
+++++
idtac.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq X Y
+++++
assert (HCong5 : CongG X X X Y).
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG X X X Y
+++++
apply five_segmentG with Q Q A A.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
apply five_segmentG with Q Q A A.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG Q A Q A
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
apply five_segmentG with Q Q A A.
auto.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG Q A Q A
+++++
apply g2_1.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
apply five_segmentG with Q Q A A.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A X A X
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
apply five_segmentG with Q Q A A.
auto.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A X A X
+++++
apply g2_1.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
apply five_segmentG with Q Q A A.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG Q X Q Y
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
apply five_segmentG with Q Q A A.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A X A Y
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
apply five_segmentG with Q Q A A.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG Q A X
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
apply five_segmentG with Q Q A A.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG Q A X
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
apply five_segmentG with Q Q A A.

*****
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq Q A)
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).

*****
HCong5 : CongG X X X Y
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq X Y
+++++
idtac.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
idtac.

*****
HCong5 : CongG X X X Y
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq X Y
+++++
apply g2_5 with X X.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
idtac.
apply g2_5 with X X.

*****
HCong5 : CongG X X X Y
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG X Y X X
+++++
try apply g2_2.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
idtac.
apply g2_5 with X X.
try apply g2_2.

*****
HCong5 : CongG X X X Y
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG X X X Y
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
idtac.
apply g2_5 with X X.

*****
HCong5 : CongG X X X Y
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq X X
+++++
try apply g2_2.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).
idtac.
assert (HCong4 : CongG Q X Q Y).
idtac.
assert (HCong5 : CongG X X X Y).
idtac.
apply g2_5 with X X.
try apply g2_2.

*****
HCong5 : CongG X X X Y
HCong4 : CongG Q X Q Y
HCong3 : CongG A X A Y
HCong2 : CongG A Y B C
HBet2 : BetG Q A Y
HCong1 : CongG A X B C
HBet1 : BetG Q A X
HDiff : not (eq Q A)
Q,A,B,C,X,Y : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
eq X X
+++++
auto.
-----
Lemma construction_uniquenessT : forall Q A B C X Y, Q <> A -> BetG Q A X -> CongG A X B C -> BetG Q A Y -> CongG A Y B C -> X = Y.
Proof.
intros Q A B C X Y HDiff HBet1 HCong1 HBet2 HCong2.
assert (HCong3 : CongG A X A Y).

*****

*****

+++++
Qed.
-----
Lemma between_trivialT : forall A B, BetG A B B.
-----
Lemma between_trivialT : forall A B, BetG A B B.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B : TpointG, BetG A B B
+++++
Proof.
-----
Lemma between_trivialT : forall A B, BetG A B B.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B : TpointG, BetG A B B
+++++
intros A B.
-----
Lemma between_trivialT : forall A B, BetG A B B.
Proof.
intros A B.

*****
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B B
+++++
destruct (g2_6 A B).
-----
Lemma between_trivialT : forall A B, BetG A B B.
Proof.
intros A B.
destruct (g2_6 A B).

*****
H0 : CongG B B A A
H : BetG A B B
A,B : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A B B
+++++
auto.
-----
Lemma between_trivialT : forall A B, BetG A B B.
Proof.
intros A B.
destruct (g2_6 A B).
auto.

*****

*****

+++++
Qed.
-----
Lemma bet_decG : forall A B C, BetG A B C \/ ~ BetG A B C.
-----
Lemma bet_decG : forall A B C, BetG A B C \\/ ~ BetG A B C.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B C : TpointG, or (BetG A B C) (not (BetG A B C))
+++++
Proof.
-----
Lemma bet_decG : forall A B C, BetG A B C \\/ ~ BetG A B C.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B C : TpointG, or (BetG A B C) (not (BetG A B C))
+++++
intros A B C.
-----
Lemma bet_decG : forall A B C, BetG A B C \\/ ~ BetG A B C.
Proof.
intros A B C.

*****
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (not (BetG A B C))
+++++
destruct (segment_constructionG A B B C) as [D [HBet1 HCong]].
-----
Lemma bet_decG : forall A B C, BetG A B C \\/ ~ BetG A B C.
Proof.
intros A B C.
destruct (segment_constructionG A B B C) as [D [HBet1 HCong]].

*****
HCong : CongG B D B C
HBet1 : BetG A B D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (not (BetG A B C))
+++++
elim (point_equality_decidabilityG C D); intro HDiff1; [rewrite HDiff1 in *; auto|].
-----
Lemma bet_decG : forall A B C, BetG A B C \\/ ~ BetG A B C.
Proof.
intros A B C.
destruct (segment_constructionG A B B C) as [D [HBet1 HCong]].
elim (point_equality_decidabilityG C D); intro HDiff1; [rewrite HDiff1 in *; auto|].

*****
HDiff1 : not (eq C D)
HCong : CongG B D B C
HBet1 : BetG A B D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (not (BetG A B C))
+++++
elim (point_equality_decidabilityG A B); intro HDiff2; [rewrite HDiff2 in *; left; apply bet_symmetryG; apply between_trivialT|].
-----
Lemma bet_decG : forall A B C, BetG A B C \\/ ~ BetG A B C.
Proof.
intros A B C.
destruct (segment_constructionG A B B C) as [D [HBet1 HCong]].
elim (point_equality_decidabilityG C D); intro HDiff1; [rewrite HDiff1 in *; auto|].
elim (point_equality_decidabilityG A B); intro HDiff2; [rewrite HDiff2 in *; left; apply bet_symmetryG; apply between_trivialT|].

*****
HDiff2 : not (eq A B)
HDiff1 : not (eq C D)
HCong : CongG B D B C
HBet1 : BetG A B D
A,B,C,D : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (not (BetG A B C))
+++++
right; intro HBet2; apply HDiff1; apply construction_uniquenessT with A B B C; auto; apply g2_1.
-----
Lemma bet_decG : forall A B C, BetG A B C \\/ ~ BetG A B C.
Proof.
intros A B C.
destruct (segment_constructionG A B B C) as [D [HBet1 HCong]].
elim (point_equality_decidabilityG C D); intro HDiff1; [rewrite HDiff1 in *; auto|].
elim (point_equality_decidabilityG A B); intro HDiff2; [rewrite HDiff2 in *; left; apply bet_symmetryG; apply between_trivialT|].
right; intro HBet2; apply HDiff1; apply construction_uniquenessT with A B B C; auto; apply g2_1.

*****

*****

+++++
Qed.
-----
Definition ColG A B C := BetG A B C \/ BetG B C A \/ BetG C A B.
-----
Lemma col_decG : forall A B C, ColG A B C \/ ~ ColG A B C.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B C : TpointG, or (ColG A B C) (not (ColG A B C))
+++++
Proof.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B C : TpointG, or (ColG A B C) (not (ColG A B C))
+++++
intros A B C.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.

*****
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (ColG A B C) (not (ColG A B C))
+++++
unfold ColG.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.

*****
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
induction (bet_decG A B C).
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).

*****
H : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
induction (bet_decG B C A).
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).

*****
H0 : BetG B C A
H : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
induction (bet_decG C A B).
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).
induction (bet_decG C A B).

*****
H1 : BetG C A B
H0 : BetG B C A
H : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
tauto.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).
induction (bet_decG C A B).

*****
H1 : not (BetG C A B)
H0 : BetG B C A
H : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
tauto.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).

*****
H0 : not (BetG B C A)
H : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
induction (bet_decG C A B).
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).
induction (bet_decG C A B).

*****
H1 : BetG C A B
H0 : not (BetG B C A)
H : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
tauto.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).
induction (bet_decG C A B).

*****
H1 : not (BetG C A B)
H0 : not (BetG B C A)
H : BetG A B C
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
tauto.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).

*****
H : not (BetG A B C)
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
induction (bet_decG B C A).
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).

*****
H0 : BetG B C A
H : not (BetG A B C)
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
induction (bet_decG C A B).
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).
induction (bet_decG C A B).

*****
H1 : BetG C A B
H0 : BetG B C A
H : not (BetG A B C)
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
tauto.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).
induction (bet_decG C A B).

*****
H1 : not (BetG C A B)
H0 : BetG B C A
H : not (BetG A B C)
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
tauto.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).

*****
H0 : not (BetG B C A)
H : not (BetG A B C)
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
induction (bet_decG C A B).
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).
induction (bet_decG C A B).

*****
H1 : BetG C A B
H0 : not (BetG B C A)
H : not (BetG A B C)
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
tauto.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).
induction (bet_decG B C A).
induction (bet_decG C A B).

*****
H1 : not (BetG C A B)
H0 : not (BetG B C A)
H : not (BetG A B C)
A,B,C : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (or (BetG A B C) (or (BetG B C A) (BetG C A B))) (not (or (BetG A B C) (or (BetG B C A) (BetG C A B))))
+++++
tauto.
-----
Lemma col_decG : forall A B C, ColG A B C \\/ ~ ColG A B C.
Proof.
intros A B C.
unfold ColG.
induction (bet_decG A B C).

*****

*****

+++++
Qed.
-----
Lemma inner_paschT : forall A B C P Q,\n  BetG A P C -> BetG B Q C ->\n  exists x, BetG P x B /\ BetG Q x A.
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C P Q : TpointG) (_ : BetG A P C) (_ : BetG B Q C), ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
Proof.
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C P Q : TpointG) (_ : BetG A P C) (_ : BetG B Q C), ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
intros A B C P Q HBet1 HBet2.
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.

*****
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].

*****
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].

*****
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].

*****
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].

*****
HDiff4 : not (eq Q C)
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].

*****
HCol : ColG A B C
HDiff4 : not (eq Q C)
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.

*****
HBet3 : BetG A B C
HDiff4 : not (eq Q C)
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
exists B; split; [apply between_trivialT|].
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
exists B; split; [apply between_trivialT|].

*****
HBet3 : BetG A B C
HDiff4 : not (eq Q C)
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG Q B A
+++++
apply bet_symmetryG; apply bet_inner_transitivityG with C; auto.
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.

*****
HBet3 : BetG B C A
HDiff4 : not (eq Q C)
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
exists C; split.
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
exists C; split.

*****
HBet3 : BetG B C A
HDiff4 : not (eq Q C)
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG P C B
+++++
apply bet_symmetryG; apply bet_inner_transitivityG with A; auto; apply bet_symmetryG; auto.
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
exists C; split.

*****
HBet3 : BetG B C A
HDiff4 : not (eq Q C)
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG Q C A
+++++
apply bet_symmetryG; apply bet_inner_transitivityG with B; apply bet_symmetryG; auto.
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.

*****
HBet3 : BetG C A B
HDiff4 : not (eq Q C)
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun x : TpointG => and (BetG P x B) (BetG Q x A))
+++++
exists A; split; [|apply between_trivialT].
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
exists A; split; [|apply between_trivialT].

*****
HBet3 : BetG C A B
HDiff4 : not (eq Q C)
HDiff3 : not (eq B Q)
HDiff2 : not (eq P C)
HDiff1 : not (eq A P)
HBet2 : BetG B Q C
HBet1 : BetG A P C
A,B,C,P,Q : TpointG
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG P A B
+++++
apply bet_symmetryG; apply bet_inner_transitivityG with C; auto; apply bet_symmetryG; auto.
-----
Lemma inner_paschT : forall A B C P Q, BetG A P C -> BetG B Q C -> exists x, BetG P x B /\\ BetG Q x A.
Proof.
intros A B C P Q HBet1 HBet2.
elim (point_equality_decidabilityG A P); intro HDiff1; [rewrite HDiff1 in *; exists P; split; [apply bet_symmetryG|]; apply between_trivialT|].
elim (point_equality_decidabilityG P C); intro HDiff2; [rewrite HDiff2 in *; exists Q; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (point_equality_decidabilityG B Q); intro HDiff3; [rewrite HDiff3 in *; exists Q; split; [|apply bet_symmetryG]; apply between_trivialT|].
elim (point_equality_decidabilityG Q C); intro HDiff4; [rewrite HDiff4 in *; exists P; split; apply bet_symmetryG; try apply between_trivialT; auto|].
elim (col_decG A B C); intro HCol; [|apply inner_paschG with C; auto].
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.

*****

*****

+++++
Qed.
-----
Global Instance TG_to_T : Tarski_neutral_dimensionless.
-----
Global Instance TG_to_T : Tarski_neutral_dimensionless.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Tarski_neutral_dimensionless
+++++
Proof.
-----
Global Instance TG_to_T : Tarski_neutral_dimensionless.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Tarski_neutral_dimensionless
+++++
exact (Build_Tarski_neutral_dimensionless TpointG BetG CongG cong_pseudo_reflexivityG cong_inner_transitivityT cong_identityG segment_constructionG five_segmentG between_identityT inner_paschT GPA GPB GPC lower_dimG).
-----
Global Instance TG_to_T : Tarski_neutral_dimensionless.
Proof.
exact (Build_Tarski_neutral_dimensionless TpointG BetG CongG cong_pseudo_reflexivityG cong_inner_transitivityT cong_identityG segment_constructionG five_segmentG between_identityT inner_paschT GPA GPB GPC lower_dimG).

*****

*****

+++++
Defined.
-----
Global Instance TG_to_TID :\n  Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T.
-----
Global Instance TG_to_TID : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
+++++
Proof.
-----
Global Instance TG_to_TID : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T.
Proof.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
+++++
split.
-----
Global Instance TG_to_TID : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T.
Proof.
split.

*****
ITnEQD : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
exact point_equality_decidabilityG.
-----
Global Instance TG_to_TID : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T.
Proof.
split.
exact point_equality_decidabilityG.

*****

*****

+++++
Defined.
-----
End Gupta_inspired_variant_of_Tarski_neutral_dimensionless_to_Tarski_neutral_dimensionless.
-----
Section Gupta_inspired_variant_of_Tarski_2D_to_Tarski_2D.
-----
Context `{IT2D:Gupta_inspired_variant_of_Tarski_2D}.
-----
Lemma upper_dimT : forall A B C P Q,\n  P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q ->\n  (BetG A B C \/ BetG B C A \/ BetG C A B).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).

*****
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C P Q : TpointG) (_ : not (eq P Q)) (_ : CongG A P A Q) (_ : CongG B P B Q) (_ : CongG C P C Q), or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
Proof.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.

*****
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C P Q : TpointG) (_ : not (eq P Q)) (_ : CongG A P A Q) (_ : CongG B P B Q) (_ : CongG C P C Q), or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
intros A B C P Q HPQ HCong1 HCong2 HCong3.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.

*****
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
elim (point_equality_decidabilityG A B).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).

*****
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : eq A B, or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
intro HAB.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.

*****
HAB : eq A B
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
try (rewrite HAB in *; clear HAB).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).

*****
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
elim (point_equality_decidabilityG A C).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).

*****
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : eq A C, or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
intro HAC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.

*****
HAC : eq A C
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
try (rewrite HAC in *; clear HAC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).

*****
HAC : eq A C
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
elim (point_equality_decidabilityG B C).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).

*****
HAC : eq A C
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : eq B C, or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
intro HBC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.

*****
HBC : eq B C
HAC : eq A C
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
try (rewrite HBC in *; clear HBC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).

*****
HAC : eq A C
HCong1,HCong2,HCong3 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG C C C) (or (BetG C C C) (BetG C C C))
+++++
left.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
left.

*****
HAC : eq A C
HCong1,HCong2,HCong3 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C C C
+++++
apply between_trivialT.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).

*****
HAC : eq A C
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : not (eq B C), or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
intro HBC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.

*****
HBC : not (eq B C)
HAC : eq A C
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
try (rewrite HBC in *; clear HBC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).

*****
HBC : not (eq B C)
HAC : eq A C
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
right.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
right.

*****
HBC : not (eq B C)
HAC : eq A C
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B C B) (BetG C B B)
+++++
right.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
right.
right.

*****
HBC : not (eq B C)
HAC : eq A C
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C B B
+++++
apply between_trivialT.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).

*****
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : not (eq A C), or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
intro HAC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.

*****
HAC : not (eq A C)
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
try (rewrite HAC in *; clear HAC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).

*****
HAC : not (eq A C)
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
elim (point_equality_decidabilityG B C).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).

*****
HAC : not (eq A C)
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : eq B C, or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
intro HBC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.

*****
HBC : eq B C
HAC : not (eq A C)
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
try (rewrite HBC in *; clear HBC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).

*****
HAC : not (eq A C)
HCong1,HCong2,HCong3 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG C C C) (or (BetG C C C) (BetG C C C))
+++++
left.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
left.

*****
HAC : not (eq A C)
HCong1,HCong2,HCong3 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C C C
+++++
apply between_trivialT.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).

*****
HAC : not (eq A C)
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : not (eq B C), or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
intro HBC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
try (rewrite HBC in *; clear HBC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).

*****
HBC : not (eq B C)
HAC : not (eq A C)
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B B C) (or (BetG B C B) (BetG C B B))
+++++
right.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
right.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B C B) (BetG C B B)
+++++
right.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
right.
right.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HCong3 : CongG C P C Q
HCong1,HCong2 : CongG B P B Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C B B
+++++
apply between_trivialT.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).

*****
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : not (eq A B), or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
intro HAB.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.

*****
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
try (rewrite HAB in *; clear HAB).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).

*****
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
elim (point_equality_decidabilityG A C).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).

*****
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : eq A C, or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
intro HAC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.

*****
HAC : eq A C
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
try (rewrite HAC in *; clear HAC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).

*****
HAB : not (eq C B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG C B C) (or (BetG B C C) (BetG C C B))
+++++
elim (point_equality_decidabilityG B C).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).

*****
HAB : not (eq C B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : eq B C, or (BetG C B C) (or (BetG B C C) (BetG C C B))
+++++
intro HBC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.

*****
HBC : eq B C
HAB : not (eq C B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG C B C) (or (BetG B C C) (BetG C C B))
+++++
try (rewrite HBC in *; clear HBC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).

*****
HAB : not (eq C C)
HCong1,HCong2,HCong3 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG C C C) (or (BetG C C C) (BetG C C C))
+++++
left.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
left.

*****
HAB : not (eq C C)
HCong1,HCong2,HCong3 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG C C C
+++++
apply between_trivialT.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).

*****
HAB : not (eq C B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : not (eq B C), or (BetG C B C) (or (BetG B C C) (BetG C C B))
+++++
intro HBC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.

*****
HBC : not (eq B C)
HAB : not (eq C B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG C B C) (or (BetG B C C) (BetG C C B))
+++++
try (rewrite HBC in *; clear HBC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).

*****
HBC : not (eq B C)
HAB : not (eq C B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG C B C) (or (BetG B C C) (BetG C C B))
+++++
right.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
right.

*****
HBC : not (eq B C)
HAB : not (eq C B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG B C C) (BetG C C B)
+++++
left.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
right.
left.

*****
HBC : not (eq B C)
HAB : not (eq C B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG C P C Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG B C C
+++++
apply between_trivialT.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).

*****
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : not (eq A C), or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
intro HAC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.

*****
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
try (rewrite HAC in *; clear HAC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).

*****
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
elim (point_equality_decidabilityG B C).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).

*****
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : eq B C, or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
intro HBC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.

*****
HBC : eq B C
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
try (rewrite HBC in *; clear HBC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).

*****
HAB,HAC : not (eq A C)
HCong2,HCong3 : CongG C P C Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A C C) (or (BetG C C A) (BetG C A C))
+++++
left.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
left.

*****
HAB,HAC : not (eq A C)
HCong2,HCong3 : CongG C P C Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
BetG A C C
+++++
apply between_trivialT.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).

*****
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall _ : not (eq B C), or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
intro HBC.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
try (rewrite HBC in *; clear HBC).
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
or (BetG A B C) (or (BetG B C A) (BetG C A B))
+++++
apply upper_dimG with P Q.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
apply upper_dimG with P Q.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq P Q)
+++++
auto.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
apply upper_dimG with P Q.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A B)
+++++
auto.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
apply upper_dimG with P Q.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A C)
+++++
auto.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
apply upper_dimG with P Q.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq B C)
+++++
auto.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
apply upper_dimG with P Q.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG A P A Q
+++++
auto.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
apply upper_dimG with P Q.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG B P B Q
+++++
auto.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).
intro HAB.
try (rewrite HAB in *; clear HAB).
elim (point_equality_decidabilityG A C).
intro HAC.
try (rewrite HAC in *; clear HAC).
elim (point_equality_decidabilityG B C).
intro HBC.
try (rewrite HBC in *; clear HBC).
apply upper_dimG with P Q.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : CongG C P C Q
HCong2 : CongG B P B Q
HCong1 : CongG A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : TpointG
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
CongG C P C Q
+++++
auto.
-----
Lemma upper_dimT : forall A B C P Q, P <> Q -> CongG A P A Q -> CongG B P B Q -> CongG C P C Q -> (BetG A B C \\/ BetG B C A \\/ BetG C A B).
Proof.
intros A B C P Q HPQ HCong1 HCong2 HCong3.
elim (point_equality_decidabilityG A B).

*****

*****

+++++
Qed.
-----
Global Instance TG2D_to_T2D : Tarski_2D TG_to_TID.
-----
Global Instance TG2D_to_T2D : Tarski_2D TG_to_TID.

*****
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Tarski_2D TG_to_TID
+++++
Proof.
-----
Global Instance TG2D_to_T2D : Tarski_2D TG_to_TID.
Proof.

*****
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Tarski_2D TG_to_TID
+++++
split.
-----
Global Instance TG2D_to_T2D : Tarski_2D TG_to_TID.
Proof.
split.

*****
IT2D : Gupta_inspired_variant_of_Tarski_2D TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C P Q : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
exact upper_dimT.
-----
Global Instance TG2D_to_T2D : Tarski_2D TG_to_TID.
Proof.
split.
exact upper_dimT.

*****

*****

+++++
Defined.
-----
End Gupta_inspired_variant_of_Tarski_2D_to_Tarski_2D.
-----
Section Gupta_inspired_variant_of_Tarski_euclidean_to_Tarski_euclidean.
-----
Context `{ITE:Gupta_inspired_variant_of_Tarski_euclidean}.
-----
Lemma euclidT : forall A B C D T,\n  Bet A D T -> Bet B D C -> A <> D ->\n  exists X, exists Y, Bet A B X /\ Bet A C Y /\ Bet X T Y.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.

*****
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D T : Tpoint) (_ : Bet A D T) (_ : Bet B D C) (_ : not (eq A D)), ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
Proof.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.

*****
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D T : Tpoint) (_ : Bet A D T) (_ : Bet B D C) (_ : not (eq A D)), ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
assert (H := TG_to_TID).
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).

*****
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D T : Tpoint) (_ : Bet A D T) (_ : Bet B D C) (_ : not (eq A D)), ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
intros A B C D T HBet1 HBet2 HDiff1.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.

*****
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].

*****
HDiff2 : not (eq B D)
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].

*****
HDiff3 : not (eq D C)
HDiff2 : not (eq B D)
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].

*****
HCol : Col A B C
HDiff3 : not (eq D C)
HDiff2 : not (eq B D)
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
clear HDiff2; clear HDiff3.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.

*****
HCol : Col A B C
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.

*****
HBet3 : Bet A B C
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].

*****
HDiff2 : not (eq A B)
HBet3 : Bet A B C
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (l5_2 A B C T); eBetween; intro HBet4.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
elim (l5_2 A B C T); eBetween; intro HBet4.

*****
HBet4 : Bet B C T
HDiff2 : not (eq A B)
HBet3 : Bet A B C
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (eq_dec_points B C); intro HDiff3; [treat_equalities; exists T; exists T; Between|].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
elim (l5_2 A B C T); eBetween; intro HBet4.
elim (eq_dec_points B C); intro HDiff3; [treat_equalities; exists T; exists T; Between|].

*****
HDiff3 : not (eq B C)
HBet4 : Bet B C T
HDiff2 : not (eq A B)
HBet3 : Bet A B C
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
exists B; exists T; do 2 (split; Between); eBetween.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
elim (l5_2 A B C T); eBetween; intro HBet4.

*****
HBet4 : Bet B T C
HDiff2 : not (eq A B)
HBet3 : Bet A B C
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (eq_dec_points B T); intro HDiff3; [treat_equalities; exists B; exists C; Between|].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
elim (l5_2 A B C T); eBetween; intro HBet4.
elim (eq_dec_points B T); intro HDiff3; [treat_equalities; exists B; exists C; Between|].

*****
HDiff3 : not (eq B T)
HBet4 : Bet B T C
HDiff2 : not (eq A B)
HBet3 : Bet A B C
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
exists B; exists C; Between.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.

*****
HBet3 : Bet B C A
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (eq_dec_points A C); intro HDiff2; [treat_equalities; exists B; exists T; Between|].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (eq_dec_points A C); intro HDiff2; [treat_equalities; exists B; exists T; Between|].

*****
HDiff2 : not (eq A C)
HBet3 : Bet B C A
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (l5_2 A C B T); eBetween; intro HBet4.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (eq_dec_points A C); intro HDiff2; [treat_equalities; exists B; exists T; Between|].
elim (l5_2 A C B T); eBetween; intro HBet4.

*****
HBet4 : Bet C B T
HDiff2 : not (eq A C)
HBet3 : Bet B C A
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (eq_dec_points B C); intro HDiff3; [treat_equalities; exists T; exists T; Between|].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (eq_dec_points A C); intro HDiff2; [treat_equalities; exists B; exists T; Between|].
elim (l5_2 A C B T); eBetween; intro HBet4.
elim (eq_dec_points B C); intro HDiff3; [treat_equalities; exists T; exists T; Between|].

*****
HDiff3 : not (eq B C)
HBet4 : Bet C B T
HDiff2 : not (eq A C)
HBet3 : Bet B C A
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
exists T; exists C; repeat (split; Between); eBetween.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (eq_dec_points A C); intro HDiff2; [treat_equalities; exists B; exists T; Between|].
elim (l5_2 A C B T); eBetween; intro HBet4.

*****
HBet4 : Bet C T B
HDiff2 : not (eq A C)
HBet3 : Bet B C A
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
exists B; exists C; Between.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.

*****
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (l5_3 B A D C); Between; intro HBet4.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.

*****
HBet4 : Bet B A D
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].

*****
HDiff2 : not (eq A B)
HBet4 : Bet B A D
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (l5_2 B A C T); eBetween; intro HBet5.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
elim (l5_2 B A C T); eBetween; intro HBet5.

*****
HBet5 : Bet A C T
HDiff2 : not (eq A B)
HBet4 : Bet B A D
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
exists B; exists T; Between.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
elim (l5_2 B A C T); eBetween; intro HBet5.

*****
HBet5 : Bet A T C
HDiff2 : not (eq A B)
HBet4 : Bet B A D
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
exists B; exists C; do 2 (split; Between).
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
elim (l5_2 B A C T); eBetween; intro HBet5.
exists B; exists C; do 2 (split; Between).

*****
HBet5 : Bet A T C
HDiff2 : not (eq A B)
HBet4 : Bet B A D
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Bet B T C
+++++
apply outer_transitivity_between2 with A; eBetween.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.
elim (eq_dec_points A B); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
elim (l5_2 B A C T); eBetween; intro HBet5.
exists B; exists C; do 2 (split; Between).
apply outer_transitivity_between2 with A; eBetween.

*****
HBet5 : Bet A T C
HDiff2 : not (eq A B)
HBet4 : Bet B A D
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
not (eq A T)
+++++
intro; treat_equalities; intuition.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.

*****
HBet4 : Bet B D A
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (l5_2 A D B T); Between; intro HBet5.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.
elim (l5_2 A D B T); Between; intro HBet5.

*****
HBet5 : Bet D B T
HBet4 : Bet B D A
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T; exists C; Between|].
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.
elim (l5_2 A D B T); Between; intro HBet5.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T; exists C; Between|].

*****
HDiff2 : not (eq B D)
HBet5 : Bet D B T
HBet4 : Bet B D A
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
exists T; exists C; do 2 (try split; Between); eBetween.
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.
elim (l5_2 A D B T); Between; intro HBet5.

*****
HBet5 : Bet D T B
HBet4 : Bet B D A
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
exists B; exists C; do 2 (split; Between).
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.
elim (l5_3 B A D C); Between; intro HBet4.
elim (l5_2 A D B T); Between; intro HBet5.
exists B; exists C; do 2 (split; Between).

*****
HBet5 : Bet D T B
HBet4 : Bet B D A
HBet3 : Bet C A B
HDiff1 : not (eq A D)
HBet2 : Bet B D C
HBet1 : Bet A D T
A,B,C,D,T : Tpoint
H : Tarski_neutral_dimensionless_with_decidable_point_equality TG_to_T
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Bet B T C
+++++
apply outer_transitivity_between with A; eBetween; try (intro; treat_equalities; intuition).
-----
Lemma euclidT : forall A B C D T, Bet A D T -> Bet B D C -> A <> D -> exists X, exists Y, Bet A B X /\\ Bet A C Y /\\ Bet X T Y.
Proof.
assert (H := TG_to_TID).
intros A B C D T HBet1 HBet2 HDiff1.
elim (eq_dec_points B D); intro HDiff2; [treat_equalities; exists T, C; Between|].
elim (eq_dec_points D C); intro HDiff3; [treat_equalities; exists B, T; Between|].
elim (col_dec A B C); intro HCol; [|apply euclidG with D; auto].
clear HDiff2; clear HDiff3.
do 2 (try (elim HCol; clear HCol; intro HCol)); rename HCol into HBet3.

*****

*****

+++++
Qed.
-----
Global Instance TG_euclidean_to_T_euclidean :\n  Tarski_euclidean TG_to_TID.
-----
Global Instance TG_euclidean_to_T_euclidean : Tarski_euclidean TG_to_TID.

*****
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Tarski_euclidean TG_to_TID
+++++
Proof.
-----
Global Instance TG_euclidean_to_T_euclidean : Tarski_euclidean TG_to_TID.
Proof.

*****
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
Tarski_euclidean TG_to_TID
+++++
split.
-----
Global Instance TG_euclidean_to_T_euclidean : Tarski_euclidean TG_to_TID.
Proof.
split.

*****
ITE : Gupta_inspired_variant_of_Tarski_euclidean TnG
TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality
*****
forall (A B C D T : Tpoint) (_ : Bet A D T) (_ : Bet B D C) (_ : not (eq A D)), ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Bet A B X) (and (Bet A C Y) (Bet X T Y))))
+++++
exact euclidT.
-----
Global Instance TG_euclidean_to_T_euclidean : Tarski_euclidean TG_to_TID.
Proof.
split.
exact euclidT.

*****

*****

+++++
Defined.
-----
End Gupta_inspired_variant_of_Tarski_euclidean_to_Tarski_euclidean.
-----
