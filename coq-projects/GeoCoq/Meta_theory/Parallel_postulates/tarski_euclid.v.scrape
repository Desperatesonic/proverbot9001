Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section tarski_euclid.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma tarski_s_euclid_implies_euclid_5 :\n  tarski_s_parallel_postulate ->\n  euclid_5.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : tarski_s_parallel_postulate, euclid_5
+++++
Proof.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : tarski_s_parallel_postulate, euclid_5
+++++
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.

*****
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
destruct (symmetric_point_construction R P) as [V HMid].
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].

*****
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
assert (Hc1 : Bet V P R).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).

*****
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet V P R
+++++
unfold Midpoint in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
unfold Midpoint in *.

*****
HMid : and (Bet R P V) (Cong R P P V)
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet V P R
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
unfold Midpoint in *.
spliter.

*****
H0 : Cong R P P V
H : Bet R P V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet V P R
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).

*****
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.

*****
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
assert (Hc2 : Bet Q U R).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).

*****
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q U R
+++++
unfold BetS in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
unfold BetS in *.

*****
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R) (and (not (eq Q U)) (not (eq U R)))
HRTS : and (Bet R T S) (and (not (eq R T)) (not (eq T S)))
HPTQ : and (Bet P T Q) (and (not (eq P T)) (not (eq T Q)))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q U R
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
unfold BetS in *.
spliter.

*****
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H1 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H4 : not (eq T S)
H3 : not (eq R T)
H2 : Bet R T S
H7 : not (eq T Q)
H6 : not (eq P T)
H5 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q U R
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).

*****
Hc2 : Bet Q U R
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.

*****
Hc2 : Bet Q U R
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].

*****
Hc2 : Bet Q U R
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet V P R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].

*****
Hc2 : Bet Q U R
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q U R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].

*****
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
Hc2 : Bet Q U R
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.

*****
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
Hc2 : Bet Q U R
Hc1 : Bet V P R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
clear Hc1.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.

*****
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
Hc2 : Bet Q U R
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
clear Hc2.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.

*****
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
assert (HPW : P <> W).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).

*****
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P W)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.

*****
H : eq P W
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.

*****
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (P <> V).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).

*****
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P V)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
intro.

*****
H : eq P V
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
intro.
treat_equalities.

*****
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
intro.
treat_equalities.
apply HNC.

*****
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q S
+++++
unfold BetS in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
intro.
treat_equalities.
apply HNC.
unfold BetS in *.

*****
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : and (Bet Q U R) (and (not (eq Q U)) (not (eq U R)))
HRTS : and (Bet R T S) (and (not (eq R T)) (not (eq T S)))
HPTQ : and (Bet R T Q) (and (not (eq R T)) (not (eq T Q)))
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q S
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
intro.
treat_equalities.
apply HNC.
unfold BetS in *.
spliter.

*****
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
H1 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H4 : not (eq T S)
H3 : not (eq R T)
H2 : Bet R T S
H7 : not (eq T Q)
H6 : not (eq R T)
H5 : Bet R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q S
+++++
assert_cols.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
intro.
treat_equalities.
apply HNC.
unfold BetS in *.
spliter.
assert_cols.

*****
H11 : Col R R R
H10 : Col R T Q
H9 : Col R T S
H8 : Col Q U R
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
H1 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H4 : not (eq T S)
H3 : not (eq R T)
H2 : Bet R T S
H7 : not (eq T Q)
H6 : not (eq R T)
H5 : Bet R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q S
+++++
ColR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).

*****
H : not (eq P V)
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
apply HNC.

*****
H : not (eq P V)
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
apply BetSEq in HPTQ.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
apply HNC.
apply BetSEq in HPTQ.

*****
H : not (eq P V)
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
apply BetSEq in HRTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
apply HNC.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.

*****
H : not (eq P V)
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
apply BetSEq in HQUR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
apply HNC.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.

*****
H : not (eq P V)
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
apply HNC.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.

*****
H : not (eq P V)
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
assert_cols.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
intro.
treat_equalities.
assert (P <> V).
apply HNC.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_cols.

*****
H16 : Col P R V
H15 : Col P T Q
H14 : Col R T S
H13 : Col Q U R
H12 : Col U P V
H : not (eq P V)
HUWV : Bet U P V
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
ColR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).

*****
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].

*****
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P W Q
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].

*****
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet V W U
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].

*****
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P W)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].

*****
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.

*****
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
assert (HPar : Par_strict Q S P R).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).

*****
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S P R
+++++
apply par_not_col_strict with P.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.

*****
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q S P R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.

*****
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q S P R
+++++
assert_diffs.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q S P R
+++++
unfold BetS in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R) (and (not (eq Q U)) (not (eq U R)))
HRTS : and (Bet R T S) (and (not (eq R T)) (not (eq T S)))
HPTQ : and (Bet P T Q) (and (not (eq P T)) (not (eq T Q)))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q S P R
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q S P R
+++++
apply l12_17 with T.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q S)
+++++
try split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.
try split.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q S)
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint T Q P
+++++
try split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.
try split.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q T P
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.
try split.
Cong.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q T P
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.
try split.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q T T P
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint T S R
+++++
try split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.
try split.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet S T R
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.
try split.
Cong.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet S T R
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.
Col.
assert_diffs.
unfold BetS in *.
spliter.
apply l12_17 with T.
try split.

*****
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H0 : not (eq Q U)
H : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R T)
H5 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong S T T R
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.

*****
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R P
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
apply par_not_col_strict with P.

*****
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q S P)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).

*****
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
assert (HTS : TS Q S P Y).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).

*****
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q S P Y
+++++
apply l9_8_2 with X.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.

*****
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q S X Y
+++++
assert_diffs.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q S X Y
+++++
assert (P <> R).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P R)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
intro.

*****
H6 : eq P R
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
intro.
treat_equalities.

*****
H4 : not (eq V S)
H : not (eq V V)
H0 : not (eq V X)
H1 : not (eq Q S)
HPar : Par_strict Q S V V
H2 : not (eq V Q)
HXQY : Bet X Q Y
HPUY : Bet V U Y
X,Y : Tpoint
HPW : not (eq V W)
HUWV : Bet U W V
HPWQ : Bet V W Q
W : Tpoint
HPTQ : BetS V T Q
HQUR : BetS Q U V
HRTS : BetS V T S
HNC : not (Col V Q S)
HCong1 : Cong V T Q T
HCong2 : Cong V T S T
HMid : Midpoint V V V
Q,S,T,U,V : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply par_strict_distinct in HPar.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
intro.
treat_equalities.
apply par_strict_distinct in HPar.

*****
H4 : not (eq V S)
H : not (eq V V)
H0 : not (eq V X)
H1 : not (eq Q S)
HPar : and (not (eq Q S))\n (and (not (eq Q V))\n (and (not (eq Q V))\n (and (not (eq S V)) (and (not (eq S V)) (not (eq V V))))))
H2 : not (eq V Q)
HXQY : Bet X Q Y
HPUY : Bet V U Y
X,Y : Tpoint
HPW : not (eq V W)
HUWV : Bet U W V
HPWQ : Bet V W Q
W : Tpoint
HPTQ : BetS V T Q
HQUR : BetS Q U V
HRTS : BetS V T S
HNC : not (Col V Q S)
HCong1 : Cong V T Q T
HCong2 : Cong V T S T
HMid : Midpoint V V V
Q,S,T,U,V : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
intro.
treat_equalities.
apply par_strict_distinct in HPar.
spliter.

*****
H4 : not (eq V S)
H : not (eq V V)
H0 : not (eq V X)
H1 : not (eq Q S)
H9 : not (eq V V)
H7,H8 : not (eq S V)
H5,H6 : not (eq Q V)
H3 : not (eq Q S)
H2 : not (eq V Q)
HXQY : Bet X Q Y
HPUY : Bet V U Y
X,Y : Tpoint
HPW : not (eq V W)
HUWV : Bet U W V
HPWQ : Bet V W Q
W : Tpoint
HPTQ : BetS V T Q
HQUR : BetS Q U V
HRTS : BetS V T S
HNC : not (Col V Q S)
HCong1 : Cong V T Q T
HCong2 : Cong V T S T
HMid : Midpoint V V V
Q,S,T,U,V : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).

*****
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q S X Y
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.

*****
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q S X Y
+++++
assert (P <> X).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).

*****
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P X)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
intro.

*****
H7 : eq P X
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
intro.
treat_equalities.

*****
H4 : not (eq R S)
H5 : not (eq R R)
H1 : not (eq Q S)
HPUY : Bet R U Y
HXQY : Bet R Q Y
HPar : Par_strict Q S R R
H2 : not (eq R Q)
Y : Tpoint
HPWQ : Bet R W Q
HUWV : Bet U W R
HPW : not (eq R W)
W : Tpoint
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply par_strict_distinct in HPar.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
intro.
treat_equalities.
apply par_strict_distinct in HPar.

*****
H4 : not (eq R S)
H5 : not (eq R R)
H1 : not (eq Q S)
HPUY : Bet R U Y
HXQY : Bet R Q Y
HPar : and (not (eq Q S))\n (and (not (eq Q R))\n (and (not (eq Q R))\n (and (not (eq S R)) (and (not (eq S R)) (not (eq R R))))))
H2 : not (eq R Q)
Y : Tpoint
HPWQ : Bet R W Q
HUWV : Bet U W R
HPW : not (eq R W)
W : Tpoint
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
intro.
treat_equalities.
apply par_strict_distinct in HPar.
spliter.

*****
H4 : not (eq R S)
H5 : not (eq R R)
H1 : not (eq Q S)
HPUY : Bet R U Y
HXQY : Bet R Q Y
H8 : not (eq R R)
H6,H7 : not (eq S R)
H0,H3 : not (eq Q R)
H : not (eq Q S)
H2 : not (eq R Q)
Y : Tpoint
HPWQ : Bet R W Q
HUWV : Bet U W R
HPW : not (eq R W)
W : Tpoint
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q S X Y
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q S X Y
+++++
assert (~ Col X Q S).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X Q S)
+++++
apply par_strict_not_col_2 with P.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict P X Q S
+++++
apply par_strict_symmetry.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S P X
+++++
apply par_strict_col_par_strict with R.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.
apply par_strict_col_par_strict with R.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P X)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.
apply par_strict_col_par_strict with R.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S P R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.
apply par_strict_col_par_strict with R.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.
apply par_strict_col_par_strict with R.
Col.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
unfold BetS in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.
apply par_strict_col_par_strict with R.
Col.
unfold BetS in *.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R) (and (not (eq Q U)) (not (eq U R)))
HRTS : and (Bet R T S) (and (not (eq R T)) (not (eq T S)))
HPTQ : and (Bet P T Q) (and (not (eq P T)) (not (eq T Q)))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
unfold Midpoint in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.
apply par_strict_col_par_strict with R.
Col.
unfold BetS in *.
unfold Midpoint in *.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : and (Bet R P V) (Cong R P P V)
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R) (and (not (eq Q U)) (not (eq U R)))
HRTS : and (Bet R T S) (and (not (eq R T)) (not (eq T S)))
HPTQ : and (Bet P T Q) (and (not (eq P T)) (not (eq T Q)))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.
apply par_strict_col_par_strict with R.
Col.
unfold BetS in *.
unfold Midpoint in *.
spliter.

*****
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
H9 : Cong R P P V
H8 : Bet R P V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H12 : not (eq U R)
H11 : not (eq Q U)
H10 : Bet Q U R
H15 : not (eq T S)
H14 : not (eq R T)
H13 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P T)
H16 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
assert_diffs.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.
apply par_strict_col_par_strict with R.
Col.
unfold BetS in *.
unfold Midpoint in *.
spliter.
assert_diffs.

*****
H6 : not (eq R S)
H19 : not (eq Q R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
H9 : Cong R P P V
H8 : Bet R P V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H12 : not (eq U R)
H11 : not (eq Q U)
H10 : Bet Q U R
H15 : not (eq T S)
H14 : not (eq R T)
H13 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P T)
H16 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
assert_cols.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
apply par_strict_not_col_2 with P.
apply par_strict_symmetry.
apply par_strict_col_par_strict with R.
Col.
unfold BetS in *.
unfold Midpoint in *.
spliter.
assert_diffs.
assert_cols.

*****
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col R P V
H23 : Col P W Q
H22 : Col U W V
H21 : Col P V X
H20 : Col P U Y
H7 : Col X Q Y
H6 : not (eq R S)
H19 : not (eq Q R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
H9 : Cong R P P V
H8 : Bet R P V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H12 : not (eq U R)
H11 : not (eq Q U)
H10 : Bet Q U R
H15 : not (eq T S)
H14 : not (eq R T)
H13 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P T)
H16 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
ColR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).

*****
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q S X Y
+++++
repeat split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.

*****
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X Q S)
+++++
try (exists Q).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).

*****
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X Q S)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.

*****
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y Q S)
+++++
try (exists Q).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).

*****
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y Q S)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.

*****
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y Q S)
+++++
intro HCol.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Q = Y).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q Y
+++++
apply l6_21 with Q S X Q.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q S X)
+++++
try (intro; treat_equalities).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.
try (intro; treat_equalities).

*****
H9 : Col Q S X
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Q)
+++++
try (intro; treat_equalities).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.
try (intro; treat_equalities).

*****
H8 : not (Col X X S)
HCol : Col Y X S
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
HPar : Par_strict X S P R
H2 : not (eq P X)
H1 : not (eq X S)
HPUY : Bet P U Y
HPVX : Bet P V X
Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W X
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HQUR : BetS X U R
HNC : not (Col P X S)
HCong1 : Cong P T X T
HRTS : BetS R T S
HPTQ : BetS P T X
P,R,S,T,U,X : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q S Q
+++++
try (intro; treat_equalities).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.
try (intro; treat_equalities).

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q S Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q S Y
+++++
try (intro; treat_equalities).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.
try (intro; treat_equalities).

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q S Y
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Q Q
+++++
try (intro; treat_equalities).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.
try (intro; treat_equalities).

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Q Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Q Y
+++++
try (intro; treat_equalities).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
apply l6_21 with Q S X Q.
try (intro; treat_equalities).

*****
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Q Y
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).

*****
H9 : eq Q Y
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.

*****
H9 : eq Q Y
HCol : Col Y Q S
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Q = U).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
apply BetSEq in HPTQ.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
apply BetSEq in HRTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
apply BetSEq in HQUR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H10 : not (eq U R)
H9 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H14 : not (eq T S)
H13 : not (eq R S)
H12 : not (eq R T)
H11 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P Q)
H16 : not (eq P T)
H15 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
apply l6_21 with Q P R Q.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with Q P R Q.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H10 : not (eq U R)
H9 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H14 : not (eq T S)
H13 : not (eq R S)
H12 : not (eq R T)
H11 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P Q)
H16 : not (eq P T)
H15 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q P R)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with Q P R Q.
Col.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H10 : not (eq U R)
H9 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H14 : not (eq T S)
H13 : not (eq R S)
H12 : not (eq R T)
H11 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P Q)
H16 : not (eq P T)
H15 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q P R)
+++++
apply par_strict_not_col_2 with S.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with Q P R Q.
Col.
apply par_strict_not_col_2 with S.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H10 : not (eq U R)
H9 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H14 : not (eq T S)
H13 : not (eq R S)
H12 : not (eq R T)
H11 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P Q)
H16 : not (eq P T)
H15 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict S Q P R
+++++
Par.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with Q P R Q.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H10 : not (eq U R)
H9 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H14 : not (eq T S)
H13 : not (eq R S)
H12 : not (eq R T)
H11 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P Q)
H16 : not (eq P T)
H15 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq R Q)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with Q P R Q.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H10 : not (eq U R)
H9 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H14 : not (eq T S)
H13 : not (eq R S)
H12 : not (eq R T)
H11 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P Q)
H16 : not (eq P T)
H15 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q P Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with Q P R Q.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H10 : not (eq U R)
H9 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H14 : not (eq T S)
H13 : not (eq R S)
H12 : not (eq R T)
H11 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P Q)
H16 : not (eq P T)
H15 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q P U
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with Q P R Q.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H10 : not (eq U R)
H9 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H14 : not (eq T S)
H13 : not (eq R S)
H12 : not (eq R T)
H11 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P Q)
H16 : not (eq P T)
H15 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with Q P R Q.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H10 : not (eq U R)
H9 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H14 : not (eq T S)
H13 : not (eq R S)
H12 : not (eq R T)
H11 : Bet R T S
H18 : not (eq T Q)
H17 : not (eq P Q)
H16 : not (eq P T)
H15 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q U
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).

*****
H6 : eq Q U
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPUY : Bet P U Q
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
treat_equalities.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet Q W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q Q R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold BetS in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
treat_equalities.
unfold BetS in *.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet Q W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q Q R) (and (not (eq Q Q)) (not (eq Q R)))
HRTS : and (Bet R T S) (and (not (eq R T)) (not (eq T S)))
HPTQ : and (Bet P T Q) (and (not (eq P T)) (not (eq T Q)))
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).
Col.
intro HCol.
assert (Q = Y).
idtac.
treat_equalities.
assert (Q = U).
treat_equalities.
unfold BetS in *.
spliter.

*****
H8 : not (Col X Q S)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet Q W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq Q R)
H7 : not (eq Q Q)
H6 : Bet Q Q R
H12 : not (eq T S)
H11 : not (eq R T)
H10 : Bet R T S
H15 : not (eq T Q)
H14 : not (eq P T)
H13 : Bet P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.

*****
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T Q S) (Bet X T Y))
+++++
try (exists Q).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert_diffs.
assert (P <> R).
idtac.
assert (P <> X).
idtac.
assert (~ Col X Q S).
repeat split.
try (exists Q).

*****
H8 : not (Col X Q S)
H7 : not (eq P X)
H6 : not (eq P R)
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col Q Q S) (Bet X Q Y)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.

*****
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S X P
+++++
assert (P <> R).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).

*****
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P R)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
intro.

*****
H : eq P R
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
intro.
treat_equalities.

*****
HPar : Par_strict Q S V V
HXQY : Bet X Q Y
HPUY : Bet V U Y
X,Y : Tpoint
HPW : not (eq V W)
HUWV : Bet U W V
HPWQ : Bet V W Q
W : Tpoint
HPTQ : BetS V T Q
HQUR : BetS Q U V
HRTS : BetS V T S
HNC : not (Col V Q S)
HCong1 : Cong V T Q T
HCong2 : Cong V T S T
HMid : Midpoint V V V
Q,S,T,U,V : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply par_strict_distinct in HPar.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
intro.
treat_equalities.
apply par_strict_distinct in HPar.

*****
HPar : and (not (eq Q S))\n (and (not (eq Q V))\n (and (not (eq Q V))\n (and (not (eq S V)) (and (not (eq S V)) (not (eq V V))))))
HXQY : Bet X Q Y
HPUY : Bet V U Y
X,Y : Tpoint
HPW : not (eq V W)
HUWV : Bet U W V
HPWQ : Bet V W Q
W : Tpoint
HPTQ : BetS V T Q
HQUR : BetS Q U V
HRTS : BetS V T S
HNC : not (Col V Q S)
HCong1 : Cong V T Q T
HCong2 : Cong V T S T
HMid : Midpoint V V V
Q,S,T,U,V : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
intro.
treat_equalities.
apply par_strict_distinct in HPar.
spliter.

*****
H4 : not (eq V V)
H2,H3 : not (eq S V)
H0,H1 : not (eq Q V)
H : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet V U Y
X,Y : Tpoint
HPW : not (eq V W)
HUWV : Bet U W V
HPWQ : Bet V W Q
W : Tpoint
HPTQ : BetS V T Q
HQUR : BetS Q U V
HRTS : BetS V T S
HNC : not (Col V Q S)
HCong1 : Cong V T Q T
HCong2 : Cong V T S T
HMid : Midpoint V V V
Q,S,T,U,V : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).

*****
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S X P
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.

*****
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S X P
+++++
assert (P <> V).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).

*****
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P V)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
intro.

*****
H0 : eq P V
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
intro.
treat_equalities.

*****
HPar : Par_strict Q S R R
H : not (eq R R)
HXQY : Bet X Q Y
HPUY : Bet R U Y
X,Y : Tpoint
HPWQ : Bet R W Q
HUWV : Bet U W R
HPW : not (eq R W)
W : Tpoint
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply par_strict_distinct in HPar.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
intro.
treat_equalities.
apply par_strict_distinct in HPar.

*****
HPar : and (not (eq Q S))\n (and (not (eq Q R))\n (and (not (eq Q R))\n (and (not (eq S R)) (and (not (eq S R)) (not (eq R R))))))
H : not (eq R R)
HXQY : Bet X Q Y
HPUY : Bet R U Y
X,Y : Tpoint
HPWQ : Bet R W Q
HUWV : Bet U W R
HPW : not (eq R W)
W : Tpoint
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
intro.
treat_equalities.
apply par_strict_distinct in HPar.
spliter.

*****
H5 : not (eq R R)
H3,H4 : not (eq S R)
H1,H2 : not (eq Q R)
H0 : not (eq Q S)
H : not (eq R R)
HXQY : Bet X Q Y
HPUY : Bet R U Y
X,Y : Tpoint
HPWQ : Bet R W Q
HUWV : Bet U W R
HPW : not (eq R W)
W : Tpoint
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).

*****
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S X P
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.

*****
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S X P
+++++
assert (P <> X).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).

*****
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P X)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
intro.

*****
H1 : eq P X
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
intro.
treat_equalities.

*****
HPUY : Bet R U Y
HXQY : Bet R Q Y
HPar : Par_strict Q S R R
H0 : not (eq R R)
Y : Tpoint
HPWQ : Bet R W Q
HUWV : Bet U W R
HPW : not (eq R W)
W : Tpoint
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply par_strict_distinct in HPar.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
intro.
treat_equalities.
apply par_strict_distinct in HPar.

*****
HPUY : Bet R U Y
HXQY : Bet R Q Y
HPar : and (not (eq Q S))\n (and (not (eq Q R))\n (and (not (eq Q R))\n (and (not (eq S R)) (and (not (eq S R)) (not (eq R R))))))
H0 : not (eq R R)
Y : Tpoint
HPWQ : Bet R W Q
HUWV : Bet U W R
HPW : not (eq R W)
W : Tpoint
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
intro.
treat_equalities.
apply par_strict_distinct in HPar.
spliter.

*****
HPUY : Bet R U Y
HXQY : Bet R Q Y
H5 : not (eq R R)
H3,H4 : not (eq S R)
H1,H2 : not (eq Q R)
H : not (eq Q S)
H0 : not (eq R R)
Y : Tpoint
HPWQ : Bet R W Q
HUWV : Bet U W R
HPW : not (eq R W)
W : Tpoint
HMid : Midpoint R R R
HCong2 : Cong R T S T
HNC : not (Col R Q S)
HCong1 : Cong R T Q T
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS R T Q
Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).

*****
H1 : not (eq P X)
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S X P
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
idtac.

*****
H1 : not (eq P X)
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S X P
+++++
apply l12_6.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
idtac.
apply l12_6.

*****
H1 : not (eq P X)
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S X P
+++++
apply par_strict_right_comm.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
idtac.
apply l12_6.
apply par_strict_right_comm.

*****
H1 : not (eq P X)
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S P X
+++++
apply par_strict_col_par_strict with R.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
idtac.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with R.

*****
H1 : not (eq P X)
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P X)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
idtac.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with R.

*****
H1 : not (eq P X)
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S P R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
idtac.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with R.

*****
H1 : not (eq P X)
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
idtac.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with R.
Col.

*****
H1 : not (eq P X)
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
assert_cols.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
apply l9_8_2 with X.
assert (P <> R).
idtac.
assert (P <> V).
idtac.
assert (P <> X).
idtac.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with R.
Col.
assert_cols.

*****
H7 : Col P R V
H6 : Col P W Q
H5 : Col U W V
H4 : Col P V X
H3 : Col P U Y
H2 : Col X Q Y
H1 : not (eq P X)
H0 : not (eq P V)
H : not (eq P R)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R X
+++++
ColR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).

*****
HTS : TS Q S P Y
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].

*****
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
Hc2 : not (Col Y Q S)
Hc1 : not (Col P Q S)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
clear Hc1.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.

*****
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
Hc2 : not (Col Y Q S)
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
clear Hc2.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.

*****
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (BetS S Q I) (BetS P U I))
+++++
exists I.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.

*****
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (BetS S Q I) (BetS P U I)
+++++
assert (HPUI : BetS P U I).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).

*****
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS P U I
+++++
assert (P <> Y).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).

*****
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Y)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
intro.

*****
H : eq P Y
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
intro.
treat_equalities.

*****
HCol : Col P Q S
HPar : Par_strict Q S P R
HXQY : Bet X Q P
HPVX : Bet P V X
X : Tpoint
HPW : not (eq P W)
HUWV : Bet P W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q P R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).

*****
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS P U I
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.

*****
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS P U I
+++++
assert (HPUI : Col P U I).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).

*****
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P U I
+++++
assert_cols.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
assert_cols.

*****
H6 : Col P R V
H5 : Col P W Q
H4 : Col U W V
H3 : Col P V X
H2 : Col P U Y
H1 : Col X Q Y
H0 : Col P I Y
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P U I
+++++
ColR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).

*****
HPUI : Col P U I
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS P U I
+++++
idtac.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.

*****
HPUI : Col P U I
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS P U I
+++++
split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.

*****
HPUI : Col P U I
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P U I
+++++
elim HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.

*****
HPUI : Col P U I
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet P U I, Bet P U I
+++++
clear HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.

*****
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet P U I, Bet P U I
+++++
intro HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.

*****
HPUI : Bet P U I
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P U I
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.

*****
HPUI : Col P U I
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : or (Bet U I P) (Bet I P U), Bet P U I
+++++
clear HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.

*****
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : or (Bet U I P) (Bet I P U), Bet P U I
+++++
intro HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.

*****
HPUI : or (Bet U I P) (Bet I P U)
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P U I
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.

*****
HPUI : or (Bet U I P) (Bet I P U)
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P U I
+++++
elim HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.

*****
HPUI : or (Bet U I P) (Bet I P U)
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet U I P, Bet P U I
+++++
clear HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.

*****
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet U I P, Bet P U I
+++++
intro HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.

*****
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P U I
+++++
exfalso.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.

*****
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HFalse : TS Q S P U).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).

*****
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q S P U
+++++
split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.

*****
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q S)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.

*****
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col U Q S)) (ex (fun T : Tpoint => and (Col T Q S) (Bet P T U)))
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.

*****
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col U Q S)) (ex (fun T : Tpoint => and (Col T Q S) (Bet P T U)))
+++++
split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.

*****
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U Q S)
+++++
try (exists I; split; Col; Between).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).

*****
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U Q S)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Q = U).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
apply BetSEq in HPTQ.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
apply BetSEq in HRTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
apply BetSEq in HQUR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H4 : not (eq U R)
H3 : not (eq Q R)
H2 : not (eq Q U)
H1 : Bet Q U R
H8 : not (eq T S)
H7 : not (eq R S)
H6 : not (eq R T)
H5 : Bet R T S
H12 : not (eq T Q)
H11 : not (eq P Q)
H10 : not (eq P T)
H9 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
apply l6_21 with S Q R Q.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with S Q R Q.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H4 : not (eq U R)
H3 : not (eq Q R)
H2 : not (eq Q U)
H1 : Bet Q U R
H8 : not (eq T S)
H7 : not (eq R S)
H6 : not (eq R T)
H5 : Bet R T S
H12 : not (eq T Q)
H11 : not (eq P Q)
H10 : not (eq P T)
H9 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col S Q R)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with S Q R Q.
Col.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H4 : not (eq U R)
H3 : not (eq Q R)
H2 : not (eq Q U)
H1 : Bet Q U R
H8 : not (eq T S)
H7 : not (eq R S)
H6 : not (eq R T)
H5 : Bet R T S
H12 : not (eq T Q)
H11 : not (eq P Q)
H10 : not (eq P T)
H9 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col S Q R)
+++++
apply par_strict_not_col_1 with P.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with S Q R Q.
Col.
apply par_strict_not_col_1 with P.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H4 : not (eq U R)
H3 : not (eq Q R)
H2 : not (eq Q U)
H1 : Bet Q U R
H8 : not (eq T S)
H7 : not (eq R S)
H6 : not (eq R T)
H5 : Bet R T S
H12 : not (eq T Q)
H11 : not (eq P Q)
H10 : not (eq P T)
H9 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict S Q R P
+++++
Par.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with S Q R Q.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H4 : not (eq U R)
H3 : not (eq Q R)
H2 : not (eq Q U)
H1 : Bet Q U R
H8 : not (eq T S)
H7 : not (eq R S)
H6 : not (eq R T)
H5 : Bet R T S
H12 : not (eq T Q)
H11 : not (eq P Q)
H10 : not (eq P T)
H9 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq R Q)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with S Q R Q.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H4 : not (eq U R)
H3 : not (eq Q R)
H2 : not (eq Q U)
H1 : Bet Q U R
H8 : not (eq T S)
H7 : not (eq R S)
H6 : not (eq R T)
H5 : Bet R T S
H12 : not (eq T Q)
H11 : not (eq P Q)
H10 : not (eq P T)
H9 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col S Q Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with S Q R Q.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H4 : not (eq U R)
H3 : not (eq Q R)
H2 : not (eq Q U)
H1 : Bet Q U R
H8 : not (eq T S)
H7 : not (eq R S)
H6 : not (eq R T)
H5 : Bet R T S
H12 : not (eq T Q)
H11 : not (eq P Q)
H10 : not (eq P T)
H9 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col S Q U
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with S Q R Q.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H4 : not (eq U R)
H3 : not (eq Q R)
H2 : not (eq Q U)
H1 : Bet Q U R
H8 : not (eq T S)
H7 : not (eq R S)
H6 : not (eq R T)
H5 : Bet R T S
H12 : not (eq T Q)
H11 : not (eq P Q)
H10 : not (eq P T)
H9 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l6_21 with S Q R Q.

*****
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H4 : not (eq U R)
H3 : not (eq Q R)
H2 : not (eq Q U)
H1 : Bet Q U R
H8 : not (eq T S)
H7 : not (eq R S)
H6 : not (eq R T)
H5 : Bet R T S
H12 : not (eq T Q)
H11 : not (eq P Q)
H10 : not (eq P T)
H9 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q U
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).

*****
H1 : eq Q U
H0 : Col U Q S
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
treat_equalities.

*****
HPUI : Bet Q I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P Q Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet Q W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q Q R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold BetS in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
treat_equalities.
unfold BetS in *.

*****
HPUI : Bet Q I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P Q Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet Q W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q Q R) (and (not (eq Q Q)) (not (eq Q R)))
HRTS : and (Bet R T S) (and (not (eq R T)) (not (eq T S)))
HPTQ : and (Bet P T Q) (and (not (eq P T)) (not (eq T Q)))
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.
try (exists I; split; Col; Between).
intro.
assert (Q = U).
treat_equalities.
unfold BetS in *.
spliter.

*****
HPUI : Bet Q I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P Q Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet Q W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq Q R)
H1 : not (eq Q Q)
H0 : Bet Q Q R
H5 : not (eq T S)
H4 : not (eq R T)
H3 : Bet R T S
H8 : not (eq T Q)
H7 : not (eq P T)
H6 : Bet P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
split.
Col.
split.

*****
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T Q S) (Bet P T U))
+++++
try (exists I; split; Col; Between).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).

*****
HFalse : TS Q S P U
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply l9_9 in HFalse.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.

*****
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HFalse.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.

*****
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S P U
+++++
apply one_side_transitivity with R.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.

*****
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S P R
+++++
apply l12_6.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply l12_6.

*****
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S P R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.

*****
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S R U
+++++
apply BetSEq in HPTQ.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.

*****
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S R U
+++++
apply BetSEq in HRTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.

*****
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S R U
+++++
apply BetSEq in HQUR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.

*****
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S R U
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.

*****
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S R U
+++++
assert_diffs.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.

*****
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S R U
+++++
assert_cols.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q S R U
+++++
apply l9_19 with Q.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q S Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R U Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out Q R U) (not (Col Q S R))
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.
Col.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out Q R U) (not (Col Q S R))
+++++
repeat split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.
Col.
repeat split.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq R Q)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.
Col.
repeat split.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq U Q)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.
Col.
repeat split.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet Q R U) (Bet Q U R)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.
Col.
repeat split.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q S R)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.
Col.
repeat split.
Col.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q S R)
+++++
apply par_strict_not_col_1 with P.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS Q S P U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with R.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with Q.
Col.
repeat split.
Col.
apply par_strict_not_col_1 with P.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H20 : Col X Q Y
H19 : Col P I Y
H18 : Col U I P
H13 : not (eq P X)
H16 : not (eq P V)
H15 : not (eq R V)
H12 : not (eq P R)
H17 : not (eq P S)
H14 : not (eq Q S)
HFalse : not (OS Q S P U)
HPUI : Bet U I P
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S R P
+++++
Par.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.

*****
HPUI : or (Bet U I P) (Bet I P U)
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet I P U, Bet P U I
+++++
clear HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.

*****
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet I P U, Bet P U I
+++++
intro HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.

*****
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P U I
+++++
exfalso.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.

*****
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HFalse : TS P R I U).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).

*****
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P R I U
+++++
split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.

*****
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col I P R)
+++++
try (intro; apply HPar; exists I; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.

*****
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col U P R)) (ex (fun T : Tpoint => and (Col T P R) (Bet I T U)))
+++++
try (intro; apply HPar; exists I; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).

*****
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col U P R)) (ex (fun T : Tpoint => and (Col T P R) (Bet I T U)))
+++++
split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.

*****
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U P R)
+++++
try (exists P; split; Col; Between).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).

*****
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U P R)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (R = U).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq R U
+++++
unfold BetS in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R) (and (not (eq Q U)) (not (eq U R)))
HRTS : and (Bet R T S) (and (not (eq R T)) (not (eq T S)))
HPTQ : and (Bet P T Q) (and (not (eq P T)) (not (eq T Q)))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq R U
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.
spliter.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q U)
H1 : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R T)
H4 : Bet R T S
H9 : not (eq T Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq R U
+++++
apply l6_21 with P R Q U.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.
spliter.
apply l6_21 with P R Q U.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q U)
H1 : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R T)
H4 : Bet R T S
H9 : not (eq T Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P R Q)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.
spliter.
apply l6_21 with P R Q U.
Col.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q U)
H1 : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R T)
H4 : Bet R T S
H9 : not (eq T Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P R Q)
+++++
apply par_strict_not_col_1 with S.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.
spliter.
apply l6_21 with P R Q U.
Col.
apply par_strict_not_col_1 with S.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q U)
H1 : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R T)
H4 : Bet R T S
H9 : not (eq T Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict P R Q S
+++++
Par.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.
spliter.
apply l6_21 with P R Q U.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q U)
H1 : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R T)
H4 : Bet R T S
H9 : not (eq T Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q U)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.
spliter.
apply l6_21 with P R Q U.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q U)
H1 : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R T)
H4 : Bet R T S
H9 : not (eq T Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.
spliter.
apply l6_21 with P R Q U.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q U)
H1 : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R T)
H4 : Bet R T S
H9 : not (eq T Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R U
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.
spliter.
apply l6_21 with P R Q U.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q U)
H1 : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R T)
H4 : Bet R T S
H9 : not (eq T Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q U R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
unfold BetS in *.
spliter.
apply l6_21 with P R Q U.

*****
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q U)
H1 : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R T)
H4 : Bet R T S
H9 : not (eq T Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q U U
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).

*****
H1 : eq R U
H0 : Col U P R
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
treat_equalities.

*****
HPUI : Bet I P R
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P R Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet R W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q R R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold BetS in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
treat_equalities.
unfold BetS in *.

*****
HPUI : Bet I P R
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P R Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet R W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q R R) (and (not (eq Q R)) (not (eq R R)))
HRTS : and (Bet R T S) (and (not (eq R T)) (not (eq T S)))
HPTQ : and (Bet P T Q) (and (not (eq P T)) (not (eq T Q)))
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.
try (exists P; split; Col; Between).
intro.
assert (R = U).
treat_equalities.
unfold BetS in *.
spliter.

*****
HPUI : Bet I P R
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P R Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet R W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq R R)
H1 : not (eq Q R)
H0 : Bet Q R R
H5 : not (eq T S)
H4 : not (eq R T)
H3 : Bet R T S
H8 : not (eq T Q)
H7 : not (eq P T)
H6 : Bet P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
split.
try (intro; apply HPar; exists I; Col).
split.

*****
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T P R) (Bet I T U))
+++++
try (exists P; split; Col; Between).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).

*****
HFalse : TS P R I U
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply l9_9 in HFalse.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HFalse.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R I U
+++++
apply one_side_transitivity with Q.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R I Q
+++++
apply l12_6.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict P R I Q
+++++
apply par_strict_right_comm.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict P R Q I
+++++
apply par_strict_col_par_strict with S.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q I)
+++++
Par.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q I)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.
Col.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q I)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.
Col.
intro.

*****
H0 : eq Q I
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.
Col.
intro.
treat_equalities.

*****
HPUI : Bet Q P U
HFalse : not (OS P R Q U)
H : not (eq P Y)
HBet : Bet P Q Y
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply BetSEq in HPTQ.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.
Col.
intro.
treat_equalities.
apply BetSEq in HPTQ.

*****
HPUI : Bet Q P U
HFalse : not (OS P R Q U)
H : not (eq P Y)
HBet : Bet P Q Y
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply BetSEq in HRTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.
Col.
intro.
treat_equalities.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.

*****
HPUI : Bet Q P U
HFalse : not (OS P R Q U)
H : not (eq P Y)
HBet : Bet P Q Y
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply BetSEq in HQUR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.
Col.
intro.
treat_equalities.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.

*****
HPUI : Bet Q P U
HFalse : not (OS P R Q U)
H : not (eq P Y)
HBet : Bet P Q Y
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.
Col.
intro.
treat_equalities.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.

*****
HPUI : Bet Q P U
HFalse : not (OS P R Q U)
H : not (eq P Y)
HBet : Bet P Q Y
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.
Col.
intro.
treat_equalities.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply HNC.

*****
HPUI : Bet Q P U
HFalse : not (OS P R Q U)
H : not (eq P Y)
HBet : Bet P Q Y
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
assert_cols.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.
Col.
intro.
treat_equalities.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply HNC.
assert_cols.

*****
H22 : Col P R V
H21 : Col P T Q
H20 : Col R T S
H19 : Col Q U R
H18 : Col P W Q
H17 : Col U W V
H16 : Col P V X
H15 : Col P U Y
H14 : Col X Q Y
H13 : Col P Q Y
H12 : Col Q P U
HPUI : Bet Q P U
HFalse : not (OS P R Q U)
H : not (eq P Y)
HBet : Bet P Q Y
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
ColR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict P R Q S
+++++
Par.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q S I
+++++
Par.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
apply l12_6.
apply par_strict_right_comm.
apply par_strict_col_par_strict with S.
Par.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q S I
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.

*****
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R Q U
+++++
assert (HPar':= HPar).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).

*****
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R Q U
+++++
apply par_strict_distinct in HPar.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.

*****
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : and (not (eq Q S))\n (and (not (eq Q P))\n (and (not (eq Q R))\n (and (not (eq S P)) (and (not (eq S R)) (not (eq P R))))))
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R Q U
+++++
apply BetSEq in HPTQ.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.

*****
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : and (not (eq Q S))\n (and (not (eq Q P))\n (and (not (eq Q R))\n (and (not (eq S P)) (and (not (eq S R)) (not (eq P R))))))
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R Q U
+++++
apply BetSEq in HRTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.

*****
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : and (not (eq Q S))\n (and (not (eq Q P))\n (and (not (eq Q R))\n (and (not (eq S P)) (and (not (eq S R)) (not (eq P R))))))
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R Q U
+++++
apply BetSEq in HQUR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.

*****
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : and (not (eq Q S))\n (and (not (eq Q P))\n (and (not (eq Q R))\n (and (not (eq S P)) (and (not (eq S R)) (not (eq P R))))))
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R Q U
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.

*****
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H4 : not (eq S R)
H3 : not (eq S P)
H2 : not (eq Q R)
H1 : not (eq Q P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R Q U
+++++
assert_diffs.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.

*****
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R Q U
+++++
assert_cols.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P R Q U
+++++
apply l9_19 with R.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P R R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q U R
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out R Q U) (not (Col P R Q))
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.
Col.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out R Q U) (not (Col P R Q))
+++++
repeat split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.
Col.
repeat split.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q R)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.
Col.
repeat split.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq U R)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.
Col.
repeat split.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet R Q U) (Bet R U Q)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.
Col.
repeat split.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P R Q)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.
Col.
repeat split.
Between.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P R Q)
+++++
apply par_strict_not_col_3 with S.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
elim HPUI.
clear HPUI.
intro HPUI.
Col.
elim HPUI.
clear HPUI.
intro HPUI.
exfalso.
assert (HFalse : TS P R I U).
apply l9_9 in HFalse.
apply HFalse.
apply one_side_transitivity with Q.
assert (HPar':= HPar).
apply par_strict_distinct in HPar.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
assert_diffs.
assert_cols.
apply l9_19 with R.
Col.
repeat split.
Between.
apply par_strict_not_col_3 with S.

*****
H28 : Col P R V
H27 : Col P T Q
H26 : Col R T S
H25 : Col Q U R
H24 : Col P W Q
H23 : Col U W V
H22 : Col P V X
H21 : Col P U Y
H18 : Col X Q Y
H4 : Col P I Y
H2 : Col I P U
H1 : not (eq P X)
H20 : not (eq P V)
H19 : not (eq R V)
HPar' : Par_strict Q S P R
HFalse : not (OS P R I U)
HPUI : Bet I P U
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
H5 : not (eq P R)
H3 : not (eq S P)
H0 : not (eq Q S)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S P R
+++++
Par.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.

*****
HPUI : Col P U I
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq P U)) (not (eq U I))
+++++
split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.

*****
HPUI : Col P U I
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P U)
+++++
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.

*****
HPUI : Col P U I
H : not (eq P Y)
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq U I)
+++++
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
try (intro; treat_equalities; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Q = U).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Q U
+++++
apply l6_21 with S Q R Q.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
apply l6_21 with S Q R Q.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col S Q R)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
apply l6_21 with S Q R Q.
Col.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col S Q R)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
apply l6_21 with S Q R Q.
Col.
intro.

*****
H21 : Col S Q R
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
apply l6_21 with S Q R Q.
Col.
intro.
apply HNC.

*****
H21 : Col S Q R
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
ColR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
apply l6_21 with S Q R Q.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq R Q)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
apply l6_21 with S Q R Q.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col S Q Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
apply l6_21 with S Q R Q.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col S Q U
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
apply l6_21 with S Q R Q.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
apply l6_21 with S Q R Q.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R Q U
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).

*****
H21 : eq Q U
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H17 : Col Q U R
H16 : Col P W Q
H15 : Col U W V
H14 : Col P V X
H13 : Col P U Y
H12 : Col X Q Y
H : not (eq P Y)
HCol : Col U Q S
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H3 : not (eq U R)
H2 : not (eq Q R)
H1 : not (eq Q U)
H0 : Bet Q U R
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
treat_equalities.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H16 : Col P W Q
H15 : Col Q W V
H14 : Col P V X
H13 : Col P Q Y
H12 : Col X Q Y
H : not (eq P Y)
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P Q Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet Q W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq Q R)
H1 : not (eq Q Q)
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold BetS in *.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
treat_equalities.
unfold BetS in *.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H16 : Col P W Q
H15 : Col Q W V
H14 : Col P V X
H13 : Col P Q Y
H12 : Col X Q Y
H : not (eq P Y)
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P Q Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet Q W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq Q R)
H1 : not (eq Q Q)
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
assert (P <> Y).
idtac.
assert (HPUI : Col P U I).
idtac.
split.
split.
try (intro; treat_equalities; apply par_strict_not_col_3 in HPar; apply BetSEq in HPTQ; apply BetSEq in HRTS; apply BetSEq in HQUR; spliter; assert_cols; Col).
try (intro; treat_equalities; Col).
assert (Q = U).
treat_equalities.
unfold BetS in *.
spliter.

*****
H20 : Col P R V
H19 : Col P T Q
H18 : Col R T S
H16 : Col P W Q
H15 : Col Q W V
H14 : Col P V X
H13 : Col P Q Y
H12 : Col X Q Y
H : not (eq P Y)
HPar : not (Col P R Q)
HXQY : Bet X Q Y
HPUY : Bet P Q Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet Q W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq Q R)
H1 : not (eq Q Q)
H7 : not (eq T S)
H6 : not (eq R S)
H5 : not (eq R T)
H4 : Bet R T S
H11 : not (eq T Q)
H10 : not (eq P Q)
H9 : not (eq P T)
H8 : Bet P T Q
P,Q,R,S,T : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (BetS S Q I) (BetS P U I)
+++++
split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS S Q I
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS S Q I
+++++
assert (HTS : TS Q R S I).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q R S I
+++++
apply l9_8_2 with P.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q R P I
+++++
apply BetSEq in HPTQ.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q R P I
+++++
apply BetSEq in HRTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q R P I
+++++
apply BetSEq in HQUR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q R P I
+++++
apply BetSEq in HPUI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.

*****
HPUI : and (Bet P U I)\n (and (not (eq P U)) (and (not (eq P I)) (not (eq U I))))
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q R P I
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.

*****
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q R P I
+++++
assert_diffs.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.

*****
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q R P I
+++++
assert_cols.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.

*****
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Q R P I
+++++
repeat split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.

*****
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q R)
+++++
try (exists U; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.
try (exists U; Col).

*****
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q R)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.
try (exists U; Col).
intro.

*****
H33 : Col P Q R
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.
try (exists U; Col).
intro.
apply HNC.

*****
H33 : Col P Q R
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
ColR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.

*****
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col I Q R)
+++++
try (exists U; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.
try (exists U; Col).

*****
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col I Q R)
+++++
intro.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.
try (exists U; Col).
intro.

*****
H33 : Col I Q R
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply par_strict_not_col_4 in HPar.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.
try (exists U; Col).
intro.
apply par_strict_not_col_4 in HPar.

*****
H33 : Col I Q R
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HPar.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.
try (exists U; Col).
intro.
apply par_strict_not_col_4 in HPar.
apply HPar.

*****
H33 : Col I Q R
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q S R
+++++
ColR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
apply BetSEq in HPUI.
spliter.
assert_diffs.
assert_cols.
repeat split.

*****
H32 : Col P R V
H31 : Col P T Q
H30 : Col R T S
H29 : Col Q U R
H28 : Col P W Q
H27 : Col U W V
H26 : Col P V X
H25 : Col P U Y
H24 : Col X Q Y
H23 : Col P I Y
H22 : Col P U I
H18 : not (eq P X)
H21 : not (eq P V)
H19 : not (eq R V)
H16 : not (eq P R)
H15 : not (eq P Y)
H20 : not (eq P S)
H17 : not (eq Q S)
H2 : not (eq U I)
H1 : not (eq P I)
H0 : not (eq P U)
H : Bet P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H6 : not (eq U R)
H5 : not (eq Q R)
H4 : not (eq Q U)
H3 : Bet Q U R
H10 : not (eq T S)
H9 : not (eq R S)
H8 : not (eq R T)
H7 : Bet R T S
H14 : not (eq T Q)
H13 : not (eq P Q)
H12 : not (eq P T)
H11 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T Q R) (Bet P T I))
+++++
try (exists U; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q R P S
+++++
apply l12_6.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q R P S
+++++
apply par_not_col_strict with P.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q R P S
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q R P S
+++++
try (intro; apply par_strict_not_col_3 in HPar; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q R P S
+++++
apply BetSEq in HPTQ.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q R P S
+++++
apply BetSEq in HRTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q R P S
+++++
apply BetSEq in HQUR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q R P S
+++++
assert_diffs.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q R P S
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q R P S
+++++
apply l12_17 with T.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.
apply l12_17 with T.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q R)
+++++
try split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.
apply l12_17 with T.
try split.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q R)
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.
apply l12_17 with T.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint T Q P
+++++
try split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.
apply l12_17 with T.
try split.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q T P
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.
apply l12_17 with T.
try split.
Cong.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q T P
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.
apply l12_17 with T.
try split.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong Q T T P
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.
apply l12_17 with T.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint T R S
+++++
try split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.
apply l12_17 with T.
try split.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet R T S
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.
try (intro; apply par_strict_not_col_3 in HPar; Col).
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
assert_diffs.
spliter.
apply l12_17 with T.
try split.

*****
H0 : not (eq P X)
H5 : not (eq P V)
H3 : not (eq R V)
H : not (eq P R)
H4 : not (eq P S)
H1 : not (eq Q S)
H2 : not (eq P Q)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H9 : not (eq U R)
H8 : not (eq Q R)
H7 : not (eq Q U)
H6 : Bet Q U R
H13 : not (eq T S)
H12 : not (eq R S)
H11 : not (eq R T)
H10 : Bet R T S
H17 : not (eq T Q)
H16 : not (eq P Q)
H15 : not (eq P T)
H14 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong R T T S
+++++
Cong.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P S P
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q R P)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
apply l9_8_2 with P.
apply l12_6.
apply par_not_col_strict with P.
Col.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q R P)
+++++
try (intro; apply par_strict_not_col_3 in HPar; Col).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).

*****
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS S Q I
+++++
split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.

*****
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet S Q I
+++++
elim HCol.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.

*****
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet I Q S, Bet S Q I
+++++
intro HSQI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.

*****
HSQI : Bet I Q S
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet S Q I
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.

*****
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : or (Bet Q S I) (Bet S I Q), Bet S Q I
+++++
intro HSQI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.

*****
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet S Q I
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.

*****
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet S Q I
+++++
assert (HFalse := HTS).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).

*****
HFalse : TS Q R S I
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet S Q I
+++++
apply l9_9 in HFalse.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet S Q I
+++++
exfalso.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HFalse.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q R S I
+++++
apply BetSEq in HPTQ.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q R S I
+++++
apply BetSEq in HRTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q R S I
+++++
apply BetSEq in HQUR.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : and (Bet Q U R)\n (and (not (eq Q U)) (and (not (eq Q R)) (not (eq U R))))
HRTS : and (Bet R T S)\n (and (not (eq R T)) (and (not (eq R S)) (not (eq T S))))
HPTQ : and (Bet P T Q)\n (and (not (eq P T)) (and (not (eq P Q)) (not (eq T Q))))
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q R S I
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q R S I
+++++
apply l9_19 with Q.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q R Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col S I Q
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out Q S I) (not (Col Q R S))
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out Q S I) (not (Col Q R S))
+++++
apply par_strict_not_col_4 in HPar.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out Q S I) (not (Col Q R S))
+++++
split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out Q S I
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out Q S I
+++++
unfold TS in HTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : and (not (Col S Q R))\n (and (not (Col I Q R))\n (ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))))
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out Q S I
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out Q S I
+++++
assert_diffs.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out Q S I
+++++
repeat split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq S Q)
+++++
elim HSQI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.
elim HSQI.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet Q S I, not (eq S Q)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.
elim HSQI.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet S I Q, not (eq S Q)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq I Q)
+++++
elim HSQI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.
elim HSQI.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet Q S I, not (eq I Q)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.
elim HSQI.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet S I Q, not (eq I Q)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet Q S I) (Bet Q I S)
+++++
elim HSQI.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.
elim HSQI.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet Q S I, or (Bet Q S I) (Bet Q I S)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.
Col.
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.
elim HSQI.

*****
H22 : not (eq P S)
H18 : not (eq S Q)
H19 : not (eq I R)
H17 : not (eq I Q)
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
H13 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H12 : not (Col I Q R)
H11 : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet S I Q, or (Bet Q S I) (Bet Q I S)
+++++
Between.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
elim HCol.
intro HSQI.
Between.
assert (HFalse := HTS).
apply l9_9 in HFalse.
exfalso.
apply HFalse.
apply BetSEq in HPTQ.
apply BetSEq in HRTS.
apply BetSEq in HQUR.
spliter.
apply l9_19 with Q.
Col.
apply par_strict_not_col_4 in HPar.
split.

*****
HFalse : not (OS Q R S I)
HSQI : or (Bet Q S I) (Bet S I Q)
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : not (Col Q S R)
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
H2 : not (eq U R)
H1 : not (eq Q R)
H0 : not (eq Q U)
H : Bet Q U R
H6 : not (eq T S)
H5 : not (eq R S)
H4 : not (eq R T)
H3 : Bet R T S
H10 : not (eq T Q)
H9 : not (eq P Q)
H8 : not (eq P T)
H7 : Bet P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q R S)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.

*****
HTS : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq S Q)) (not (eq Q I))
+++++
assert (HFalse := HTS).
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
assert (HFalse := HTS).

*****
HTS,HFalse : TS Q R S I
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq S Q)) (not (eq Q I))
+++++
unfold TS in HTS.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
assert (HFalse := HTS).
unfold TS in HTS.

*****
HFalse : TS Q R S I
HTS : and (not (Col S Q R))\n (and (not (Col I Q R))\n (ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))))
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq S Q)) (not (eq Q I))
+++++
spliter.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
assert (HFalse := HTS).
unfold TS in HTS.
spliter.

*****
HFalse : TS Q R S I
H1 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H0 : not (Col I Q R)
H : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq S Q)) (not (eq Q I))
+++++
assert_diffs.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
assert (HFalse := HTS).
unfold TS in HTS.
spliter.
assert_diffs.

*****
H3 : not (eq P X)
H11 : not (eq P V)
H6 : not (eq R V)
H2 : not (eq P R)
H16 : not (eq S I)
H12 : not (eq P S)
H9 : not (eq P Q)
H10 : not (eq S R)
H8 : not (eq S Q)
H7 : not (eq I R)
H4 : not (eq Q R)
H5 : not (eq I Q)
HFalse : TS Q R S I
H1 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H0 : not (Col I Q R)
H : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq S Q)) (not (eq Q I))
+++++
repeat split.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
assert (HFalse := HTS).
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.

*****
H3 : not (eq P X)
H11 : not (eq P V)
H6 : not (eq R V)
H2 : not (eq P R)
H16 : not (eq S I)
H12 : not (eq P S)
H9 : not (eq P Q)
H10 : not (eq S R)
H8 : not (eq S Q)
H7 : not (eq I R)
H4 : not (eq Q R)
H5 : not (eq I Q)
HFalse : TS Q R S I
H1 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H0 : not (Col I Q R)
H : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq S Q)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.
Col.
assert (HTS : TS Q R S I).
split.
assert (HFalse := HTS).
unfold TS in HTS.
spliter.
assert_diffs.
repeat split.

*****
H3 : not (eq P X)
H11 : not (eq P V)
H6 : not (eq R V)
H2 : not (eq P R)
H16 : not (eq S I)
H12 : not (eq P S)
H9 : not (eq P Q)
H10 : not (eq S R)
H8 : not (eq S Q)
H7 : not (eq I R)
H4 : not (eq Q R)
H5 : not (eq I Q)
HFalse : TS Q R S I
H1 : ex (fun T : Tpoint => and (Col T Q R) (Bet S T I))
H0 : not (Col I Q R)
H : not (Col S Q R)
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q I)
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).
idtac.
assert (Hc2 : Bet Q U R).
idtac.
destruct (inner_pasch V Q R P U) as [W [HPWQ HUWV]].
Col.
clear Hc1.
clear Hc2.
assert (HPW : P <> W).
destruct (HT P V U W Q) as [X [Y [HPVX [HPUY HXQY]]]].
Between.
assert (HPar : Par_strict Q S P R).
assert (HTS : TS Q S P Y).
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
assert (HPUI : BetS P U I).
split.

*****
HPUI : BetS P U I
HBet : Bet P I Y
HCol : Col I Q S
I : Tpoint
HPar : Par_strict Q S P R
HXQY : Bet X Q Y
HPUY : Bet P U Y
HPVX : Bet P V X
X,Y : Tpoint
HPW : not (eq P W)
HUWV : Bet U W V
HPWQ : Bet P W Q
W : Tpoint
HMid : Midpoint P R V
V : Tpoint
HCong2 : Cong R T S T
HCong1 : Cong P T Q T
HNC : not (Col P Q S)
HQUR : BetS Q U R
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HT : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS P U I
+++++
Col.
-----
Lemma tarski_s_euclid_implies_euclid_5 : tarski_s_parallel_postulate -> euclid_5.
Proof.
intros HT P Q R S T U HPTQ HRTS HQUR HNC HCong1 HCong2.
destruct (symmetric_point_construction R P) as [V HMid].
assert (Hc1 : Bet V P R).

*****

*****

+++++
Qed.
-----
End tarski_euclid.
-----
