d99d94d6bb5828e32b2209e4a550b1d1
Require Export field_variable_isolation_tactic.
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
  intros.
  try solve [ ring | congruence ].
  assert (a + b - a = a - a).
  {
    try solve [ ring | congruence ].
  }
  {
    try solve [ ring | congruence ].
    assert (a - a = 0).
    {
      try solve [ ring | congruence ].
    }
    {
      try solve [ ring | congruence ].
      rewrite H1 in H0.
      try solve [ ring | congruence ].
      assert (a + b - a = b).
      {
        try solve [ ring | congruence ].
      }
      {
        try solve [ ring | congruence ].
      }
    }
  }
Qed.
Lemma field_prop_3 : forall a : F, a = 0 -> - a = 0.
  intros.
  rewrite H.
  ring.
Qed.
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
  intros.
  try solve [ ring | congruence ].
  assert (a + - a = a + 0).
  {
    try solve [ ring | congruence ].
  }
  {
    try solve [ ring | congruence ].
    assert (a + - a = 0).
    {
      try solve [ ring | congruence ].
    }
    {
      try solve [ ring | congruence ].
      rewrite H1 in H0.
      try solve [ ring | congruence ].
      assert (a + 0 = a).
      {
        try solve [ ring | congruence ].
      }
      {
        try solve [ ring | congruence ].
      }
    }
  }
Qed.
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
  intros.
  try solve [ ring | congruence ].
  assert (- - a = - - b).
  {
    try solve [ ring | congruence ].
  }
  {
    try solve [ ring | congruence ].
    assert (- - a = a).
    {
      try solve [ ring | congruence ].
    }
    {
      try solve [ ring | congruence ].
      assert (- - b = b).
      {
        try solve [ ring | congruence ].
      }
      {
        try solve [ ring | congruence ].
      }
    }
  }
Qed.
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
  intros.
  try solve [ auto with field_hints | congruence ].
  assert (a * b / b = a).
  {
    try solve [ auto with field_hints | congruence ].
    field.
    try solve [ auto with field_hints | congruence ].
  }
  {
    try solve [ auto with field_hints | congruence ].
    intuition.
    try solve [ auto with field_hints | congruence ].
    assert (a * b / b = 0 / b).
    {
      try solve [ auto with field_hints | congruence ].
    }
    {
      try solve [ auto with field_hints | congruence ].
      rewrite H1 in H3.
      try solve [ auto with field_hints | congruence ].
      assert (a = 0).
      {
        try solve [ auto with field_hints | congruence ].
        assert (0 / b = 0).
        {
          try solve [ auto with field_hints | congruence ].
          field.
          try solve [ auto with field_hints | congruence ].
        }
        {
          try solve [ auto with field_hints | congruence ].
        }
      }
      {
        try solve [ auto with field_hints | congruence ].
      }
    }
  }
Qed.
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
Proof.
  intros.
  try solve [ auto with field_hints | congruence ].
  unfold not in |- *.
  intro.
  try solve [ auto with field_hints | congruence ].
  IsoleVarRing a H1.
  try solve [ auto with field_hints | congruence ].
Qed.
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
  intros.
  try solve [ auto with field_hints | congruence ].
  unfold not in |- *.
  intro.
  try solve [ auto with field_hints | congruence ].
  assert (a * / a = 1).
  {
    try solve [ auto with field_hints | congruence ].
    field.
    try solve [ auto with field_hints | congruence ].
  }
  {
    try solve [ auto with field_hints | congruence ].
    assert (a * / a = a * 0).
    {
      try solve [ auto with field_hints | congruence ].
    }
    {
      try solve [ auto with field_hints | congruence ].
      rewrite H1 in H2.
      try solve [ auto with field_hints | congruence ].
      assert (a * 0 = 0).
      {
        try solve [ auto with field_hints | congruence ].
        ring.
      }
      {
        try solve [ auto with field_hints | congruence ].
        rewrite H3 in H2.
        try solve [ auto with field_hints | congruence ].
      }
    }
  }
Qed.
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
  intros.
  try solve [ congruence ].
  assert (a + - a = 0).
  {
    try solve [ congruence ].
    apply Fplus_Fopp_r.
  }
  {
    try solve [ congruence ].
    intuition.
    try solve [ congruence ].
    rewrite H1 in H0.
    try solve [ congruence ].
    assert (a = 0).
    {
      try solve [ congruence ].
      assert (a + 0 = 0 + a).
      {
        try solve [ congruence ].
        apply Fplus_sym.
      }
      {
        try solve [ congruence ].
        rewrite H2 in H0.
        try solve [ congruence ].
        assert (0 + a = a).
        {
          try solve [ congruence ].
          apply Fplus_Ol.
        }
        {
          try solve [ congruence ].
        }
      }
    }
    {
      try solve [ congruence ].
    }
  }
Qed.
Theorem divnonzero: forall a b: F, a / b <> 0 -> a<>0.
  intros a b H1 H2.
  case H1.
  unfold Fdiv.
  rewrite H2.
  ring.
Qed.
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\ b<>0.
  intros a b H1.
  split.
  {
    intros H2.
    case H1.
    rewrite H2.
    ring.
  }
  {
    intros H2.
    case H1.
    rewrite H2.
    ring.
  }
Qed.
Theorem multnonzero_l: forall a b: F, a*b<>0 -> a<>0.
  intros a b H1.
  intros H2.
  case H1.
  rewrite H2.
  ring.
Qed.
Theorem multnonzero_r: forall a b: F, a*b<>0 -> b<>0.
  intros a b H1.
  intros H2.
  case H1.
  rewrite H2.
  ring.
Qed.
Lemma inverse_ratio : forall a b, a<>0 -> b<>0 -> a/b = 1 / (b/a).
Proof.
  intros.
  field.
  auto.
Qed.
Hint Resolve field_prop_1 field_prop_3 field_prop_4 field_prop_5 opzero
  nonzeromult nonzerodiv nonzeroinv inverse_ratio : field_hints.
