Require  Import area_method.
-----
Lemma essai : forall A B C,\nlet x := S A B C + 2 in\nlet y := S B C A + 2 in\nx = y.
-----
Lemma essai : forall A B C, let x := S A B C + 2 in let y := S B C A + 2 in x = y.

*****

*****
forall A B C : Point, let x := Fplus (S A B C) (Fplus F1 F1) in let y := Fplus (S B C A) (Fplus F1 F1) in eq x y
+++++
Proof.
-----
Lemma essai : forall A B C, let x := S A B C + 2 in let y := S B C A + 2 in x = y.
Proof.

*****

*****
forall A B C : Point, let x := Fplus (S A B C) (Fplus F1 F1) in let y := Fplus (S B C A) (Fplus F1 F1) in eq x y
+++++
intros.
-----
Lemma essai : forall A B C, let x := S A B C + 2 in let y := S B C A + 2 in x = y.
Proof.
intros.

*****
y : F
x : F
A,B,C : Point
*****
eq x y
+++++
unfold x.
-----
Lemma essai : forall A B C, let x := S A B C + 2 in let y := S B C A + 2 in x = y.
Proof.
intros.
unfold x.

*****
y : F
x : F
A,B,C : Point
*****
eq (Fplus (S A B C) (Fplus F1 F1)) y
+++++
unfold y.
-----
Lemma essai : forall A B C, let x := S A B C + 2 in let y := S B C A + 2 in x = y.
Proof.
intros.
unfold x.
unfold y.

*****
y : F
x : F
A,B,C : Point
*****
eq (Fplus (S A B C) (Fplus F1 F1)) (Fplus (S B C A) (Fplus F1 F1))
+++++
uniformize_signed_areas.
-----
Lemma essai : forall A B C, let x := S A B C + 2 in let y := S B C A + 2 in x = y.
Proof.
intros.
unfold x.
unfold y.
uniformize_signed_areas.

*****
y : F
x : F
A,B,C : Point
*****
eq (Fplus (S A B C) (Fplus F1 F1)) (Fplus (S A B C) (Fplus F1 F1))
+++++
auto.
-----
Lemma essai : forall A B C, let x := S A B C + 2 in let y := S B C A + 2 in x = y.
Proof.
intros.
unfold x.
unfold y.
uniformize_signed_areas.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_1 : forall I B C D E, \n  on_line I B C -> Py I D E = Py E D I.
-----
Lemma test_py_on_line_1 : forall I B C D E, on_line I B C -> Py I D E = Py E D I.

*****

*****
forall (I B C D E : Point) (_ : on_line I B C), eq (Py I D E) (Py E D I)
+++++
Proof.
-----
Lemma test_py_on_line_1 : forall I B C D E, on_line I B C -> Py I D E = Py E D I.
Proof.

*****

*****
forall (I B C D E : Point) (_ : on_line I B C), eq (Py I D E) (Py E D I)
+++++
intros.
-----
Lemma test_py_on_line_1 : forall I B C D E, on_line I B C -> Py I D E = Py E D I.
Proof.
intros.

*****
H : on_line I B C
I,B,C,D,E : Point
*****
eq (Py I D E) (Py E D I)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_line_1 : forall I B C D E, on_line I B C -> Py I D E = Py E D I.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_line_d I B C f
f : F
I,B,C,D,E : Point
*****
eq (Py I D E) (Py E D I)
+++++
eliminate I.
-----
Lemma test_py_on_line_1 : forall I B C D E, on_line I B C -> Py I D E = Py E D I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,B,C,D,E : Point
*****
eq (Fplus (Fmult f (Py E D C)) (Fmult (Fminus F1 f) (Py E D B))) (Fplus (Fmult f (Py E D C)) (Fmult (Fminus F1 f) (Py E D B)))
+++++
auto.
-----
Lemma test_py_on_line_1 : forall I B C D E, on_line I B C -> Py I D E = Py E D I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_2 : forall I B C D E, \n  on_line I B C -> Py D E I = Py D E I.
-----
Lemma test_py_on_line_2 : forall I B C D E, on_line I B C -> Py D E I = Py D E I.

*****

*****
forall (I B C D E : Point) (_ : on_line I B C), eq (Py D E I) (Py D E I)
+++++
Proof.
-----
Lemma test_py_on_line_2 : forall I B C D E, on_line I B C -> Py D E I = Py D E I.
Proof.

*****

*****
forall (I B C D E : Point) (_ : on_line I B C), eq (Py D E I) (Py D E I)
+++++
intros.
-----
Lemma test_py_on_line_2 : forall I B C D E, on_line I B C -> Py D E I = Py D E I.
Proof.
intros.

*****
H : on_line I B C
I,B,C,D,E : Point
*****
eq (Py D E I) (Py D E I)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_line_2 : forall I B C D E, on_line I B C -> Py D E I = Py D E I.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_line_d I B C f
f : F
I,B,C,D,E : Point
*****
eq (Py D E I) (Py D E I)
+++++
eliminate I.
-----
Lemma test_py_on_line_2 : forall I B C D E, on_line I B C -> Py D E I = Py D E I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,B,C,D,E : Point
*****
eq (Fplus (Fmult f (Py D E C)) (Fmult (Fminus F1 f) (Py D E B))) (Fplus (Fmult f (Py D E C)) (Fmult (Fminus F1 f) (Py D E B)))
+++++
auto.
-----
Lemma test_py_on_line_2 : forall I B C D E, on_line I B C -> Py D E I = Py D E I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_3 : forall I B C D, \n  on_line I B C -> Py I D I = Py I D I.
-----
Lemma test_py_on_line_3 : forall I B C D, on_line I B C -> Py I D I = Py I D I.

*****

*****
forall (I B C D : Point) (_ : on_line I B C), eq (Py I D I) (Py I D I)
+++++
Proof.
-----
Lemma test_py_on_line_3 : forall I B C D, on_line I B C -> Py I D I = Py I D I.
Proof.

*****

*****
forall (I B C D : Point) (_ : on_line I B C), eq (Py I D I) (Py I D I)
+++++
intros.
-----
Lemma test_py_on_line_3 : forall I B C D, on_line I B C -> Py I D I = Py I D I.
Proof.
intros.

*****
H : on_line I B C
I,B,C,D : Point
*****
eq (Py I D I) (Py I D I)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_line_3 : forall I B C D, on_line I B C -> Py I D I = Py I D I.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_line_d I B C f
f : F
I,B,C,D : Point
*****
eq (Py I D I) (Py I D I)
+++++
eliminate I.
-----
Lemma test_py_on_line_3 : forall I B C D, on_line I B C -> Py I D I = Py I D I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,B,C,D : Point
*****
eq (Fplus (Fmult f (Fplus (Fmult f (Py C D C)) (Fmult (Fminus F1 f) (Py C D B)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py B D C)) (Fmult (Fminus F1 f) (Py B D B))))) (Fplus (Fmult f (Fplus (Fmult f (Py C D C)) (Fmult (Fminus F1 f) (Py C D B)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py B D C)) (Fmult (Fminus F1 f) (Py B D B)))))
+++++
auto.
-----
Lemma test_py_on_line_3 : forall I B C D, on_line I B C -> Py I D I = Py I D I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_4 : forall I B C, \n  on_line I B C -> Py B I C = Py B I C.
-----
Lemma test_py_on_line_4 : forall I B C, on_line I B C -> Py B I C = Py B I C.

*****

*****
forall (I B C : Point) (_ : on_line I B C), eq (Py B I C) (Py B I C)
+++++
Proof.
-----
Lemma test_py_on_line_4 : forall I B C, on_line I B C -> Py B I C = Py B I C.
Proof.

*****

*****
forall (I B C : Point) (_ : on_line I B C), eq (Py B I C) (Py B I C)
+++++
intros.
-----
Lemma test_py_on_line_4 : forall I B C, on_line I B C -> Py B I C = Py B I C.
Proof.
intros.

*****
H : on_line I B C
I,B,C : Point
*****
eq (Py B I C) (Py B I C)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_line_4 : forall I B C, on_line I B C -> Py B I C = Py B I C.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_line_d I B C f
f : F
I,B,C : Point
*****
eq (Py B I C) (Py B I C)
+++++
eliminate I.
-----
Lemma test_py_on_line_4 : forall I B C, on_line I B C -> Py B I C = Py B I C.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,B,C : Point
*****
eq (Fminus (Fmult (Fmult f f) (Py C B C)) (Fmult f (Py C B C))) (Fminus (Fmult (Fmult f f) (Py C B C)) (Fmult f (Py C B C)))
+++++
auto.
-----
Lemma test_py_on_line_4 : forall I B C, on_line I B C -> Py B I C = Py B I C.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_4_b : forall I B C, \n  B<>C -> on_line I B C -> Py B I C = Py B I C.
-----
Lemma test_py_on_line_4_b : forall I B C, B<>C -> on_line I B C -> Py B I C = Py B I C.

*****

*****
forall (I B C : Point) (_ : not (eq B C)) (_ : on_line I B C), eq (Py B I C) (Py B I C)
+++++
Proof.
-----
Lemma test_py_on_line_4_b : forall I B C, B<>C -> on_line I B C -> Py B I C = Py B I C.
Proof.

*****

*****
forall (I B C : Point) (_ : not (eq B C)) (_ : on_line I B C), eq (Py B I C) (Py B I C)
+++++
intros.
-----
Lemma test_py_on_line_4_b : forall I B C, B<>C -> on_line I B C -> Py B I C = Py B I C.
Proof.
intros.

*****
H0 : on_line I B C
H : not (eq B C)
I,B,C : Point
*****
eq (Py B I C) (Py B I C)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_line_4_b : forall I B C, B<>C -> on_line I B C -> Py B I C = Py B I C.
Proof.
intros.
prepare_half_free_construction.

*****
H1 : on_line_d I B C f
f : F
H : not (eq B C)
I,B,C : Point
*****
eq (Py B I C) (Py B I C)
+++++
eliminate I.
-----
Lemma test_py_on_line_4_b : forall I B C, B<>C -> on_line I B C -> Py B I C = Py B I C.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
H : not (eq B C)
I,B,C : Point
*****
eq (Fminus (Fmult (Fmult f f) (Py C B C)) (Fmult f (Py C B C))) (Fminus (Fmult (Fmult f f) (Py C B C)) (Fmult f (Py C B C)))
+++++
auto.
-----
Lemma test_py_on_line_4_b : forall I B C, B<>C -> on_line I B C -> Py B I C = Py B I C.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_4_c : forall I B C, \n  B=C -> on_line I B C -> Py B I C = Py B I C.
-----
Lemma test_py_on_line_4_c : forall I B C, B=C -> on_line I B C -> Py B I C = Py B I C.

*****

*****
forall (I B C : Point) (_ : eq B C) (_ : on_line I B C), eq (Py B I C) (Py B I C)
+++++
Proof.
-----
Lemma test_py_on_line_4_c : forall I B C, B=C -> on_line I B C -> Py B I C = Py B I C.
Proof.

*****

*****
forall (I B C : Point) (_ : eq B C) (_ : on_line I B C), eq (Py B I C) (Py B I C)
+++++
intros.
-----
Lemma test_py_on_line_4_c : forall I B C, B=C -> on_line I B C -> Py B I C = Py B I C.
Proof.
intros.

*****
H0 : on_line I B C
H : eq B C
I,B,C : Point
*****
eq (Py B I C) (Py B I C)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_line_4_c : forall I B C, B=C -> on_line I B C -> Py B I C = Py B I C.
Proof.
intros.
prepare_half_free_construction.

*****
H1 : on_line_d I B C f
f : F
H : eq B C
I,B,C : Point
*****
eq (Py B I C) (Py B I C)
+++++
eliminate I.
-----
Lemma test_py_on_line_4_c : forall I B C, B=C -> on_line I B C -> Py B I C = Py B I C.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
H : eq B C
I,B,C : Point
*****
eq (Fminus (Fmult (Fmult f f) (Py C B C)) (Fmult f (Py C B C))) (Fminus (Fmult (Fmult f f) (Py C B C)) (Fmult f (Py C B C)))
+++++
auto.
-----
Lemma test_py_on_line_4_c : forall I B C, B=C -> on_line I B C -> Py B I C = Py B I C.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_5 : forall I P Q B, \n  on_line I P Q -> Py B I B = Py B I B.
-----
Lemma test_py_on_line_5 : forall I P Q B, on_line I P Q -> Py B I B = Py B I B.

*****

*****
forall (I P Q B : Point) (_ : on_line I P Q), eq (Py B I B) (Py B I B)
+++++
Proof.
-----
Lemma test_py_on_line_5 : forall I P Q B, on_line I P Q -> Py B I B = Py B I B.
Proof.

*****

*****
forall (I P Q B : Point) (_ : on_line I P Q), eq (Py B I B) (Py B I B)
+++++
intros.
-----
Lemma test_py_on_line_5 : forall I P Q B, on_line I P Q -> Py B I B = Py B I B.
Proof.
intros.

*****
H : on_line I P Q
I,P,Q,B : Point
*****
eq (Py B I B) (Py B I B)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_line_5 : forall I P Q B, on_line I P Q -> Py B I B = Py B I B.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_line_d I P Q f
f : F
I,P,Q,B : Point
*****
eq (Py B I B) (Py B I B)
+++++
eliminate I.
-----
Lemma test_py_on_line_5 : forall I P Q B, on_line I P Q -> Py B I B = Py B I B.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,P,Q,B : Point
*****
eq (Fplus (Fmult f (Fplus (Fmult f (Py Q B Q)) (Fmult (Fminus F1 f) (Py Q B P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P B Q)) (Fmult (Fminus F1 f) (Py P B P))))) (Fplus (Fmult f (Fplus (Fmult f (Py Q B Q)) (Fmult (Fminus F1 f) (Py Q B P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P B Q)) (Fmult (Fminus F1 f) (Py P B P)))))
+++++
auto.
-----
Lemma test_py_on_line_5 : forall I P Q B, on_line I P Q -> Py B I B = Py B I B.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_d_1 : forall I B C r, \n  on_line_d I B C r -> Py I C B = Py B C I.
-----
Lemma test_py_on_line_d_1 : forall I B C r, on_line_d I B C r -> Py I C B = Py B C I.

*****

*****
forall (I B C : Point) (r : F) (_ : on_line_d I B C r), eq (Py I C B) (Py B C I)
+++++
Proof.
-----
Lemma test_py_on_line_d_1 : forall I B C r, on_line_d I B C r -> Py I C B = Py B C I.
Proof.

*****

*****
forall (I B C : Point) (r : F) (_ : on_line_d I B C r), eq (Py I C B) (Py B C I)
+++++
intros.
-----
Lemma test_py_on_line_d_1 : forall I B C r, on_line_d I B C r -> Py I C B = Py B C I.
Proof.
intros.

*****
H : on_line_d I B C r
r : F
I,B,C : Point
*****
eq (Py I C B) (Py B C I)
+++++
eliminate I.
-----
Lemma test_py_on_line_d_1 : forall I B C r, on_line_d I B C r -> Py I C B = Py B C I.
Proof.
intros.
eliminate I.

*****
r : F
B,C : Point
*****
eq (Fmult (Fminus F1 r) (Py B C B)) (Fmult (Fminus F1 r) (Py B C B))
+++++
auto.
-----
Lemma test_py_on_line_d_1 : forall I B C r, on_line_d I B C r -> Py I C B = Py B C I.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_d_2 : forall I B C r, \n  on_line_d I B C r -> Py B C I = Py B C I.
-----
Lemma test_py_on_line_d_2 : forall I B C r, on_line_d I B C r -> Py B C I = Py B C I.

*****

*****
forall (I B C : Point) (r : F) (_ : on_line_d I B C r), eq (Py B C I) (Py B C I)
+++++
Proof.
-----
Lemma test_py_on_line_d_2 : forall I B C r, on_line_d I B C r -> Py B C I = Py B C I.
Proof.

*****

*****
forall (I B C : Point) (r : F) (_ : on_line_d I B C r), eq (Py B C I) (Py B C I)
+++++
intros.
-----
Lemma test_py_on_line_d_2 : forall I B C r, on_line_d I B C r -> Py B C I = Py B C I.
Proof.
intros.

*****
H : on_line_d I B C r
r : F
I,B,C : Point
*****
eq (Py B C I) (Py B C I)
+++++
eliminate I.
-----
Lemma test_py_on_line_d_2 : forall I B C r, on_line_d I B C r -> Py B C I = Py B C I.
Proof.
intros.
eliminate I.

*****
r : F
B,C : Point
*****
eq (Fmult (Fminus F1 r) (Py B C B)) (Fmult (Fminus F1 r) (Py B C B))
+++++
auto.
-----
Lemma test_py_on_line_d_2 : forall I B C r, on_line_d I B C r -> Py B C I = Py B C I.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_d_3 : forall I B C r, \n  on_line_d I B C r -> Py B I C = Py B I C.
-----
Lemma test_py_on_line_d_3 : forall I B C r, on_line_d I B C r -> Py B I C = Py B I C.

*****

*****
forall (I B C : Point) (r : F) (_ : on_line_d I B C r), eq (Py B I C) (Py B I C)
+++++
Proof.
-----
Lemma test_py_on_line_d_3 : forall I B C r, on_line_d I B C r -> Py B I C = Py B I C.
Proof.

*****

*****
forall (I B C : Point) (r : F) (_ : on_line_d I B C r), eq (Py B I C) (Py B I C)
+++++
intros.
-----
Lemma test_py_on_line_d_3 : forall I B C r, on_line_d I B C r -> Py B I C = Py B I C.
Proof.
intros.

*****
H : on_line_d I B C r
r : F
I,B,C : Point
*****
eq (Py B I C) (Py B I C)
+++++
eliminate I.
-----
Lemma test_py_on_line_d_3 : forall I B C r, on_line_d I B C r -> Py B I C = Py B I C.
Proof.
intros.
eliminate I.

*****
r : F
B,C : Point
*****
eq (Fminus (Fmult (Fmult r r) (Py C B C)) (Fmult r (Py C B C))) (Fminus (Fmult (Fmult r r) (Py C B C)) (Fmult r (Py C B C)))
+++++
auto.
-----
Lemma test_py_on_line_d_3 : forall I B C r, on_line_d I B C r -> Py B I C = Py B I C.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_d_4 : forall I B C r, \n  on_line_d I B C r -> Py B I B = Py B I B.
-----
Lemma test_py_on_line_d_4 : forall I B C r, on_line_d I B C r -> Py B I B = Py B I B.

*****

*****
forall (I B C : Point) (r : F) (_ : on_line_d I B C r), eq (Py B I B) (Py B I B)
+++++
Proof.
-----
Lemma test_py_on_line_d_4 : forall I B C r, on_line_d I B C r -> Py B I B = Py B I B.
Proof.

*****

*****
forall (I B C : Point) (r : F) (_ : on_line_d I B C r), eq (Py B I B) (Py B I B)
+++++
intros.
-----
Lemma test_py_on_line_d_4 : forall I B C r, on_line_d I B C r -> Py B I B = Py B I B.
Proof.
intros.

*****
H : on_line_d I B C r
r : F
I,B,C : Point
*****
eq (Py B I B) (Py B I B)
+++++
eliminate I.
-----
Lemma test_py_on_line_d_4 : forall I B C r, on_line_d I B C r -> Py B I B = Py B I B.
Proof.
intros.
eliminate I.

*****
r : F
B,C : Point
*****
eq (Fmult r (Fmult r (Py C B C))) (Fmult r (Fmult r (Py C B C)))
+++++
auto.
-----
Lemma test_py_on_line_d_4 : forall I B C r, on_line_d I B C r -> Py B I B = Py B I B.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_d_5 : forall A B C D Q r,\n  on_line_d Q B C r -> Py A Q D = Py A Q D.
-----
Lemma test_py_on_line_d_5 : forall A B C D Q r, on_line_d Q B C r -> Py A Q D = Py A Q D.

*****

*****
forall (A B C D Q : Point) (r : F) (_ : on_line_d Q B C r), eq (Py A Q D) (Py A Q D)
+++++
Proof.
-----
Lemma test_py_on_line_d_5 : forall A B C D Q r, on_line_d Q B C r -> Py A Q D = Py A Q D.
Proof.

*****

*****
forall (A B C D Q : Point) (r : F) (_ : on_line_d Q B C r), eq (Py A Q D) (Py A Q D)
+++++
intros.
-----
Lemma test_py_on_line_d_5 : forall A B C D Q r, on_line_d Q B C r -> Py A Q D = Py A Q D.
Proof.
intros.

*****
H : on_line_d Q B C r
r : F
A,B,C,D,Q : Point
*****
eq (Py A Q D) (Py A Q D)
+++++
eliminate Q.
-----
Lemma test_py_on_line_d_5 : forall A B C D Q r, on_line_d Q B C r -> Py A Q D = Py A Q D.
Proof.
intros.
eliminate Q.

*****
r : F
A,B,C,D : Point
*****
eq (Fminus (Fplus (Fplus (Fplus (Fopp (Fmult (Py A B D) r)) (Py A B D)) (Fmult (Fmult r r) (Py C B C))) (Fmult r (Py A C D))) (Fmult r (Py C B C))) (Fminus (Fplus (Fplus (Fplus (Fopp (Fmult (Py A B D) r)) (Py A B D)) (Fmult (Fmult r r) (Py C B C))) (Fmult r (Py A C D))) (Fmult r (Py C B C)))
+++++
auto.
-----
Lemma test_py_on_line_d_5 : forall A B C D Q r, on_line_d Q B C r -> Py A Q D = Py A Q D.
Proof.
intros.
eliminate Q.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_line_d_6 : forall A B C D Q r,\n  on_line_d Q B C r ->\n  Py A Q A + Py A Q D = Py Q A Q + Py A Q D.
-----
Lemma test_py_on_line_d_6 : forall A B C D Q r, on_line_d Q B C r -> Py A Q A + Py A Q D = Py Q A Q + Py A Q D.

*****

*****
forall (A B C D Q : Point) (r : F) (_ : on_line_d Q B C r), eq (Fplus (Py A Q A) (Py A Q D)) (Fplus (Py Q A Q) (Py A Q D))
+++++
Proof.
-----
Lemma test_py_on_line_d_6 : forall A B C D Q r, on_line_d Q B C r -> Py A Q A + Py A Q D = Py Q A Q + Py A Q D.
Proof.

*****

*****
forall (A B C D Q : Point) (r : F) (_ : on_line_d Q B C r), eq (Fplus (Py A Q A) (Py A Q D)) (Fplus (Py Q A Q) (Py A Q D))
+++++
geoInit.
-----
Lemma test_py_on_line_d_6 : forall A B C D Q r, on_line_d Q B C r -> Py A Q A + Py A Q D = Py Q A Q + Py A Q D.
Proof.
geoInit.

*****
H : on_line_d Q B C r
r : F
A,B,C,D,Q : Point
*****
eq (Fplus (Py A Q A) (Py A Q D)) (Fplus (Py Q A Q) (Py A Q D))
+++++
eliminate Q.
-----
Lemma test_py_on_line_d_6 : forall A B C D Q r, on_line_d Q B C r -> Py A Q A + Py A Q D = Py Q A Q + Py A Q D.
Proof.
geoInit.
eliminate Q.

*****
r : F
A,B,C,D : Point
*****
eq (Fplus (Fplus (Fmult r (Fplus (Fmult r (Py C A C)) (Fmult (Fminus F1 r) (Py C A B)))) (Fmult (Fminus F1 r) (Fplus (Fmult r (Py B A C)) (Fmult (Fminus F1 r) (Py B A B))))) (Fminus (Fplus (Fplus (Fplus (Fopp (Fmult (Py A B D) r)) (Py A B D)) (Fmult (Fmult r r) (Py C B C))) (Fmult r (Py A C D))) (Fmult r (Py C B C)))) (Fplus (Fplus (Fmult r (Fplus (Fmult r (Py C A C)) (Fmult (Fminus F1 r) (Py C A B)))) (Fmult (Fminus F1 r) (Fplus (Fmult r (Py B A C)) (Fmult (Fminus F1 r) (Py B A B))))) (Fminus (Fplus (Fplus (Fplus (Fopp (Fmult (Py A B D) r)) (Py A B D)) (Fmult (Fmult r r) (Py C B C))) (Fmult r (Py A C D))) (Fmult r (Py C B C))))
+++++
auto.
-----
Lemma test_py_on_line_d_6 : forall A B C D Q r, on_line_d Q B C r -> Py A Q A + Py A Q D = Py Q A Q + Py A Q D.
Proof.
geoInit.
eliminate Q.
auto.

*****

*****

+++++
Qed.
-----
Lemma  test_inter_ll_1 : forall I A B C D X Y, \n  inter_ll I A B C D -> Py I X Y = Py Y X I.
-----
Lemma test_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> Py I X Y = Py Y X I.

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (Py I X Y) (Py Y X I)
+++++
Proof.
-----
Lemma test_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> Py I X Y = Py Y X I.
Proof.

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (Py I X Y) (Py Y X I)
+++++
intros.
-----
Lemma test_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> Py I X Y = Py Y X I.
Proof.
intros.

*****
H : inter_ll I A B C D
I,A,B,C,D,X,Y : Point
*****
eq (Py I X Y) (Py Y X I)
+++++
eliminate I.
-----
Lemma test_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> Py I X Y = Py Y X I.
Proof.
intros.
eliminate I.

*****
H0 : not (eq (Fplus (S A C B) (S A B D)) F0)
A,B,C,D,X,Y : Point
*****
eq (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Py Y X B)) (Fmult (S B D C) (Py Y X A)))) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Py Y X B)) (Fmult (S B D C) (Py Y X A))))
+++++
auto.
-----
Lemma test_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> Py I X Y = Py Y X I.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma  test_inter_ll_2 : forall I A B C D X Y, \n  inter_ll I A B C D -> Py Y X I = Py Y X I.
-----
Lemma test_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> Py Y X I = Py Y X I.

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (Py Y X I) (Py Y X I)
+++++
Proof.
-----
Lemma test_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> Py Y X I = Py Y X I.
Proof.

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (Py Y X I) (Py Y X I)
+++++
intros.
-----
Lemma test_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> Py Y X I = Py Y X I.
Proof.
intros.

*****
H : inter_ll I A B C D
I,A,B,C,D,X,Y : Point
*****
eq (Py Y X I) (Py Y X I)
+++++
eliminate I.
-----
Lemma test_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> Py Y X I = Py Y X I.
Proof.
intros.
eliminate I.

*****
H0 : not (eq (Fplus (S A C B) (S A B D)) F0)
A,B,C,D,X,Y : Point
*****
eq (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Py Y X B)) (Fmult (S B D C) (Py Y X A)))) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Py Y X B)) (Fmult (S B D C) (Py Y X A))))
+++++
auto.
-----
Lemma test_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> Py Y X I = Py Y X I.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma  test_inter_ll_3 : forall I A B C D X Y, \n  inter_ll I A B C D -> Py Y I X = Py Y I X.
-----
Lemma test_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> Py Y I X = Py Y I X.

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (Py Y I X) (Py Y I X)
+++++
Proof.
-----
Lemma test_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> Py Y I X = Py Y I X.
Proof.

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (Py Y I X) (Py Y I X)
+++++
intros.
-----
Lemma test_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> Py Y I X = Py Y I X.
Proof.
intros.

*****
H : inter_ll I A B C D
I,A,B,C,D,X,Y : Point
*****
eq (Py Y I X) (Py Y I X)
+++++
eliminate I.
-----
Lemma test_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> Py Y I X = Py Y I X.
Proof.
intros.
eliminate I.

*****
H0 : not (eq (Fplus (S A C B) (S A B D)) F0)
A,B,C,D,X,Y : Point
*****
eq (Fminus (Fminus (Fopp (Fmult (Fdiv (S A D C) (Fplus (S A C B) (S A B D))) (Py Y B X))) (Fmult (Fdiv (S B C D) (Fplus (S A C B) (S A B D))) (Py Y A X))) (Fmult (Fmult (Fdiv (S A D C) (Fplus (S A C B) (S A B D))) (Fdiv (S B C D) (Fplus (S A C B) (S A B D)))) (Py A B A))) (Fminus (Fminus (Fopp (Fmult (Fdiv (S A D C) (Fplus (S A C B) (S A B D))) (Py Y B X))) (Fmult (Fdiv (S B C D) (Fplus (S A C B) (S A B D))) (Py Y A X))) (Fmult (Fmult (Fdiv (S A D C) (Fplus (S A C B) (S A B D))) (Fdiv (S B C D) (Fplus (S A C B) (S A B D)))) (Py A B A)))
+++++
auto.
-----
Lemma test_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> Py Y I X = Py Y I X.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma  test_inter_ll_4 : forall I A B C D X, \n  inter_ll I A B C D -> Py X I X = Py X I X.
-----
Lemma test_inter_ll_4 : forall I A B C D X, inter_ll I A B C D -> Py X I X = Py X I X.

*****

*****
forall (I A B C D X : Point) (_ : inter_ll I A B C D), eq (Py X I X) (Py X I X)
+++++
Proof.
-----
Lemma test_inter_ll_4 : forall I A B C D X, inter_ll I A B C D -> Py X I X = Py X I X.
Proof.

*****

*****
forall (I A B C D X : Point) (_ : inter_ll I A B C D), eq (Py X I X) (Py X I X)
+++++
intros.
-----
Lemma test_inter_ll_4 : forall I A B C D X, inter_ll I A B C D -> Py X I X = Py X I X.
Proof.
intros.

*****
H : inter_ll I A B C D
I,A,B,C,D,X : Point
*****
eq (Py X I X) (Py X I X)
+++++
eliminate I.
-----
Lemma test_inter_ll_4 : forall I A B C D X, inter_ll I A B C D -> Py X I X = Py X I X.
Proof.
intros.
eliminate I.

*****
H0 : not (eq (Fplus (S A C B) (S A B D)) F0)
A,B,C,D,X : Point
*****
eq (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Py B X B)) (Fmult (S B D C) (Py B X A))))) (Fmult (S B D C) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Py A X B)) (Fmult (S B D C) (Py A X A))))))) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Py B X B)) (Fmult (S B D C) (Py B X A))))) (Fmult (S B D C) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (Py A X B)) (Fmult (S B D C) (Py A X A)))))))
+++++
auto.
-----
Lemma test_inter_ll_4 : forall I A B C D X, inter_ll I A B C D -> Py X I X = Py X I X.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_parallel_d_1  : forall I B C D X Y r, \n on_parallel_d I B C D r -> Py X Y I = Py X Y I.
-----
Lemma test_py_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X Y I = Py X Y I.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (Py X Y I) (Py X Y I)
+++++
Proof.
-----
Lemma test_py_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X Y I = Py X Y I.
Proof.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (Py X Y I) (Py X Y I)
+++++
intros.
-----
Lemma test_py_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X Y I = Py X Y I.
Proof.
intros.

*****
H : on_parallel_d I B C D r
r : F
I,B,C,D,X,Y : Point
*****
eq (Py X Y I) (Py X Y I)
+++++
eliminate I.
-----
Lemma test_py_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X Y I = Py X Y I.
Proof.
intros.
eliminate I.

*****
r : F
B,C,D,X,Y : Point
*****
eq (Fplus (Py X Y B) (Fmult r (Fminus (Py X Y D) (Py X Y C)))) (Fplus (Py X Y B) (Fmult r (Fminus (Py X Y D) (Py X Y C))))
+++++
auto.
-----
Lemma test_py_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X Y I = Py X Y I.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_parallel_d_2  : forall I B C D X Y r,\n on_parallel_d I B C D r -> Py I Y X = Py I Y X.
-----
Lemma test_py_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> Py I Y X = Py I Y X.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (Py I Y X) (Py I Y X)
+++++
Proof.
-----
Lemma test_py_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> Py I Y X = Py I Y X.
Proof.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (Py I Y X) (Py I Y X)
+++++
intros.
-----
Lemma test_py_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> Py I Y X = Py I Y X.
Proof.
intros.

*****
H : on_parallel_d I B C D r
r : F
I,B,C,D,X,Y : Point
*****
eq (Py I Y X) (Py I Y X)
+++++
eliminate I.
-----
Lemma test_py_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> Py I Y X = Py I Y X.
Proof.
intros.
eliminate I.

*****
r : F
B,C,D,X,Y : Point
*****
eq (Fplus (Py X Y B) (Fmult r (Fminus (Py X Y D) (Py X Y C)))) (Fplus (Py X Y B) (Fmult r (Fminus (Py X Y D) (Py X Y C))))
+++++
auto.
-----
Lemma test_py_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> Py I Y X = Py I Y X.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_parallel_d_3  : forall I B C D X Y r,\n on_parallel_d I B C D r -> Py X I Y = Py X I Y.
-----
Lemma test_py_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X I Y = Py X I Y.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (Py X I Y) (Py X I Y)
+++++
Proof.
-----
Lemma test_py_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X I Y = Py X I Y.
Proof.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (Py X I Y) (Py X I Y)
+++++
intros.
-----
Lemma test_py_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X I Y = Py X I Y.
Proof.
intros.

*****
H : on_parallel_d I B C D r
r : F
I,B,C,D,X,Y : Point
*****
eq (Py X I Y) (Py X I Y)
+++++
eliminate I.
-----
Lemma test_py_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X I Y = Py X I Y.
Proof.
intros.
eliminate I.

*****
r : F
B,C,D,X,Y : Point
*****
eq (Fminus (Fplus (Py X B Y) (Fmult r (Fplus (Fminus (Py X D Y) (Py X C Y)) (Fmult (Fplus F1 F1) (Py B C D))))) (Fmult (Fmult r (Fminus F1 r)) (Py C D C))) (Fminus (Fplus (Py X B Y) (Fmult r (Fplus (Fminus (Py X D Y) (Py X C Y)) (Fmult (Fplus F1 F1) (Py B C D))))) (Fmult (Fmult r (Fminus F1 r)) (Py C D C)))
+++++
auto.
-----
Lemma test_py_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> Py X I Y = Py X I Y.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_parallel_d_4  : forall I B C D X r,\n on_parallel_d I B C D r -> Py X I X = Py X I X.
-----
Lemma test_py_on_parallel_d_4 : forall I B C D X r, on_parallel_d I B C D r -> Py X I X = Py X I X.

*****

*****
forall (I B C D X : Point) (r : F) (_ : on_parallel_d I B C D r), eq (Py X I X) (Py X I X)
+++++
Proof.
-----
Lemma test_py_on_parallel_d_4 : forall I B C D X r, on_parallel_d I B C D r -> Py X I X = Py X I X.
Proof.

*****

*****
forall (I B C D X : Point) (r : F) (_ : on_parallel_d I B C D r), eq (Py X I X) (Py X I X)
+++++
intros.
-----
Lemma test_py_on_parallel_d_4 : forall I B C D X r, on_parallel_d I B C D r -> Py X I X = Py X I X.
Proof.
intros.

*****
H : on_parallel_d I B C D r
r : F
I,B,C,D,X : Point
*****
eq (Py X I X) (Py X I X)
+++++
eliminate I.
-----
Lemma test_py_on_parallel_d_4 : forall I B C D X r, on_parallel_d I B C D r -> Py X I X = Py X I X.
Proof.
intros.
eliminate I.

*****
r : F
B,C,D,X : Point
*****
eq (Fminus (Fplus (Fplus (Fminus (Fplus (Py B X B) (Fmult (Fmult r r) (Py D X D))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py D X C))) (Fmult (Fmult r r) (Py C X C))) (Fmult (Fmult (Fplus F1 F1) r) (Py D X B))) (Fmult (Fmult (Fplus F1 F1) r) (Py C X B))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py B X B) (Fmult (Fmult r r) (Py D X D))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py D X C))) (Fmult (Fmult r r) (Py C X C))) (Fmult (Fmult (Fplus F1 F1) r) (Py D X B))) (Fmult (Fmult (Fplus F1 F1) r) (Py C X B)))
+++++
auto.
-----
Lemma test_py_on_parallel_d_4 : forall I B C D X r, on_parallel_d I B C D r -> Py X I X = Py X I X.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_perp_1  : forall I A B X Y, \n on_perp I A B -> Py X Y I = Py X Y I.
-----
Lemma test_py_on_perp_1 : forall I A B X Y, on_perp I A B -> Py X Y I = Py X Y I.

*****

*****
forall (I A B X Y : Point) (_ : on_perp I A B), eq (Py X Y I) (Py X Y I)
+++++
Proof.
-----
Lemma test_py_on_perp_1 : forall I A B X Y, on_perp I A B -> Py X Y I = Py X Y I.
Proof.

*****

*****
forall (I A B X Y : Point) (_ : on_perp I A B), eq (Py X Y I) (Py X Y I)
+++++
intros.
-----
Lemma test_py_on_perp_1 : forall I A B X Y, on_perp I A B -> Py X Y I = Py X Y I.
Proof.
intros.

*****
H : on_perp I A B
I,A,B,X,Y : Point
*****
eq (Py X Y I) (Py X Y I)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_perp_1 : forall I A B X Y, on_perp I A B -> Py X Y I = Py X Y I.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_perp_d I A B f
f : F
I,A,B,X,Y : Point
*****
eq (Py X Y I) (Py X Y I)
+++++
eliminate I.
-----
Lemma test_py_on_perp_1 : forall I A B X Y, on_perp I A B -> Py X Y I = Py X Y I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,A,B,X,Y : Point
*****
eq (Fminus (Py X Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (Fplus (S A X B) (S A B Y)))) (Fminus (Py X Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (Fplus (S A X B) (S A B Y))))
+++++
auto.
-----
Lemma test_py_on_perp_1 : forall I A B X Y, on_perp I A B -> Py X Y I = Py X Y I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_perp_2  : forall I A B X Y, \n on_perp I A B -> Py I Y X = Py X Y I.
-----
Lemma test_py_on_perp_2 : forall I A B X Y, on_perp I A B -> Py I Y X = Py X Y I.

*****

*****
forall (I A B X Y : Point) (_ : on_perp I A B), eq (Py I Y X) (Py X Y I)
+++++
Proof.
-----
Lemma test_py_on_perp_2 : forall I A B X Y, on_perp I A B -> Py I Y X = Py X Y I.
Proof.

*****

*****
forall (I A B X Y : Point) (_ : on_perp I A B), eq (Py I Y X) (Py X Y I)
+++++
intros.
-----
Lemma test_py_on_perp_2 : forall I A B X Y, on_perp I A B -> Py I Y X = Py X Y I.
Proof.
intros.

*****
H : on_perp I A B
I,A,B,X,Y : Point
*****
eq (Py I Y X) (Py X Y I)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_perp_2 : forall I A B X Y, on_perp I A B -> Py I Y X = Py X Y I.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_perp_d I A B f
f : F
I,A,B,X,Y : Point
*****
eq (Py I Y X) (Py X Y I)
+++++
eliminate I.
-----
Lemma test_py_on_perp_2 : forall I A B X Y, on_perp I A B -> Py I Y X = Py X Y I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,A,B,X,Y : Point
*****
eq (Fminus (Py X Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (Fplus (S A X B) (S A B Y)))) (Fminus (Py X Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (Fplus (S A X B) (S A B Y))))
+++++
auto.
-----
Lemma test_py_on_perp_2 : forall I A B X Y, on_perp I A B -> Py I Y X = Py X Y I.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_perp_3  : forall I A B X Y, \n on_perp I A B -> Py X I Y = Py X I Y.
-----
Lemma test_py_on_perp_3 : forall I A B X Y, on_perp I A B -> Py X I Y = Py X I Y.

*****

*****
forall (I A B X Y : Point) (_ : on_perp I A B), eq (Py X I Y) (Py X I Y)
+++++
Proof.
-----
Lemma test_py_on_perp_3 : forall I A B X Y, on_perp I A B -> Py X I Y = Py X I Y.
Proof.

*****

*****
forall (I A B X Y : Point) (_ : on_perp I A B), eq (Py X I Y) (Py X I Y)
+++++
intros.
-----
Lemma test_py_on_perp_3 : forall I A B X Y, on_perp I A B -> Py X I Y = Py X I Y.
Proof.
intros.

*****
H : on_perp I A B
I,A,B,X,Y : Point
*****
eq (Py X I Y) (Py X I Y)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_perp_3 : forall I A B X Y, on_perp I A B -> Py X I Y = Py X I Y.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_perp_d I A B f
f : F
I,A,B,X,Y : Point
*****
eq (Py X I Y) (Py X I Y)
+++++
eliminate I.
-----
Lemma test_py_on_perp_3 : forall I A B X Y, on_perp I A B -> Py X I Y = Py X I Y.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,A,B,X,Y : Point
*****
eq (Fminus (Fplus (Py X A Y) (Fmult (Fmult f f) (Py A B A))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (Fplus (S X A B) (S Y A B)))) (Fminus (Fplus (Py X A Y) (Fmult (Fmult f f) (Py A B A))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (Fplus (S X A B) (S Y A B))))
+++++
auto.
-----
Lemma test_py_on_perp_3 : forall I A B X Y, on_perp I A B -> Py X I Y = Py X I Y.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_perp_4  : forall I A B X, \n on_perp I A B -> Py X I X = Py X I X.
-----
Lemma test_py_on_perp_4 : forall I A B X, on_perp I A B -> Py X I X = Py X I X.

*****

*****
forall (I A B X : Point) (_ : on_perp I A B), eq (Py X I X) (Py X I X)
+++++
Proof.
-----
Lemma test_py_on_perp_4 : forall I A B X, on_perp I A B -> Py X I X = Py X I X.
Proof.

*****

*****
forall (I A B X : Point) (_ : on_perp I A B), eq (Py X I X) (Py X I X)
+++++
intros.
-----
Lemma test_py_on_perp_4 : forall I A B X, on_perp I A B -> Py X I X = Py X I X.
Proof.
intros.

*****
H : on_perp I A B
I,A,B,X : Point
*****
eq (Py X I X) (Py X I X)
+++++
prepare_half_free_construction.
-----
Lemma test_py_on_perp_4 : forall I A B X, on_perp I A B -> Py X I X = Py X I X.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_perp_d I A B f
f : F
I,A,B,X : Point
*****
eq (Py X I X) (Py X I X)
+++++
eliminate I.
-----
Lemma test_py_on_perp_4 : forall I A B X, on_perp I A B -> Py X I X = Py X I X.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,A,B,X : Point
*****
eq (Fminus (Fminus (Py A X A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (S A B X))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (Fplus (Fminus F0 (Fmult (Fdiv f (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A B A))) (S A B X)))) (Fminus (Fminus (Py A X A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (S A B X))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) f) (Fplus (Fminus F0 (Fmult (Fdiv f (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A B A))) (S A B X))))
+++++
auto.
-----
Lemma test_py_on_perp_4 : forall I A B X, on_perp I A B -> Py X I X = Py X I X.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_perp_d_1  : forall I A B r X Y, \n on_perp_d I A B r -> Py X Y I = Py X Y I.
-----
Lemma test_py_on_perp_d_1 : forall I A B r X Y, on_perp_d I A B r -> Py X Y I = Py X Y I.

*****

*****
forall (I A B : Point) (r : F) (X Y : Point) (_ : on_perp_d I A B r), eq (Py X Y I) (Py X Y I)
+++++
Proof.
-----
Lemma test_py_on_perp_d_1 : forall I A B r X Y, on_perp_d I A B r -> Py X Y I = Py X Y I.
Proof.

*****

*****
forall (I A B : Point) (r : F) (X Y : Point) (_ : on_perp_d I A B r), eq (Py X Y I) (Py X Y I)
+++++
intros.
-----
Lemma test_py_on_perp_d_1 : forall I A B r X Y, on_perp_d I A B r -> Py X Y I = Py X Y I.
Proof.
intros.

*****
H : on_perp_d I A B r
X,Y : Point
r : F
I,A,B : Point
*****
eq (Py X Y I) (Py X Y I)
+++++
eliminate I.
-----
Lemma test_py_on_perp_d_1 : forall I A B r X Y, on_perp_d I A B r -> Py X Y I = Py X Y I.
Proof.
intros.
eliminate I.

*****
X,Y : Point
r : F
A,B : Point
*****
eq (Fminus (Py X Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A X B) (S A B Y)))) (Fminus (Py X Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A X B) (S A B Y))))
+++++
auto.
-----
Lemma test_py_on_perp_d_1 : forall I A B r X Y, on_perp_d I A B r -> Py X Y I = Py X Y I.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_perp_d_2  : forall I A B r X Y, \n on_perp_d I A B r -> Py I Y X = Py X Y I.
-----
Lemma test_py_on_perp_d_2 : forall I A B r X Y, on_perp_d I A B r -> Py I Y X = Py X Y I.

*****

*****
forall (I A B : Point) (r : F) (X Y : Point) (_ : on_perp_d I A B r), eq (Py I Y X) (Py X Y I)
+++++
Proof.
-----
Lemma test_py_on_perp_d_2 : forall I A B r X Y, on_perp_d I A B r -> Py I Y X = Py X Y I.
Proof.

*****

*****
forall (I A B : Point) (r : F) (X Y : Point) (_ : on_perp_d I A B r), eq (Py I Y X) (Py X Y I)
+++++
intros.
-----
Lemma test_py_on_perp_d_2 : forall I A B r X Y, on_perp_d I A B r -> Py I Y X = Py X Y I.
Proof.
intros.

*****
H : on_perp_d I A B r
X,Y : Point
r : F
I,A,B : Point
*****
eq (Py I Y X) (Py X Y I)
+++++
eliminate I.
-----
Lemma test_py_on_perp_d_2 : forall I A B r X Y, on_perp_d I A B r -> Py I Y X = Py X Y I.
Proof.
intros.
eliminate I.

*****
X,Y : Point
r : F
A,B : Point
*****
eq (Fminus (Py X Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A X B) (S A B Y)))) (Fminus (Py X Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A X B) (S A B Y))))
+++++
auto.
-----
Lemma test_py_on_perp_d_2 : forall I A B r X Y, on_perp_d I A B r -> Py I Y X = Py X Y I.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_perp_d_3  : forall I A B r X Y, \n on_perp_d I A B r -> Py X I Y = Py X I Y.
-----
Lemma test_py_on_perp_d_3 : forall I A B r X Y, on_perp_d I A B r -> Py X I Y = Py X I Y.

*****

*****
forall (I A B : Point) (r : F) (X Y : Point) (_ : on_perp_d I A B r), eq (Py X I Y) (Py X I Y)
+++++
Proof.
-----
Lemma test_py_on_perp_d_3 : forall I A B r X Y, on_perp_d I A B r -> Py X I Y = Py X I Y.
Proof.

*****

*****
forall (I A B : Point) (r : F) (X Y : Point) (_ : on_perp_d I A B r), eq (Py X I Y) (Py X I Y)
+++++
intros.
-----
Lemma test_py_on_perp_d_3 : forall I A B r X Y, on_perp_d I A B r -> Py X I Y = Py X I Y.
Proof.
intros.

*****
H : on_perp_d I A B r
X,Y : Point
r : F
I,A,B : Point
*****
eq (Py X I Y) (Py X I Y)
+++++
eliminate I.
-----
Lemma test_py_on_perp_d_3 : forall I A B r X Y, on_perp_d I A B r -> Py X I Y = Py X I Y.
Proof.
intros.
eliminate I.

*****
X,Y : Point
r : F
A,B : Point
*****
eq (Fminus (Fplus (Py X A Y) (Fmult (Fmult r r) (Py A B A))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S X A B) (S Y A B)))) (Fminus (Fplus (Py X A Y) (Fmult (Fmult r r) (Py A B A))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S X A B) (S Y A B))))
+++++
auto.
-----
Lemma test_py_on_perp_d_3 : forall I A B r X Y, on_perp_d I A B r -> Py X I Y = Py X I Y.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_perp_d_4  : forall I A B r Y, \n on_perp_d I A B r -> Py Y I Y = Py Y I Y.
-----
Lemma test_py_on_perp_d_4 : forall I A B r Y, on_perp_d I A B r -> Py Y I Y = Py Y I Y.

*****

*****
forall (I A B : Point) (r : F) (Y : Point) (_ : on_perp_d I A B r), eq (Py Y I Y) (Py Y I Y)
+++++
Proof.
-----
Lemma test_py_on_perp_d_4 : forall I A B r Y, on_perp_d I A B r -> Py Y I Y = Py Y I Y.
Proof.

*****

*****
forall (I A B : Point) (r : F) (Y : Point) (_ : on_perp_d I A B r), eq (Py Y I Y) (Py Y I Y)
+++++
intros.
-----
Lemma test_py_on_perp_d_4 : forall I A B r Y, on_perp_d I A B r -> Py Y I Y = Py Y I Y.
Proof.
intros.

*****
H : on_perp_d I A B r
Y : Point
r : F
I,A,B : Point
*****
eq (Py Y I Y) (Py Y I Y)
+++++
eliminate I.
-----
Lemma test_py_on_perp_d_4 : forall I A B r Y, on_perp_d I A B r -> Py Y I Y = Py Y I Y.
Proof.
intros.
eliminate I.

*****
Y : Point
r : F
A,B : Point
*****
eq (Fminus (Fminus (Py A Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S A B Y))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A B A))) (S A B Y)))) (Fminus (Fminus (Py A Y A) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S A B Y))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A B A))) (S A B Y))))
+++++
auto.
-----
Lemma test_py_on_perp_d_4 : forall I A B r Y, on_perp_d I A B r -> Py Y I Y = Py Y I Y.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_foot_1  : forall I A B C X Y, \n on_foot I A B C -> Py X Y I = Py X Y I.
-----
Lemma test_py_on_foot_1 : forall I A B C X Y, on_foot I A B C -> Py X Y I = Py X Y I.

*****

*****
forall (I A B C X Y : Point) (_ : on_foot I A B C), eq (Py X Y I) (Py X Y I)
+++++
Proof.
-----
Lemma test_py_on_foot_1 : forall I A B C X Y, on_foot I A B C -> Py X Y I = Py X Y I.
Proof.

*****

*****
forall (I A B C X Y : Point) (_ : on_foot I A B C), eq (Py X Y I) (Py X Y I)
+++++
intros.
-----
Lemma test_py_on_foot_1 : forall I A B C X Y, on_foot I A B C -> Py X Y I = Py X Y I.
Proof.
intros.

*****
H : on_foot I A B C
I,A,B,C,X,Y : Point
*****
eq (Py X Y I) (Py X Y I)
+++++
eliminate I.
-----
Lemma test_py_on_foot_1 : forall I A B C X Y, on_foot I A B C -> Py X Y I = Py X Y I.
Proof.
intros.
eliminate I.

*****
H0 : not (eq (Py B C B) F0)
A,B,C,X,Y : Point
*****
eq (Fdiv (Fplus (Fmult (Py A B C) (Py X Y C)) (Fmult (Py A C B) (Py X Y B))) (Py B C B)) (Fdiv (Fplus (Fmult (Py A B C) (Py X Y C)) (Fmult (Py A C B) (Py X Y B))) (Py B C B))
+++++
auto.
-----
Lemma test_py_on_foot_1 : forall I A B C X Y, on_foot I A B C -> Py X Y I = Py X Y I.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_foot_2  : forall I A B C X Y, \n on_foot I A B C -> Py I Y X = Py X Y I.
-----
Lemma test_py_on_foot_2 : forall I A B C X Y, on_foot I A B C -> Py I Y X = Py X Y I.

*****

*****
forall (I A B C X Y : Point) (_ : on_foot I A B C), eq (Py I Y X) (Py X Y I)
+++++
Proof.
-----
Lemma test_py_on_foot_2 : forall I A B C X Y, on_foot I A B C -> Py I Y X = Py X Y I.
Proof.

*****

*****
forall (I A B C X Y : Point) (_ : on_foot I A B C), eq (Py I Y X) (Py X Y I)
+++++
intros.
-----
Lemma test_py_on_foot_2 : forall I A B C X Y, on_foot I A B C -> Py I Y X = Py X Y I.
Proof.
intros.

*****
H : on_foot I A B C
I,A,B,C,X,Y : Point
*****
eq (Py I Y X) (Py X Y I)
+++++
eliminate I.
-----
Lemma test_py_on_foot_2 : forall I A B C X Y, on_foot I A B C -> Py I Y X = Py X Y I.
Proof.
intros.
eliminate I.

*****
H0 : not (eq (Py B C B) F0)
A,B,C,X,Y : Point
*****
eq (Fdiv (Fplus (Fmult (Py A B C) (Py X Y C)) (Fmult (Py A C B) (Py X Y B))) (Py B C B)) (Fdiv (Fplus (Fmult (Py A B C) (Py X Y C)) (Fmult (Py A C B) (Py X Y B))) (Py B C B))
+++++
auto.
-----
Lemma test_py_on_foot_2 : forall I A B C X Y, on_foot I A B C -> Py I Y X = Py X Y I.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_foot_3  : forall I A B C X Y, \n on_foot I A B C -> Py X I Y = Py X I Y.
-----
Lemma test_py_on_foot_3 : forall I A B C X Y, on_foot I A B C -> Py X I Y = Py X I Y.

*****

*****
forall (I A B C X Y : Point) (_ : on_foot I A B C), eq (Py X I Y) (Py X I Y)
+++++
Proof.
-----
Lemma test_py_on_foot_3 : forall I A B C X Y, on_foot I A B C -> Py X I Y = Py X I Y.
Proof.

*****

*****
forall (I A B C X Y : Point) (_ : on_foot I A B C), eq (Py X I Y) (Py X I Y)
+++++
intros.
-----
Lemma test_py_on_foot_3 : forall I A B C X Y, on_foot I A B C -> Py X I Y = Py X I Y.
Proof.
intros.

*****
H : on_foot I A B C
I,A,B,C,X,Y : Point
*****
eq (Py X I Y) (Py X I Y)
+++++
eliminate I.
-----
Lemma test_py_on_foot_3 : forall I A B C X Y, on_foot I A B C -> Py X I Y = Py X I Y.
Proof.
intros.
eliminate I.

*****
H0 : not (eq (Py B C B) F0)
A,B,C,X,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (Py A B C) (Py B C B)) (Py X C Y)) (Fmult (Fdiv (Py A C B) (Py B C B)) (Py X B Y))) (Fdiv (Fmult (Py A B C) (Py A C B)) (Py B C B))) (Fminus (Fplus (Fmult (Fdiv (Py A B C) (Py B C B)) (Py X C Y)) (Fmult (Fdiv (Py A C B) (Py B C B)) (Py X B Y))) (Fdiv (Fmult (Py A B C) (Py A C B)) (Py B C B)))
+++++
auto.
-----
Lemma test_py_on_foot_3 : forall I A B C X Y, on_foot I A B C -> Py X I Y = Py X I Y.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_foot_4  : forall I A B C X, \n on_foot I A B C -> Py X I X = Py X I X.
-----
Lemma test_py_on_foot_4 : forall I A B C X, on_foot I A B C -> Py X I X = Py X I X.

*****

*****
forall (I A B C X : Point) (_ : on_foot I A B C), eq (Py X I X) (Py X I X)
+++++
Proof.
-----
Lemma test_py_on_foot_4 : forall I A B C X, on_foot I A B C -> Py X I X = Py X I X.
Proof.

*****

*****
forall (I A B C X : Point) (_ : on_foot I A B C), eq (Py X I X) (Py X I X)
+++++
intros.
-----
Lemma test_py_on_foot_4 : forall I A B C X, on_foot I A B C -> Py X I X = Py X I X.
Proof.
intros.

*****
H : on_foot I A B C
I,A,B,C,X : Point
*****
eq (Py X I X) (Py X I X)
+++++
eliminate I.
-----
Lemma test_py_on_foot_4 : forall I A B C X, on_foot I A B C -> Py X I X = Py X I X.
Proof.
intros.
eliminate I.

*****
H0 : not (eq (Fmult (Py B C B) (Py B C B)) F0)
A,B,C,X : Point
*****
eq (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py A B C) (Py A B C)) (Py C X C)) (Fmult (Fmult (Py A B C) (Py A C B)) (Py C X B))) (Fmult (Fmult (Py A B C) (Py A C B)) (Py B X C))) (Fmult (Fmult (Py A C B) (Py A C B)) (Py B X B))) (Fmult (Py B C B) (Py B C B))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py A B C) (Py A B C)) (Py C X C)) (Fmult (Fmult (Py A B C) (Py A C B)) (Py C X B))) (Fmult (Fmult (Py A B C) (Py A C B)) (Py B X C))) (Fmult (Fmult (Py A C B) (Py A C B)) (Py B X B))) (Fmult (Py B C B) (Py B C B)))
+++++
auto.
-----
Lemma test_py_on_foot_4 : forall I A B C X, on_foot I A B C -> Py X I X = Py X I X.
Proof.
intros.
eliminate I.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_py_on_foot_5 : forall A B C E,\non_foot E B A C ->\nPy B E B + Py E A C = Py B E B + Py E A C.
-----
Lemma test_py_on_foot_5 : forall A B C E, on_foot E B A C -> Py B E B + Py E A C = Py B E B + Py E A C.

*****

*****
forall (A B C E : Point) (_ : on_foot E B A C), eq (Fplus (Py B E B) (Py E A C)) (Fplus (Py B E B) (Py E A C))
+++++
Proof.
-----
Lemma test_py_on_foot_5 : forall A B C E, on_foot E B A C -> Py B E B + Py E A C = Py B E B + Py E A C.
Proof.

*****

*****
forall (A B C E : Point) (_ : on_foot E B A C), eq (Fplus (Py B E B) (Py E A C)) (Fplus (Py B E B) (Py E A C))
+++++
intros.
-----
Lemma test_py_on_foot_5 : forall A B C E, on_foot E B A C -> Py B E B + Py E A C = Py B E B + Py E A C.
Proof.
intros.

*****
H : on_foot E B A C
A,B,C,E : Point
*****
eq (Fplus (Py B E B) (Py E A C)) (Fplus (Py B E B) (Py E A C))
+++++
eliminate E.
-----
Lemma test_py_on_foot_5 : forall A B C E, on_foot E B A C -> Py B E B + Py E A C = Py B E B + Py E A C.
Proof.
intros.
eliminate E.

*****
H1 : not (eq (Py A C A) F0)
H0 : not (eq (Fmult (Py A C A) (Py A C A)) F0)
A,B,C : Point
*****
eq (Fplus (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py B A C) (Py B A C)) (Py C B C)) (Fmult (Fmult (Py B A C) (Py B C A)) (Py C B A))) (Fmult (Fmult (Py B A C) (Py B C A)) (Py A B C))) (Fmult (Fmult (Py B C A) (Py B C A)) (Py A B A))) (Fmult (Py A C A) (Py A C A))) (Fdiv (Fmult (Py B A C) (Py C A C)) (Py A C A))) (Fplus (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py B A C) (Py B A C)) (Py C B C)) (Fmult (Fmult (Py B A C) (Py B C A)) (Py C B A))) (Fmult (Fmult (Py B A C) (Py B C A)) (Py A B C))) (Fmult (Fmult (Py B C A) (Py B C A)) (Py A B A))) (Fmult (Py A C A) (Py A C A))) (Fdiv (Fmult (Py B A C) (Py C A C)) (Py A C A)))
+++++
auto.
-----
Lemma test_py_on_foot_5 : forall A B C E, on_foot E B A C -> Py B E B + Py E A C = Py B E B + Py E A C.
Proof.
intros.
eliminate E.
auto.

*****

*****

+++++
Qed.
-----
