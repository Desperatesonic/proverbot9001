Require Export GeoCoq.Elements.OriginalProofs.euclidean_tactics.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral}.
-----
Lemma lemma_parallelsymmetric : \n   forall A B C D, \n   Par A B C D ->\n   Par C D A B.
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.

*****
Ax1 : euclidean_neutral
*****
forall (A B C D : Point) (_ : Par A B C D), Par C D A B
+++++
Proof.
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.

*****
Ax1 : euclidean_neutral
*****
forall (A B C D : Point) (_ : Par A B C D), Par C D A B
+++++
intros.
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.
intros.

*****
H : Par A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
Par C D A B
+++++
let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\ neq C D /\ Col A B a /\ Col A B b /\ neq a b /\ Col C D c /\ Col C D d /\ neq c d /\ ~ Meet A B C D /\ BetS a m d /\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.

*****
H10 : BetS c m b
H9 : BetS a m d
H8 : not (Meet A B C D)
H7 : neq c d
H6 : Col C D d
H5 : Col C D c
H4 : neq a b
H3 : Col A B b
H2 : Col A B a
H1 : neq C D
H0 : neq A B
a,b,c,d,m : Point
H : Par A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
Par C D A B
+++++
assert (~ Meet C D A B).
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.
assert (~ Meet C D A B).

*****
H10 : BetS c m b
H9 : BetS a m d
H8 : not (Meet A B C D)
H7 : neq c d
H6 : Col C D d
H5 : Col C D c
H4 : neq a b
H3 : Col A B b
H2 : Col A B a
H1 : neq C D
H0 : neq A B
a,b,c,d,m : Point
H : Par A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
not (Meet C D A B)
+++++
intro.
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.
assert (~ Meet C D A B).
intro.

*****
H11 : Meet C D A B
H10 : BetS c m b
H9 : BetS a m d
H8 : not (Meet A B C D)
H7 : neq c d
H6 : Col C D d
H5 : Col C D c
H4 : neq a b
H3 : Col A B b
H2 : Col A B a
H1 : neq C D
H0 : neq A B
a,b,c,d,m : Point
H : Par A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists P, (neq C D /\ neq A B /\ Col C D P /\ Col A B P)) by (conclude_def Meet );destruct Tf as [P];spliter.
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.
assert (~ Meet C D A B).
intro.
let Tf:=fresh in assert (Tf:exists P, (neq C D /\\ neq A B /\\ Col C D P /\\ Col A B P)) by (conclude_def Meet );destruct Tf as [P];spliter.

*****
H15 : Col A B P
H14 : Col C D P
H13 : neq A B
H12 : neq C D
P : Point
H11 : Meet C D A B
H10 : BetS c m b
H9 : BetS a m d
H8 : not (Meet A B C D)
H7 : neq c d
H6 : Col C D d
H5 : Col C D c
H4 : neq a b
H3 : Col A B b
H2 : Col A B a
H1 : neq C D
H0 : neq A B
a,b,c,d,m : Point
H : Par A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
False
+++++
assert (Meet A B C D) by (conclude_def Meet ).
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.
assert (~ Meet C D A B).
intro.
let Tf:=fresh in assert (Tf:exists P, (neq C D /\\ neq A B /\\ Col C D P /\\ Col A B P)) by (conclude_def Meet );destruct Tf as [P];spliter.
assert (Meet A B C D) by (conclude_def Meet ).

*****
H16 : Meet A B C D
H15 : Col A B P
H14 : Col C D P
H13 : neq A B
H12 : neq C D
P : Point
H11 : Meet C D A B
H10 : BetS c m b
H9 : BetS a m d
H8 : not (Meet A B C D)
H7 : neq c d
H6 : Col C D d
H5 : Col C D c
H4 : neq a b
H3 : Col A B b
H2 : Col A B a
H1 : neq C D
H0 : neq A B
a,b,c,d,m : Point
H : Par A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.
assert (~ Meet C D A B).

*****
H11 : not (Meet C D A B)
H10 : BetS c m b
H9 : BetS a m d
H8 : not (Meet A B C D)
H7 : neq c d
H6 : Col C D d
H5 : Col C D c
H4 : neq a b
H3 : Col A B b
H2 : Col A B a
H1 : neq C D
H0 : neq A B
a,b,c,d,m : Point
H : Par A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
Par C D A B
+++++
assert (Par C D A B) by (conclude_def Par ).
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.
assert (~ Meet C D A B).
assert (Par C D A B) by (conclude_def Par ).

*****
H12 : Par C D A B
H11 : not (Meet C D A B)
H10 : BetS c m b
H9 : BetS a m d
H8 : not (Meet A B C D)
H7 : neq c d
H6 : Col C D d
H5 : Col C D c
H4 : neq a b
H3 : Col A B b
H2 : Col A B a
H1 : neq C D
H0 : neq A B
a,b,c,d,m : Point
H : Par A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
Par C D A B
+++++
close.
-----
Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.
assert (~ Meet C D A B).
assert (Par C D A B) by (conclude_def Par ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
