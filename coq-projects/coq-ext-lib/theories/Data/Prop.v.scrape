Require Import ExtLib.Core.Type.
-----
Global Instance type_Prop : type Prop :=\n{ equal := iff\n; proper := fun _ => True\n}.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
-----
Global Instance typeOk_Prop : typeOk type_Prop.

*****

*****
typeOk type_Prop
+++++
Proof.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.

*****

*****
typeOk type_Prop
+++++
constructor.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.
constructor.

*****

*****
forall (x y : Prop) (_ : equal x y), and (proper x) (proper y)
+++++
compute.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.
constructor.
compute.

*****

*****
forall (x y : Prop) (_ : and (forall _ : x, y) (forall _ : y, x)), and True True
+++++
firstorder.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.
constructor.

*****

*****
Proper.PReflexive proper equal
+++++
compute.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.
constructor.
compute.

*****

*****
forall (x : Prop) (_ : True), and (forall _ : x, x) (forall _ : x, x)
+++++
firstorder.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.
constructor.

*****

*****
RelationClasses.Symmetric equal
+++++
compute.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.
constructor.
compute.

*****

*****
forall (x y : Prop) (_ : and (forall _ : x, y) (forall _ : y, x)), and (forall _ : y, x) (forall _ : x, y)
+++++
firstorder.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.
constructor.

*****

*****
RelationClasses.Transitive equal
+++++
compute.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.
constructor.
compute.

*****

*****
forall (x y z : Prop) (_ : and (forall _ : x, y) (forall _ : y, x)) (_ : and (forall _ : y, z) (forall _ : z, y)), and (forall _ : x, z) (forall _ : z, x)
+++++
firstorder.
-----
Global Instance typeOk_Prop : typeOk type_Prop.
Proof.
constructor.

*****

*****

+++++
Qed.
-----
Lemma and_True_iff : forall P, (P /\ True) <-> P.
-----
Lemma and_True_iff : forall P, (P /\\ True) <-> P.

*****

*****
forall P : Prop, iff (and P True) P
+++++
Proof.
-----
Lemma and_True_iff : forall P, (P /\\ True) <-> P.
Proof.

*****

*****
forall P : Prop, iff (and P True) P
+++++
intuition.
-----
Lemma and_True_iff : forall P, (P /\\ True) <-> P.
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma and_and_iff : forall P, (P /\ P) <-> P.
-----
Lemma and_and_iff : forall P, (P /\\ P) <-> P.

*****

*****
forall P : Prop, iff (and P P) P
+++++
Proof.
-----
Lemma and_and_iff : forall P, (P /\\ P) <-> P.
Proof.

*****

*****
forall P : Prop, iff (and P P) P
+++++
intuition.
-----
Lemma and_and_iff : forall P, (P /\\ P) <-> P.
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma and_assoc : forall P Q R, (P /\ Q /\ R) <-> ((P /\ Q) /\ R).
-----
Lemma and_assoc : forall P Q R, (P /\\ Q /\\ R) <-> ((P /\\ Q) /\\ R).

*****

*****
forall P Q R : Prop, iff (and P (and Q R)) (and (and P Q) R)
+++++
Proof.
-----
Lemma and_assoc : forall P Q R, (P /\\ Q /\\ R) <-> ((P /\\ Q) /\\ R).
Proof.

*****

*****
forall P Q R : Prop, iff (and P (and Q R)) (and (and P Q) R)
+++++
intuition.
-----
Lemma and_assoc : forall P Q R, (P /\\ Q /\\ R) <-> ((P /\\ Q) /\\ R).
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma and_comm : forall P Q, (P /\ Q) <-> (Q /\ P).
-----
Lemma and_comm : forall P Q, (P /\\ Q) <-> (Q /\\ P).

*****

*****
forall P Q : Prop, iff (and P Q) (and Q P)
+++++
Proof.
-----
Lemma and_comm : forall P Q, (P /\\ Q) <-> (Q /\\ P).
Proof.

*****

*****
forall P Q : Prop, iff (and P Q) (and Q P)
+++++
intuition.
-----
Lemma and_comm : forall P Q, (P /\\ Q) <-> (Q /\\ P).
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma and_False_iff : forall P, (P /\ False) <-> False.
-----
Lemma and_False_iff : forall P, (P /\\ False) <-> False.

*****

*****
forall P : Prop, iff (and P False) False
+++++
Proof.
-----
Lemma and_False_iff : forall P, (P /\\ False) <-> False.
Proof.

*****

*****
forall P : Prop, iff (and P False) False
+++++
intuition.
-----
Lemma and_False_iff : forall P, (P /\\ False) <-> False.
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma and_cancel\n: forall P Q R : Prop, (P -> (Q <-> R)) -> ((P /\ Q) <-> (P /\ R)).
-----
Lemma and_cancel : forall P Q R : Prop, (P -> (Q <-> R)) -> ((P /\\ Q) <-> (P /\\ R)).

*****

*****
forall (P Q R : Prop) (_ : forall _ : P, iff Q R), iff (and P Q) (and P R)
+++++
Proof.
-----
Lemma and_cancel : forall P Q R : Prop, (P -> (Q <-> R)) -> ((P /\\ Q) <-> (P /\\ R)).
Proof.

*****

*****
forall (P Q R : Prop) (_ : forall _ : P, iff Q R), iff (and P Q) (and P R)
+++++
intuition.
-----
Lemma and_cancel : forall P Q R : Prop, (P -> (Q <-> R)) -> ((P /\\ Q) <-> (P /\\ R)).
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma and_iff\n: forall P Q R S : Prop,\n    (P <-> R) ->\n    (P -> (Q <-> S)) ->\n    ((P /\ Q) <-> (R /\ S)).
-----
Lemma and_iff : forall P Q R S : Prop, (P <-> R) -> (P -> (Q <-> S)) -> ((P /\\ Q) <-> (R /\\ S)).

*****

*****
forall (P Q R S : Prop) (_ : iff P R) (_ : forall _ : P, iff Q S), iff (and P Q) (and R S)
+++++
Proof.
-----
Lemma and_iff : forall P Q R S : Prop, (P <-> R) -> (P -> (Q <-> S)) -> ((P /\\ Q) <-> (R /\\ S)).
Proof.

*****

*****
forall (P Q R S : Prop) (_ : iff P R) (_ : forall _ : P, iff Q S), iff (and P Q) (and R S)
+++++
clear.
-----
Lemma and_iff : forall P Q R S : Prop, (P <-> R) -> (P -> (Q <-> S)) -> ((P /\\ Q) <-> (R /\\ S)).
Proof.
clear.

*****

*****
forall (P Q R S : Prop) (_ : iff P R) (_ : forall _ : P, iff Q S), iff (and P Q) (and R S)
+++++
intuition.
-----
Lemma and_iff : forall P Q R S : Prop, (P <-> R) -> (P -> (Q <-> S)) -> ((P /\\ Q) <-> (R /\\ S)).
Proof.
clear.
intuition.

*****

*****

+++++
Qed.
-----
Lemma or_False_iff : forall P, (P \/ False) <-> P.
-----
Lemma or_False_iff : forall P, (P \\/ False) <-> P.

*****

*****
forall P : Prop, iff (or P False) P
+++++
Proof.
-----
Lemma or_False_iff : forall P, (P \\/ False) <-> P.
Proof.

*****

*****
forall P : Prop, iff (or P False) P
+++++
intuition.
-----
Lemma or_False_iff : forall P, (P \\/ False) <-> P.
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma or_or_iff : forall P, (P \/ P) <-> P.
-----
Lemma or_or_iff : forall P, (P \\/ P) <-> P.

*****

*****
forall P : Prop, iff (or P P) P
+++++
Proof.
-----
Lemma or_or_iff : forall P, (P \\/ P) <-> P.
Proof.

*****

*****
forall P : Prop, iff (or P P) P
+++++
intuition.
-----
Lemma or_or_iff : forall P, (P \\/ P) <-> P.
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma or_assoc : forall P Q R, (P \/ Q \/ R) <-> ((P \/ Q) \/ R).
-----
Lemma or_assoc : forall P Q R, (P \\/ Q \\/ R) <-> ((P \\/ Q) \\/ R).

*****

*****
forall P Q R : Prop, iff (or P (or Q R)) (or (or P Q) R)
+++++
Proof.
-----
Lemma or_assoc : forall P Q R, (P \\/ Q \\/ R) <-> ((P \\/ Q) \\/ R).
Proof.

*****

*****
forall P Q R : Prop, iff (or P (or Q R)) (or (or P Q) R)
+++++
intuition.
-----
Lemma or_assoc : forall P Q R, (P \\/ Q \\/ R) <-> ((P \\/ Q) \\/ R).
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma or_comm : forall P Q, (P \/ Q) <-> (Q \/ P).
-----
Lemma or_comm : forall P Q, (P \\/ Q) <-> (Q \\/ P).

*****

*****
forall P Q : Prop, iff (or P Q) (or Q P)
+++++
Proof.
-----
Lemma or_comm : forall P Q, (P \\/ Q) <-> (Q \\/ P).
Proof.

*****

*****
forall P Q : Prop, iff (or P Q) (or Q P)
+++++
intuition.
-----
Lemma or_comm : forall P Q, (P \\/ Q) <-> (Q \\/ P).
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma or_True_iff : forall P, (P \/ True) <-> True.
-----
Lemma or_True_iff : forall P, (P \\/ True) <-> True.

*****

*****
forall P : Prop, iff (or P True) True
+++++
Proof.
-----
Lemma or_True_iff : forall P, (P \\/ True) <-> True.
Proof.

*****

*****
forall P : Prop, iff (or P True) True
+++++
intuition.
-----
Lemma or_True_iff : forall P, (P \\/ True) <-> True.
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Lemma impl_True_iff : forall (P : Prop), (True -> P) <-> P.
-----
Lemma impl_True_iff : forall (P : Prop), (True -> P) <-> P.

*****

*****
forall P : Prop, iff (forall _ : True, P) P
+++++
Proof.
-----
Lemma impl_True_iff : forall (P : Prop), (True -> P) <-> P.
Proof.

*****

*****
forall P : Prop, iff (forall _ : True, P) P
+++++
clear.
-----
Lemma impl_True_iff : forall (P : Prop), (True -> P) <-> P.
Proof.
clear.

*****

*****
forall P : Prop, iff (forall _ : True, P) P
+++++
intros.
-----
Lemma impl_True_iff : forall (P : Prop), (True -> P) <-> P.
Proof.
clear.
intros.

*****
P : Prop
*****
iff (forall _ : True, P) P
+++++
tauto.
-----
Lemma impl_True_iff : forall (P : Prop), (True -> P) <-> P.
Proof.
clear.
intros.
tauto.

*****

*****

+++++
Qed.
-----
Lemma impl_iff\n: forall P Q R S : Prop,\n    (P <-> R) ->\n    (P -> (Q <-> S)) ->\n    ((P -> Q) <-> (R -> S)).
-----
Lemma impl_iff : forall P Q R S : Prop, (P <-> R) -> (P -> (Q <-> S)) -> ((P -> Q) <-> (R -> S)).

*****

*****
forall (P Q R S : Prop) (_ : iff P R) (_ : forall _ : P, iff Q S), iff (forall _ : P, Q) (forall _ : R, S)
+++++
Proof.
-----
Lemma impl_iff : forall P Q R S : Prop, (P <-> R) -> (P -> (Q <-> S)) -> ((P -> Q) <-> (R -> S)).
Proof.

*****

*****
forall (P Q R S : Prop) (_ : iff P R) (_ : forall _ : P, iff Q S), iff (forall _ : P, Q) (forall _ : R, S)
+++++
clear.
-----
Lemma impl_iff : forall P Q R S : Prop, (P <-> R) -> (P -> (Q <-> S)) -> ((P -> Q) <-> (R -> S)).
Proof.
clear.

*****

*****
forall (P Q R S : Prop) (_ : iff P R) (_ : forall _ : P, iff Q S), iff (forall _ : P, Q) (forall _ : R, S)
+++++
intuition.
-----
Lemma impl_iff : forall P Q R S : Prop, (P <-> R) -> (P -> (Q <-> S)) -> ((P -> Q) <-> (R -> S)).
Proof.
clear.
intuition.

*****

*****

+++++
Qed.
-----
Lemma impl_eq : forall (P Q : Prop), P = Q -> (P -> Q).
-----
Lemma impl_eq : forall (P Q : Prop), P = Q -> (P -> Q).

*****

*****
forall (P Q : Prop) (_ : eq P Q) (_ : P), Q
+++++
Proof.
-----
Lemma impl_eq : forall (P Q : Prop), P = Q -> (P -> Q).
Proof.

*****

*****
forall (P Q : Prop) (_ : eq P Q) (_ : P), Q
+++++
clear.
-----
Lemma impl_eq : forall (P Q : Prop), P = Q -> (P -> Q).
Proof.
clear.

*****

*****
forall (P Q : Prop) (_ : eq P Q) (_ : P), Q
+++++
intros.
-----
Lemma impl_eq : forall (P Q : Prop), P = Q -> (P -> Q).
Proof.
clear.
intros.

*****
H0 : P
H : eq P Q
P,Q : Prop
*****
Q
+++++
subst.
-----
Lemma impl_eq : forall (P Q : Prop), P = Q -> (P -> Q).
Proof.
clear.
intros.
subst.

*****
H0 : Q
Q : Prop
*****
Q
+++++
auto.
-----
Lemma impl_eq : forall (P Q : Prop), P = Q -> (P -> Q).
Proof.
clear.
intros.
subst.
auto.

*****

*****

+++++
Qed.
-----
Lemma uncurry : forall (P Q R : Prop),\n    (P /\ Q -> R) <-> (P -> Q -> R).
-----
Lemma uncurry : forall (P Q R : Prop), (P /\\ Q -> R) <-> (P -> Q -> R).

*****

*****
forall P Q R : Prop, iff (forall _ : and P Q, R) (forall (_ : P) (_ : Q), R)
+++++
Proof.
-----
Lemma uncurry : forall (P Q R : Prop), (P /\\ Q -> R) <-> (P -> Q -> R).
Proof.

*****

*****
forall P Q R : Prop, iff (forall _ : and P Q, R) (forall (_ : P) (_ : Q), R)
+++++
clear.
-----
Lemma uncurry : forall (P Q R : Prop), (P /\\ Q -> R) <-> (P -> Q -> R).
Proof.
clear.

*****

*****
forall P Q R : Prop, iff (forall _ : and P Q, R) (forall (_ : P) (_ : Q), R)
+++++
tauto.
-----
Lemma uncurry : forall (P Q R : Prop), (P /\\ Q -> R) <-> (P -> Q -> R).
Proof.
clear.
tauto.

*****

*****

+++++
Qed.
-----
Lemma forall_iff : forall T P Q,\n                     (forall x,\n                        P x <-> Q x) ->\n                     ((forall x : T, P x) <-> (forall x : T, Q x)).
-----
Lemma forall_iff : forall T P Q, (forall x, P x <-> Q x) -> ((forall x : T, P x) <-> (forall x : T, Q x)).

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall x : T, iff (P x) (Q x)), iff (forall x : T, P x) (forall x : T, Q x)
+++++
Proof.
-----
Lemma forall_iff : forall T P Q, (forall x, P x <-> Q x) -> ((forall x : T, P x) <-> (forall x : T, Q x)).
Proof.

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall x : T, iff (P x) (Q x)), iff (forall x : T, P x) (forall x : T, Q x)
+++++
intros.
-----
Lemma forall_iff : forall T P Q, (forall x, P x <-> Q x) -> ((forall x : T, P x) <-> (forall x : T, Q x)).
Proof.
intros.

*****
H : forall x : T, iff (P x) (Q x)
P,Q : forall _ : T, Prop
T : Type
*****
iff (forall x : T, P x) (forall x : T, Q x)
+++++
setoid_rewrite H.
-----
Lemma forall_iff : forall T P Q, (forall x, P x <-> Q x) -> ((forall x : T, P x) <-> (forall x : T, Q x)).
Proof.
intros.
setoid_rewrite H.

*****
H : forall x : T, iff (P x) (Q x)
P,Q : forall _ : T, Prop
T : Type
*****
iff (forall x : T, Q x) (forall x : T, Q x)
+++++
reflexivity.
-----
Lemma forall_iff : forall T P Q, (forall x, P x <-> Q x) -> ((forall x : T, P x) <-> (forall x : T, Q x)).
Proof.
intros.
setoid_rewrite H.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma forall_impl : forall {T} (P Q : T -> Prop),\n                      (forall x, P x -> Q x) ->\n                      (forall x, P x) -> (forall x, Q x).
-----
Lemma forall_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (forall x, P x) -> (forall x, Q x).

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall (x : T) (_ : P x), Q x) (_ : forall x : T, P x) (x : T), Q x
+++++
Proof.
-----
Lemma forall_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (forall x, P x) -> (forall x, Q x).
Proof.

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall (x : T) (_ : P x), Q x) (_ : forall x : T, P x) (x : T), Q x
+++++
clear.
-----
Lemma forall_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (forall x, P x) -> (forall x, Q x).
Proof.
clear.

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall (x : T) (_ : P x), Q x) (_ : forall x : T, P x) (x : T), Q x
+++++
intuition.
-----
Lemma forall_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (forall x, P x) -> (forall x, Q x).
Proof.
clear.
intuition.

*****

*****

+++++
Qed.
-----
Lemma exists_iff : forall T P Q,\n                     (forall x,\n                        P x <-> Q x) ->\n                     ((exists x : T, P x) <-> (exists x : T, Q x)).
-----
Lemma exists_iff : forall T P Q, (forall x, P x <-> Q x) -> ((exists x : T, P x) <-> (exists x : T, Q x)).

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall x : T, iff (P x) (Q x)), iff (ex (fun x : T => P x)) (ex (fun x : T => Q x))
+++++
Proof.
-----
Lemma exists_iff : forall T P Q, (forall x, P x <-> Q x) -> ((exists x : T, P x) <-> (exists x : T, Q x)).
Proof.

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall x : T, iff (P x) (Q x)), iff (ex (fun x : T => P x)) (ex (fun x : T => Q x))
+++++
intros.
-----
Lemma exists_iff : forall T P Q, (forall x, P x <-> Q x) -> ((exists x : T, P x) <-> (exists x : T, Q x)).
Proof.
intros.

*****
H : forall x : T, iff (P x) (Q x)
P,Q : forall _ : T, Prop
T : Type
*****
iff (ex (fun x : T => P x)) (ex (fun x : T => Q x))
+++++
setoid_rewrite H.
-----
Lemma exists_iff : forall T P Q, (forall x, P x <-> Q x) -> ((exists x : T, P x) <-> (exists x : T, Q x)).
Proof.
intros.
setoid_rewrite H.

*****
H : forall x : T, iff (P x) (Q x)
P,Q : forall _ : T, Prop
T : Type
*****
iff (ex (fun x : T => Q x)) (ex (fun x : T => Q x))
+++++
reflexivity.
-----
Lemma exists_iff : forall T P Q, (forall x, P x <-> Q x) -> ((exists x : T, P x) <-> (exists x : T, Q x)).
Proof.
intros.
setoid_rewrite H.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma exists_impl : forall {T} (P Q : T -> Prop),\n                      (forall x, P x -> Q x) ->\n                      (exists x, P x) -> (exists x, Q x).
-----
Lemma exists_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (exists x, P x) -> (exists x, Q x).

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall (x : T) (_ : P x), Q x) (_ : ex (fun x : T => P x)), ex (fun x : T => Q x)
+++++
Proof.
-----
Lemma exists_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (exists x, P x) -> (exists x, Q x).
Proof.

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall (x : T) (_ : P x), Q x) (_ : ex (fun x : T => P x)), ex (fun x : T => Q x)
+++++
clear.
-----
Lemma exists_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (exists x, P x) -> (exists x, Q x).
Proof.
clear.

*****

*****
forall (T : Type) (P Q : forall _ : T, Prop) (_ : forall (x : T) (_ : P x), Q x) (_ : ex (fun x : T => P x)), ex (fun x : T => Q x)
+++++
intuition.
-----
Lemma exists_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (exists x, P x) -> (exists x, Q x).
Proof.
clear.
intuition.

*****
H0 : ex (fun x : T => P x)
H : forall (x : T) (_ : P x), Q x
P,Q : forall _ : T, Prop
T : Type
*****
ex (fun x : T => Q x)
+++++
destruct H0.
-----
Lemma exists_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (exists x, P x) -> (exists x, Q x).
Proof.
clear.
intuition.
destruct H0.

*****
H0 : P x
x : T
H : forall (x : T) (_ : P x), Q x
P,Q : forall _ : T, Prop
T : Type
*****
ex (fun x : T => Q x)
+++++
eauto.
-----
Lemma exists_impl : forall {T} (P Q : T -> Prop), (forall x, P x -> Q x) -> (exists x, P x) -> (exists x, Q x).
Proof.
clear.
intuition.
destruct H0.
eauto.

*****

*****

+++++
Qed.
-----
Lemma iff_eq : forall (P Q : Prop), P = Q -> (P <-> Q).
-----
Lemma iff_eq : forall (P Q : Prop), P = Q -> (P <-> Q).

*****

*****
forall (P Q : Prop) (_ : eq P Q), iff P Q
+++++
Proof.
-----
Lemma iff_eq : forall (P Q : Prop), P = Q -> (P <-> Q).
Proof.

*****

*****
forall (P Q : Prop) (_ : eq P Q), iff P Q
+++++
clear.
-----
Lemma iff_eq : forall (P Q : Prop), P = Q -> (P <-> Q).
Proof.
clear.

*****

*****
forall (P Q : Prop) (_ : eq P Q), iff P Q
+++++
intros.
-----
Lemma iff_eq : forall (P Q : Prop), P = Q -> (P <-> Q).
Proof.
clear.
intros.

*****
H : eq P Q
P,Q : Prop
*****
iff P Q
+++++
subst.
-----
Lemma iff_eq : forall (P Q : Prop), P = Q -> (P <-> Q).
Proof.
clear.
intros.
subst.

*****
Q : Prop
*****
iff Q Q
+++++
reflexivity.
-----
Lemma iff_eq : forall (P Q : Prop), P = Q -> (P <-> Q).
Proof.
clear.
intros.
subst.
reflexivity.

*****

*****

+++++
Qed.
-----
