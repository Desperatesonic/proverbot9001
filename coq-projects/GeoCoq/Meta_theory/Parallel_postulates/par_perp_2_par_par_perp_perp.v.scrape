Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section par_perp_2_par_par_perp_perp.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma par_perp_2_par_implies_par_perp_perp :\n  postulate_of_parallelism_of_perpendicular_transversals ->\n  perpendicular_transversal_postulate.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : postulate_of_parallelism_of_perpendicular_transversals, perpendicular_transversal_postulate
+++++
Proof.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : postulate_of_parallelism_of_perpendicular_transversals, perpendicular_transversal_postulate
+++++
intros HPPP A B C D P Q HPar HPerp HCop.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.

*****
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
HPar : Par A B C D
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].

*****
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
assert (HX := HPerp); destruct HX as [X HX].
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].

*****
HX : Perp_at X A B P Q
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
elim (col_dec C D X); intro HCDX.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.

*****
HCDX : Col C D X
HX : Perp_at X A B P Q
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.

*****
HCDX : not (Col C D X)
HX : Perp_at X A B P Q
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].

*****
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
HX : Perp_at X A B P Q
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
assert (HPar' : Par P Q X Y).
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).

*****
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
HX : Perp_at X A B P Q
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P Q X Y
+++++
destruct HX as [_ [_ [HCol [ ]]]]; assert_diffs.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
destruct HX as [_ [_ [HCol [ ]]]]; assert_diffs.

*****
H7 : not (eq P Q)
H2 : not (eq A B)
H5 : not (eq X Y)
H6 : not (eq C X)
H3 : not (eq D X)
H4 : not (eq C D)
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
H0 : forall (U V : Tpoint) (_ : Col U A B) (_ : Col V P Q), Per U X V
H : Col X P Q
HCol : Col X A B
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P Q X Y
+++++
assert (Coplanar C D X A) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
destruct HX as [_ [_ [HCol [ ]]]]; assert_diffs.
assert (Coplanar C D X A) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).

*****
H1 : Coplanar C D X A
H7 : not (eq P Q)
H2 : not (eq A B)
H5 : not (eq X Y)
H6 : not (eq C X)
H3 : not (eq D X)
H4 : not (eq C D)
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
H0 : forall (U V : Tpoint) (_ : Col U A B) (_ : Col V P Q), Per U X V
H : Col X P Q
HCol : Col X A B
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P Q X Y
+++++
assert (Coplanar C D X B) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
destruct HX as [_ [_ [HCol [ ]]]]; assert_diffs.
assert (Coplanar C D X A) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).
assert (Coplanar C D X B) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).

*****
H8 : Coplanar C D X B
H1 : Coplanar C D X A
H7 : not (eq P Q)
H2 : not (eq A B)
H5 : not (eq X Y)
H6 : not (eq C X)
H3 : not (eq D X)
H4 : not (eq C D)
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
H0 : forall (U V : Tpoint) (_ : Col U A B) (_ : Col V P Q), Per U X V
H : Col X P Q
HCol : Col X A B
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P Q X Y
+++++
assert (Coplanar C D X P) by (apply col2_cop__cop with P Q; Col; apply perp__coplanar; Perp).
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
destruct HX as [_ [_ [HCol [ ]]]]; assert_diffs.
assert (Coplanar C D X A) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).
assert (Coplanar C D X B) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).
assert (Coplanar C D X P) by (apply col2_cop__cop with P Q; Col; apply perp__coplanar; Perp).

*****
H9 : Coplanar C D X P
H8 : Coplanar C D X B
H1 : Coplanar C D X A
H7 : not (eq P Q)
H2 : not (eq A B)
H5 : not (eq X Y)
H6 : not (eq C X)
H3 : not (eq D X)
H4 : not (eq C D)
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
H0 : forall (U V : Tpoint) (_ : Col U A B) (_ : Col V P Q), Per U X V
H : Col X P Q
HCol : Col X A B
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P Q X Y
+++++
assert (Coplanar C D X Q) by (apply col2_cop__cop with P Q; Col; apply perp__coplanar; Perp).
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
destruct HX as [_ [_ [HCol [ ]]]]; assert_diffs.
assert (Coplanar C D X A) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).
assert (Coplanar C D X B) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).
assert (Coplanar C D X P) by (apply col2_cop__cop with P Q; Col; apply perp__coplanar; Perp).
assert (Coplanar C D X Q) by (apply col2_cop__cop with P Q; Col; apply perp__coplanar; Perp).

*****
H10 : Coplanar C D X Q
H9 : Coplanar C D X P
H8 : Coplanar C D X B
H1 : Coplanar C D X A
H7 : not (eq P Q)
H2 : not (eq A B)
H5 : not (eq X Y)
H6 : not (eq C X)
H3 : not (eq D X)
H4 : not (eq C D)
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
H0 : forall (U V : Tpoint) (_ : Col U A B) (_ : Col V P Q), Per U X V
H : Col X P Q
HCol : Col X A B
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P Q X Y
+++++
assert (Coplanar C D X Y) by Cop.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
destruct HX as [_ [_ [HCol [ ]]]]; assert_diffs.
assert (Coplanar C D X A) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).
assert (Coplanar C D X B) by (apply col2_cop__cop with A B; Col; apply pars__coplanar; Par).
assert (Coplanar C D X P) by (apply col2_cop__cop with P Q; Col; apply perp__coplanar; Perp).
assert (Coplanar C D X Q) by (apply col2_cop__cop with P Q; Col; apply perp__coplanar; Perp).
assert (Coplanar C D X Y) by Cop.

*****
H11 : Coplanar C D X Y
H10 : Coplanar C D X Q
H9 : Coplanar C D X P
H8 : Coplanar C D X B
H1 : Coplanar C D X A
H7 : not (eq P Q)
H2 : not (eq A B)
H5 : not (eq X Y)
H6 : not (eq C X)
H3 : not (eq D X)
H4 : not (eq C D)
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
H0 : forall (U V : Tpoint) (_ : Col U A B) (_ : Col V P Q), Per U X V
H : Col X P Q
HCol : Col X A B
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P Q X Y
+++++
apply HPPP with A B C D; Perp; try solve [left; auto]; try solve [apply col2_cop__cop with P Q; Col; Cop]; CopR.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).

*****
HPar' : Par P Q X Y
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
HX : Perp_at X A B P Q
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
elim HPar'; clear HPar'; intro HPar'.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
elim HPar'; clear HPar'; intro HPar'.

*****
HPar' : Par_strict P Q X Y
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
HX : Perp_at X A B P Q
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
exfalso; apply HPar'; exists X; unfold Perp_at in HX; spliter; Col.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
elim HPar'; clear HPar'; intro HPar'.
exfalso; apply HPar'; exists X; unfold Perp_at in HX; spliter; Col.

*****
HPar' : and (not (eq P Q)) (and (not (eq X Y)) (and (Col P X Y) (Col Q X Y)))
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
HX : Perp_at X A B P Q
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
destruct HPar' as [HPQ [HXY [HCol1 HCol2]]].
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
elim HPar'; clear HPar'; intro HPar'.
exfalso; apply HPar'; exists X; unfold Perp_at in HX; spliter; Col.
destruct HPar' as [HPQ [HXY [HCol1 HCol2]]].

*****
HCol2 : Col Q X Y
HCol1 : Col P X Y
HXY : not (eq X Y)
HPQ : not (eq P Q)
HPerp' : Perp C D X Y
HCDY : Col C D Y
Y : Tpoint
HCDX : not (Col C D X)
HX : Perp_at X A B P Q
X : Tpoint
HPar : Par_strict A B C D
HCop : Coplanar C D P Q
HPerp : Perp A B P Q
A,B,C,D,P,Q : Tpoint
HPPP : postulate_of_parallelism_of_perpendicular_transversals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C D P Q
+++++
apply perp_sym; apply perp_col2 with X Y; Col; Perp.
-----
Lemma par_perp_2_par_implies_par_perp_perp : postulate_of_parallelism_of_perpendicular_transversals -> perpendicular_transversal_postulate.
Proof.
intros HPPP A B C D P Q HPar HPerp HCop.
elim HPar; clear HPar; intro HPar; [|spliter; apply perp_col2 with A B; auto; ColR].
assert (HX := HPerp); destruct HX as [X HX].
elim (col_dec C D X); intro HCDX.
exfalso; apply HPar; exists X; unfold Perp_at in HX; spliter; Col.
assert (HY := l8_18_existence C D X HCDX); destruct HY as [Y [HCDY HPerp']].
assert (HPar' : Par P Q X Y).
elim HPar'; clear HPar'; intro HPar'.
exfalso; apply HPar'; exists X; unfold Perp_at in HX; spliter; Col.
destruct HPar' as [HPQ [HXY [HCol1 HCol2]]].
apply perp_sym; apply perp_col2 with X Y; Col; Perp.

*****

*****

+++++
Qed.
-----
End par_perp_2_par_par_perp_perp.
-----
