Require Export GeoCoq.Elements.OriginalProofs.lemma_squarerectangle.
-----
Section Euclid.
-----
Context `{Ax1:area}.
-----
Lemma lemma_squaresequal : \n   forall A B C D a b c d, \n   Cong A B a b -> SQ A B C D -> SQ a b c d ->\n   EF A B C D a b c d.
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.

*****
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D a b c d : Point) (_ : Cong A B a b) (_ : SQ A B C D) (_ : SQ a b c d), EF A B C D a b c d
+++++
Proof.
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.

*****
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D a b c d : Point) (_ : Cong A B a b) (_ : SQ A B C D) (_ : SQ a b c d), EF A B C D a b c d
+++++
intros.
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.

*****
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Per D A B) by (conclude_def SQ ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).

*****
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Per d a b) by (conclude_def SQ ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).

*****
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).

*****
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong A B D A) by (conclude_def SQ ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).

*****
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong a b d a) by (conclude_def SQ ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).

*****
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).

*****
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).

*****
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).

*****
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (PG A B C D) by (conclude lemma_squareparallelogram).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).

*****
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (PG a b c d) by (conclude lemma_squareparallelogram).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).

*****
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Par A B C D) by (conclude_def PG ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).

*****
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Par a b c d) by (conclude_def PG ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).

*****
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (nCol A B D) by (forward_using lemma_parallelNC).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).

*****
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (nCol a b d) by (forward_using lemma_parallelNC).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).

*****
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).

*****
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong D B d b) by (conclude proposition_04).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).

*****
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).

*****
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Triangle A B D) by (conclude_def Triangle ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).

*****
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).

*****
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET A B D a b d) by (conclude axiom_congruentequal).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).

*****
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).

*****
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).

*****
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).

*****
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).

*****
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong A B B C) by (conclude_def SQ ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).

*****
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong a b b c) by (conclude_def SQ ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).

*****
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong A B C D) by (conclude_def SQ ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).

*****
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong a b c d) by (conclude_def SQ ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).

*****
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).

*****
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).

*****
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).

*****
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).

*****
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).

*****
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).

*****
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (nCol B C D) by (forward_using lemma_parallelNC).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).

*****
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Triangle B C D) by (conclude_def Triangle ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).

*****
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).

*****
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET B C D b c d) by (conclude axiom_congruentequal).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).

*****
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).

*****
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).

*****
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).

*****
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).

*****
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (RE A B C D) by (conclude lemma_squarerectangle).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).

*****
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (CR A C B D) by (conclude_def RE ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).

*****
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.

*****
H47 : BetS B M D
H46 : BetS A M C
M : Point
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (RE a b c d) by (conclude lemma_squarerectangle).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (RE a b c d) by (conclude lemma_squarerectangle).

*****
H48 : RE a b c d
H47 : BetS B M D
H46 : BetS A M C
M : Point
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (CR a c b d) by (conclude_def RE ).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (RE a b c d) by (conclude lemma_squarerectangle).
assert (CR a c b d) by (conclude_def RE ).

*****
H49 : CR a c b d
H48 : RE a b c d
H47 : BetS B M D
H46 : BetS A M C
M : Point
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (RE a b c d) by (conclude lemma_squarerectangle).
assert (CR a c b d) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.

*****
H51 : BetS b m d
H50 : BetS a m c
m : Point
H49 : CR a c b d
H48 : RE a b c d
H47 : BetS B M D
H46 : BetS A M C
M : Point
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (EF B A D C b a d c) by (conclude axiom_paste3).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (RE a b c d) by (conclude lemma_squarerectangle).
assert (CR a c b d) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.
assert (EF B A D C b a d c) by (conclude axiom_paste3).

*****
H52 : EF B A D C b a d c
H51 : BetS b m d
H50 : BetS a m c
m : Point
H49 : CR a c b d
H48 : RE a b c d
H47 : BetS B M D
H46 : BetS A M C
M : Point
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (EF B A D C a b c d) by (forward_using axiom_EFpermutation).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (RE a b c d) by (conclude lemma_squarerectangle).
assert (CR a c b d) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.
assert (EF B A D C b a d c) by (conclude axiom_paste3).
assert (EF B A D C a b c d) by (forward_using axiom_EFpermutation).

*****
H53 : EF B A D C a b c d
H52 : EF B A D C b a d c
H51 : BetS b m d
H50 : BetS a m c
m : Point
H49 : CR a c b d
H48 : RE a b c d
H47 : BetS B M D
H46 : BetS A M C
M : Point
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (EF a b c d B A D C) by (conclude axiom_EFsymmetric).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (RE a b c d) by (conclude lemma_squarerectangle).
assert (CR a c b d) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.
assert (EF B A D C b a d c) by (conclude axiom_paste3).
assert (EF B A D C a b c d) by (forward_using axiom_EFpermutation).
assert (EF a b c d B A D C) by (conclude axiom_EFsymmetric).

*****
H54 : EF a b c d B A D C
H53 : EF B A D C a b c d
H52 : EF B A D C b a d c
H51 : BetS b m d
H50 : BetS a m c
m : Point
H49 : CR a c b d
H48 : RE a b c d
H47 : BetS B M D
H46 : BetS A M C
M : Point
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (EF a b c d A B C D) by (forward_using axiom_EFpermutation).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (RE a b c d) by (conclude lemma_squarerectangle).
assert (CR a c b d) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.
assert (EF B A D C b a d c) by (conclude axiom_paste3).
assert (EF B A D C a b c d) by (forward_using axiom_EFpermutation).
assert (EF a b c d B A D C) by (conclude axiom_EFsymmetric).
assert (EF a b c d A B C D) by (forward_using axiom_EFpermutation).

*****
H55 : EF a b c d A B C D
H54 : EF a b c d B A D C
H53 : EF B A D C a b c d
H52 : EF B A D C b a d c
H51 : BetS b m d
H50 : BetS a m c
m : Point
H49 : CR a c b d
H48 : RE a b c d
H47 : BetS B M D
H46 : BetS A M C
M : Point
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
assert (EF A B C D a b c d) by (conclude axiom_EFsymmetric).
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (RE a b c d) by (conclude lemma_squarerectangle).
assert (CR a c b d) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.
assert (EF B A D C b a d c) by (conclude axiom_paste3).
assert (EF B A D C a b c d) by (forward_using axiom_EFpermutation).
assert (EF a b c d B A D C) by (conclude axiom_EFsymmetric).
assert (EF a b c d A B C D) by (forward_using axiom_EFpermutation).
assert (EF A B C D a b c d) by (conclude axiom_EFsymmetric).

*****
H56 : EF A B C D a b c d
H55 : EF a b c d A B C D
H54 : EF a b c d B A D C
H53 : EF B A D C a b c d
H52 : EF B A D C b a d c
H51 : BetS b m d
H50 : BetS a m c
m : Point
H49 : CR a c b d
H48 : RE a b c d
H47 : BetS B M D
H46 : BetS A M C
M : Point
H45 : CR A C B D
H44 : RE A B C D
H43 : ET B D C b d c
H42 : ET b d c B D C
H41 : ET b d c B C D
H40 : ET B C D b d c
H39 : ET B C D b c d
H38 : Cong_3 B C D b c d
H37 : Triangle B C D
H36 : nCol B C D
H35 : Cong C D c d
H34 : Cong C D a b
H33 : Cong C D A B
H32 : Cong B C b c
H31 : Cong B C a b
H30 : Cong B C A B
H29 : Cong a b c d
H28 : Cong A B C D
H27 : Cong a b b c
H26 : Cong A B B C
H25 : ET B D A b d a
H24 : ET b d a B D A
H23 : ET b d a A B D
H22 : ET A B D b d a
H21 : ET A B D a b d
H20 : Cong_3 A B D a b d
H19 : Triangle A B D
H18 : Cong B D b d
H17 : Cong D B d b
H16 : Cong A D a d
H15 : nCol a b d
H14 : nCol A B D
H13 : Par a b c d
H12 : Par A B C D
H11 : PG a b c d
H10 : PG A B C D
H9 : Cong D A d a
H8 : Cong D A a b
H7 : Cong D A A B
H6 : Cong a b d a
H5 : Cong A B D A
H4 : CongA D A B d a b
H3 : Per d a b
H2 : Per D A B
H1 : SQ a b c d
H0 : SQ A B C D
H : Cong A B a b
A,B,C,D,a,b,c,d : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
EF A B C D a b c d
+++++
close.
-----
Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.
Proof.
intros.
assert (Per D A B) by (conclude_def SQ ).
assert (Per d a b) by (conclude_def SQ ).
assert (CongA D A B d a b) by (conclude lemma_Euclid4).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong a b d a) by (conclude_def SQ ).
assert (Cong D A A B) by (conclude lemma_congruencesymmetric).
assert (Cong D A a b) by (conclude lemma_congruencetransitive).
assert (Cong D A d a) by (conclude lemma_congruencetransitive).
assert (PG A B C D) by (conclude lemma_squareparallelogram).
assert (PG a b c d) by (conclude lemma_squareparallelogram).
assert (Par A B C D) by (conclude_def PG ).
assert (Par a b c d) by (conclude_def PG ).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (nCol a b d) by (forward_using lemma_parallelNC).
assert (Cong A D a d) by (forward_using lemma_congruenceflip).
assert (Cong D B d b) by (conclude proposition_04).
assert (Cong B D b d) by (forward_using lemma_congruenceflip).
assert (Triangle A B D) by (conclude_def Triangle ).
assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).
assert (ET A B D a b d) by (conclude axiom_congruentequal).
assert (ET A B D b d a) by (forward_using axiom_ETpermutation).
assert (ET b d a A B D) by (conclude axiom_ETsymmetric).
assert (ET b d a B D A) by (forward_using axiom_ETpermutation).
assert (ET B D A b d a) by (conclude axiom_ETsymmetric).
assert (Cong A B B C) by (conclude_def SQ ).
assert (Cong a b b c) by (conclude_def SQ ).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong a b c d) by (conclude_def SQ ).
assert (Cong B C A B) by (conclude lemma_congruencesymmetric).
assert (Cong B C a b) by (conclude lemma_congruencetransitive).
assert (Cong B C b c) by (conclude lemma_congruencetransitive).
assert (Cong C D A B) by (conclude lemma_congruencesymmetric).
assert (Cong C D a b) by (conclude lemma_congruencetransitive).
assert (Cong C D c d) by (conclude lemma_congruencetransitive).
assert (nCol B C D) by (forward_using lemma_parallelNC).
assert (Triangle B C D) by (conclude_def Triangle ).
assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).
assert (ET B C D b c d) by (conclude axiom_congruentequal).
assert (ET B C D b d c) by (forward_using axiom_ETpermutation).
assert (ET b d c B C D) by (conclude axiom_ETsymmetric).
assert (ET b d c B D C) by (forward_using axiom_ETpermutation).
assert (ET B D C b d c) by (conclude axiom_ETsymmetric).
assert (RE A B C D) by (conclude lemma_squarerectangle).
assert (CR A C B D) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (RE a b c d) by (conclude lemma_squarerectangle).
assert (CR a c b d) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.
assert (EF B A D C b a d c) by (conclude axiom_paste3).
assert (EF B A D C a b c d) by (forward_using axiom_EFpermutation).
assert (EF a b c d B A D C) by (conclude axiom_EFsymmetric).
assert (EF a b c d A B C D) by (forward_using axiom_EFpermutation).
assert (EF A B C D a b c d) by (conclude axiom_EFsymmetric).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
