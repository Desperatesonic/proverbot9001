Require Export GeoCoq.Elements.OriginalProofs.proposition_20.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_TGflip.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_TGsymmetric.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_22.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_10_12.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_Euclid4 : \n   forall A B C a b c, \n   Per A B C -> Per a b c ->\n   CongA A B C a b c.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : Per A B C) (_ : Per a b c), CongA A B C a b c
+++++
Proof.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : Per A B C) (_ : Per a b c), CongA A B C a b c
+++++
intros.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.

*****
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\ Cong A B D B /\ Cong A C D C /\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.

*****
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\ Cong a b d b /\ Cong a c d c /\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.

*****
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (neq a b) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).

*****
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (neq b a) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).

*****
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (neq A B) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).

*****
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (neq B A) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).

*****
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.

*****
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.

*****
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Per a b q) by (conclude lemma_8_3).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).

*****
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Per q b a) by (conclude lemma_8_2).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).

*****
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Per q b p) by (conclude lemma_8_3).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).

*****
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Per p b q) by (conclude lemma_8_2).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).

*****
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\ Cong p b r b /\ Cong p q r q /\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.

*****
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).

*****
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (nCol p b q) by (conclude lemma_rightangleNC).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).

*****
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (~ Col b q p).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).

*****
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col b q p)
+++++
intro.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
intro.

*****
H27 : Col b q p
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p b q) by (forward_using lemma_collinearorder).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
intro.
assert (Col p b q) by (forward_using lemma_collinearorder).

*****
H28 : Col p b q
H27 : Col b q p
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).

*****
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (~ Col q p b).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).

*****
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col q p b)
+++++
intro.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
intro.

*****
H28 : Col q p b
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p b q) by (forward_using lemma_collinearorder).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
intro.
assert (Col p b q) by (forward_using lemma_collinearorder).

*****
H29 : Col p b q
H28 : Col q p b
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).

*****
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Triangle p b q) by (conclude_def Triangle ).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).

*****
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Triangle b q p) by (conclude_def Triangle ).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).

*****
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Triangle q p b) by (conclude_def Triangle ).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).

*****
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (TG b p p q b q) by (conclude proposition_20).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).

*****
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (TG q b b p q p) by (conclude proposition_20).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).

*****
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (TG p q q b p b) by (conclude proposition_20).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).

*****
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (TG b q b p q p) by (forward_using lemma_TGflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).

*****
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (TG b q b p p q) by (forward_using lemma_TGflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).

*****
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).

*****
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (TG b q p q p b) by (forward_using lemma_TGflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).

*****
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (TG b q p q b p) by (forward_using lemma_TGflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).

*****
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (TG b p p q q b) by (forward_using lemma_TGflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).

*****
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\ Cong B F b q /\ Cong E F p q /\ Out B A E /\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.

*****
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).

*****
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out B A A) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).

*****
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).

*****
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (eq E A) by (conclude lemma_layoffunique).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).

*****
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong B A b p) by (conclude cn_equalitysub).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).

*****
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong A F p q) by (conclude cn_equalitysub).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).

*****
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (~ eq p b).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).

*****
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq p b)
+++++
intro.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
intro.

*****
H53 : eq p b
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p b q) by (conclude_def Col ).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
intro.
assert (Col p b q) by (conclude_def Col ).

*****
H54 : Col p b q
H53 : eq p b
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol p b q) by (conclude lemma_rightangleNC).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
intro.
assert (Col p b q) by (conclude_def Col ).
assert (nCol p b q) by (conclude lemma_rightangleNC).

*****
H55 : nCol p b q
H54 : Col p b q
H53 : eq p b
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).

*****
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).

*****
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).

*****
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).

*****
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (neq b p) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).

*****
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong B A A B) by (conclude cn_equalityreverse).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).

*****
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).

*****
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong p q r q) by (conclude lemma_rightreverse).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).

*****
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong p b A B) by (forward_using lemma_doublereverse).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).

*****
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).

*****
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).

*****
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).

*****
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).

*****
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).

*****
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).

*****
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong q r F D) by (conclude axiom_5_line).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).

*****
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).

*****
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).

*****
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).

*****
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).

*****
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (neq b q) by (conclude_def Per ).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).

*****
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong q b b q) by (conclude cn_equalityreverse).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).

*****
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).

*****
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (neq B F) by (conclude axiom_nocollapse).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).

*****
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Per A B F) by (conclude_def Per ).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).

*****
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).

*****
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).

*****
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).

*****
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong A C A F) by (conclude lemma_10_12).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).

*****
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (eq F F) by (conclude cn_equalityreflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).

*****
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (eq C C) by (conclude cn_equalityreflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).

*****
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out B F F) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).

*****
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out B C C) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).

*****
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out B A A) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).

*****
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong B A B A) by (conclude cn_congruencereflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).

*****
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (nCol A B C) by (conclude lemma_rightangleNC).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).

*****
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (CongA A B C A B F) by (conclude_def CongA ).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).

*****
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).

*****
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).

*****
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (eq p p) by (conclude cn_equalityreflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).

*****
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (eq q q) by (conclude cn_equalityreflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).

*****
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out b p p) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).

*****
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out b q q) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).

*****
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out B F F) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).

*****
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out B A A) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).

*****
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).

*****
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).

*****
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (nCol A B F) by (conclude lemma_rightangleNC).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).

*****
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (CongA A B F p b q) by (conclude_def CongA ).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).

*****
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).

*****
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (nCol a b c) by (conclude lemma_rightangleNC).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).

*****
H103 : nCol a b c
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out b p p) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).
assert (Out b p p) by (conclude lemma_ray4).

*****
H104 : Out b p p
H103 : nCol a b c
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Out b q q) by (conclude lemma_ray4).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).

*****
H105 : Out b q q
H104 : Out b p p
H103 : nCol a b c
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong b p b p) by (conclude cn_congruencereflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Cong b p b p) by (conclude cn_congruencereflexive).

*****
H106 : Cong b p b p
H105 : Out b q q
H104 : Out b p p
H103 : nCol a b c
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong b q b q) by (conclude cn_congruencereflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Cong b p b p) by (conclude cn_congruencereflexive).
assert (Cong b q b q) by (conclude cn_congruencereflexive).

*****
H107 : Cong b q b q
H106 : Cong b p b p
H105 : Out b q q
H104 : Out b p p
H103 : nCol a b c
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (Cong p q p q) by (conclude cn_congruencereflexive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Cong b p b p) by (conclude cn_congruencereflexive).
assert (Cong b q b q) by (conclude cn_congruencereflexive).
assert (Cong p q p q) by (conclude cn_congruencereflexive).

*****
H108 : Cong p q p q
H107 : Cong b q b q
H106 : Cong b p b p
H105 : Out b q q
H104 : Out b p p
H103 : nCol a b c
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (CongA a b c p b q) by (conclude_def CongA ).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Cong b p b p) by (conclude cn_congruencereflexive).
assert (Cong b q b q) by (conclude cn_congruencereflexive).
assert (Cong p q p q) by (conclude cn_congruencereflexive).
assert (CongA a b c p b q) by (conclude_def CongA ).

*****
H109 : CongA a b c p b q
H108 : Cong p q p q
H107 : Cong b q b q
H106 : Cong b p b p
H105 : Out b q q
H104 : Out b p p
H103 : nCol a b c
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (CongA p b q a b c) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Cong b p b p) by (conclude cn_congruencereflexive).
assert (Cong b q b q) by (conclude cn_congruencereflexive).
assert (Cong p q p q) by (conclude cn_congruencereflexive).
assert (CongA a b c p b q) by (conclude_def CongA ).
assert (CongA p b q a b c) by (conclude lemma_equalanglessymmetric).

*****
H110 : CongA p b q a b c
H109 : CongA a b c p b q
H108 : Cong p q p q
H107 : Cong b q b q
H106 : Cong b p b p
H105 : Out b q q
H104 : Out b p p
H103 : nCol a b c
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
assert (CongA A B C a b c) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Cong b p b p) by (conclude cn_congruencereflexive).
assert (Cong b q b q) by (conclude cn_congruencereflexive).
assert (Cong p q p q) by (conclude cn_congruencereflexive).
assert (CongA a b c p b q) by (conclude_def CongA ).
assert (CongA p b q a b c) by (conclude lemma_equalanglessymmetric).
assert (CongA A B C a b c) by (conclude lemma_equalanglestransitive).

*****
H111 : CongA A B C a b c
H110 : CongA p b q a b c
H109 : CongA a b c p b q
H108 : Cong p q p q
H107 : Cong b q b q
H106 : Cong b p b p
H105 : Out b q q
H104 : Out b p p
H103 : nCol a b c
H102 : CongA A B C p b q
H101 : CongA A B F p b q
H100 : nCol A B F
H99 : Cong B A p b
H98 : Cong B A b p
H97 : Out B A A
H96 : Out B F F
H95 : Out b q q
H94 : Out b p p
H93 : eq q q
H92 : eq p p
H91 : CongA A B C A B F
H90 : CongA A B C A B C
H89 : CongA A B C A B F
H88 : nCol A B C
H87 : Cong B A B A
H86 : Out B A A
H85 : Out B C C
H84 : Out B F F
H83 : eq C C
H82 : eq F F
H81 : Cong A C A F
H80 : Cong B C B F
H79 : Cong B C b q
H78 : Cong b q B F
H77 : Per A B F
H76 : neq B F
H75 : Cong q b B F
H74 : Cong q b b q
H73 : neq b q
H72 : Cong A F D F
H71 : Cong A F F D
H70 : Cong A F q r
H69 : Cong A F r q
H68 : Cong q r F D
H67 : Cong p q A F
H66 : Cong b q B F
H65 : Cong b r B D
H64 : Cong A B B D
H63 : Cong b r A B
H62 : Cong b r p b
H61 : Cong p b A B
H60 : Cong p q r q
H59 : Cong p b b r
H58 : Cong B A A B
H57 : neq b p
H56 : Cong b p B E
H55 : Cong b r p b
H54 : Cong r b p b
H53 : not (eq p b)
H52 : Cong A F p q
H51 : Cong B A b p
H50 : eq E A
H49 : Cong B E B A
H48 : Out B A A
H47 : eq A A
H46 : BetS D B A
H45 : Triangle B E F
H44 : Out B A E
H43 : Cong E F p q
H42 : Cong B F b q
H41 : Cong B E b p
E,F : Point
H40 : TG b p p q q b
H39 : TG b q p q b p
H38 : TG b q p q p b
H37 : TG q b p q p b
H36 : TG b q b p p q
H35 : TG b q b p q p
H34 : TG p q q b p b
H33 : TG q b b p q p
H32 : TG b p p q b q
H31 : Triangle q p b
H30 : Triangle b q p
H29 : Triangle p b q
H28 : not (Col q p b)
H27 : not (Col b q p)
H26 : nCol p b q
H25 : Cong q p q r
H24 : neq b q
H23 : Cong p q r q
H22 : Cong p b r b
H21 : BetS p b r
r : Point
H20 : Per p b q
H19 : Per q b p
H18 : Per q b a
H17 : Per a b q
H16 : Cong b q B C
H15 : Out b c q
q : Point
H14 : Cong b p B A
H13 : Out b a p
p : Point
H12 : neq B A
H11 : neq A B
H10 : neq b a
H9 : neq a b
H8 : neq b c
H7 : Cong a c d c
H6 : Cong a b d b
H5 : BetS a b d
d : Point
H4 : neq B C
H3 : Cong A C D C
H2 : Cong A B D B
H1 : BetS A B D
D : Point
H0 : Per a b c
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C a b c
+++++
close.
-----
Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.
let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.
assert (neq a b) by (forward_using lemma_betweennotequal).
assert (neq b a) by (conclude lemma_inequalitysymmetric).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.
let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.
assert (Per a b q) by (conclude lemma_8_3).
assert (Per q b a) by (conclude lemma_8_2).
assert (Per q b p) by (conclude lemma_8_3).
assert (Per p b q) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.
assert (Cong q p q r) by (forward_using lemma_congruenceflip).
assert (nCol p b q) by (conclude lemma_rightangleNC).
assert (~ Col b q p).
assert (~ Col q p b).
assert (Triangle p b q) by (conclude_def Triangle ).
assert (Triangle b q p) by (conclude_def Triangle ).
assert (Triangle q p b) by (conclude_def Triangle ).
assert (TG b p p q b q) by (conclude proposition_20).
assert (TG q b b p q p) by (conclude proposition_20).
assert (TG p q q b p b) by (conclude proposition_20).
assert (TG b q b p q p) by (forward_using lemma_TGflip).
assert (TG b q b p p q) by (forward_using lemma_TGflip).
assert (TG q b p q p b) by (conclude lemma_TGsymmetric).
assert (TG b q p q p b) by (forward_using lemma_TGflip).
assert (TG b q p q b p) by (forward_using lemma_TGflip).
assert (TG b p p q q b) by (forward_using lemma_TGflip).
let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.
assert (BetS D B A) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B E B A) by (conclude lemma_congruencetransitive).
assert (eq E A) by (conclude lemma_layoffunique).
assert (Cong B A b p) by (conclude cn_equalitysub).
assert (Cong A F p q) by (conclude cn_equalitysub).
assert (~ eq p b).
assert (Cong r b p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r p b) by (forward_using lemma_congruenceflip).
assert (Cong b p B E) by (conclude lemma_congruencesymmetric).
assert (neq b p) by (conclude lemma_inequalitysymmetric).
assert (Cong B A A B) by (conclude cn_equalityreverse).
assert (Cong p b b r) by (conclude lemma_congruencesymmetric).
assert (Cong p q r q) by (conclude lemma_rightreverse).
assert (Cong p b A B) by (forward_using lemma_doublereverse).
assert (Cong b r p b) by (conclude lemma_congruencesymmetric).
assert (Cong b r A B) by (conclude lemma_congruencetransitive).
assert (Cong A B B D) by (forward_using lemma_congruenceflip).
assert (Cong b r B D) by (conclude lemma_congruencetransitive).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong p q A F) by (conclude lemma_congruencesymmetric).
assert (Cong q r F D) by (conclude axiom_5_line).
assert (Cong A F r q) by (conclude lemma_congruencetransitive).
assert (Cong A F q r) by (forward_using lemma_congruenceflip).
assert (Cong A F F D) by (conclude lemma_congruencetransitive).
assert (Cong A F D F) by (forward_using lemma_congruenceflip).
assert (neq b q) by (conclude_def Per ).
assert (Cong q b b q) by (conclude cn_equalityreverse).
assert (Cong q b B F) by (conclude lemma_congruencetransitive).
assert (neq B F) by (conclude axiom_nocollapse).
assert (Per A B F) by (conclude_def Per ).
assert (Cong b q B F) by (conclude lemma_congruencesymmetric).
assert (Cong B C b q) by (conclude lemma_congruencesymmetric).
assert (Cong B C B F) by (conclude lemma_congruencetransitive).
assert (Cong A C A F) by (conclude lemma_10_12).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (CongA A B C A B F) by (conclude_def CongA ).
assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).
assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).
assert (eq p p) by (conclude cn_equalityreflexive).
assert (eq q q) by (conclude cn_equalityreflexive).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Out B F F) by (conclude lemma_ray4).
assert (Out B A A) by (conclude lemma_ray4).
assert (Cong B A b p) by (conclude lemma_congruencesymmetric).
assert (Cong B A p b) by (forward_using lemma_congruenceflip).
assert (nCol A B F) by (conclude lemma_rightangleNC).
assert (CongA A B F p b q) by (conclude_def CongA ).
assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).
assert (nCol a b c) by (conclude lemma_rightangleNC).
assert (Out b p p) by (conclude lemma_ray4).
assert (Out b q q) by (conclude lemma_ray4).
assert (Cong b p b p) by (conclude cn_congruencereflexive).
assert (Cong b q b q) by (conclude cn_congruencereflexive).
assert (Cong p q p q) by (conclude cn_congruencereflexive).
assert (CongA a b c p b q) by (conclude_def CongA ).
assert (CongA p b q a b c) by (conclude lemma_equalanglessymmetric).
assert (CongA A B C a b c) by (conclude lemma_equalanglestransitive).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
