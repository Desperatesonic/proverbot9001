Require Import Coq.PArith.BinPos.
-----
Require Import ExtLib.Core.RelDec.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Global Instance RelDec_peq : RelDec (@eq positive) :=\n{ rel_dec := Pos.eqb }.
-----
Global Instance RelDec_plt : RelDec (Pos.lt) :=\n{ rel_dec := Pos.ltb }.
-----
Global Instance RelDec_ple : RelDec (Pos.le) :=\n{ rel_dec := Pos.leb }.
-----
Global Instance RelDec_pgt : RelDec (Pos.gt) :=\n{ rel_dec := fun x y => negb (Pos.leb x y) }.
-----
Global Instance RelDec_pge : RelDec (Pos.ge) :=\n{ rel_dec := fun x y => negb (Pos.ltb x y) }.
-----
Global Instance RelDec_Correct_peq : RelDec_Correct RelDec_peq.
-----
Global Instance RelDec_Correct_peq : RelDec_Correct RelDec_peq.

*****

*****
RelDec_Correct RelDec_peq
+++++
Proof.
-----
Global Instance RelDec_Correct_peq : RelDec_Correct RelDec_peq.
Proof.

*****

*****
RelDec_Correct RelDec_peq
+++++
constructor.
-----
Global Instance RelDec_Correct_peq : RelDec_Correct RelDec_peq.
Proof.
constructor.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (eq x y)
+++++
simpl.
-----
Global Instance RelDec_Correct_peq : RelDec_Correct RelDec_peq.
Proof.
constructor.
simpl.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (eq x y)
+++++
intros.
-----
Global Instance RelDec_Correct_peq : RelDec_Correct RelDec_peq.
Proof.
constructor.
simpl.
intros.

*****
x,y : positive
*****
iff (eq (rel_dec x y) true) (eq x y)
+++++
apply Pos.eqb_eq.
-----
Global Instance RelDec_Correct_peq : RelDec_Correct RelDec_peq.
Proof.
constructor.
simpl.
intros.
apply Pos.eqb_eq.

*****

*****

+++++
Qed.
-----
Global Instance RelDec_Correct_plt : RelDec_Correct RelDec_plt.
-----
Global Instance RelDec_Correct_plt : RelDec_Correct RelDec_plt.

*****

*****
RelDec_Correct RelDec_plt
+++++
Proof.
-----
Global Instance RelDec_Correct_plt : RelDec_Correct RelDec_plt.
Proof.

*****

*****
RelDec_Correct RelDec_plt
+++++
constructor.
-----
Global Instance RelDec_Correct_plt : RelDec_Correct RelDec_plt.
Proof.
constructor.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (Pos.lt x y)
+++++
simpl.
-----
Global Instance RelDec_Correct_plt : RelDec_Correct RelDec_plt.
Proof.
constructor.
simpl.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (Pos.lt x y)
+++++
intros.
-----
Global Instance RelDec_Correct_plt : RelDec_Correct RelDec_plt.
Proof.
constructor.
simpl.
intros.

*****
x,y : positive
*****
iff (eq (rel_dec x y) true) (Pos.lt x y)
+++++
apply Pos.ltb_lt.
-----
Global Instance RelDec_Correct_plt : RelDec_Correct RelDec_plt.
Proof.
constructor.
simpl.
intros.
apply Pos.ltb_lt.

*****

*****

+++++
Qed.
-----
Global Instance RelDec_Correct_ple : RelDec_Correct RelDec_ple.
-----
Global Instance RelDec_Correct_ple : RelDec_Correct RelDec_ple.

*****

*****
RelDec_Correct RelDec_ple
+++++
Proof.
-----
Global Instance RelDec_Correct_ple : RelDec_Correct RelDec_ple.
Proof.

*****

*****
RelDec_Correct RelDec_ple
+++++
constructor.
-----
Global Instance RelDec_Correct_ple : RelDec_Correct RelDec_ple.
Proof.
constructor.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (Pos.le x y)
+++++
simpl.
-----
Global Instance RelDec_Correct_ple : RelDec_Correct RelDec_ple.
Proof.
constructor.
simpl.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (Pos.le x y)
+++++
intros.
-----
Global Instance RelDec_Correct_ple : RelDec_Correct RelDec_ple.
Proof.
constructor.
simpl.
intros.

*****
x,y : positive
*****
iff (eq (rel_dec x y) true) (Pos.le x y)
+++++
apply Pos.leb_le.
-----
Global Instance RelDec_Correct_ple : RelDec_Correct RelDec_ple.
Proof.
constructor.
simpl.
intros.
apply Pos.leb_le.

*****

*****

+++++
Qed.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.

*****

*****
RelDec_Correct RelDec_pgt
+++++
Proof.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.

*****

*****
RelDec_Correct RelDec_pgt
+++++
constructor.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (Pos.gt x y)
+++++
simpl.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (Pos.gt x y)
+++++
intros.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.

*****
x,y : positive
*****
iff (eq (rel_dec x y) true) (Pos.gt x y)
+++++
unfold rel_dec.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.

*****
x,y : positive
*****
iff (eq ((let (rel_dec) := RelDec_pgt in rel_dec) x y) true) (Pos.gt x y)
+++++
simpl.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.

*****
x,y : positive
*****
iff (eq (negb (Pos.leb x y)) true) (Pos.gt x y)
+++++
rewrite <- Pos.ltb_antisym.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.ltb_antisym.

*****
x,y : positive
*****
iff (eq (Pos.ltb y x) true) (Pos.gt x y)
+++++
rewrite Pos.ltb_lt.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.ltb_antisym.
rewrite Pos.ltb_lt.

*****
x,y : positive
*****
iff (Pos.lt y x) (Pos.gt x y)
+++++
intuition.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.ltb_antisym.
rewrite Pos.ltb_lt.
intuition.

*****
H : Pos.lt y x
x,y : positive
*****
Pos.gt x y
+++++
apply Pos.lt_gt.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.ltb_antisym.
rewrite Pos.ltb_lt.
intuition.
apply Pos.lt_gt.

*****
H : Pos.lt y x
x,y : positive
*****
Pos.lt y x
+++++
auto.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.ltb_antisym.
rewrite Pos.ltb_lt.
intuition.

*****
H : Pos.gt x y
x,y : positive
*****
Pos.lt y x
+++++
apply Pos.gt_lt.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.ltb_antisym.
rewrite Pos.ltb_lt.
intuition.
apply Pos.gt_lt.

*****
H : Pos.gt x y
x,y : positive
*****
Pos.gt x y
+++++
auto.
-----
Global Instance RelDec_Correct_pgt : RelDec_Correct RelDec_pgt.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.ltb_antisym.
rewrite Pos.ltb_lt.
intuition.

*****

*****

+++++
Qed.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.

*****

*****
RelDec_Correct RelDec_pge
+++++
Proof.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.

*****

*****
RelDec_Correct RelDec_pge
+++++
constructor.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (Pos.ge x y)
+++++
simpl.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.

*****

*****
forall x y : positive, iff (eq (rel_dec x y) true) (Pos.ge x y)
+++++
intros.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.

*****
x,y : positive
*****
iff (eq (rel_dec x y) true) (Pos.ge x y)
+++++
unfold rel_dec.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.

*****
x,y : positive
*****
iff (eq ((let (rel_dec) := RelDec_pge in rel_dec) x y) true) (Pos.ge x y)
+++++
simpl.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.

*****
x,y : positive
*****
iff (eq (negb (Pos.ltb x y)) true) (Pos.ge x y)
+++++
rewrite <- Pos.leb_antisym.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.leb_antisym.

*****
x,y : positive
*****
iff (eq (Pos.leb y x) true) (Pos.ge x y)
+++++
rewrite Pos.leb_le.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.leb_antisym.
rewrite Pos.leb_le.

*****
x,y : positive
*****
iff (Pos.le y x) (Pos.ge x y)
+++++
intuition.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.leb_antisym.
rewrite Pos.leb_le.
intuition.

*****
H : Pos.le y x
x,y : positive
*****
Pos.ge x y
+++++
apply Pos.le_ge.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.leb_antisym.
rewrite Pos.leb_le.
intuition.
apply Pos.le_ge.

*****
H : Pos.le y x
x,y : positive
*****
Pos.le y x
+++++
auto.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.leb_antisym.
rewrite Pos.leb_le.
intuition.

*****
H : Pos.ge x y
x,y : positive
*****
Pos.le y x
+++++
apply Pos.ge_le.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.leb_antisym.
rewrite Pos.leb_le.
intuition.
apply Pos.ge_le.

*****
H : Pos.ge x y
x,y : positive
*****
Pos.ge x y
+++++
auto.
-----
Global Instance RelDec_Correct_pge : RelDec_Correct RelDec_pge.
Proof.
constructor.
simpl.
intros.
unfold rel_dec.
simpl.
rewrite <- Pos.leb_antisym.
rewrite Pos.leb_le.
intuition.

*****

*****

+++++
Qed.
-----
Export Coq.PArith.BinPos.
-----
