Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesflip.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_16.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_angletrichotomy.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearbetween.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma proposition_27 : \n   forall A B C D E F, \n   BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D ->\n   Par A B C D.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F : Point) (_ : BetS A E B) (_ : BetS C F D) (_ : CongA A E F E F D) (_ : TS A E F D), Par A B C D
+++++
Proof.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F : Point) (_ : BetS A E B) (_ : BetS C F D) (_ : CongA A E F E F D) (_ : TS A E F D), Par A B C D
+++++
intros.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.

*****
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (neq A B) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).

*****
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (neq C D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).

*****
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\ Col E F H /\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.

*****
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (Col A E B) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).

*****
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (neq A E) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).

*****
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (Col C F D) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).

*****
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (neq F D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).

*****
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).

*****
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (nCol E F D) by (conclude_def CongA ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).

*****
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (neq E F) by (forward_using lemma_angledistinct).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).

*****
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (neq F E) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).

*****
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (~ Meet A B C D).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).

*****
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.

*****
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists G, (neq A B /\ neq C D /\ Col A B G /\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.

*****
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).

*****
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).

*****
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq B A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).

*****
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A G E) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).

*****
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A E G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).

*****
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq F F) by (conclude cn_equalityreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).

*****
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E F F) by (conclude lemma_ray4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).

*****
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Supp A E F F B) by (conclude_def Supp ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).

*****
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq E E) by (conclude cn_equalityreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).

*****
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out F E E) by (conclude lemma_ray4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).

*****
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).

*****
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Supp D F E E C) by (conclude_def Supp ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).

*****
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).

*****
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).

*****
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA F E B E F C) by (conclude lemma_supplements).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).

*****
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).

*****
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ BetS A E G).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).

*****
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (BetS A E G)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.

*****
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq E E) by (conclude cn_equalityreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).

*****
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F E) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).

*****
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).

*****
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C F D) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).

*****
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C D F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).

*****
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq C D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).

*****
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D G F) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).

*****
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G F D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).

*****
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ eq F G).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).

*****
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq F G)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
intro.

*****
H47 : eq F G
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A E F) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
intro.
assert (Col A E F) by (conclude cn_equalitysub).

*****
H48 : Col A E F
H47 : eq F G
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
intro.
assert (Col A E F) by (conclude cn_equalitysub).
assert (Col E F A) by (forward_using lemma_collinearorder).

*****
H49 : Col E F A
H48 : Col A E F
H47 : eq F G
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).

*****
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G F) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).

*****
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Col E F G).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).

*****
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col E F G)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
intro.

*****
H49 : Col E F G
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G F E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
intro.
assert (Col G F E) by (forward_using lemma_collinearorder).

*****
H50 : Col G F E
H49 : Col E F G
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F E D) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
intro.
assert (Col G F E) by (forward_using lemma_collinearorder).
assert (Col F E D) by (conclude lemma_collinear4).

*****
H51 : Col F E D
H50 : Col G F E
H49 : Col E F G
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
intro.
assert (Col G F E) by (forward_using lemma_collinearorder).
assert (Col F E D) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).

*****
H52 : Col E F D
H51 : Col F E D
H50 : Col G F E
H49 : Col E F G
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).

*****
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).

*****
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).

*****
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).

*****
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq F F) by (conclude cn_equalityreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).

*****
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F F) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).

*****
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).

*****
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (TS D E F C) by (conclude_def TS ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).

*****
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (TS G E F C) by (conclude lemma_planeseparation).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).

*****
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\ Col E F R /\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.

*****
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ neq F R).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).

*****
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq F R)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.

*****
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G R C) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).

*****
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C G D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).

*****
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C G R) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).

*****
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).

*****
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq C G) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).

*****
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G C R) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).

*****
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G C D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).

*****
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G C) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).

*****
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq R F) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).

*****
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C G R) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).

*****
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C D F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).

*****
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D F G) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).

*****
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D F C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).

*****
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq F D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq F D) by (forward_using lemma_betweennotequal).

*****
H75 : neq F D
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq D F) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (neq D F) by (conclude lemma_inequalitysymmetric).

*****
H76 : neq D F
H75 : neq F D
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F G C) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (neq D F) by (conclude lemma_inequalitysymmetric).
assert (Col F G C) by (conclude lemma_collinear4).

*****
H77 : Col F G C
H76 : neq D F
H75 : neq F D
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C G F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (neq D F) by (conclude lemma_inequalitysymmetric).
assert (Col F G C) by (conclude lemma_collinear4).
assert (Col C G F) by (forward_using lemma_collinearorder).

*****
H78 : Col C G F
H77 : Col F G C
H76 : neq D F
H75 : neq F D
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C G D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (neq D F) by (conclude lemma_inequalitysymmetric).
assert (Col F G C) by (conclude lemma_collinear4).
assert (Col C G F) by (forward_using lemma_collinearorder).
assert (Col C G D) by (forward_using lemma_collinearorder).

*****
H79 : Col C G D
H78 : Col C G F
H77 : Col F G C
H76 : neq D F
H75 : neq F D
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col R F D) by (conclude lemma_collinear5).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (neq D F) by (conclude lemma_inequalitysymmetric).
assert (Col F G C) by (conclude lemma_collinear4).
assert (Col C G F) by (forward_using lemma_collinearorder).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col R F D) by (conclude lemma_collinear5).

*****
H80 : Col R F D
H79 : Col C G D
H78 : Col C G F
H77 : Col F G C
H76 : neq D F
H75 : neq F D
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col R F E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (neq D F) by (conclude lemma_inequalitysymmetric).
assert (Col F G C) by (conclude lemma_collinear4).
assert (Col C G F) by (forward_using lemma_collinearorder).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col R F D) by (conclude lemma_collinear5).
assert (Col R F E) by (forward_using lemma_collinearorder).

*****
H81 : Col R F E
H80 : Col R F D
H79 : Col C G D
H78 : Col C G F
H77 : Col F G C
H76 : neq D F
H75 : neq F D
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F D E) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (neq D F) by (conclude lemma_inequalitysymmetric).
assert (Col F G C) by (conclude lemma_collinear4).
assert (Col C G F) by (forward_using lemma_collinearorder).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col R F D) by (conclude lemma_collinear5).
assert (Col R F E) by (forward_using lemma_collinearorder).
assert (Col F D E) by (conclude lemma_collinear4).

*****
H82 : Col F D E
H81 : Col R F E
H80 : Col R F D
H79 : Col C G D
H78 : Col C G F
H77 : Col F G C
H76 : neq D F
H75 : neq F D
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
intro.
assert (Col G R C) by (conclude_def Col ).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (neq G C) by (forward_using lemma_betweennotequal).
assert (neq C G) by (conclude lemma_inequalitysymmetric).
assert (Col G C R) by (forward_using lemma_collinearorder).
assert (Col G C D) by (forward_using lemma_collinearorder).
assert (neq G C) by (conclude lemma_inequalitysymmetric).
assert (neq R F) by (conclude lemma_inequalitysymmetric).
assert (Col C G R) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D F G) by (conclude lemma_collinear4).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (neq D F) by (conclude lemma_inequalitysymmetric).
assert (Col F G C) by (conclude lemma_collinear4).
assert (Col C G F) by (forward_using lemma_collinearorder).
assert (Col C G D) by (forward_using lemma_collinearorder).
assert (Col R F D) by (conclude lemma_collinear5).
assert (Col R F E) by (forward_using lemma_collinearorder).
assert (Col F D E) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).

*****
H83 : Col E F D
H82 : Col F D E
H81 : Col R F E
H80 : Col R F D
H79 : Col C G D
H78 : Col C G F
H77 : Col F G C
H76 : neq D F
H75 : neq F D
H74 : Col D F C
H73 : Col D F G
H72 : Col C D F
H71 : Col C G R
H70 : neq R F
H69 : neq G C
H68 : Col G C D
H67 : Col G C R
H66 : neq C G
H65 : neq G C
H64 : Col C G R
H63 : Col C G D
H62 : Col G R C
H61 : neq F R
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).

*****
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS G F C) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).

*****
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Col E G F).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).

*****
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col E G F)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
intro.

*****
H63 : Col E G F
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
intro.
assert (Col E F G) by (forward_using lemma_collinearorder).

*****
H64 : Col E F G
H63 : Col E G F
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).

*****
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Triangle E G F) by (conclude_def Triangle ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).

*****
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (LtA G E F E F C) by (conclude proposition_16).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).

*****
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).

*****
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq F F) by (conclude cn_equalityreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).

*****
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E F F) by (conclude lemma_ray4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).

*****
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E G B) by (conclude_def Out ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).

*****
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Col G E F).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).

*****
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col G E F)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
intro.

*****
H70 : Col G E F
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E G F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
intro.
assert (Col E G F) by (forward_using lemma_collinearorder).

*****
H71 : Col E G F
H70 : Col G E F
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).

*****
H70 : not (Col G E F)
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA G E F G E F) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
assert (CongA G E F G E F) by (conclude lemma_equalanglesreflexive).

*****
H71 : CongA G E F G E F
H70 : not (Col G E F)
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA G E F B E F) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
assert (CongA G E F G E F) by (conclude lemma_equalanglesreflexive).
assert (CongA G E F B E F) by (conclude lemma_equalangleshelper).

*****
H72 : CongA G E F B E F
H71 : CongA G E F G E F
H70 : not (Col G E F)
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol B E F) by (conclude_def CongA ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
assert (CongA G E F G E F) by (conclude lemma_equalanglesreflexive).
assert (CongA G E F B E F) by (conclude lemma_equalangleshelper).
assert (nCol B E F) by (conclude_def CongA ).

*****
H73 : nCol B E F
H72 : CongA G E F B E F
H71 : CongA G E F G E F
H70 : not (Col G E F)
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA B E F F E B) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
assert (CongA G E F G E F) by (conclude lemma_equalanglesreflexive).
assert (CongA G E F B E F) by (conclude lemma_equalangleshelper).
assert (nCol B E F) by (conclude_def CongA ).
assert (CongA B E F F E B) by (conclude lemma_ABCequalsCBA).

*****
H74 : CongA B E F F E B
H73 : nCol B E F
H72 : CongA G E F B E F
H71 : CongA G E F G E F
H70 : not (Col G E F)
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA G E F F E B) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
assert (CongA G E F G E F) by (conclude lemma_equalanglesreflexive).
assert (CongA G E F B E F) by (conclude lemma_equalangleshelper).
assert (nCol B E F) by (conclude_def CongA ).
assert (CongA B E F F E B) by (conclude lemma_ABCequalsCBA).
assert (CongA G E F F E B) by (conclude lemma_equalanglestransitive).

*****
H75 : CongA G E F F E B
H74 : CongA B E F F E B
H73 : nCol B E F
H72 : CongA G E F B E F
H71 : CongA G E F G E F
H70 : not (Col G E F)
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA F E B G E F) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
assert (CongA G E F G E F) by (conclude lemma_equalanglesreflexive).
assert (CongA G E F B E F) by (conclude lemma_equalangleshelper).
assert (nCol B E F) by (conclude_def CongA ).
assert (CongA B E F F E B) by (conclude lemma_ABCequalsCBA).
assert (CongA G E F F E B) by (conclude lemma_equalanglestransitive).
assert (CongA F E B G E F) by (conclude lemma_equalanglessymmetric).

*****
H76 : CongA F E B G E F
H75 : CongA G E F F E B
H74 : CongA B E F F E B
H73 : nCol B E F
H72 : CongA G E F B E F
H71 : CongA G E F G E F
H70 : not (Col G E F)
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (LtA F E B F E B) by (conclude lemma_angleorderrespectscongruence2).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
assert (CongA G E F G E F) by (conclude lemma_equalanglesreflexive).
assert (CongA G E F B E F) by (conclude lemma_equalangleshelper).
assert (nCol B E F) by (conclude_def CongA ).
assert (CongA B E F F E B) by (conclude lemma_ABCequalsCBA).
assert (CongA G E F F E B) by (conclude lemma_equalanglestransitive).
assert (CongA F E B G E F) by (conclude lemma_equalanglessymmetric).
assert (LtA F E B F E B) by (conclude lemma_angleorderrespectscongruence2).

*****
H77 : LtA F E B F E B
H76 : CongA F E B G E F
H75 : CongA G E F F E B
H74 : CongA B E F F E B
H73 : nCol B E F
H72 : CongA G E F B E F
H71 : CongA G E F G E F
H70 : not (Col G E F)
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ LtA F E B F E B) by (conclude lemma_angletrichotomy).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (BetS G E A) by (conclude axiom_betweennesssymmetry).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (neq C D) by (forward_using lemma_betweennotequal).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G F D) by (forward_using lemma_collinearorder).
assert (~ eq F G).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (~ Col E F G).
assert (BetS D H A) by (conclude axiom_betweennesssymmetry).
assert (OS D G E F) by (unfold OS;exists A;exists H;exists E;splits;auto).
assert (OS G D E F) by (forward_using lemma_samesidesymmetric).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Col E F F) by (conclude_def Col ).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (TS D E F C) by (conclude_def TS ).
assert (TS G E F C) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists R, (BetS G R C /\\ Col E F R /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [R];spliter.
assert (~ neq F R).
assert (BetS G F C) by (conclude cn_equalitysub).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F C) by (conclude proposition_16).
assert (LtA G E F F E B) by (conclude lemma_angleorderrespectscongruence).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G B) by (conclude_def Out ).
assert (~ Col G E F).
assert (CongA G E F G E F) by (conclude lemma_equalanglesreflexive).
assert (CongA G E F B E F) by (conclude lemma_equalangleshelper).
assert (nCol B E F) by (conclude_def CongA ).
assert (CongA B E F F E B) by (conclude lemma_ABCequalsCBA).
assert (CongA G E F F E B) by (conclude lemma_equalanglestransitive).
assert (CongA F E B G E F) by (conclude lemma_equalanglessymmetric).
assert (LtA F E B F E B) by (conclude lemma_angleorderrespectscongruence2).
assert (~ LtA F E B F E B) by (conclude lemma_angletrichotomy).

*****
H78 : not (LtA F E B F E B)
H77 : LtA F E B F E B
H76 : CongA F E B G E F
H75 : CongA G E F F E B
H74 : CongA B E F F E B
H73 : nCol B E F
H72 : CongA G E F B E F
H71 : CongA G E F G E F
H70 : not (Col G E F)
H69 : Out E G B
H68 : Out E F F
H67 : eq F F
H66 : LtA G E F F E B
H65 : LtA G E F E F C
H64 : Triangle E G F
H63 : not (Col E G F)
H62 : BetS G F C
H61 : not (neq F R)
H60 : nCol E F G
H59 : Col E F R
H58 : BetS G R C
R : Point
H57 : TS G E F C
H56 : TS D E F C
H55 : BetS D F C
H54 : Col E F F
H53 : eq F F
H52 : OS G D E F
H51 : OS D G E F
H50 : BetS D H A
H49 : not (Col E F G)
H48 : neq G F
H47 : not (eq F G)
H46 : Col G F D
H45 : Col D G F
H44 : neq C D
H43 : Col C D F
H42 : Col C F D
H41 : BetS G E A
H40 : Col E F E
H39 : eq E E
H38 : BetS A E G
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).

*****
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Out E A G).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).

*****
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Out E A G)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.

*****
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq F F) by (conclude cn_equalityreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).

*****
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E F F) by (conclude lemma_ray4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).

*****
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E G A) by (conclude lemma_ray5).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).

*****
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).

*****
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).

*****
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).

*****
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert ((BetS E A G \/ eq G A \/ BetS E G A)) by (conclude lemma_ray1).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).

*****
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS B E G).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).

*****
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B E G
+++++
by cases on (BetS E A G \/ eq G A \/ BetS E G A).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).

*****
H47 : BetS E A G
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B E G
+++++
assert (BetS B E G) by (conclude lemma_3_7b).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS B E G) by (conclude lemma_3_7b).

*****
H46 : BetS B E G
H47 : BetS E A G
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B E G
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).

*****
H48 : eq G A
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B E G
+++++
assert (BetS B E G) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS B E G) by (conclude cn_equalitysub).

*****
H46 : BetS B E G
H48 : eq G A
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B E G
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).

*****
H48 : BetS E G A
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B E G
+++++
assert (BetS B E G) by (conclude axiom_innertransitivity).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS B E G) by (conclude axiom_innertransitivity).

*****
H46 : BetS B E G
H48 : BetS E G A
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B E G
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).

*****
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).

*****
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq E E) by (conclude cn_equalityreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).

*****
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F E) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).

*****
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Col E F G).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).

*****
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col E F G)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.

*****
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).

*****
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A E B) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col A E B) by (conclude_def Col ).

*****
H53 : Col A E B
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).

*****
H54 : Col B A E
H53 : Col A E B
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A G E) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (Col A G E) by (conclude lemma_collinear4).

*****
H55 : Col A G E
H54 : Col B A E
H53 : Col A E B
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G E A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col G E A) by (forward_using lemma_collinearorder).

*****
H56 : Col G E A
H55 : Col A G E
H54 : Col B A E
H53 : Col A E B
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G E F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col G E A) by (forward_using lemma_collinearorder).
assert (Col G E F) by (forward_using lemma_collinearorder).

*****
H57 : Col G E F
H56 : Col G E A
H55 : Col A G E
H54 : Col B A E
H53 : Col A E B
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E G) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col G E A) by (forward_using lemma_collinearorder).
assert (Col G E F) by (forward_using lemma_collinearorder).
assert (neq E G) by (forward_using lemma_betweennotequal).

*****
H58 : neq E G
H57 : Col G E F
H56 : Col G E A
H55 : Col A G E
H54 : Col B A E
H53 : Col A E B
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G E) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col G E A) by (forward_using lemma_collinearorder).
assert (Col G E F) by (forward_using lemma_collinearorder).
assert (neq E G) by (forward_using lemma_betweennotequal).
assert (neq G E) by (conclude lemma_inequalitysymmetric).

*****
H59 : neq G E
H58 : neq E G
H57 : Col G E F
H56 : Col G E A
H55 : Col A G E
H54 : Col B A E
H53 : Col A E B
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E A F) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col G E A) by (forward_using lemma_collinearorder).
assert (Col G E F) by (forward_using lemma_collinearorder).
assert (neq E G) by (forward_using lemma_betweennotequal).
assert (neq G E) by (conclude lemma_inequalitysymmetric).
assert (Col E A F) by (conclude lemma_collinear4).

*****
H60 : Col E A F
H59 : neq G E
H58 : neq E G
H57 : Col G E F
H56 : Col G E A
H55 : Col A G E
H54 : Col B A E
H53 : Col A E B
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
intro.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col G E A) by (forward_using lemma_collinearorder).
assert (Col G E F) by (forward_using lemma_collinearorder).
assert (neq E G) by (forward_using lemma_betweennotequal).
assert (neq G E) by (conclude lemma_inequalitysymmetric).
assert (Col E A F) by (conclude lemma_collinear4).
assert (Col E F A) by (forward_using lemma_collinearorder).

*****
H61 : Col E F A
H60 : Col E A F
H59 : neq G E
H58 : neq E G
H57 : Col G E F
H56 : Col G E A
H55 : Col A G E
H54 : Col B A E
H53 : Col A E B
H52 : Col B A G
H51 : Col E F G
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).

*****
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS A G E F) by (conclude_def OS ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).

*****
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).

*****
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (TS G E F D) by (conclude lemma_planeseparation).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).

*****
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\ Col E F P /\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.

*****
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G P D) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).

*****
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ neq P F).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).

*****
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq P F)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.

*****
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).

*****
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G D P) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).

*****
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C F D) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).

*****
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C D F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).

*****
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D G F) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).

*****
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G D F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G D F) by (forward_using lemma_collinearorder).

*****
H65 : Col G D F
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D P F) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G D F) by (forward_using lemma_collinearorder).
assert (Col D P F) by (conclude lemma_collinear4).

*****
H66 : Col D P F
H65 : Col G D F
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P F D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G D F) by (forward_using lemma_collinearorder).
assert (Col D P F) by (conclude lemma_collinear4).
assert (Col P F D) by (forward_using lemma_collinearorder).

*****
H67 : Col P F D
H66 : Col D P F
H65 : Col G D F
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P F E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G D F) by (forward_using lemma_collinearorder).
assert (Col D P F) by (conclude lemma_collinear4).
assert (Col P F D) by (forward_using lemma_collinearorder).
assert (Col P F E) by (forward_using lemma_collinearorder).

*****
H68 : Col P F E
H67 : Col P F D
H66 : Col D P F
H65 : Col G D F
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F D E) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G D F) by (forward_using lemma_collinearorder).
assert (Col D P F) by (conclude lemma_collinear4).
assert (Col P F D) by (forward_using lemma_collinearorder).
assert (Col P F E) by (forward_using lemma_collinearorder).
assert (Col F D E) by (conclude lemma_collinear4).

*****
H69 : Col F D E
H68 : Col P F E
H67 : Col P F D
H66 : Col D P F
H65 : Col G D F
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Col F D E).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G D F) by (forward_using lemma_collinearorder).
assert (Col D P F) by (conclude lemma_collinear4).
assert (Col P F D) by (forward_using lemma_collinearorder).
assert (Col P F E) by (forward_using lemma_collinearorder).
assert (Col F D E) by (conclude lemma_collinear4).
assert (~ Col F D E).

*****
H69 : Col F D E
H68 : Col P F E
H67 : Col P F D
H66 : Col D P F
H65 : Col G D F
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col F D E)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G D F) by (forward_using lemma_collinearorder).
assert (Col D P F) by (conclude lemma_collinear4).
assert (Col P F D) by (forward_using lemma_collinearorder).
assert (Col P F E) by (forward_using lemma_collinearorder).
assert (Col F D E) by (conclude lemma_collinear4).
assert (~ Col F D E).
intro.

*****
H69,H70 : Col F D E
H68 : Col P F E
H67 : Col P F D
H66 : Col D P F
H65 : Col G D F
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G D F) by (forward_using lemma_collinearorder).
assert (Col D P F) by (conclude lemma_collinear4).
assert (Col P F D) by (forward_using lemma_collinearorder).
assert (Col P F E) by (forward_using lemma_collinearorder).
assert (Col F D E) by (conclude lemma_collinear4).
assert (~ Col F D E).
intro.
assert (Col E F D) by (forward_using lemma_collinearorder).

*****
H71 : Col E F D
H69,H70 : Col F D E
H68 : Col P F E
H67 : Col P F D
H66 : Col D P F
H65 : Col G D F
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
intro.
assert (neq G D) by (forward_using lemma_betweennotequal).
assert (Col G D P) by (forward_using lemma_collinearorder).
assert (Col C F D) by (conclude_def Col ).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col G D F) by (forward_using lemma_collinearorder).
assert (Col D P F) by (conclude lemma_collinear4).
assert (Col P F D) by (forward_using lemma_collinearorder).
assert (Col P F E) by (forward_using lemma_collinearorder).
assert (Col F D E) by (conclude lemma_collinear4).
assert (~ Col F D E).

*****
H70 : not (Col F D E)
H69 : Col F D E
H68 : Col P F E
H67 : Col P F D
H66 : Col D P F
H65 : Col G D F
H64 : Col D G F
H63 : Col C D F
H62 : Col C F D
H61 : Col G D P
H60 : neq G D
H59 : neq P F
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).

*****
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS G F D) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).

*****
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Col F E A).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).

*****
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col F E A)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
intro.

*****
H61 : Col F E A
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
intro.
assert (Col E F A) by (forward_using lemma_collinearorder).

*****
H62 : Col E F A
H61 : Col F E A
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).

*****
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).

*****
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).

*****
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).

*****
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol F E G) by (conclude_def CongA ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
assert (nCol F E G) by (conclude_def CongA ).

*****
H65 : nCol F E G
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Col E G F).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
assert (nCol F E G) by (conclude_def CongA ).
assert (~ Col E G F).

*****
H65 : nCol F E G
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col E G F)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
assert (nCol F E G) by (conclude_def CongA ).
assert (~ Col E G F).
intro.

*****
H66 : Col E G F
H65 : nCol F E G
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F E G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
assert (nCol F E G) by (conclude_def CongA ).
assert (~ Col E G F).
intro.
assert (Col F E G) by (forward_using lemma_collinearorder).

*****
H67 : Col F E G
H66 : Col E G F
H65 : nCol F E G
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
assert (nCol F E G) by (conclude_def CongA ).
assert (~ Col E G F).

*****
H66 : not (Col E G F)
H65 : nCol F E G
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Triangle E G F) by (conclude_def Triangle ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
assert (nCol F E G) by (conclude_def CongA ).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).

*****
H67 : Triangle E G F
H66 : not (Col E G F)
H65 : nCol F E G
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (LtA G E F E F D) by (conclude proposition_16).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
assert (nCol F E G) by (conclude_def CongA ).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F D) by (conclude proposition_16).

*****
H68 : LtA G E F E F D
H67 : Triangle E G F
H66 : not (Col E G F)
H65 : nCol F E G
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (LtA E F D E F D) by (conclude lemma_angleorderrespectscongruence2).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
assert (nCol F E G) by (conclude_def CongA ).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F D) by (conclude proposition_16).
assert (LtA E F D E F D) by (conclude lemma_angleorderrespectscongruence2).

*****
H69 : LtA E F D E F D
H68 : LtA G E F E F D
H67 : Triangle E G F
H66 : not (Col E G F)
H65 : nCol F E G
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ LtA E F D E F D) by (conclude lemma_angletrichotomy).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
intro.
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E G A) by (conclude lemma_ray5).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (CongA E F D G E F) by (conclude lemma_equalangleshelper).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert ((BetS E A G \\/ eq G A \\/ BetS E G A)) by (conclude lemma_ray1).
assert (BetS B E G).
by cases on (BetS E A G \\/ eq G A \\/ BetS E G A).
assert (BetS G E B) by (conclude axiom_betweennesssymmetry).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E F E) by (conclude_def Col ).
assert (~ Col E F G).
assert (OS A G E F) by (conclude_def OS ).
assert (OS G A E F) by (forward_using lemma_samesidesymmetric).
assert (TS G E F D) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists P, (BetS G P D /\\ Col E F P /\\ nCol E F G)) by (conclude_def TS );destruct Tf as [P];spliter.
assert (Col G P D) by (conclude_def Col ).
assert (~ neq P F).
assert (BetS G F D) by (conclude cn_equalitysub).
assert (~ Col F E A).
assert (CongA F E A F E A) by (conclude lemma_equalanglesreflexive).
assert (CongA F E A F E G) by (conclude lemma_equalangleshelper).
assert (CongA F E G F E A) by (conclude lemma_equalanglessymmetric).
assert (nCol F E G) by (conclude_def CongA ).
assert (~ Col E G F).
assert (Triangle E G F) by (conclude_def Triangle ).
assert (LtA G E F E F D) by (conclude proposition_16).
assert (LtA E F D E F D) by (conclude lemma_angleorderrespectscongruence2).
assert (~ LtA E F D E F D) by (conclude lemma_angletrichotomy).

*****
H70 : not (LtA E F D E F D)
H69 : LtA E F D E F D
H68 : LtA G E F E F D
H67 : Triangle E G F
H66 : not (Col E G F)
H65 : nCol F E G
H64 : CongA F E G F E A
H63 : CongA F E A F E G
H62 : CongA F E A F E A
H61 : not (Col F E A)
H60 : BetS G F D
H59 : not (neq P F)
H58 : Col G P D
H57 : nCol E F G
H56 : Col E F P
H55 : BetS G P D
P : Point
H54 : TS G E F D
H53 : OS G A E F
H52 : OS A G E F
H51 : not (Col E F G)
H50 : Col E F E
H49 : eq E E
H48 : BetS G E B
H47 : BetS B E G
H46 : or (BetS E A G) (or (eq G A) (BetS E G A))
H45 : BetS B E A
H44 : CongA E F D G E F
H43 : CongA E F D A E F
H42 : Out E G A
H41 : Out E F F
H40 : eq F F
H39 : Out E A G
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).

*****
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert ((eq A E \/ eq A G \/ eq E G \/ BetS E A G \/ BetS A E G \/ BetS A G E)) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).

*****
H40 : or (eq A E)\n (or (eq A G)\n (or (eq E G) (or (BetS E A G) (or (BetS A E G) (BetS A G E)))))
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Meet A B C D).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).

*****
H40 : or (eq A E)\n (or (eq A G)\n (or (eq E G) (or (BetS E A G) (or (BetS A E G) (BetS A G E)))))
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
by cases on (eq A E \/ eq A G \/ eq E G \/ BetS E A G \/ BetS A E G \/ BetS A G E).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).

*****
H41 : eq A E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (~ Meet A B C D).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ Meet A B C D).

*****
H41 : eq A E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ Meet A B C D).
intro.

*****
H40 : Meet A B C D
H41 : eq A E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ Meet A B C D).

*****
H40 : not (Meet A B C D)
H41 : eq A E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).

*****
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (~ neq H F).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).

*****
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq H F)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.

*****
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C D F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).

*****
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D G F) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).

*****
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D A F) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).

*****
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A H D) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).
assert (Col A H D) by (conclude_def Col ).

*****
H45 : Col A H D
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D A H) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).
assert (Col A H D) by (conclude_def Col ).
assert (Col D A H) by (forward_using lemma_collinearorder).

*****
H46 : Col D A H
H45 : Col A H D
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq A D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).
assert (Col A H D) by (conclude_def Col ).
assert (Col D A H) by (forward_using lemma_collinearorder).
assert (neq A D) by (forward_using lemma_betweennotequal).

*****
H47 : neq A D
H46 : Col D A H
H45 : Col A H D
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq D A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).
assert (Col A H D) by (conclude_def Col ).
assert (Col D A H) by (forward_using lemma_collinearorder).
assert (neq A D) by (forward_using lemma_betweennotequal).
assert (neq D A) by (conclude lemma_inequalitysymmetric).

*****
H48 : neq D A
H47 : neq A D
H46 : Col D A H
H45 : Col A H D
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A F H) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).
assert (Col A H D) by (conclude_def Col ).
assert (Col D A H) by (forward_using lemma_collinearorder).
assert (neq A D) by (forward_using lemma_betweennotequal).
assert (neq D A) by (conclude lemma_inequalitysymmetric).
assert (Col A F H) by (conclude lemma_collinear4).

*****
H49 : Col A F H
H48 : neq D A
H47 : neq A D
H46 : Col D A H
H45 : Col A H D
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col H F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).
assert (Col A H D) by (conclude_def Col ).
assert (Col D A H) by (forward_using lemma_collinearorder).
assert (neq A D) by (forward_using lemma_betweennotequal).
assert (neq D A) by (conclude lemma_inequalitysymmetric).
assert (Col A F H) by (conclude lemma_collinear4).
assert (Col H F A) by (forward_using lemma_collinearorder).

*****
H50 : Col H F A
H49 : Col A F H
H48 : neq D A
H47 : neq A D
H46 : Col D A H
H45 : Col A H D
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col H F E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).
assert (Col A H D) by (conclude_def Col ).
assert (Col D A H) by (forward_using lemma_collinearorder).
assert (neq A D) by (forward_using lemma_betweennotequal).
assert (neq D A) by (conclude lemma_inequalitysymmetric).
assert (Col A F H) by (conclude lemma_collinear4).
assert (Col H F A) by (forward_using lemma_collinearorder).
assert (Col H F E) by (forward_using lemma_collinearorder).

*****
H51 : Col H F E
H50 : Col H F A
H49 : Col A F H
H48 : neq D A
H47 : neq A D
H46 : Col D A H
H45 : Col A H D
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F A E) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).
assert (Col A H D) by (conclude_def Col ).
assert (Col D A H) by (forward_using lemma_collinearorder).
assert (neq A D) by (forward_using lemma_betweennotequal).
assert (neq D A) by (conclude lemma_inequalitysymmetric).
assert (Col A F H) by (conclude lemma_collinear4).
assert (Col H F A) by (forward_using lemma_collinearorder).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (Col F A E) by (conclude lemma_collinear4).

*****
H52 : Col F A E
H51 : Col H F E
H50 : Col H F A
H49 : Col A F H
H48 : neq D A
H47 : neq A D
H46 : Col D A H
H45 : Col A H D
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
intro.
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D G F) by (conclude lemma_collinear4).
assert (Col D A F) by (conclude cn_equalitysub).
assert (Col A H D) by (conclude_def Col ).
assert (Col D A H) by (forward_using lemma_collinearorder).
assert (neq A D) by (forward_using lemma_betweennotequal).
assert (neq D A) by (conclude lemma_inequalitysymmetric).
assert (Col A F H) by (conclude lemma_collinear4).
assert (Col H F A) by (forward_using lemma_collinearorder).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (Col F A E) by (conclude lemma_collinear4).
assert (Col E F A) by (forward_using lemma_collinearorder).

*****
H53 : Col E F A
H52 : Col F A E
H51 : Col H F E
H50 : Col H F A
H49 : Col A F H
H48 : neq D A
H47 : neq A D
H46 : Col D A H
H45 : Col A H D
H44 : Col D A F
H43 : Col D G F
H41 : Col C D F
H40 : neq H F
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).

*****
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (BetS A F D) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).

*****
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (~ Col E A F).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).

*****
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col E A F)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
intro.

*****
H43 : Col E A F
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
intro.
assert (Col E F A) by (forward_using lemma_collinearorder).

*****
H44 : Col E F A
H43 : Col E A F
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).

*****
H43 : not (Col E A F)
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (Triangle E A F) by (conclude_def Triangle ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
assert (Triangle E A F) by (conclude_def Triangle ).

*****
H44 : Triangle E A F
H43 : not (Col E A F)
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (LtA A E F E F D) by (conclude proposition_16).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
assert (Triangle E A F) by (conclude_def Triangle ).
assert (LtA A E F E F D) by (conclude proposition_16).

*****
H45 : LtA A E F E F D
H44 : Triangle E A F
H43 : not (Col E A F)
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
assert (Triangle E A F) by (conclude_def Triangle ).
assert (LtA A E F E F D) by (conclude proposition_16).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).

*****
H46 : CongA E F D A E F
H45 : LtA A E F E F D
H44 : Triangle E A F
H43 : not (Col E A F)
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (LtA E F D E F D) by (conclude lemma_angleorderrespectscongruence2).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
assert (Triangle E A F) by (conclude_def Triangle ).
assert (LtA A E F E F D) by (conclude proposition_16).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (LtA E F D E F D) by (conclude lemma_angleorderrespectscongruence2).

*****
H47 : LtA E F D E F D
H46 : CongA E F D A E F
H45 : LtA A E F E F D
H44 : Triangle E A F
H43 : not (Col E A F)
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (~ Meet A B C D).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
assert (Triangle E A F) by (conclude_def Triangle ).
assert (LtA A E F E F D) by (conclude proposition_16).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (LtA E F D E F D) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Meet A B C D).

*****
H47 : LtA E F D E F D
H46 : CongA E F D A E F
H45 : LtA A E F E F D
H44 : Triangle E A F
H43 : not (Col E A F)
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
assert (Triangle E A F) by (conclude_def Triangle ).
assert (LtA A E F E F D) by (conclude proposition_16).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (LtA E F D E F D) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Meet A B C D).
intro.

*****
H48 : Meet A B C D
H47 : LtA E F D E F D
H46 : CongA E F D A E F
H45 : LtA A E F E F D
H44 : Triangle E A F
H43 : not (Col E A F)
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ LtA E F D E F D) by (conclude lemma_angletrichotomy).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
assert (Triangle E A F) by (conclude_def Triangle ).
assert (LtA A E F E F D) by (conclude proposition_16).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (LtA E F D E F D) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Meet A B C D).
intro.
assert (~ LtA E F D E F D) by (conclude lemma_angletrichotomy).

*****
H49 : not (LtA E F D E F D)
H48 : Meet A B C D
H47 : LtA E F D E F D
H46 : CongA E F D A E F
H45 : LtA A E F E F D
H44 : Triangle E A F
H43 : not (Col E A F)
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ neq H F).
assert (BetS A F D) by (conclude cn_equalitysub).
assert (~ Col E A F).
assert (Triangle E A F) by (conclude_def Triangle ).
assert (LtA A E F E F D) by (conclude proposition_16).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (LtA E F D E F D) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Meet A B C D).

*****
H48 : not (Meet A B C D)
H47 : LtA E F D E F D
H46 : CongA E F D A E F
H45 : LtA A E F E F D
H44 : Triangle E A F
H43 : not (Col E A F)
H41 : BetS A F D
H40 : not (neq H F)
H42 : eq A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).

*****
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (Col C D E) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).

*****
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (Col C D F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).

*****
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (Col D E F) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).

*****
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (Col E F D) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).

*****
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (~ neq E F).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).

*****
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq E F)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.

*****
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F D H) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).

*****
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D H F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).

*****
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A H D) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).

*****
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D H A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).

*****
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq H D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).

*****
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq D H) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).

*****
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col H F A) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).

*****
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col H F E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).

*****
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ neq H F).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).

*****
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq H F)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
intro.

*****
H54 : neq H F
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F A E) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
intro.
assert (Col F A E) by (conclude lemma_collinear4).

*****
H55 : Col F A E
H54 : neq H F
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
intro.
assert (Col F A E) by (conclude lemma_collinear4).
assert (Col E F A) by (forward_using lemma_collinearorder).

*****
H56 : Col E F A
H55 : Col F A E
H54 : neq H F
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).

*****
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A H D) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).

*****
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A F D) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).

*****
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).

*****
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D F C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).

*****
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq H D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).

*****
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq D H) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).

*****
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq D F) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).

*****
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F A C) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).

*****
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).

*****
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D C G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).

*****
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C D F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).

*****
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D C F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).

*****
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq D C) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).

*****
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C G F) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).

*****
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C F G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).

*****
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ neq C F).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).

*****
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq C F)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
intro.

*****
H70 : neq C F
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F A G) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
intro.
assert (Col F A G) by (conclude lemma_collinear4).

*****
H71 : Col F A G
H70 : neq C F
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F A E) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
intro.
assert (Col F A G) by (conclude lemma_collinear4).
assert (Col F A E) by (conclude cn_equalitysub).

*****
H72 : Col F A E
H71 : Col F A G
H70 : neq C F
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
intro.
assert (Col F A G) by (conclude lemma_collinear4).
assert (Col F A E) by (conclude cn_equalitysub).
assert (Col E F A) by (forward_using lemma_collinearorder).

*****
H73 : Col E F A
H72 : Col F A E
H71 : Col F A G
H70 : neq C F
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).

*****
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A H D) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).

*****
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A C D) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).

*****
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C D A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).
assert (Col C D A) by (forward_using lemma_collinearorder).

*****
H73 : Col C D A
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F D A) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).
assert (Col C D A) by (forward_using lemma_collinearorder).
assert (Col F D A) by (conclude cn_equalitysub).

*****
H74 : Col F D A
H73 : Col C D A
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C D E) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).
assert (Col C D A) by (forward_using lemma_collinearorder).
assert (Col F D A) by (conclude cn_equalitysub).
assert (Col C D E) by (conclude cn_equalitysub).

*****
H75 : Col C D E
H74 : Col F D A
H73 : Col C D A
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F D E) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).
assert (Col C D A) by (forward_using lemma_collinearorder).
assert (Col F D A) by (conclude cn_equalitysub).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col F D E) by (conclude cn_equalitysub).

*****
H76 : Col F D E
H75 : Col C D E
H74 : Col F D A
H73 : Col C D A
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D F E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).
assert (Col C D A) by (forward_using lemma_collinearorder).
assert (Col F D A) by (conclude cn_equalitysub).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col F D E) by (conclude cn_equalitysub).
assert (Col D F E) by (forward_using lemma_collinearorder).

*****
H77 : Col D F E
H76 : Col F D E
H75 : Col C D E
H74 : Col F D A
H73 : Col C D A
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).
assert (Col C D A) by (forward_using lemma_collinearorder).
assert (Col F D A) by (conclude cn_equalitysub).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col F D E) by (conclude cn_equalitysub).
assert (Col D F E) by (forward_using lemma_collinearorder).
assert (Col D F A) by (forward_using lemma_collinearorder).

*****
H78 : Col D F A
H77 : Col D F E
H76 : Col F D E
H75 : Col C D E
H74 : Col F D A
H73 : Col C D A
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq D F) by (conclude cn_equalitysub).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).
assert (Col C D A) by (forward_using lemma_collinearorder).
assert (Col F D A) by (conclude cn_equalitysub).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col F D E) by (conclude cn_equalitysub).
assert (Col D F E) by (forward_using lemma_collinearorder).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (neq D F) by (conclude cn_equalitysub).

*****
H79 : neq D F
H78 : Col D F A
H77 : Col D F E
H76 : Col F D E
H75 : Col C D E
H74 : Col F D A
H73 : Col C D A
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col F E A) by (conclude lemma_collinear4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).
assert (Col C D A) by (forward_using lemma_collinearorder).
assert (Col F D A) by (conclude cn_equalitysub).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col F D E) by (conclude cn_equalitysub).
assert (Col D F E) by (forward_using lemma_collinearorder).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F E A) by (conclude lemma_collinear4).

*****
H80 : Col F E A
H79 : neq D F
H78 : Col D F A
H77 : Col D F E
H76 : Col F D E
H75 : Col C D E
H74 : Col F D A
H73 : Col C D A
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E F A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
intro.
assert (Col F D H) by (conclude lemma_collinear4).
assert (Col D H F) by (forward_using lemma_collinearorder).
assert (Col A H D) by (conclude_def Col ).
assert (Col D H A) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (Col H F A) by (conclude lemma_collinear4).
assert (Col H F E) by (forward_using lemma_collinearorder).
assert (~ neq H F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A F D) by (conclude cn_equalitysub).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (Col D F C) by (forward_using lemma_collinearorder).
assert (neq H D) by (forward_using lemma_betweennotequal).
assert (neq D H) by (conclude lemma_inequalitysymmetric).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F A C) by (conclude lemma_collinear4).
assert (Col C F A) by (forward_using lemma_collinearorder).
assert (Col D C G) by (forward_using lemma_collinearorder).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D C F) by (forward_using lemma_collinearorder).
assert (neq D C) by (conclude lemma_inequalitysymmetric).
assert (Col C G F) by (conclude lemma_collinear4).
assert (Col C F G) by (forward_using lemma_collinearorder).
assert (~ neq C F).
assert (Col A H D) by (conclude_def Col ).
assert (Col A C D) by (conclude cn_equalitysub).
assert (Col C D A) by (forward_using lemma_collinearorder).
assert (Col F D A) by (conclude cn_equalitysub).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col F D E) by (conclude cn_equalitysub).
assert (Col D F E) by (forward_using lemma_collinearorder).
assert (Col D F A) by (forward_using lemma_collinearorder).
assert (neq D F) by (conclude cn_equalitysub).
assert (Col F E A) by (conclude lemma_collinear4).
assert (Col E F A) by (forward_using lemma_collinearorder).

*****
H81 : Col E F A
H80 : Col F E A
H79 : neq D F
H78 : Col D F A
H77 : Col D F E
H76 : Col F D E
H75 : Col C D E
H74 : Col F D A
H73 : Col C D A
H72 : Col A C D
H71 : Col A H D
H70 : not (neq C F)
H69 : Col C F G
H68 : Col C G F
H67 : neq D C
H66 : Col D C F
H65 : Col C D F
H64 : Col D C G
H63 : Col C F A
H62 : Col F A C
H61 : neq D F
H60 : neq D H
H59 : neq H D
H58 : Col D F C
H57 : Col D F A
H56 : Col A F D
H55 : Col A H D
H54 : not (neq H F)
H53 : Col H F E
H52 : Col H F A
H51 : neq D H
H50 : neq H D
H49 : Col D H A
H48 : Col A H D
H47 : Col D H F
H46 : Col F D H
H45 : neq E F
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).

*****
H45 : not (neq E F)
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (Col E F A) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
assert (Col E F A) by (conclude_def Col ).

*****
H46 : Col E F A
H45 : not (neq E F)
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (~ Meet A B C D).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
assert (Col E F A) by (conclude_def Col ).
assert (~ Meet A B C D).

*****
H46 : Col E F A
H45 : not (neq E F)
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
assert (Col E F A) by (conclude_def Col ).
assert (~ Meet A B C D).
intro.

*****
H47 : Meet A B C D
H46 : Col E F A
H45 : not (neq E F)
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (Col C D E) by (conclude cn_equalitysub).
assert (Col C D F) by (forward_using lemma_collinearorder).
assert (Col D E F) by (conclude lemma_collinear4).
assert (Col E F D) by (forward_using lemma_collinearorder).
assert (~ neq E F).
assert (Col E F A) by (conclude_def Col ).
assert (~ Meet A B C D).

*****
H47 : not (Meet A B C D)
H46 : Col E F A
H45 : not (neq E F)
H44 : Col E F D
H43 : Col D E F
H42 : Col C D F
H40 : Col C D E
H41 : eq E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).

*****
H42 : BetS E A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (neq E A) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (neq E A) by (forward_using lemma_betweennotequal).

*****
H40 : neq E A
H42 : BetS E A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (Out E A G) by (conclude lemma_ray4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (neq E A) by (forward_using lemma_betweennotequal).
assert (Out E A G) by (conclude lemma_ray4).

*****
H41 : Out E A G
H40 : neq E A
H42 : BetS E A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (~ Meet A B C D).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (neq E A) by (forward_using lemma_betweennotequal).
assert (Out E A G) by (conclude lemma_ray4).
assert (~ Meet A B C D).

*****
H41 : Out E A G
H40 : neq E A
H42 : BetS E A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (neq E A) by (forward_using lemma_betweennotequal).
assert (Out E A G) by (conclude lemma_ray4).
assert (~ Meet A B C D).
intro.

*****
H43 : Meet A B C D
H41 : Out E A G
H40 : neq E A
H42 : BetS E A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (neq E A) by (forward_using lemma_betweennotequal).
assert (Out E A G) by (conclude lemma_ray4).
assert (~ Meet A B C D).

*****
H43 : not (Meet A B C D)
H41 : Out E A G
H40 : neq E A
H42 : BetS E A G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).

*****
H41 : BetS A E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (~ Meet A B C D).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ Meet A B C D).

*****
H41 : BetS A E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ Meet A B C D).
intro.

*****
H40 : Meet A B C D
H41 : BetS A E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (~ Meet A B C D).

*****
H40 : not (Meet A B C D)
H41 : BetS A E G
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).

*****
H41 : BetS A G E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (BetS E G A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (BetS E G A) by (conclude axiom_betweennesssymmetry).

*****
H40 : BetS E G A
H41 : BetS A G E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (neq E A) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (BetS E G A) by (conclude axiom_betweennesssymmetry).
assert (neq E A) by (forward_using lemma_betweennotequal).

*****
H42 : neq E A
H40 : BetS E G A
H41 : BetS A G E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (Out E A G) by (conclude lemma_ray4).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (BetS E G A) by (conclude axiom_betweennesssymmetry).
assert (neq E A) by (forward_using lemma_betweennotequal).
assert (Out E A G) by (conclude lemma_ray4).

*****
H43 : Out E A G
H42 : neq E A
H40 : BetS E G A
H41 : BetS A G E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
assert (~ Meet A B C D).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (BetS E G A) by (conclude axiom_betweennesssymmetry).
assert (neq E A) by (forward_using lemma_betweennotequal).
assert (Out E A G) by (conclude lemma_ray4).
assert (~ Meet A B C D).

*****
H43 : Out E A G
H42 : neq E A
H40 : BetS E G A
H41 : BetS A G E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
intro.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (BetS E G A) by (conclude axiom_betweennesssymmetry).
assert (neq E A) by (forward_using lemma_betweennotequal).
assert (Out E A G) by (conclude lemma_ray4).
assert (~ Meet A B C D).
intro.

*****
H44 : Meet A B C D
H43 : Out E A G
H42 : neq E A
H40 : BetS E G A
H41 : BetS A G E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).
assert (BetS E G A) by (conclude axiom_betweennesssymmetry).
assert (neq E A) by (forward_using lemma_betweennotequal).
assert (Out E A G) by (conclude lemma_ray4).
assert (~ Meet A B C D).

*****
H44 : not (Meet A B C D)
H43 : Out E A G
H42 : neq E A
H40 : BetS E G A
H41 : BetS A G E
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Meet A B C D)
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
intro.
let Tf:=fresh in assert (Tf:exists G, (neq A B /\\ neq C D /\\ Col A B G /\\ Col C D G)) by (conclude_def Meet );destruct Tf as [G];spliter.
assert (Col B A G) by (forward_using lemma_collinearorder).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A G E) by (conclude lemma_collinear4).
assert (Col A E G) by (forward_using lemma_collinearorder).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Supp A E F F B) by (conclude_def Supp ).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Out F E E) by (conclude lemma_ray4).
assert (BetS D F C) by (conclude axiom_betweennesssymmetry).
assert (Supp D F E E C) by (conclude_def Supp ).
assert (CongA E F D D F E) by (conclude lemma_ABCequalsCBA).
assert (CongA A E F D F E) by (conclude lemma_equalanglestransitive).
assert (CongA F E B E F C) by (conclude lemma_supplements).
assert (CongA B E F C F E) by (conclude lemma_equalanglesflip).
assert (~ BetS A E G).
assert (~ Out E A G).
assert ((eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E)) by (conclude_def Col ).
assert (~ Meet A B C D).
by cases on (eq A E \\/ eq A G \\/ eq E G \\/ BetS E A G \\/ BetS A E G \\/ BetS A G E).

*****
H41 : not (Meet A B C D)
H40 : or (eq A E)\n (or (eq A G)\n (or (eq E G) (or (BetS E A G) (or (BetS A E G) (BetS A G E)))))
H39 : not (Out E A G)
H38 : not (BetS A E G)
H37 : CongA B E F C F E
H36 : CongA F E B E F C
H35 : CongA A E F D F E
H34 : CongA E F D D F E
H33 : Supp D F E E C
H32 : BetS D F C
H31 : Out F E E
H30 : eq E E
H29 : Supp A E F F B
H28 : Out E F F
H27 : eq F F
H26 : Col A E G
H25 : Col A G E
H24 : neq B A
H23 : Col B A E
H22 : Col B A G
H21 : Col C D G
H20 : Col A B G
H19 : neq C D
H18 : neq A B
G : Point
H17 : Meet A B C D
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).

*****
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (Col A B A) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).

*****
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (Col A B E) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).

*****
H20 : Col A B E
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (eq D D) by (conclude cn_equalityreflexive).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).
assert (eq D D) by (conclude cn_equalityreflexive).

*****
H21 : eq D D
H20 : Col A B E
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (Col C D D) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col C D D) by (conclude_def Col ).

*****
H22 : Col C D D
H21 : eq D D
H20 : Col A B E
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (Col C D F) by (conclude_def Col ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col C D D) by (conclude_def Col ).
assert (Col C D F) by (conclude_def Col ).

*****
H23 : Col C D F
H22 : Col C D D
H21 : eq D D
H20 : Col A B E
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (neq A E) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col C D D) by (conclude_def Col ).
assert (Col C D F) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).

*****
H24 : neq A E
H23 : Col C D F
H22 : Col C D D
H21 : eq D D
H20 : Col A B E
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (neq F D) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col C D D) by (conclude_def Col ).
assert (Col C D F) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq F D) by (forward_using lemma_betweennotequal).

*****
H25 : neq F D
H24 : neq A E
H23 : Col C D F
H22 : Col C D D
H21 : eq D D
H20 : Col A B E
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (BetS E H F) by (conclude lemma_collinearbetween).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col C D D) by (conclude_def Col ).
assert (Col C D F) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (BetS E H F) by (conclude lemma_collinearbetween).

*****
H26 : BetS E H F
H25 : neq F D
H24 : neq A E
H23 : Col C D F
H22 : Col C D D
H21 : eq D D
H20 : Col A B E
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (BetS F H E) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col C D D) by (conclude_def Col ).
assert (Col C D F) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (BetS E H F) by (conclude lemma_collinearbetween).
assert (BetS F H E) by (conclude axiom_betweennesssymmetry).

*****
H27 : BetS F H E
H26 : BetS E H F
H25 : neq F D
H24 : neq A E
H23 : Col C D F
H22 : Col C D D
H21 : eq D D
H20 : Col A B E
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
assert (Par A B C D) by (conclude_def Par ).
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col C D D) by (conclude_def Col ).
assert (Col C D F) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (BetS E H F) by (conclude lemma_collinearbetween).
assert (BetS F H E) by (conclude axiom_betweennesssymmetry).
assert (Par A B C D) by (conclude_def Par ).

*****
H28 : Par A B C D
H27 : BetS F H E
H26 : BetS E H F
H25 : neq F D
H24 : neq A E
H23 : Col C D F
H22 : Col C D D
H21 : eq D D
H20 : Col A B E
H19 : Col A B A
H18 : eq A A
H17 : not (Meet A B C D)
H16 : neq F E
H15 : neq E F
H14 : nCol E F D
H13 : CongA E F D A E F
H12 : neq F D
H11 : Col C F D
H10 : neq A E
H9 : Col A E B
H8 : nCol E F A
H7 : Col E F H
H6 : BetS A H D
H : Point
H4 : neq C D
H3 : neq A B
H2 : TS A E F D
H1 : CongA A E F E F D
H0 : BetS C F D
H5 : BetS A E B
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Par A B C D
+++++
close.
-----
Lemma proposition_27 : forall A B C D E F, BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D -> Par A B C D.
Proof.
intros.
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq C D) by (forward_using lemma_betweennotequal).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS A H D /\\ Col E F H /\\ nCol E F A)) by (conclude_def TS );destruct Tf as [H];spliter.
assert (Col A E B) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (Col C F D) by (conclude_def Col ).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (CongA E F D A E F) by (conclude lemma_equalanglessymmetric).
assert (nCol E F D) by (conclude_def CongA ).
assert (neq E F) by (forward_using lemma_angledistinct).
assert (neq F E) by (conclude lemma_inequalitysymmetric).
assert (~ Meet A B C D).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col A B A) by (conclude_def Col ).
assert (Col A B E) by (conclude_def Col ).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col C D D) by (conclude_def Col ).
assert (Col C D F) by (conclude_def Col ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq F D) by (forward_using lemma_betweennotequal).
assert (BetS E H F) by (conclude lemma_collinearbetween).
assert (BetS F H E) by (conclude axiom_betweennesssymmetry).
assert (Par A B C D) by (conclude_def Par ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
