Require Import ExtLib.Data.Fin.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Set Asymmetric Patterns.
-----
Fixpoint vector (T : Type) (n : nat) : Type :=\n  match n with\n    | 0 => unit\n    | S n => prod T (vector T n)\n  end.
-----
Fixpoint get {T} {n : nat} (f : fin n) : vector T n -> T :=\n  match f in fin n return vector T n -> T with\n    | F0 n => fun v : T * vector T n => fst v\n    | FS n f => fun v : T * vector T n => get f (snd v)\n  end.
-----
Fixpoint put {T} {n : nat} (f : fin n) (t : T) : vector T n -> vector T n :=\n  match f in fin n return vector T n -> vector T n with\n    | F0 _ => fun v => (t, snd v)\n    | FS _ f => fun v => (fst v, put f t (snd v))\n  end.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val,\n  get f (put f val v) = val.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.

*****

*****
forall (T : Type) (n : nat) (v : vector T n) (f : fin n) (val : T), eq (get f (put f val v)) val
+++++
Proof.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.

*****

*****
forall (T : Type) (n : nat) (v : vector T n) (f : fin n) (val : T), eq (get f (put f val v)) val
+++++
induction n.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.

*****
T : Type
*****
forall (v : vector T O) (f : fin O) (val : T), eq (get f (put f val v)) val
+++++
inversion f.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.

*****
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
forall (v : vector T (S n)) (f : fin (S n)) (val : T), eq (get f (put f val v)) val
+++++
remember (S n).
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.
remember (S n).

*****
Heqn0 : eq n0 (S n)
n0 : nat
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
forall (v : vector T n0) (f : fin n0) (val : T), eq (get f (put f val v)) val
+++++
destruct f.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.
remember (S n).
destruct f.

*****
v : vector T (S n0)
Heqn0 : eq (S n0) (S n)
n0 : nat
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
forall val : T, eq (get F0 (put F0 val v)) val
+++++
inversion Heqn0.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.

*****
H0 : eq n0 n
v : vector T (S n0)
Heqn0 : eq (S n0) (S n)
n0 : nat
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
forall val : T, eq (get F0 (put F0 val v)) val
+++++
subst.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
subst.

*****
Heqn0 : eq (S n) (S n)
v : vector T (S n)
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
forall val : T, eq (get F0 (put F0 val v)) val
+++++
intros.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
subst.
intros.

*****
val : T
Heqn0 : eq (S n) (S n)
v : vector T (S n)
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
eq (get F0 (put F0 val v)) val
+++++
reflexivity.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.
remember (S n).
destruct f.

*****
f : fin n0
v : vector T (S n0)
Heqn0 : eq (S n0) (S n)
n0 : nat
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
forall val : T, eq (get (FS f) (put (FS f) val v)) val
+++++
inversion Heqn0.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.

*****
H0 : eq n0 n
f : fin n0
v : vector T (S n0)
Heqn0 : eq (S n0) (S n)
n0 : nat
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
forall val : T, eq (get (FS f) (put (FS f) val v)) val
+++++
subst.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
subst.

*****
Heqn0 : eq (S n) (S n)
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
forall val : T, eq (get (FS f) (put (FS f) val v)) val
+++++
simpl.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
subst.
simpl.

*****
Heqn0 : eq (S n) (S n)
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f : fin n) (val : T),\neq (get f (put f val v)) val
n : nat
T : Type
*****
forall val : T, eq (get f (put f val (snd v))) val
+++++
auto.
-----
Theorem get_put_eq : forall {T n} (v : vector T n) (f : fin n) val, get f (put f val v) = val.
Proof.
induction n.

*****

*****

+++++
Qed.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val,\n  f <> f' ->\n  get f (put f' val v) = get f v.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.

*****

*****
forall (T : Type) (n : nat) (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')), eq (get f (put f' val v)) (get f v)
+++++
Proof.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.

*****

*****
forall (T : Type) (n : nat) (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')), eq (get f (put f' val v)) (get f v)
+++++
induction n.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.

*****
T : Type
*****
forall (v : vector T O) (f f' : fin O) (val : T) (_ : not (eq f f')), eq (get f (put f' val v)) (get f v)
+++++
inversion f.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.

*****
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (v : vector T (S n)) (f f' : fin (S n)) (val : T) (_ : not (eq f f')), eq (get f (put f' val v)) (get f v)
+++++
remember (S n).
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).

*****
Heqn0 : eq n0 (S n)
n0 : nat
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (v : vector T n0) (f f' : fin n0) (val : T) (_ : not (eq f f')), eq (get f (put f' val v)) (get f v)
+++++
destruct f.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.

*****
v : vector T (S n0)
Heqn0 : eq (S n0) (S n)
n0 : nat
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (f' : fin (S n0)) (val : T) (_ : not (eq F0 f')), eq (get F0 (put f' val v)) (get F0 v)
+++++
inversion Heqn0.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.

*****
H0 : eq n0 n
v : vector T (S n0)
Heqn0 : eq (S n0) (S n)
n0 : nat
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (f' : fin (S n0)) (val : T) (_ : not (eq F0 f')), eq (get F0 (put f' val v)) (get F0 v)
+++++
clear Heqn0.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.

*****
H0 : eq n0 n
v : vector T (S n0)
n0 : nat
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (f' : fin (S n0)) (val : T) (_ : not (eq F0 f')), eq (get F0 (put f' val v)) (get F0 v)
+++++
subst.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.

*****
v : vector T (S n)
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (f' : fin (S n)) (val : T) (_ : not (eq F0 f')), eq (get F0 (put f' val v)) (get F0 v)
+++++
intros.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.

*****
H : not (eq F0 f')
val : T
f' : fin (S n)
v : vector T (S n)
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get F0 (put f' val v)) (get F0 v)
+++++
destruct (fin_case f').
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').

*****
H0 : eq f' F0
H : not (eq F0 f')
val : T
f' : fin (S n)
v : vector T (S n)
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get F0 (put f' val v)) (get F0 v)
+++++
try congruence.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').

*****
H0 : ex (fun f'0 : fin n => eq f' (FS f'0))
H : not (eq F0 f')
val : T
f' : fin (S n)
v : vector T (S n)
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get F0 (put f' val v)) (get F0 v)
+++++
try congruence.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').
try congruence.

*****
H0 : ex (fun f'0 : fin n => eq f' (FS f'0))
H : not (eq F0 f')
val : T
f' : fin (S n)
v : vector T (S n)
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get F0 (put f' val v)) (get F0 v)
+++++
destruct H0.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').
try congruence.
destruct H0.

*****
H0 : eq f' (FS x)
x : fin n
H : not (eq F0 f')
val : T
f' : fin (S n)
v : vector T (S n)
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get F0 (put f' val v)) (get F0 v)
+++++
subst.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').
try congruence.
destruct H0.
subst.

*****
H : not (eq F0 (FS x))
x : fin n
val : T
v : vector T (S n)
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get F0 (put (FS x) val v)) (get F0 v)
+++++
auto.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.

*****
f : fin n0
v : vector T (S n0)
Heqn0 : eq (S n0) (S n)
n0 : nat
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (f' : fin (S n0)) (val : T) (_ : not (eq (FS f) f')), eq (get (FS f) (put f' val v)) (get (FS f) v)
+++++
inversion Heqn0.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.

*****
H0 : eq n0 n
f : fin n0
v : vector T (S n0)
Heqn0 : eq (S n0) (S n)
n0 : nat
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (f' : fin (S n0)) (val : T) (_ : not (eq (FS f) f')), eq (get (FS f) (put f' val v)) (get (FS f) v)
+++++
clear Heqn0.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.

*****
H0 : eq n0 n
f : fin n0
v : vector T (S n0)
n0 : nat
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (f' : fin (S n0)) (val : T) (_ : not (eq (FS f) f')), eq (get (FS f) (put f' val v)) (get (FS f) v)
+++++
subst.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.

*****
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
forall (f' : fin (S n)) (val : T) (_ : not (eq (FS f) f')), eq (get (FS f) (put f' val v)) (get (FS f) v)
+++++
intros.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.

*****
H : not (eq (FS f) f')
val : T
f' : fin (S n)
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get (FS f) (put f' val v)) (get (FS f) v)
+++++
destruct (fin_case f').
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').

*****
H0 : eq f' F0
H : not (eq (FS f) f')
val : T
f' : fin (S n)
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get (FS f) (put f' val v)) (get (FS f) v)
+++++
subst.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').
subst.

*****
H : not (eq (FS f) F0)
val : T
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get (FS f) (put F0 val v)) (get (FS f) v)
+++++
auto.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').

*****
H0 : ex (fun f'0 : fin n => eq f' (FS f'0))
H : not (eq (FS f) f')
val : T
f' : fin (S n)
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get (FS f) (put f' val v)) (get (FS f) v)
+++++
destruct H0.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').
destruct H0.

*****
H0 : eq f' (FS x)
x : fin n
H : not (eq (FS f) f')
val : T
f' : fin (S n)
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get (FS f) (put f' val v)) (get (FS f) v)
+++++
subst.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').
destruct H0.
subst.

*****
H : not (eq (FS f) (FS x))
x : fin n
val : T
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get (FS f) (put (FS x) val v)) (get (FS f) v)
+++++
simpl.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').
destruct H0.
subst.
simpl.

*****
H : not (eq (FS f) (FS x))
x : fin n
val : T
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
eq (get f (put x val (snd v))) (get f (snd v))
+++++
eapply IHn.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.
remember (S n).
destruct f.
inversion Heqn0.
clear Heqn0.
subst.
intros.
destruct (fin_case f').
destruct H0.
subst.
simpl.
eapply IHn.

*****
H : not (eq (FS f) (FS x))
x : fin n
val : T
v : vector T (S n)
f : fin n
IHn : forall (v : vector T n) (f f' : fin n) (val : T) (_ : not (eq f f')),\neq (get f (put f' val v)) (get f v)
n : nat
T : Type
*****
not (eq f x)
+++++
congruence.
-----
Theorem get_put_neq : forall {T n} (v : vector T n) (f f' : fin n) val, f <> f' -> get f (put f' val v) = get f v.
Proof.
induction n.

*****

*****

+++++
Qed.
-----
Definition vector_tl {T : Type} {n : nat} (v : vector T (S n)) : vector T n :=\n  snd v.
-----
Definition vector_hd {T : Type} {n : nat} (v : vector T (S n)) : T :=\n  fst v.
-----
