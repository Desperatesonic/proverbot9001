Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelcollinear1.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_tarskiparallelflip.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelcollinear2.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_parallelcollinear : \n   forall A B C c d, \n   TP A B c d -> Col c d C -> neq C d ->\n   TP A B C d.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C c d : Point) (_ : TP A B c d) (_ : Col c d C) (_ : neq C d), TP A B C d
+++++
Proof.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C c d : Point) (_ : TP A B c d) (_ : Col c d C) (_ : neq C d), TP A B C d
+++++
intros.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.

*****
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert ((neq A B /\ neq c d /\ ~ Meet A B c d /\ OS c d A B)).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).

*****
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
+++++
conclude_def TP .
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).

*****
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.

*****
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert ((eq c d \/ eq c C \/ eq d C \/ BetS d c C \/ BetS c d C \/ BetS c C d)).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).

*****
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
or (eq c d) (or (eq c C) (or (eq d C) (or (BetS d c C) (or (BetS c d C) (BetS c C d)))))
+++++
conclude_def Col .
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).

*****
H3 : or (eq c d)\n (or (eq c C)\n (or (eq d C) (or (BetS d c C) (or (BetS c d C) (BetS c C d)))))
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.

*****
H3 : or (eq c d)\n (or (eq c C)\n (or (eq d C) (or (BetS d c C) (or (BetS c d C) (BetS c C d)))))
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (TP A B C d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).

*****
H3 : or (eq c d)\n (or (eq c C)\n (or (eq d C) (or (BetS d c C) (or (BetS c d C) (BetS c C d)))))
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
by cases on (eq c d \/ eq c C \/ eq d C \/ BetS d c C \/ BetS c d C \/ BetS c C d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).

*****
H4 : eq c d
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (~ ~ TP A B C d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (~ ~ TP A B C d).

*****
H4 : eq c d
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (TP A B C d))
+++++
intro.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (~ ~ TP A B C d).
intro.

*****
H3 : not (TP A B C d)
H4 : eq c d
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (~ ~ TP A B C d).

*****
H3 : not (not (TP A B C d))
H4 : eq c d
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
close.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).

*****
H5 : eq c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (TP A B C d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (TP A B C d).

*****
H5 : eq c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
conclude cn_equalitysub.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (TP A B C d).

*****
H3 : TP A B C d
H5 : eq c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (TP A B C d).
idtac.

*****
H3 : TP A B C d
H5 : eq c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
close.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).

*****
H4 : eq d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (~ ~ TP A B C d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (~ ~ TP A B C d).

*****
H4 : eq d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (TP A B C d))
+++++
intro.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (~ ~ TP A B C d).
intro.

*****
H3 : not (TP A B C d)
H4 : eq d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq C d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (~ ~ TP A B C d).
intro.
assert (eq C d).

*****
H3 : not (TP A B C d)
H4 : eq d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq C d
+++++
conclude lemma_equalitysymmetric.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (~ ~ TP A B C d).
intro.
assert (eq C d).

*****
H5 : eq C d
H3 : not (TP A B C d)
H4 : eq d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (~ ~ TP A B C d).
intro.
assert (eq C d).
idtac.

*****
H5 : eq C d
H3 : not (TP A B C d)
H4 : eq d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (~ ~ TP A B C d).

*****
H3 : not (not (TP A B C d))
H4 : eq d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
close.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).

*****
H5 : BetS d c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (BetS C c d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C c d).

*****
H5 : BetS d c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS C c d
+++++
conclude axiom_betweennesssymmetry.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C c d).

*****
H3 : BetS C c d
H5 : BetS d c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C c d).
idtac.

*****
H3 : BetS C c d
H5 : BetS d c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (TP A B C d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C c d).
idtac.
assert (TP A B C d).

*****
H3 : BetS C c d
H5 : BetS d c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
conclude lemma_parallelcollinear1.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C c d).
idtac.
assert (TP A B C d).

*****
H4 : TP A B C d
H3 : BetS C c d
H5 : BetS d c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C c d).
idtac.
assert (TP A B C d).
idtac.

*****
H4 : TP A B C d
H3 : BetS C c d
H5 : BetS d c C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
close.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).

*****
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (BetS C d c).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).

*****
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS C d c
+++++
conclude axiom_betweennesssymmetry.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).

*****
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.

*****
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (TP A B d c).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).

*****
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B d c
+++++
forward_using lemma_tarskiparallelflip.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).

*****
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.

*****
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (TP A B C c).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).

*****
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C c
+++++
conclude lemma_parallelcollinear1.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).

*****
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.

*****
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (TP A B c C).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.
assert (TP A B c C).

*****
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B c C
+++++
forward_using lemma_tarskiparallelflip.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.
assert (TP A B c C).

*****
H7 : TP A B c C
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.
assert (TP A B c C).
idtac.

*****
H7 : TP A B c C
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (TP A B d C).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.
assert (TP A B c C).
idtac.
assert (TP A B d C).

*****
H7 : TP A B c C
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B d C
+++++
conclude lemma_parallelcollinear2.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.
assert (TP A B c C).
idtac.
assert (TP A B d C).

*****
H8 : TP A B d C
H7 : TP A B c C
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.
assert (TP A B c C).
idtac.
assert (TP A B d C).
idtac.

*****
H8 : TP A B d C
H7 : TP A B c C
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (TP A B C d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.
assert (TP A B c C).
idtac.
assert (TP A B d C).
idtac.
assert (TP A B C d).

*****
H8 : TP A B d C
H7 : TP A B c C
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
forward_using lemma_tarskiparallelflip.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.
assert (TP A B c C).
idtac.
assert (TP A B d C).
idtac.
assert (TP A B C d).

*****
H9 : TP A B C d
H8 : TP A B d C
H7 : TP A B c C
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (BetS C d c).
idtac.
assert (TP A B d c).
idtac.
assert (TP A B C c).
idtac.
assert (TP A B c C).
idtac.
assert (TP A B d C).
idtac.
assert (TP A B C d).
idtac.

*****
H9 : TP A B C d
H8 : TP A B d C
H7 : TP A B c C
H6 : TP A B C c
H5 : TP A B d c
H3 : BetS C d c
H4 : BetS c d C
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
close.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).

*****
H4 : BetS c C d
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (TP A B C d).
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (TP A B C d).

*****
H4 : BetS c C d
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
conclude lemma_parallelcollinear2.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (TP A B C d).

*****
H3 : TP A B C d
H4 : BetS c C d
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
idtac.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).
by cases on (eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d).
assert (TP A B C d).
idtac.

*****
H3 : TP A B C d
H4 : BetS c C d
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
close.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).
idtac.
assert ((eq c d \\/ eq c C \\/ eq d C \\/ BetS d c C \\/ BetS c d C \\/ BetS c C d)).
idtac.
assert (TP A B C d).

*****
H4 : TP A B C d
H3 : or (eq c d)\n (or (eq c C)\n (or (eq d C) (or (BetS d c C) (or (BetS c d C) (BetS c C d)))))
H2 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H1 : neq C d
H0 : Col c d C
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
close.
-----
Lemma lemma_parallelcollinear : forall A B C c d, TP A B c d -> Col c d C -> neq C d -> TP A B C d.
Proof.
intros.
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
