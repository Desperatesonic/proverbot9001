Require Export GeoCoq.Tarski_dev.Annexes.midpoint_theorems.
-----
Require Export GeoCoq.Highschool.circumcenter.
-----
Require Export GeoCoq.Highschool.orthocenter.
-----
Require Export GeoCoq.Highschool.midpoint_thales.
-----
Require Export GeoCoq.Highschool.concyclic.
-----
Require Export GeoCoq.Highschool.gravityCenter.
-----
Section Euler_line.
-----
Context `{TE:Tarski_euclidean}.
-----
Lemma concyclic_not_col_or_eq_aux :\n  forall A B C D, Concyclic A B C D -> A = B \/ A = C \/ B = C \/ ~ Col A B C.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
Proof.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
intros A B C D HC.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.

*****
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
elim (eq_dec_points A B).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).

*****
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
intro HAB.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.

*****
HAB : eq A B
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).

*****
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A B), or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
intro HAB.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.

*****
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.

*****
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
elim (eq_dec_points A C).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).

*****
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A C, or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
intro HAC.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.

*****
HAC : eq A C
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).

*****
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A C), or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
intro HAC.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.

*****
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.

*****
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
elim (eq_dec_points B C).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).

*****
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq B C, or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
intro HBC.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : eq B C
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
Col5.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).

*****
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq B C), or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
intro HBC.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
Col5.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (or (eq A C) (or (eq B C) (not (Col A B C))))
+++++
right.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A C) (or (eq B C) (not (Col A B C)))
+++++
right.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq B C) (not (Col A B C))
+++++
right.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.

*****
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
intro HCol.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.

*****
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HC : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].

*****
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (H := midpoint_existence A B).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).

*****
H : ex (fun X : Tpoint => Midpoint X A B)
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct H as [M1 HMid1].
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].

*****
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HOM1 : O <> M1).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).

*****
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O M1)
+++++
intro.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.

*****
H : eq O M1
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.

*****
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (H := l7_20 O A C).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).

*****
H : forall (_ : Col A O C) (_ : Cong O A O C), or (eq A C) (Midpoint O A C)
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.

*****
H : forall (_ : Col A O C) (_ : Cong O A O C), or (eq A C) (Midpoint O A C)
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A C, False
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.

*****
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A C, False
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.
try intro H.

*****
H : eq A C
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.

*****
H : forall (_ : Col A O C) (_ : Cong O A O C), or (eq A C) (Midpoint O A C)
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Midpoint O A C, False
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.

*****
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Midpoint O A C, False
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.
try intro H.

*****
H : Midpoint O A C
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.
try intro H.
Cong.

*****
H : Midpoint O A C
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
try (apply HBC; apply symmetric_point_uniqueness with A O; Col).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.

*****
H : forall (_ : Col A O C) (_ : Cong O A O C), or (eq A C) (Midpoint O A C)
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O C
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.

*****
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O C
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.
try intro H.

*****
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O C
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.
try intro H.
Cong.

*****
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O C
+++++
try (apply HBC; apply symmetric_point_uniqueness with A O; Col).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.
try intro H.
Cong.
try (apply HBC; apply symmetric_point_uniqueness with A O; Col).

*****
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O C
+++++
assert_cols.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.
try intro H.
Cong.
try (apply HBC; apply symmetric_point_uniqueness with A O; Col).
assert_cols.

*****
H : Col O A B
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O C
+++++
ColR.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.

*****
H : forall (_ : Col A O C) (_ : Cong O A O C), or (eq A C) (Midpoint O A C)
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O C
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.

*****
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O C
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
intro.
treat_equalities.
assert (H := l7_20 O A C).
elim H.
clear H.
try intro H.

*****
HMid1 : Midpoint O A B
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O C
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).

*****
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (H := midpoint_existence A C).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).

*****
H : ex (fun X : Tpoint => Midpoint X A C)
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct H as [M2 HMid2].
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].

*****
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HOM2 : O <> M2).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).

*****
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O M2)
+++++
intro.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.

*****
H : eq O M2
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.

*****
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (H := l7_20 O A B).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, False
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.

*****
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, False
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.

*****
H : eq A B
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Midpoint O A B, False
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.

*****
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Midpoint O A B, False
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.

*****
H : Midpoint O A B
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.
Cong.

*****
H : Midpoint O A B
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
try (apply HBC; apply symmetric_point_uniqueness with A O; Col).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.

*****
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.

*****
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.
Cong.

*****
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
try (apply HBC; apply symmetric_point_uniqueness with A O; Col).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.
Cong.
try (apply HBC; apply symmetric_point_uniqueness with A O; Col).

*****
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
assert_cols.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.
Cong.
try (apply HBC; apply symmetric_point_uniqueness with A O; Col).
assert_cols.

*****
H0 : Col M1 A B
H : Col O A C
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
ColR.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.

*****
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
intro.
treat_equalities.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.

*****
HMid2 : Midpoint O A C
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).

*****
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HM1M2 : M1 <> M2).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).

*****
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq M1 M2)
+++++
intro.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
intro.

*****
H : eq M1 M2
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
intro.
treat_equalities.

*****
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A C
M1 : Tpoint
HBC : not (eq C C)
HAB : not (eq A C)
HCong3 : Cong O A O D
HCong1 : Cong O A O C
O : Tpoint
HCop : Coplanar A C C D
A,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HPerp1 : Perp_bisect O M1 A B).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect O M1 A B
+++++
apply cong_cop_perp_bisect.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O M1)
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.
spliter.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O M1)
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.
spliter.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar O M1 A B
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.
spliter.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar O M1 A B
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.
spliter.
Cong.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar O M1 A B
+++++
Cop.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A O B O
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.
spliter.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A O B O
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A M1 B M1
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
apply cong_cop_perp_bisect.
spliter.

*****
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A M1 B M1
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HPerp2 : Perp_bisect O M2 A C).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect O M2 A C
+++++
apply cong_cop_perp_bisect.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O M2)
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.
spliter.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O M2)
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.
spliter.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar O M2 A C
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.
spliter.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar O M2 A C
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.
spliter.
Cong.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar O M2 A C
+++++
Cop.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A O C O
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.
spliter.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A O C O
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A M2 C M2
+++++
spliter.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
apply cong_cop_perp_bisect.
spliter.

*****
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A M2 C M2
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).

*****
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.

*****
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HOM1M2 : ~ Col O M1 M2).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).

*****
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col O M1 M2)
+++++
intro HOM1M2.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.

*****
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (H := l7_20 O A B).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, False
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.

*****
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, False
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.

*****
H : eq A B
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Midpoint O A B, False
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.

*****
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Midpoint O A B, False
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.

*****
H : Midpoint O A B
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.
Cong.

*****
H : Midpoint O A B
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
try (apply HOM1; apply l7_17 with A B; Col).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.

*****
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.

*****
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.
Cong.

*****
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
try (apply HOM1; apply l7_17 with A B; Col).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.
Cong.
try (apply HOM1; apply l7_17 with A B; Col).

*****
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
assert_diffs.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.
Cong.
try (apply HOM1; apply l7_17 with A B; Col).
assert_diffs.

*****
H3 : not (eq M1 B)
H2 : not (eq M1 A)
H1 : not (eq M2 C)
H0 : not (eq M2 A)
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
assert_cols.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.
Cong.
try (apply HOM1; apply l7_17 with A B; Col).
assert_diffs.
assert_cols.

*****
H4 : Col M1 A B
H : Col M2 A C
H3 : not (eq M1 B)
H2 : not (eq M1 A)
H1 : not (eq M2 C)
H0 : not (eq M2 A)
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O B
+++++
ColR.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.

*****
H : forall (_ : Col A O B) (_ : Cong O A O B), or (eq A B) (Midpoint O A B)
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
clear H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.

*****
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
try intro H.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
intro HOM1M2.
assert (H := l7_20 O A B).
elim H.
clear H.
try intro H.

*****
HOM1M2 : Col O M1 M2
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
Cong.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HPar_strict : Par_strict O M1 O M2).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict O M1 O M2
+++++
apply par_not_col_strict with M2.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par O M1 O M2
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par O M1 O M2
+++++
apply l12_9 with A B.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B O O
+++++
Cop.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B O M2
+++++
Cop...
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
Cop...

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B O M2
+++++
apply coplanar_perm_16, col_cop__cop with C.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
Cop...
apply coplanar_perm_16, col_cop__cop with C.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar O M2 A C
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
Cop...
apply coplanar_perm_16, col_cop__cop with C.
Col.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar O M2 A C
+++++
Cop.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
Cop...
apply coplanar_perm_16, col_cop__cop with C.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
Cop...
apply coplanar_perm_16, col_cop__cop with C.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C B
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B M1 O
+++++
Cop...
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B M1 M2
+++++
Cop...
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp O M1 A B
+++++
idtac.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
idtac.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp O M1 A B
+++++
apply perp_bisect_perp.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
idtac.
apply perp_bisect_perp.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect O M1 A B
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp O M2 A B
+++++
idtac.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
idtac.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp O M2 A B
+++++
apply perp_col0 with A C.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
idtac.
apply perp_col0 with A C.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A C O M2
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
idtac.
apply perp_col0 with A C.
Col.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A C O M2
+++++
perm_apply perp_bisect_perp.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
idtac.
apply perp_col0 with A C.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
idtac.
apply perp_col0 with A C.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C A
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.
Col.
apply l12_9 with A B.
idtac.
apply perp_col0 with A C.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C B
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O M2 M2
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
apply par_not_col_strict with M2.

*****
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col O M1 M2)
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).

*****
HPar_strict : Par_strict O M1 O M2
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (H := not_par_strict_id O M1 M2).
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).
intro HAB.
Col.
elim (eq_dec_points A C).
intro HAC.
Col.
elim (eq_dec_points B C).
intro HBC.
Col5.
right.
right.
right.
intro HCol.
destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].
assert (H := midpoint_existence A B).
destruct H as [M1 HMid1].
assert (HOM1 : O <> M1).
assert (H := midpoint_existence A C).
destruct H as [M2 HMid2].
assert (HOM2 : O <> M2).
assert (HM1M2 : M1 <> M2).
idtac.
assert (HPerp1 : Perp_bisect O M1 A B).
idtac.
assert (HPerp2 : Perp_bisect O M2 A C).
idtac.
assert (HOM1M2 : ~ Col O M1 M2).
assert (HPar_strict : Par_strict O M1 O M2).
assert (H := not_par_strict_id O M1 M2).

*****
H : not (Par_strict O M1 O M2)
HPar_strict : Par_strict O M1 O M2
HOM1M2 : not (Col O M1 M2)
HPerp2 : Perp_bisect O M2 A C
HPerp1 : Perp_bisect O M1 A B
HM1M2 : not (eq M1 M2)
HOM2 : not (eq O M2)
HMid2 : Midpoint M2 A C
M2 : Tpoint
HOM1 : not (eq O M1)
HMid1 : Midpoint M1 A B
M1 : Tpoint
HCol : Col A B C
HBC : not (eq B C)
HAC : not (eq A C)
HAB : not (eq A B)
HCong3 : Cong O A O D
HCong2 : Cong O A O C
HCong1 : Cong O A O B
O : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.
Proof.
intros A B C D HC.
elim (eq_dec_points A B).

*****

*****

+++++
Qed.
-----
Lemma concyclic_not_col_or_eq :\n  forall A B C A', Concyclic A B C A' ->\n  A'=C \/ A'=B \/ A=B \/ A=C \/ A=A' \/ (~ Col A B A' /\ ~ Col A C A').
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C A' : Tpoint) (_ : Concyclic A B C A'), or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
Proof.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C A' : Tpoint) (_ : Concyclic A B C A'), or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intros A B C A' H.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.

*****
H : Concyclic A B C A'
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
assert (H' := H).
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).

*****
H,H' : Concyclic A B C A'
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
apply concyclic_perm_1 in H.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.

*****
H' : Concyclic A B C A'
H : Concyclic A B A' C
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
apply concyclic_perm_3 in H'.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.

*****
H' : Concyclic A C A' B
H : Concyclic A B A' C
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
apply concyclic_not_col_or_eq_aux in H.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.

*****
H' : Concyclic A C A' B
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
apply concyclic_not_col_or_eq_aux in H'.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.

*****
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
elim (eq_dec_points A' C).
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).

*****
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A' C, or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.

*****
H0 : eq A' C
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).

*****
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A' C), or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.

*****
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.

*****
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
elim (eq_dec_points A' B).
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).

*****
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A' B, or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.

*****
H1 : eq A' B
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).

*****
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A' B), or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.

*****
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.

*****
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
elim (eq_dec_points A B).
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).

*****
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.

*****
H2 : eq A B
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).

*****
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A B), or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.

*****
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.

*****
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
elim (eq_dec_points A C).
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).

*****
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A C, or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.

*****
H3 : eq A C
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).

*****
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A C), or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.

*****
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.

*****
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
elim (eq_dec_points A A').
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.
elim (eq_dec_points A A').

*****
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A A', or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.
elim (eq_dec_points A A').
intro.

*****
H4 : eq A A'
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.
elim (eq_dec_points A A').

*****
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A A'), or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
intro.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.
elim (eq_dec_points A A').
intro.

*****
H4 : not (eq A A')
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
try tauto.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.
elim (eq_dec_points A A').
intro.
try tauto.

*****
H4 : not (eq A A')
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
H : or (eq A B) (or (eq A A') (or (eq B A') (not (Col A B A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
do 3 (elim H; clear H; intro H; try tauto).
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.
elim (eq_dec_points A A').
intro.
try tauto.
do 3 (elim H; clear H; intro H; try tauto).

*****
H : eq B A'
H4 : not (eq A A')
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
Col.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.
elim (eq_dec_points A A').
intro.
try tauto.
do 3 (elim H; clear H; intro H; try tauto).

*****
H : not (Col A B A')
H4 : not (eq A A')
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
Col.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.
elim (eq_dec_points A A').
intro.
try tauto.
do 3 (elim H; clear H; intro H; try tauto).
Col.

*****
H : not (Col A B A')
H4 : not (eq A A')
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
H' : or (eq A C) (or (eq A A') (or (eq C A') (not (Col A C A'))))
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
do 3 (elim H'; clear H'; intro H'; try tauto).
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).
intro.
try tauto.
elim (eq_dec_points A' B).
intro.
try tauto.
elim (eq_dec_points A B).
intro.
try tauto.
elim (eq_dec_points A C).
intro.
try tauto.
elim (eq_dec_points A A').
intro.
try tauto.
do 3 (elim H; clear H; intro H; try tauto).
Col.
do 3 (elim H'; clear H'; intro H'; try tauto).

*****
H' : eq C A'
H : not (Col A B A')
H4 : not (eq A A')
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq A' B)
H0 : not (eq A' C)
A,B,C,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq A' C) (or (eq A' B) (or (eq A B) (or (eq A C) (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
+++++
Col.
-----
Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').
Proof.
intros A B C A' H.
assert (H' := H).
apply concyclic_perm_1 in H.
apply concyclic_perm_3 in H'.
apply concyclic_not_col_or_eq_aux in H.
apply concyclic_not_col_or_eq_aux in H'.
elim (eq_dec_points A' C).

*****

*****

+++++
Qed.
-----
Lemma Euler_line_special_case :\n  forall A B C G H O,\n  Per A B C ->\n  is_gravity_center G A B C ->\n  is_orthocenter H A B C ->\n  is_circumcenter O A B C ->\n  Col G H O.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G H O : Tpoint) (_ : Per A B C) (_ : is_gravity_center G A B C) (_ : is_orthocenter H A B C) (_ : is_circumcenter O A B C), Col G H O
+++++
Proof.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G H O : Tpoint) (_ : Per A B C) (_ : is_gravity_center G A B C) (_ : is_orthocenter H A B C) (_ : is_circumcenter O A B C), Col G H O
+++++
intros.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (H=B).
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
apply orthocenter_per with A C.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
apply orthocenter_per with A C.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
finish.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
apply orthocenter_per with A C.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter H A B C
+++++
finish.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).

*****
H4 : eq H B
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
subst.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B O
+++++
assert (Midpoint O A C).
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint O A C
+++++
apply circumcenter_per with B.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
finish.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.
finish.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
unfold is_orthocenter in *.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.
finish.
unfold is_orthocenter in *.

*****
H3 : is_circumcenter O A B C
H2 : and (not (Col A B C))\n (and (Perp A B B C) (and (Perp B B A C) (Perp C B A B)))
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
spliter.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.
finish.
unfold is_orthocenter in *.
spliter.

*****
H3 : is_circumcenter O A B C
H5 : Perp C B A B
H4 : Perp B B A C
H2 : Perp A B B C
H : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assert_diffs.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.
finish.
unfold is_orthocenter in *.
spliter.
assert_diffs.

*****
H6 : not (eq B B)
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : is_circumcenter O A B C
H5 : Perp C B A B
H4 : Perp B B A C
H : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
finish.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
finish.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.
finish.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
unfold is_orthocenter in *.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.
finish.
unfold is_orthocenter in *.

*****
H3 : is_circumcenter O A B C
H2 : and (not (Col A B C))\n (and (Perp A B B C) (and (Perp B B A C) (Perp C B A B)))
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
spliter.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.
finish.
unfold is_orthocenter in *.
spliter.

*****
H3 : is_circumcenter O A B C
H5 : Perp C B A B
H4 : Perp B B A C
H2 : Perp A B B C
H : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
assert_diffs.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.
finish.
unfold is_orthocenter in *.
spliter.
assert_diffs.

*****
H6 : not (eq B B)
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : is_circumcenter O A B C
H5 : Perp C B A B
H4 : Perp B B A C
H : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
finish.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
finish.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
apply circumcenter_per with B.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter O A B C
+++++
finish.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).

*****
H : Midpoint O A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B O
+++++
assert (is_gravity_center G A C B).
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
assert (is_gravity_center G A C B).

*****
H : Midpoint O A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A C B
+++++
apply is_gravity_center_perm in H1.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
assert (is_gravity_center G A C B).
apply is_gravity_center_perm in H1.

*****
H : Midpoint O A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : and (is_gravity_center G A B C)\n (and (is_gravity_center G A C B)\n (and (is_gravity_center G B A C)\n (and (is_gravity_center G B C A)\n (and (is_gravity_center G C A B) (is_gravity_center G C B A)))))
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A C B
+++++
intuition.
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).
subst.
assert (Midpoint O A C).
assert (is_gravity_center G A C B).

*****
H4 : is_gravity_center G A C B
H : Midpoint O A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter B A B C
H1 : is_gravity_center G A B C
H0 : Per A B C
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B O
+++++
perm_apply (is_gravity_center_col A C B G O).
-----
Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
assert (H=B).

*****

*****

+++++
Qed.
-----
Lemma gravity_center_change_triangle:\n forall A B C G I B' C',\n is_gravity_center G A B C ->\n Midpoint I B C ->\n Midpoint I B' C' ->\n ~ Col A B' C' ->\n is_gravity_center G A B' C'.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G I B' C' : Tpoint) (_ : is_gravity_center G A B C) (_ : Midpoint I B C) (_ : Midpoint I B' C') (_ : not (Col A B' C')), is_gravity_center G A B' C'
+++++
Proof.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G I B' C' : Tpoint) (_ : is_gravity_center G A B C) (_ : Midpoint I B C) (_ : Midpoint I B' C') (_ : not (Col A B' C')), is_gravity_center G A B' C'
+++++
intros.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.

*****
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A B' C'
+++++
Name G' the midpoint of A and G.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.

*****
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A B' C'
+++++
assert (Midpoint G I G').
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').

*****
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G I G'
+++++
apply (is_gravity_center_third A B C G G' I).
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').
apply (is_gravity_center_third A B C G G' I).

*****
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A B C
+++++
finish.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').
apply (is_gravity_center_third A B C G G' I).

*****
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G' A G
+++++
finish.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').
apply (is_gravity_center_third A B C G G' I).

*****
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint I B C
+++++
finish.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').

*****
H3 : Midpoint G I G'
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A B' C'
+++++
idtac.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').
idtac.

*****
H3 : Midpoint G I G'
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A B' C'
+++++
apply (is_gravity_center_third_reci A B' C' G I G').
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').
idtac.
apply (is_gravity_center_third_reci A B' C' G I G').

*****
H3 : Midpoint G I G'
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint I B' C'
+++++
finish.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').
idtac.
apply (is_gravity_center_third_reci A B' C' G I G').

*****
H3 : Midpoint G I G'
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G' A G
+++++
finish.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').
idtac.
apply (is_gravity_center_third_reci A B' C' G I G').

*****
H3 : Midpoint G I G'
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G I G'
+++++
finish.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').
idtac.
apply (is_gravity_center_third_reci A B' C' G I G').

*****
H3 : Midpoint G I G'
H4 : Midpoint G' A G
G' : Tpoint
H2 : not (Col A B' C')
H1 : Midpoint I B' C'
H0 : Midpoint I B C
H : is_gravity_center G A B C
A,B,C,G,I,B',C' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B' C')
+++++
finish.
-----
Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.
Proof.
intros.
Name G' the midpoint of A and G.
assert (Midpoint G I G').

*****

*****

+++++
Qed.
-----
Hint Resolve\n     is_gravity_center_perm_1\n     is_gravity_center_perm_2\n     is_gravity_center_perm_3\n     is_gravity_center_perm_4\n     is_gravity_center_perm_5 : gravitycenter.
-----
Hint Resolve\n     is_orthocenter_perm_1\n     is_orthocenter_perm_2\n     is_orthocenter_perm_3\n     is_orthocenter_perm_4\n     is_orthocenter_perm_5 : Orthocenter.
-----
Hint Resolve\n     is_circumcenter_perm_1\n     is_circumcenter_perm_2\n     is_circumcenter_perm_3\n     is_circumcenter_perm_4\n     is_circumcenter_perm_5 : Circumcenter.
-----
Lemma Euler_line :\n forall A B C G H O,\n  ~ Col A B C ->\n  is_gravity_center G A B C ->\n  is_orthocenter H A B C ->\n  is_circumcenter O A B C ->\n  Col G H O.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G H O : Tpoint) (_ : not (Col A B C)) (_ : is_gravity_center G A B C) (_ : is_orthocenter H A B C) (_ : is_circumcenter O A B C), Col G H O
+++++
Proof.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G H O : Tpoint) (_ : not (Col A B C)) (_ : is_gravity_center G A B C) (_ : is_orthocenter H A B C) (_ : is_circumcenter O A B C), Col G H O
+++++
intros.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
elim (cong_dec A B A C).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Cong A B A C, Col G H O
+++++
intro.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.

*****
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
Name A' the midpoint of B and C.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.

*****
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
Name B' the midpoint of A and C.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.

*****
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
Name C' the midpoint of A and B.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.

*****
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Perp_bisect A A' B C).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).

*****
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect A A' B C
+++++
apply cong_cop_perp_bisect.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.

*****
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A A')
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H15 : not (eq A' C)
H14 : not (eq A' B)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A A')
+++++
Cong.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.
Cong.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H15 : not (eq A' C)
H14 : not (eq A' B)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A A')
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.
Cong.
Cop.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H15 : not (eq A' C)
H14 : not (eq A' B)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A A')
+++++
intro.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.
Cong.
Cop.
intro.

*****
H5 : eq A A'
H17 : not (eq C' B)
H16 : not (eq C' A)
H15 : not (eq A' C)
H14 : not (eq A' B)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.
Cong.
Cop.
intro.
treat_equalities.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H0.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.
Cong.
Cop.
intro.
treat_equalities.
apply H0.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.

*****
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H15 : not (eq A' C)
H14 : not (eq A' B)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
Cong.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.

*****
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A A' B C
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H15 : not (eq A' C)
H14 : not (eq A' B)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A A' B C
+++++
Cong.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.
Cong.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H15 : not (eq A' C)
H14 : not (eq A' B)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A A' B C
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.

*****
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B A C A
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H15 : not (eq A' C)
H14 : not (eq A' B)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B A C A
+++++
Cong.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.

*****
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B A' C A'
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
apply cong_cop_perp_bisect.
assert_diffs.

*****
H17 : not (eq C' B)
H16 : not (eq C' A)
H15 : not (eq A' C)
H14 : not (eq A' B)
H12 : not (eq B' C)
H9 : not (eq B' A)
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B A' C A'
+++++
Cong.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).

*****
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.

*****
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Col G A' A).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).

*****
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G A' A
+++++
apply is_gravity_center_perm in H1.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
apply is_gravity_center_perm in H1.

*****
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : and (is_gravity_center G A B C)\n (and (is_gravity_center G A C B)\n (and (is_gravity_center G B A C)\n (and (is_gravity_center G B C A)\n (and (is_gravity_center G C A B) (is_gravity_center G C B A)))))
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G A' A
+++++
apply is_gravity_center_col with B C.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
apply is_gravity_center_perm in H1.
apply is_gravity_center_col with B C.

*****
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : and (is_gravity_center G A B C)\n (and (is_gravity_center G A C B)\n (and (is_gravity_center G B A C)\n (and (is_gravity_center G B C A)\n (and (is_gravity_center G C A B) (is_gravity_center G C B A)))))
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G B C A
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
apply is_gravity_center_perm in H1.
apply is_gravity_center_col with B C.
spliter.

*****
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H13 : is_gravity_center G C B A
H12 : is_gravity_center G C A B
H11 : is_gravity_center G B C A
H10 : is_gravity_center G B A C
H9 : is_gravity_center G A C B
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G B C A
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
apply is_gravity_center_perm in H1.
apply is_gravity_center_col with B C.

*****
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : and (is_gravity_center G A B C)\n (and (is_gravity_center G A C B)\n (and (is_gravity_center G B A C)\n (and (is_gravity_center G B C A)\n (and (is_gravity_center G C A B) (is_gravity_center G C B A)))))
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint A' B C
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
apply is_gravity_center_perm in H1.
apply is_gravity_center_col with B C.
spliter.

*****
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H13 : is_gravity_center G C B A
H12 : is_gravity_center G C A B
H11 : is_gravity_center G B C A
H10 : is_gravity_center G B A C
H9 : is_gravity_center G A C B
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint A' B C
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).

*****
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.

*****
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
unfold is_orthocenter in *.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.

*****
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H2 : and (not (Col A B C))\n (and (Perp A H B C) (and (Perp B H A C) (Perp C H A B)))
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.

*****
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
elim (eq_dec_points O G).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).

*****
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq O G, Col G H O
+++++
intro.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.

*****
H13 : eq O G
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
treat_equalities.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.

*****
H9 : Col O A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center O A B C
H0 : not (Col A B C)
A,B,C,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O H O
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).

*****
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq O G), Col G H O
+++++
intro.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.

*****
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
treat_equalities.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.

*****
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.

*****
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
elim (eq_dec_points O H).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).

*****
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq O H, Col G H O
+++++
intro.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.

*****
H14 : eq O H
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
treat_equalities.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.

*****
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H10 : Perp A O B C
H11 : Perp B O A C
H12 : Perp C O A B
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G O O
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).

*****
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq O H), Col G H O
+++++
intro.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
treat_equalities.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
elim (eq_dec_points O A').
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').

*****
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq O A', Col G H O
+++++
intro.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.

*****
H15 : eq O A'
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
treat_equalities.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Col A H O).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).

*****
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A H O
+++++
apply cop_perp2__col with B C.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
apply cop_perp2__col with B C.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C H O
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
apply cop_perp2__col with B C.
Col.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C H O
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
apply cop_perp2__col with B C.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A H B C
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
apply cop_perp2__col with B C.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A O B C
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
apply cop_perp2__col with B C.
Col.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A O B C
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
apply cop_perp2__col with B C.
Col.
Cop.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A O B C
+++++
apply perp_bisect_perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
apply cop_perp2__col with B C.
Col.
Cop.
apply perp_bisect_perp.

*****
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect A O B C
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
apply col_permutation_1.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O G H
+++++
apply cop_perp2__col with B C.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C G H
+++++
apply coplanar_trans_1 with A.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply coplanar_trans_1 with A.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply coplanar_trans_1 with A.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C G
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply coplanar_trans_1 with A.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C H
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp O G B C
+++++
apply perp_sym.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B C O G
+++++
apply perp_col0 with A O.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A O.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A O B C
+++++
try apply perp_bisect_perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A O.
try apply perp_bisect_perp.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect A O B C
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A O.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O G)
+++++
try apply perp_bisect_perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A O.
try apply perp_bisect_perp.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O G)
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A O.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O O
+++++
try apply perp_bisect_perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A O.
try apply perp_bisect_perp.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O O
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A O.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O G
+++++
try apply perp_bisect_perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A O.
try apply perp_bisect_perp.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O G
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp O H B C
+++++
apply perp_sym.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B C O H
+++++
apply perp_col0 with A H.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A H.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A H B C
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A H.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O H)
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A H.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A H O
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A H O).
idtac.
apply col_permutation_1.
apply cop_perp2__col with B C.
apply perp_sym.
apply perp_col0 with A H.

*****
H2 : Col A H O
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A O B C
H9 : Col G O A
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint O B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A H H
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').

*****
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq O A'), Col G H O
+++++
intro.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.

*****
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
treat_equalities.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.

*****
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Col A A' H).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).

*****
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A A' H
+++++
apply cop_perp2__col with B C.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
apply cop_perp2__col with B C.

*****
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C A' H
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
apply cop_perp2__col with B C.

*****
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A A' B C
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
apply cop_perp2__col with B C.
Cop.

*****
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A A' B C
+++++
apply perp_bisect_perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
apply cop_perp2__col with B C.
Cop.
apply perp_bisect_perp.

*****
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect A A' B C
+++++
auto.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
apply cop_perp2__col with B C.

*****
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A H B C
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).

*****
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.

*****
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Perp_bisect O A' B C).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).

*****
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect O A' B C
+++++
apply circumcenter_perp with A.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.

*****
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.
assert_diffs.

*****
H28 : not (eq A H)
H27 : not (eq B H)
H26 : not (eq C H)
H25 : not (eq C' B)
H24 : not (eq C' A)
H23 : not (eq A' C)
H21 : not (eq A' B)
H18 : not (eq B' C)
H17 : not (eq B' A)
H22 : not (eq A C)
H19 : not (eq B C)
H20 : not (eq A B)
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.

*****
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.
assert_diffs.

*****
H28 : not (eq A H)
H27 : not (eq B H)
H26 : not (eq C H)
H25 : not (eq C' B)
H24 : not (eq C' A)
H23 : not (eq A' C)
H21 : not (eq A' B)
H18 : not (eq B' C)
H17 : not (eq B' A)
H22 : not (eq A C)
H19 : not (eq B C)
H20 : not (eq A B)
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.

*****
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.
assert_diffs.

*****
H28 : not (eq A H)
H27 : not (eq B H)
H26 : not (eq C H)
H25 : not (eq C' B)
H24 : not (eq C' A)
H23 : not (eq A' C)
H21 : not (eq A' B)
H18 : not (eq B' C)
H17 : not (eq B' A)
H22 : not (eq A C)
H19 : not (eq B C)
H20 : not (eq A B)
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.

*****
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O A')
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.
assert_diffs.

*****
H28 : not (eq A H)
H27 : not (eq B H)
H26 : not (eq C H)
H25 : not (eq C' B)
H24 : not (eq C' A)
H23 : not (eq A' C)
H21 : not (eq A' B)
H18 : not (eq B' C)
H17 : not (eq B' A)
H22 : not (eq A C)
H19 : not (eq B C)
H20 : not (eq A B)
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O A')
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.

*****
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter O A B C
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.
assert_diffs.

*****
H28 : not (eq A H)
H27 : not (eq B H)
H26 : not (eq C H)
H25 : not (eq C' B)
H24 : not (eq C' A)
H23 : not (eq A' C)
H21 : not (eq A' B)
H18 : not (eq B' C)
H17 : not (eq B' A)
H22 : not (eq A C)
H19 : not (eq B C)
H20 : not (eq A B)
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter O A B C
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.

*****
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint A' B C
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
apply circumcenter_perp with A.
assert_diffs.

*****
H28 : not (eq A H)
H27 : not (eq B H)
H26 : not (eq C H)
H25 : not (eq C' B)
H24 : not (eq C' A)
H23 : not (eq A' C)
H21 : not (eq A' B)
H18 : not (eq B' C)
H17 : not (eq B' A)
H22 : not (eq A C)
H19 : not (eq B C)
H20 : not (eq A B)
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint A' B C
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Col A' A O).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A' A O
+++++
apply cop_perp2__col with B C.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
apply cop_perp2__col with B C.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C A O
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
apply cop_perp2__col with B C.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A' A B C
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
apply cop_perp2__col with B C.
Cop.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A' A B C
+++++
apply perp_left_comm.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
apply cop_perp2__col with B C.
Cop.
apply perp_left_comm.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A A' B C
+++++
apply perp_bisect_perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
apply cop_perp2__col with B C.
Cop.
apply perp_left_comm.
apply perp_bisect_perp.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect A A' B C
+++++
auto.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
apply cop_perp2__col with B C.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A' O B C
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
apply cop_perp2__col with B C.
Cop.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A' O B C
+++++
apply perp_left_comm.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
apply cop_perp2__col with B C.
Cop.
apply perp_left_comm.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp O A' B C
+++++
apply perp_bisect_perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
apply cop_perp2__col with B C.
Cop.
apply perp_left_comm.
apply perp_bisect_perp.

*****
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect O A' B C
+++++
auto.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).

*****
H18 : Col A' A O
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
idtac.

*****
H18 : Col A' A O
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
show_distinct A A'.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
idtac.
show_distinct A A'.

*****
H15 : not (eq O A)
H17 : Perp_bisect O A B C
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A A B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_cols.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
idtac.
show_distinct A A'.
assert_cols.

*****
H16 : Col A B C
H9 : Col B' A C
H2 : Col C' A B
H15 : not (eq O A)
H17 : Perp_bisect O A B C
H14 : not (eq O H)
H13 : not (eq O G)
H5 : Perp_bisect A A B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A B C
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
idtac.
show_distinct A A'.

*****
H19 : not (eq A A')
H18 : Col A' A O
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert_cols.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
idtac.
show_distinct A A'.
assert_cols.

*****
H22 : Col A' B C
H21 : Col B' A C
H20 : Col C' A B
H19 : not (eq A A')
H18 : Col A' A O
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the midpoint of B and C.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
assert (Perp_bisect A A' B C).
idtac.
assert (Col G A' A).
idtac.
unfold is_orthocenter in *.
spliter.
elim (eq_dec_points O G).
intro.
treat_equalities.
Col.
elim (eq_dec_points O H).
intro.
treat_equalities.
Col.
elim (eq_dec_points O A').
intro.
treat_equalities.
assert (Col A A' H).
idtac.
assert (Perp_bisect O A' B C).
idtac.
assert (Col A' A O).
idtac.
show_distinct A A'.
assert_cols.
Col.

*****
H22 : Col A' B C
H21 : Col B' A C
H20 : Col C' A B
H19 : not (eq A A')
H18 : Col A' A O
H17 : Perp_bisect O A' B C
H16 : Col A A' H
H15 : not (eq O A')
H14 : not (eq O H)
H13 : not (eq O G)
H9 : Col G A' A
H5 : Perp_bisect A A' B C
H8 : Midpoint C' A B
C' : Tpoint
H7 : Midpoint B' A C
B' : Tpoint
H6 : Midpoint A' B C
A' : Tpoint
H4 : Cong A B A C
H3 : is_circumcenter O A B C
H12 : Perp C H A B
H11 : Perp B H A C
H10 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
ColR.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).

*****
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Cong A B A C), Col G H O
+++++
intro.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.

*****
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
Name A' the symmetric of A wrt O.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.

*****
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.

*****
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Concyclic A B C A').
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').

*****
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A B C A'
+++++
unfold Concyclic.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.

*****
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar A B C A') (ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O C) (Cong O A O A'))))
+++++
split.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.

*****
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A'
+++++
destruct (eq_dec_points A O).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
destruct (eq_dec_points A O).

*****
H5 : eq A O
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A'
+++++
treat_equalities.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
destruct (eq_dec_points A O).
treat_equalities.

*****
H11 : not (eq A' C)
H8 : not (eq B C)
H0 : not (Col A' B C)
H1 : is_gravity_center G A' B C
H2 : is_orthocenter H A' B C
H3 : is_circumcenter A' A' B C
H4 : not (Cong A' B A' C)
H6 : Midpoint A' A' A'
H9 : not (eq A' B)
B,C,G,H,A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A' B C A'
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
destruct (eq_dec_points A O).

*****
H5 : not (eq A O)
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A'
+++++
apply coplanar_perm_12, col_cop__cop with O.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
destruct (eq_dec_points A O).
apply coplanar_perm_12, col_cop__cop with O.

*****
H5 : not (eq A O)
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C A O
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
destruct (eq_dec_points A O).
apply coplanar_perm_12, col_cop__cop with O.
Col.

*****
H5 : not (eq A O)
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C A O
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
destruct (eq_dec_points A O).
apply coplanar_perm_12, col_cop__cop with O.

*****
H5 : not (eq A O)
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A O)
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
destruct (eq_dec_points A O).
apply coplanar_perm_12, col_cop__cop with O.

*****
H5 : not (eq A O)
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A O A'
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.

*****
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
+++++
exists O.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
exists O.

*****
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong O A O B) (and (Cong O A O C) (Cong O A O A'))
+++++
apply circumcenter_cong in H3.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
exists O.
apply circumcenter_cong in H3.

*****
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : and (Cong A O B O) (and (Cong B O C O) (Cong C O A O))
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong O A O B) (and (Cong O A O C) (Cong O A O A'))
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
exists O.
apply circumcenter_cong in H3.
spliter.

*****
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H7 : Cong C O A O
H5 : Cong B O C O
H3 : Cong A O B O
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong O A O B) (and (Cong O A O C) (Cong O A O A'))
+++++
assert_congs_perm.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
exists O.
apply circumcenter_cong in H3.
spliter.
assert_congs_perm.

*****
H41 : Cong A' O O A
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H18 : Cong O C A O
H25 : Cong O B C O
H32 : Cong O A B O
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong O A O B) (and (Cong O A O C) (Cong O A O A'))
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
unfold Concyclic.
split.
exists O.
apply circumcenter_cong in H3.
spliter.
assert_congs_perm.
spliter.

*****
H41 : Cong A' O O A
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H18 : Cong O C A O
H25 : Cong O B C O
H32 : Cong O A B O
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong O A O B) (and (Cong O A O C) (Cong O A O A'))
+++++
repeat (split;finish).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').

*****
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (T:=concyclic_not_col_or_eq A B C A' H5).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).

*****
T : or (eq A' C)\n (or (eq A' B)\n (or (eq A B)\n (or (eq A C)\n (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
decompose [or] T.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.

*****
H7 : eq A' C
T : or (eq A' C)\n (or (eq A' B)\n (or (eq A B)\n (or (eq A C)\n (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
clear T.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.

*****
H7 : eq A' C
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
try contradiction.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.

*****
H7 : eq A' C
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
subst.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.

*****
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Per A B C).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).

*****
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
apply midpoint_thales with O.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply midpoint_thales with O.

*****
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A C B)
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply midpoint_thales with O.

*****
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint O A C
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply midpoint_thales with O.

*****
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply midpoint_thales with O.
finish.

*****
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
unfold is_circumcenter in *.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply midpoint_thales with O.
finish.
unfold is_circumcenter in *.

*****
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : and (Cong A O B O) (and (Cong B O C O) (Coplanar O A B C))
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply midpoint_thales with O.
finish.
unfold is_circumcenter in *.
spliter.

*****
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H10 : Coplanar O A B C
H7 : Cong B O C O
H3 : Cong A O B O
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).

*****
H7 : Per A B C
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
apply (Euler_line_special_case A B C G H O).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply (Euler_line_special_case A B C G H O).

*****
H7 : Per A B C
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply (Euler_line_special_case A B C G H O).

*****
H7 : Per A B C
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A B C
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply (Euler_line_special_case A B C G H O).

*****
H7 : Per A B C
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter H A B C
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A B C).
apply (Euler_line_special_case A B C G H O).

*****
H7 : Per A B C
H5 : Concyclic A B C C
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A C
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter O A B C
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.

*****
H10 : eq A' B
T : or (eq A' C)\n (or (eq A' B)\n (or (eq A B)\n (or (eq A C)\n (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
clear T.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.

*****
H10 : eq A' B
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
try contradiction.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.

*****
H10 : eq A' B
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
subst.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Per A C B).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A C B
+++++
apply midpoint_thales with O.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply midpoint_thales with O.

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply midpoint_thales with O.

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint O A B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply midpoint_thales with O.

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O C
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply midpoint_thales with O.
finish.

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O C
+++++
unfold is_circumcenter in *.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply midpoint_thales with O.
finish.
unfold is_circumcenter in *.

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : and (Cong A O B O) (and (Cong B O C O) (Coplanar O A B C))
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O C
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply midpoint_thales with O.
finish.
unfold is_circumcenter in *.
spliter.

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H10 : Coplanar O A B C
H7 : Cong B O C O
H3 : Cong A O B O
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O C
+++++
apply cong_transitivity with O B.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply midpoint_thales with O.
finish.
unfold is_circumcenter in *.
spliter.
apply cong_transitivity with O B.

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H10 : Coplanar O A B C
H7 : Cong B O C O
H3 : Cong A O B O
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply midpoint_thales with O.
finish.
unfold is_circumcenter in *.
spliter.
apply cong_transitivity with O B.

*****
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H10 : Coplanar O A B C
H7 : Cong B O C O
H3 : Cong A O B O
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O B O C
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).

*****
H7 : Per A C B
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
apply (Euler_line_special_case A C B G H O).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply (Euler_line_special_case A C B G H O).

*****
H7 : Per A C B
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A C B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply (Euler_line_special_case A C B G H O).

*****
H7 : Per A C B
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A C B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply (Euler_line_special_case A C B G H O).
finish.

*****
H7 : Per A C B
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A C B
+++++
try (apply is_gravity_center_perm_1; assumption).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply (Euler_line_special_case A C B G H O).

*****
H7 : Per A C B
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter H A C B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply (Euler_line_special_case A C B G H O).
finish.

*****
H7 : Per A C B
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter H A C B
+++++
auto with Orthocenter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply (Euler_line_special_case A C B G H O).

*****
H7 : Per A C B
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter O A C B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
subst.
assert (Per A C B).
apply (Euler_line_special_case A C B G H O).
finish.

*****
H7 : Per A C B
H5 : Concyclic A B C B
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A B
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter O A C B
+++++
auto with Circumcenter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.

*****
H7 : eq A B
T : or (eq A' C)\n (or (eq A' B)\n (or (eq A B)\n (or (eq A C)\n (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
clear T.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.

*****
H7 : eq A B
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
try contradiction.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.

*****
H10 : eq A C
T : or (eq A' C)\n (or (eq A' B)\n (or (eq A B)\n (or (eq A C)\n (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
clear T.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.

*****
H10 : eq A C
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
try contradiction.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.

*****
H7 : eq A A'
T : or (eq A' C)\n (or (eq A' B)\n (or (eq A B)\n (or (eq A C)\n (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
clear T.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.

*****
H7 : eq A A'
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
try contradiction.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.

*****
H7 : eq A A'
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
unfold is_circumcenter in *.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
unfold is_circumcenter in *.

*****
H7 : eq A A'
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : and (Cong A O B O) (and (Cong B O C O) (Coplanar O A B C))
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
unfold is_circumcenter in *.
spliter.

*****
H7 : eq A A'
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H12 : Coplanar O A B C
H10 : Cong B O C O
H3 : Cong A O B O
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
treat_equalities.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
unfold is_circumcenter in *.
spliter.
treat_equalities.

*****
H0 : not (Col C C C)
H1 : is_gravity_center G C C C
H2 : is_orthocenter H C C C
H5 : Concyclic C C C C
H9 : not (eq C C)
H12 : Coplanar C C C C
H4 : not (Cong C C C C)
C,G,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H C
+++++
intuition.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.

*****
H7 : and (not (Col A B A')) (not (Col A C A'))
T : or (eq A' C)\n (or (eq A' B)\n (or (eq A B)\n (or (eq A C)\n (or (eq A A') (and (not (Col A B A')) (not (Col A C A')))))))
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
clear T.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.

*****
H7 : and (not (Col A B A')) (not (Col A C A'))
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
try contradiction.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.

*****
H7 : and (not (Col A B A')) (not (Col A C A'))
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.

*****
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert_diffs.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.

*****
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Per A B A').
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').

*****
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B A'
+++++
apply midpoint_thales with O.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
apply midpoint_thales with O.

*****
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A A' B)
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
apply midpoint_thales with O.

*****
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint O A A'
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
apply midpoint_thales with O.

*****
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
apply midpoint_thales with O.
finish.

*****
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
unfold is_circumcenter in *.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
apply midpoint_thales with O.
finish.
unfold is_circumcenter in *.

*****
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : and (Cong A O B O) (and (Cong B O C O) (Coplanar O A B C))
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
apply midpoint_thales with O.
finish.
unfold is_circumcenter in *.
spliter.

*****
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H18 : Coplanar O A B C
H12 : Cong B O C O
H3 : Cong A O B O
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').

*****
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Perp C H A B).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).

*****
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C H A B
+++++
unfold is_orthocenter in *.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
unfold is_orthocenter in *.

*****
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : and (not (Col A B C))\n (and (Perp A H B C) (and (Perp B H A C) (Perp C H A B)))
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C H A B
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
unfold is_orthocenter in *.
spliter.

*****
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H20 : Perp C H A B
H19 : Perp B H A C
H18 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C H A B
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).

*****
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.

*****
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Perp A' B B A).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).

*****
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A' B B A
+++++
apply per_perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
apply per_perp.

*****
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A' B)
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
apply per_perp.

*****
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
apply per_perp.

*****
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A' B A
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Par C H A' B).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par C H A' B
+++++
unfold Concyclic in *.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : and (Coplanar A B C A')\n (ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A'))))
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par C H A' B
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par C H A' B
+++++
apply l12_9 with A B.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C A'
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C B
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B H A'
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.
idtac.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B H A'
+++++
apply coplanar_trans_1 with C.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.
idtac.
apply coplanar_trans_1 with C.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.
idtac.
apply coplanar_trans_1 with C.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B H
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.
idtac.
apply coplanar_trans_1 with C.
Col.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B H
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.
idtac.
apply coplanar_trans_1 with C.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B A'
+++++
Col.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.
idtac.
apply coplanar_trans_1 with C.
Col.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B A'
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B H B
+++++
Cop.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C H A B
+++++
Perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
unfold Concyclic in *.
spliter.
apply l12_9 with A B.

*****
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H20 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O A')))
H5 : Coplanar A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A' B A B
+++++
Perp.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).

*****
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Perp B H A C).
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
assert (Perp B H A C).

*****
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B H A C
+++++
unfold is_orthocenter in *.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
assert (Perp B H A C).
unfold is_orthocenter in *.

*****
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : and (not (Col A B C))\n (and (Perp A H B C) (and (Perp B H A C) (Perp C H A B)))
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B H A C
+++++
spliter.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
assert (Perp B H A C).
unfold is_orthocenter in *.
spliter.

*****
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H23 : Perp C H A B
H22 : Perp B H A C
H21 : Perp A H B C
H2 : not (Col A B C)
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B H A C
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
assert (Perp B H A C).

*****
H21 : Perp B H A C
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
idtac.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
assert (Perp B H A C).
idtac.

*****
H21 : Perp B H A C
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G H O
+++++
assert (Per A C A').
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
assert (Perp B H A C).
idtac.
assert (Per A C A').

*****
H21 : Perp B H A C
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A C A'
+++++
apply midpoint_thales with O.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
assert (Perp B H A C).
idtac.
assert (Per A C A').
apply midpoint_thales with O.

*****
H21 : Perp B H A C
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A A' C)
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
assert (Perp B H A C).
idtac.
assert (Per A C A').
apply midpoint_thales with O.

*****
H21 : Perp B H A C
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint O A A'
+++++
finish.
-----
Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.
Proof.
intros.
elim (cong_dec A B A C).
intro.
Name A' the symmetric of A wrt O.
assert_diffs.
assert (Concyclic A B C A').
assert (T:=concyclic_not_col_or_eq A B C A' H5).
decompose [or] T.
clear T.
try contradiction.
spliter.
assert_diffs.
assert (Per A B A').
assert (Perp C H A B).
idtac.
assert (Perp A' B B A).
idtac.
assert (Par C H A' B).
assert (Perp B H A C).
idtac.
assert (Per A C A').
apply midpoint_thales with O.

*****
H21 : Perp B H A C
H20 : Par C H A' B
H19 : Perp A' B B A
H18 : Perp C H A B
H12 : Per A B A'
H16 : not (eq O A')
H13 : not (eq O A)
H15 : not (eq B A')
H17 : not (eq A A')
H14 : not (eq C A')
H10 : not (Col A C A')
H7 : not (Col A B A')
H5 : Concyclic A B C A'
H11 : not (eq A C)
H8 : not (eq B C)
H9 : not (eq A B)
H6 : Midpoint O A A'
A' : Tpoint
H4 : not (Cong A B A C)
H3 : is_circumcenter O A B C
H2 : is_orthocenter H A B C
H1 : is_gravity_center G A B C
H0 : not (Col A B C)
A,B,C,G,H,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O C
+++++
