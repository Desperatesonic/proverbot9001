Require Export GeoCoq.Highschool.circumcenter.
-----
Section Orthocenter.
-----
Context `{TE:Tarski_euclidean}.
-----
Definition is_orthocenter H A B C :=\n ~ Col A B C /\ Perp A H B C /\ Perp B H A C /\ Perp C H A B.
-----
Lemma construct_intersection : forall A B C X1 X2 X3,\n ~ Col A B C ->\n Par A C B X1 -> Par A B C X2 ->  Par B C A X3 ->\n exists E, Col E A X3 /\ Col E B X1.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C X1 X2 X3 : Tpoint) (_ : not (Col A B C)) (_ : Par A C B X1) (_ : Par A B C X2) (_ : Par B C A X3), ex (fun E : Tpoint => and (Col E A X3) (Col E B X1))
+++++
Proof.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C X1 X2 X3 : Tpoint) (_ : not (Col A B C)) (_ : Par A C B X1) (_ : Par A B C X2) (_ : Par B C A X3), ex (fun E : Tpoint => and (Col E A X3) (Col E B X1))
+++++
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.

*****
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun E : Tpoint => and (Col E A X3) (Col E B X1))
+++++
apply cop_npar__inter_exists.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.

*****
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A X3 B X1
+++++
apply coplanar_perm_2, coplanar_trans_1 with C.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
apply coplanar_perm_2, coplanar_trans_1 with C.

*****
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
Col.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
apply coplanar_perm_2, coplanar_trans_1 with C.

*****
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B X3
+++++
Col.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
apply coplanar_perm_2, coplanar_trans_1 with C.
Col.

*****
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B X3
+++++
Cop.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
apply coplanar_perm_2, coplanar_trans_1 with C.

*****
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B X1
+++++
Col.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
apply coplanar_perm_2, coplanar_trans_1 with C.
Col.

*****
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B X1
+++++
Cop.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.

*****
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Par A X3 B X1)
+++++
intro HNPar.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.

*****
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.

*****
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
assert (HFalsePar : Par B C A C).
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.
assert (HFalsePar : Par B C A C).

*****
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C A C
+++++
apply (par_trans B C B X1 A C).
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.
assert (HFalsePar : Par B C A C).
apply (par_trans B C B X1 A C).

*****
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C B X1
+++++
finish.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.
assert (HFalsePar : Par B C A C).
apply (par_trans B C B X1 A C).
finish.

*****
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C B X1
+++++
apply (par_trans B C A X3 B).
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.
assert (HFalsePar : Par B C A C).
apply (par_trans B C B X1 A C).
finish.
apply (par_trans B C A X3 B).

*****
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C A X3
+++++
finish.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.
assert (HFalsePar : Par B C A C).
apply (par_trans B C B X1 A C).
finish.
apply (par_trans B C A X3 B).

*****
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A X3 B X1
+++++
finish.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.
assert (HFalsePar : Par B C A C).
apply (par_trans B C B X1 A C).

*****
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B X1 A C
+++++
finish.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.
assert (HFalsePar : Par B C A C).

*****
HFalsePar : Par B C A C
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
idtac.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.
assert (HFalsePar : Par B C A C).
idtac.

*****
HFalsePar : Par B C A C
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
apply par_id_2.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.
intro HNPar.
apply HNC.
assert (HFalsePar : Par B C A C).
idtac.
apply par_id_2.

*****
HFalsePar : Par B C A C
HNPar : Par A X3 B X1
HPar3 : Par B C A X3
HPar2 : Par A B C X2
HPar1 : Par A C B X1
HNC : not (Col A B C)
A,B,C,X1,X2,X3 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par C A C B
+++++
finish.
-----
Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.
Proof.
intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.
apply cop_npar__inter_exists.

*****

*****

+++++
Qed.
-----
Lemma not_col_par_col2_diff : forall A B C D E F,\n  ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D E F : Tpoint) (_ : not (Col A B C)) (_ : Par A B C D) (_ : Col C D E) (_ : Col A E F), not (eq A E)
+++++
Proof.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D E F : Tpoint) (_ : not (Col A B C)) (_ : Par A B C D) (_ : Col C D E) (_ : Col A E F), not (eq A E)
+++++
intros A B C D E F HNC HPar HC1 HC2.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
Proof.
intros A B C D E F HNC HPar HC1 HC2.

*****
HC2 : Col A E F
HC1 : Col C D E
HPar : Par A B C D
HNC : not (Col A B C)
A,B,C,D,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A E)
+++++
intro.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
Proof.
intros A B C D E F HNC HPar HC1 HC2.
intro.

*****
H : eq A E
HC2 : Col A E F
HC1 : Col C D E
HPar : Par A B C D
HNC : not (Col A B C)
A,B,C,D,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
Proof.
intros A B C D E F HNC HPar HC1 HC2.
intro.
subst.

*****
HC2 : Col E E F
HC1 : Col C D E
HNC : not (Col E B C)
HPar : Par E B C D
B,C,D,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
Proof.
intros A B C D E F HNC HPar HC1 HC2.
intro.
subst.
apply HNC.

*****
HC2 : Col E E F
HC1 : Col C D E
HNC : not (Col E B C)
HPar : Par E B C D
B,C,D,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col E B C
+++++
apply not_strict_par1 with D E.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
Proof.
intros A B C D E F HNC HPar HC1 HC2.
intro.
subst.
apply HNC.
apply not_strict_par1 with D E.

*****
HC2 : Col E E F
HC1 : Col C D E
HNC : not (Col E B C)
HPar : Par E B C D
B,C,D,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par E B C D
+++++
finish.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
Proof.
intros A B C D E F HNC HPar HC1 HC2.
intro.
subst.
apply HNC.
apply not_strict_par1 with D E.

*****
HC2 : Col E E F
HC1 : Col C D E
HNC : not (Col E B C)
HPar : Par E B C D
B,C,D,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col E B E
+++++
finish.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
Proof.
intros A B C D E F HNC HPar HC1 HC2.
intro.
subst.
apply HNC.
apply not_strict_par1 with D E.

*****
HC2 : Col E E F
HC1 : Col C D E
HNC : not (Col E B C)
HPar : Par E B C D
B,C,D,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C D E
+++++
finish.
-----
Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.
Proof.
intros A B C D E F HNC HPar HC1 HC2.
intro.
subst.
apply HNC.
apply not_strict_par1 with D E.

*****

*****

+++++
Qed.
-----
Lemma construct_triangle : forall A B C,\n  ~ Col A B C -> exists D, exists E, exists F,\n  Col B D F /\ Col A E F /\ Col C D E /\\n  Par A B C D /\ Par A C B D /\ Par B C A E /\\n  Par A B C E /\ Par A C B F /\ Par B C A F /\\n  D <> E /\ D <> F /\ E <> F.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)), ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
Proof.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)), ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
intros A B C HNC.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.

*****
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.

*****
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
elim (parallel_existence1 A B C HAB);intros X1 HX1.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.

*****
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
elim (parallel_existence1 A C B HAC);intros X2 HX2.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.

*****
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
elim (parallel_existence1 B C A HBC);intros X3 HX3.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.

*****
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (T : exists D, Col D B X2 /\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.

*****
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (T : exists E, Col E A X3 /\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.

*****
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (T : exists F, Col F A X3 /\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.

*****
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).

*****
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).

*****
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).

*****
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).

*****
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).

*****
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).

*****
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (Par A B C D) by (apply par_col_par with X1; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).

*****
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (Par A C B D) by (apply par_col_par with X2; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).

*****
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (Par B C A E) by (apply par_col_par with X3; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).

*****
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (Par A B C E) by (apply par_col_par with X1; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).

*****
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (Par A C B F) by (apply par_col_par with X2; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).

*****
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (Par B C A F) by (apply par_col_par with X3; finish).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).

*****
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
assert (~ (D = E /\ D = F)).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).

*****
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (eq D E) (eq D F))
+++++
intro; spliter; treat_equalities.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.

*****
H13 : Par B C A D
H12 : Par A C B D
H11 : Par A B C D
H9 : not (eq C D)
H7 : not (eq B D)
H : not (eq A D)
H2 : Col D A X3
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_paras_perm.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.

*****
H88 : Parallelogram B A C D
H87 : Parallelogram_strict B A C D
H86 : Parallelogram A B C D
H85 : Parallelogram_strict A B C D
H84 : Parallelogram A C B D
H83 : Parallelogram_strict A C B D
H4 : Par C B A D
H15 : Par C A B D
H22 : Par B A C D
H9 : not (eq C D)
H7 : not (eq B D)
H : not (eq A D)
H62 : Col X3 D A
H67 : Col X1 D C
H72 : Col X2 D B
D : Tpoint
H30 : Par C B A X3
X3 : Tpoint
H38 : Par C A B X2
X2 : Tpoint
H46 : Par B A C X1
X1 : Tpoint
H77 : not (eq A C)
H79 : not (eq B C)
H81 : not (eq A B)
H53 : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_nparas_perm.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.

*****
H112 : not (Parallelogram B A C D)
H111 : not (Parallelogram C A D B)
H110 : not (Parallelogram A B C D)
H0 : Parallelogram B A C D
H87 : Parallelogram_strict B A C D
H11 : Parallelogram A B C D
H85 : Parallelogram_strict A B C D
H20 : Parallelogram A C B D
H83 : Parallelogram_strict A C B D
H29 : Par B C A D
H37 : Par A C B D
H45 : Par A B C D
H9 : not (eq C D)
H7 : not (eq B D)
H : not (eq A D)
H92 : Col A X3 D
H97 : Col C X1 D
H102 : Col B X2 D
D : Tpoint
H54 : Par B C A X3
X3 : Tpoint
H61 : Par A C B X2
X2 : Tpoint
H70 : Par A B C X1
X1 : Tpoint
H77 : not (eq A C)
H79 : not (eq B C)
H81 : not (eq A B)
H53 : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
permutation_intro_in_hyps.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.

*****
H112 : not (Parallelogram B A C D)
H111 : not (Parallelogram C A D B)
H110 : not (Parallelogram A B C D)
H8 : Parallelogram A B D C
H6 : Parallelogram C A B D
H5 : Parallelogram D C A B
H4 : Parallelogram B D C A
H3 : Parallelogram D B A C
H2 : Parallelogram C D B A
H1 : Parallelogram A C D B
H0 : Parallelogram B A C D
H87 : Parallelogram_strict B A C D
H17 : Parallelogram B A D C
H16 : Parallelogram C B A D
H15 : Parallelogram D C B A
H14 : Parallelogram A D C B
H13 : Parallelogram D A B C
H12 : Parallelogram C D A B
H11 : Parallelogram B C D A
H10 : Parallelogram A B C D
H85 : Parallelogram_strict A B C D
H25 : Parallelogram C A D B
H24 : Parallelogram B C A D
H23 : Parallelogram D B C A
H22 : Parallelogram A D B C
H21 : Parallelogram D A C B
H20 : Parallelogram B D A C
H19 : Parallelogram C B D A
H18 : Parallelogram A C B D
H83 : Parallelogram_strict A C B D
H33 : Par D A C B
H32 : Par D A B C
H31 : Par A D C B
H30 : Par A D B C
H29 : Par C B D A
H28 : Par B C D A
H27 : Par C B A D
H26 : Par B C A D
H41 : Par D B C A
H40 : Par D B A C
H39 : Par B D C A
H38 : Par B D A C
H37 : Par C A D B
H36 : Par A C D B
H35 : Par C A B D
H34 : Par A C B D
H49 : Par D C B A
H48 : Par D C A B
H47 : Par C D B A
H46 : Par C D A B
H45 : Par B A D C
H44 : Par A B D C
H43 : Par B A C D
H42 : Par A B C D
H104 : not (eq D C)
H9 : not (eq C D)
H105 : not (eq D B)
H7 : not (eq B D)
H106 : not (eq D A)
H : not (eq A D)
H91 : Col D X3 A
H90 : Col D A X3
H89 : Col X3 D A
H88 : Col X3 A D
H86 : Col A D X3
H84 : Col A X3 D
H97 : Col D X1 C
H96 : Col D C X1
H95 : Col X1 D C
H94 : Col X1 C D
H93 : Col C D X1
H92 : Col C X1 D
H103 : Col D X2 B
H102 : Col D B X2
H101 : Col X2 D B
H100 : Col X2 B D
H99 : Col B D X2
H98 : Col B X2 D
D : Tpoint
H58 : Par X3 A C B
H57 : Par X3 A B C
H56 : Par A X3 C B
H55 : Par A X3 B C
H54 : Par C B X3 A
H52 : Par B C X3 A
H51 : Par C B A X3
H50 : Par B C A X3
X3 : Tpoint
H66 : Par X2 B C A
H65 : Par X2 B A C
H64 : Par B X2 C A
H63 : Par B X2 A C
H62 : Par C A X2 B
H61 : Par A C X2 B
H60 : Par C A B X2
H59 : Par A C B X2
X2 : Tpoint
H74 : Par X1 C B A
H73 : Par X1 C A B
H72 : Par C X1 B A
H71 : Par C X1 A B
H70 : Par B A X1 C
H69 : Par A B X1 C
H68 : Par B A C X1
H67 : Par A B C X1
X1 : Tpoint
H107 : not (eq C A)
H77 : not (eq A C)
H108 : not (eq C B)
H79 : not (eq B C)
H109 : not (eq B A)
H81 : not (eq A B)
H82 : not (Col C B A)
H80 : not (Col C A B)
H78 : not (Col B C A)
H76 : not (Col B A C)
H75 : not (Col A C B)
H53 : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.

*****
H17 : not (and (eq D E) (eq D F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun D : Tpoint => ex (fun E : Tpoint => ex (fun F : Tpoint => and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F)))))))))))))))
+++++
exists D; exists E; exists F.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.

*****
H17 : not (and (eq D E) (eq D F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F))))))))))))
+++++
assert_diffs.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.

*****
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq D E) (eq D F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col B D F) (and (Col A E F) (and (Col C D E) (and (Par A B C D) (and (Par A C B D) (and (Par B C A E) (and (Par A B C E) (and (Par A C B F) (and (Par B C A F) (and (not (eq D E)) (and (not (eq D F)) (not (eq E F))))))))))))
+++++
repeat split; finish; try ColR.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.

*****
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq D E) (eq D F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D E)
+++++
intro; subst.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.
intro; subst.

*****
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq E E) (eq E F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H11 : Par A B C E
H12 : Par A C B E
H9,H10 : not (eq C E)
H8 : not (eq B F)
H7 : not (eq B E)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
H0 : Col E B X2
H1 : Col E C X1
E : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (E <> F) by (intro; subst; intuition).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.
intro; subst.
assert (E <> F) by (intro; subst; intuition).

*****
H18 : not (eq E F)
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq E E) (eq E F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H11 : Par A B C E
H12 : Par A C B E
H9,H10 : not (eq C E)
H8 : not (eq B F)
H7 : not (eq B E)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
H0 : Col E B X2
H1 : Col E C X1
E : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.

*****
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq D E) (eq D F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D F)
+++++
intro; subst.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.
intro; subst.

*****
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq F E) (eq F F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H11 : Par A B C F
H12 : Par A C B F
H10 : not (eq C E)
H9 : not (eq C F)
H7,H8 : not (eq B F)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H0 : Col F B X2
H1 : Col F C X1
F : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (E <> F) by (intro; subst; intuition).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.
intro; subst.
assert (E <> F) by (intro; subst; intuition).

*****
H18 : not (eq E F)
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq F E) (eq F F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H11 : Par A B C F
H12 : Par A C B F
H10 : not (eq C E)
H9 : not (eq C F)
H7,H8 : not (eq B F)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H0 : Col F B X2
H1 : Col F C X1
F : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC; apply col_permutation_2; apply not_strict_par1 with E C; sfinish.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_2; apply not_strict_par1 with E C; sfinish.

*****
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq D E) (eq D F))
H16 : Par B C A F
H15 : Par A C B F
H14 : Par A B C E
H13 : Par B C A E
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C E)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H6 : not (eq A F)
H : not (eq A E)
H5 : Col F B X2
H4 : Col F A X3
F : Tpoint
H3 : Col E C X1
H2 : Col E A X3
E : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E F)
+++++
intro; subst.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_2; apply not_strict_par1 with E C; sfinish.
intro; subst.

*****
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq D F) (eq D F))
H16 : Par B C A F
H15 : Par A C B F
H13 : Par B C A F
H14 : Par A B C F
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C F)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H,H6 : not (eq A F)
H5 : Col F B X2
H2,H4 : Col F A X3
H3 : Col F C X1
F : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (D <> F) by (intro; subst; intuition).
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_2; apply not_strict_par1 with E C; sfinish.
intro; subst.
assert (D <> F) by (intro; subst; intuition).

*****
H18 : not (eq D F)
H24 : not (eq C X1)
H23 : not (eq B X2)
H22 : not (eq A X3)
H17 : not (and (eq D F) (eq D F))
H16 : Par B C A F
H15 : Par A C B F
H13 : Par B C A F
H14 : Par A B C F
H12 : Par A C B D
H11 : Par A B C D
H10 : not (eq C F)
H9 : not (eq C D)
H8 : not (eq B F)
H7 : not (eq B D)
H,H6 : not (eq A F)
H5 : Col F B X2
H2,H4 : Col F A X3
H3 : Col F C X1
F : Tpoint
H1 : Col D C X1
H0 : Col D B X2
D : Tpoint
HX3 : Par B C A X3
X3 : Tpoint
HX2 : Par A C B X2
X2 : Tpoint
HX1 : Par A B C X1
X1 : Tpoint
HAC : not (eq A C)
HBC : not (eq B C)
HAB : not (eq A B)
HNC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC; apply not_strict_par1 with D B; sfinish.
-----
Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.
Proof.
intros A B C HNC.
assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.
elim (parallel_existence1 A B C HAB);intros X1 HX1.
elim (parallel_existence1 A C B HAC);intros X2 HX2.
elim (parallel_existence1 B C A HBC);intros X3 HX3.
assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.
assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.
assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.
assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).
assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).
assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).
assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).
assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).
assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).
assert (Par A B C D) by (apply par_col_par with X1; finish).
assert (Par A C B D) by (apply par_col_par with X2; finish).
assert (Par B C A E) by (apply par_col_par with X3; finish).
assert (Par A B C E) by (apply par_col_par with X1; finish).
assert (Par A C B F) by (apply par_col_par with X2; finish).
assert (Par B C A F) by (apply par_col_par with X3; finish).
assert (~ (D = E /\\ D = F)).
intro; spliter; treat_equalities.
assert_paras_perm.
assert_nparas_perm.
permutation_intro_in_hyps.
contradiction.
exists D; exists E; exists F.
assert_diffs.
repeat split; finish; try ColR.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.
intro; subst.
assert (E <> F) by (intro; subst; intuition).
apply HNC; apply col_permutation_2; apply not_strict_par1 with E C; sfinish.
intro; subst.
assert (D <> F) by (intro; subst; intuition).
apply HNC; apply not_strict_par1 with D B; sfinish.

*****

*****

+++++
Qed.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E,\n  D <> E -> ~ Col A B C -> Col C D E -> Par A B C D ->\n  Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D E : Tpoint) (_ : not (eq D E)) (_ : not (Col A B C)) (_ : Col C D E) (_ : Par A B C D) (_ : Par A B C E) (_ : Par A E B C) (_ : Par A C B D), Midpoint C D E
+++++
Proof.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D E : Tpoint) (_ : not (eq D E)) (_ : not (Col A B C)) (_ : Col C D E) (_ : Par A B C D) (_ : Par A B C E) (_ : Par A E B C) (_ : Par A C B D), Midpoint C D E
+++++
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.

*****
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C D E
+++++
assert (HPara1 : Parallelogram_strict A B C E).
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).

*****
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Parallelogram_strict A B C E
+++++
apply parallel_2_plg.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
apply parallel_2_plg.

*****
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
finish.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
apply parallel_2_plg.

*****
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B C E
+++++
finish.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
apply parallel_2_plg.

*****
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A E B C
+++++
finish.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).

*****
HPara1 : Parallelogram_strict A B C E
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C D E
+++++
idtac.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.

*****
HPara1 : Parallelogram_strict A B C E
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C D E
+++++
assert (HPara2 : Parallelogram_strict C A B D).
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).

*****
HPara1 : Parallelogram_strict A B C E
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Parallelogram_strict C A B D
+++++
apply parallel_2_plg.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).
apply parallel_2_plg.

*****
HPara1 : Parallelogram_strict A B C E
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
finish.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).
apply parallel_2_plg.

*****
HPara1 : Parallelogram_strict A B C E
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par C A B D
+++++
finish.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).
apply parallel_2_plg.

*****
HPara1 : Parallelogram_strict A B C E
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par C D A B
+++++
finish.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).

*****
HPara2 : Parallelogram_strict C A B D
HPara1 : Parallelogram_strict A B C E
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C D E
+++++
idtac.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).
idtac.

*****
HPara2 : Parallelogram_strict C A B D
HPara1 : Parallelogram_strict A B C E
HPar4 : Par A C B D
HPar3 : Par A E B C
HPar2 : Par A B C E
HPar1 : Par A B C D
HC : Col C D E
HNC : not (Col A B C)
HD : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C D E
+++++
assert_congs_perm.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).
idtac.
assert_congs_perm.

*****
H : Cong A E B C
H47 : Cong C D A B
H46 : Cong A B C E
H45 : Cong C A B D
HPara2 : Parallelogram_strict C A B D
HPara1 : Parallelogram_strict A B C E
H0 : Par C A B D
H8 : Par E A B C
H16 : Par B A C E
H24 : Par B A C D
H41 : Col E C D
H31 : not (Col A B C)
H43 : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C D E
+++++
apply cong_col_mid.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).
idtac.
assert_congs_perm.
apply cong_col_mid.

*****
H : Cong A E B C
H47 : Cong C D A B
H46 : Cong A B C E
H45 : Cong C A B D
HPara2 : Parallelogram_strict C A B D
HPara1 : Parallelogram_strict A B C E
H0 : Par C A B D
H8 : Par E A B C
H16 : Par B A C E
H24 : Par B A C D
H41 : Col E C D
H31 : not (Col A B C)
H43 : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D E)
+++++
Col.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).
idtac.
assert_congs_perm.
apply cong_col_mid.

*****
H : Cong A E B C
H47 : Cong C D A B
H46 : Cong A B C E
H45 : Cong C A B D
HPara2 : Parallelogram_strict C A B D
HPara1 : Parallelogram_strict A B C E
H0 : Par C A B D
H8 : Par E A B C
H16 : Par B A C E
H24 : Par B A C D
H41 : Col E C D
H31 : not (Col A B C)
H43 : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col D C E
+++++
Col.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).
idtac.
assert_congs_perm.
apply cong_col_mid.

*****
H : Cong A E B C
H47 : Cong C D A B
H46 : Cong A B C E
H45 : Cong C A B D
HPara2 : Parallelogram_strict C A B D
HPara1 : Parallelogram_strict A B C E
H0 : Par C A B D
H8 : Par E A B C
H16 : Par B A C E
H24 : Par B A C D
H41 : Col E C D
H31 : not (Col A B C)
H43 : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong D C C E
+++++
Col.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).
idtac.
assert (HPara2 : Parallelogram_strict C A B D).
idtac.
assert_congs_perm.
apply cong_col_mid.
Col.

*****
H : Cong A E B C
H47 : Cong C D A B
H46 : Cong A B C E
H45 : Cong C A B D
HPara2 : Parallelogram_strict C A B D
HPara1 : Parallelogram_strict A B C E
H0 : Par C A B D
H8 : Par E A B C
H16 : Par B A C E
H24 : Par B A C D
H41 : Col E C D
H31 : not (Col A B C)
H43 : not (eq D E)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong D C C E
+++++
eCong.
-----
Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.
Proof.
intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.
assert (HPara1 : Parallelogram_strict A B C E).

*****

*****

+++++
Qed.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F,\n  A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F ->\n  Perp_bisect A O E F.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C O A1 E F : Tpoint) (_ : not (eq A O)) (_ : not (eq E F)) (_ : Perp A A1 B C) (_ : Col O A1 A) (_ : Col A E F) (_ : Par B C A E) (_ : Midpoint A E F), Perp_bisect A O E F
+++++
Proof.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C O A1 E F : Tpoint) (_ : not (eq A O)) (_ : not (eq E F)) (_ : Perp A A1 B C) (_ : Col O A1 A) (_ : Col A E F) (_ : Par B C A E) (_ : Midpoint A E F), Perp_bisect A O E F
+++++
intros.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect A O E F
+++++
apply perp_mid_perp_bisect.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint A E F
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A O E F
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A O E F
+++++
apply perp_sym.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp E F A O
+++++
apply cop_par_perp__perp with B C.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C E F
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.
finish.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C E F
+++++
apply par_col_par with A.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.
finish.
apply par_col_par with A.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E F)
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.
finish.
apply par_col_par with A.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C E A
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.
finish.
apply par_col_par with A.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col E A F
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B C A O
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.
finish.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B C A O
+++++
apply perp_col1 with A1.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.
finish.
apply perp_col1 with A1.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A O)
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.
finish.
apply perp_col1 with A1.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B C A A1
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.
finish.
apply perp_col1 with A1.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A A1 O
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.
finish.
apply perp_sym.
apply cop_par_perp__perp with B C.

*****
H5 : Midpoint A E F
H4 : Par B C A E
H3 : Col A E F
H2 : Col O A1 A
H1 : Perp A A1 B C
H0 : not (eq E F)
H : not (eq A O)
A,B,C,O,A1,E,F : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar E F A O
+++++
finish.
-----
Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.
Proof.
intros.
apply perp_mid_perp_bisect.

*****

*****

+++++
Qed.
-----
Lemma altitude_intersect:\n forall A  A1 B B1 C C1 O: Tpoint,\n ~ Col A B C ->\n Perp A A1 B C  -> Perp B B1 A C -> Perp C C1 A B ->\n Col O A A1 -> Col O B B1 ->\n Col O C C1.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A A1 B B1 C C1 O : Tpoint) (_ : not (Col A B C)) (_ : Perp A A1 B C) (_ : Perp B B1 A C) (_ : Perp C C1 A B) (_ : Col O A A1) (_ : Col O B B1), Col O C C1
+++++
Proof.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A A1 B B1 C C1 O : Tpoint) (_ : not (Col A B C)) (_ : Perp A A1 B C) (_ : Perp B B1 A C) (_ : Perp C C1 A B) (_ : Col O A A1) (_ : Col O B B1), Col O C C1
+++++
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.

*****
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
assert (HT := HNC).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).

*****
HT : not (Col A B C)
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
apply construct_triangle in HT.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.

*****
HT : ex\n (fun D : Tpoint =>\n ex\n (fun E : Tpoint =>\n ex\n (fun F : Tpoint =>\n and (Col B D F)\n (and (Col A E F)\n (and (Col C D E)\n (and (Par A B C D)\n (and (Par A C B D)\n (and (Par B C A E)\n (and (Par A B C E)\n (and (Par A C B F)\n (and (Par B C A F)\n (and (not (eq D E))\n (and (not (eq D F))\n (not (eq E F)))))))))))))))
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
destruct HT as [D [E [F HT]]].
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].

*****
HT : and (Col B D F)\n (and (Col A E F)\n (and (Col C D E)\n (and (Par A B C D)\n (and (Par A C B D)\n (and (Par B C A E)\n (and (Par A B C E)\n (and (Par A C B F)\n (and (Par B C A F)\n (and (not (eq D E))\n (and (not (eq D F)) (not (eq E F))))))))))))
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
spliter.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.

*****
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
assert (Midpoint A E F).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).

*****
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint A E F
+++++
apply diff_not_col_col_par4_mid with B C.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
apply diff_not_col_col_par4_mid with B C.

*****
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E F)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
apply diff_not_col_col_par4_mid with B C.

*****
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C A)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
apply diff_not_col_col_par4_mid with B C.

*****
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A E F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
apply diff_not_col_col_par4_mid with B C.

*****
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C A E
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
apply diff_not_col_col_par4_mid with B C.

*****
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C A F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
apply diff_not_col_col_par4_mid with B C.

*****
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B F C A
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
apply diff_not_col_col_par4_mid with B C.

*****
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B A C E
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
idtac.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
assert (Midpoint B D F).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint B D F
+++++
apply diff_not_col_col_par4_mid with A C.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
apply diff_not_col_col_par4_mid with A C.

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D F)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
apply diff_not_col_col_par4_mid with A C.

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A C B)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
apply diff_not_col_col_par4_mid with A C.

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B D F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
apply diff_not_col_col_par4_mid with A C.

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A C B D
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
apply diff_not_col_col_par4_mid with A C.

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A C B F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
apply diff_not_col_col_par4_mid with A C.

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A F C B
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
apply diff_not_col_col_par4_mid with A C.

*****
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B C D
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
idtac.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
assert (Midpoint C D E).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C D E
+++++
apply diff_not_col_col_par4_mid with A B.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
apply diff_not_col_col_par4_mid with A B.

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D E)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
apply diff_not_col_col_par4_mid with A B.

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
apply diff_not_col_col_par4_mid with A B.

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C D E
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
apply diff_not_col_col_par4_mid with A B.

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B C D
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
apply diff_not_col_col_par4_mid with A B.

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B C E
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
apply diff_not_col_col_par4_mid with A B.

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A E B C
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
apply diff_not_col_col_par4_mid with A B.

*****
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A C B D
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).

*****
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
idtac.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.

*****
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
assert_diffs.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
elim (eq_dec_points A O).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A O, Col O C C1
+++++
intro.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.

*****
H14 : eq A O
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
treat_equalities.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C C1
+++++
apply col_permutation_4.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.
apply col_permutation_4.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C A C1
+++++
apply cop_perp2__col with A B.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B A C1
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C A A B
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.
finish.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C A A B
+++++
apply perp_right_comm.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.
finish.
apply perp_right_comm.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C A B A
+++++
apply perp_col1 with B1.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.
finish.
apply perp_right_comm.
apply perp_col1 with B1.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.
finish.
apply perp_right_comm.
apply perp_col1 with B1.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C A B B1
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.
finish.
apply perp_right_comm.
apply perp_col1 with B1.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B B1 A
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col A B B1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C C1 A B
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A O), Col O C C1
+++++
intro.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.

*****
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
elim (eq_dec_points B O).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).

*****
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq B O, Col O C C1
+++++
intro.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.

*****
H27 : eq B O
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
treat_equalities.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
treat_equalities.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC1 : Col B A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C C1
+++++
apply col_permutation_4.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
treat_equalities.
apply col_permutation_4.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC1 : Col B A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C B C1
+++++
apply cop_perp2__col with A B.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC1 : Col B A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B C1
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC1 : Col B A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C B A B
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.
finish.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC1 : Col B A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C B A B
+++++
apply perp_col1 with A1.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.
finish.
apply perp_col1 with A1.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC1 : Col B A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.
finish.
apply perp_col1 with A1.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC1 : Col B A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C B A A1
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.
finish.
apply perp_col1 with A1.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC1 : Col B A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A A1 B
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
treat_equalities.
apply col_permutation_4.
apply cop_perp2__col with A B.

*****
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC1 : Col B A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1 : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C C1 A B
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).

*****
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq B O), Col O C C1
+++++
intro.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.

*****
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
elim (eq_dec_points C O).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).

*****
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq C O, Col O C C1
+++++
intro.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.

*****
H28 : eq C O
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
subst.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
subst.

*****
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H22 : not (eq O D)
H23 : not (eq O E)
H24 : not (eq O C1)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H16 : not (eq B O)
H19 : not (eq A O)
H17 : not (eq A B)
H13 : Midpoint O D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H1 : Col O D E
H2 : Par A B O D
H3 : Par A O B D
H4 : Par B O A E
H5 : Par A B O E
H6 : Par A O B F
H7 : Par B O A F
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HNC : not (Col A B O)
HPerp1 : Perp A A1 B O
HPerp2 : Perp B B1 A O
HPerp3 : Perp O C1 A B
A,A1,B,B1,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O O C1
+++++
Col.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).

*****
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq C O), Col O C C1
+++++
intro.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.

*****
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
assert (Perp_bisect A O E F).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).

*****
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect A O E F
+++++
apply altitude_is_perp_bisect with B C A1.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
apply altitude_is_perp_bisect with B C A1.

*****
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A O)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
apply altitude_is_perp_bisect with B C A1.

*****
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E F)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
apply altitude_is_perp_bisect with B C A1.

*****
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A A1 B C
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
apply altitude_is_perp_bisect with B C A1.

*****
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O A1 A
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
apply altitude_is_perp_bisect with B C A1.

*****
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A E F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
apply altitude_is_perp_bisect with B C A1.

*****
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C A E
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
apply altitude_is_perp_bisect with B C A1.

*****
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint A E F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
idtac.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
assert (Perp_bisect B O D F).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect B O D F
+++++
apply altitude_is_perp_bisect with A C B1.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
apply altitude_is_perp_bisect with A C B1.

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B O)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
apply altitude_is_perp_bisect with A C B1.

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D F)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
apply altitude_is_perp_bisect with A C B1.

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B B1 A C
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
apply altitude_is_perp_bisect with A C B1.

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O B1 B
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
apply altitude_is_perp_bisect with A C B1.

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B D F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
apply altitude_is_perp_bisect with A C B1.

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A C B D
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
apply altitude_is_perp_bisect with A C B1.

*****
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint B D F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
idtac.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
assert (Perp O C D E).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp O C D E
+++++
apply circumcenter_intersect with F A B.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D E)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E F)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D F)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O A)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O B)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq O C)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint A E F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint B D F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C D E
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect O A E F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.
finish.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect O A E F
+++++
apply perp_bisect_sym_1.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.
finish.
apply perp_bisect_sym_1.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect A O E F
+++++
assumption.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect O B D F
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.
finish.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect O B D F
+++++
apply perp_bisect_sym_1.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
apply circumcenter_intersect with F A B.
finish.
apply perp_bisect_sym_1.

*****
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_bisect B O D F
+++++
assumption.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
assert (Perp C1 C D E).
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 C D E
+++++
apply perp_sym.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply perp_sym.

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp D E C1 C
+++++
apply cop_par_perp__perp with A B.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply perp_sym.
apply cop_par_perp__perp with A B.

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B D E
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply perp_sym.
apply cop_par_perp__perp with A B.
finish.

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B D E
+++++
apply par_symmetry.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply perp_sym.
apply cop_par_perp__perp with A B.
finish.
apply par_symmetry.

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par D E A B
+++++
apply par_col_par_2 with C.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply perp_sym.
apply cop_par_perp__perp with A B.
finish.
apply par_symmetry.
apply par_col_par_2 with C.

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D E)
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply perp_sym.
apply cop_par_perp__perp with A B.
finish.
apply par_symmetry.
apply par_col_par_2 with C.

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col D C E
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply perp_sym.
apply cop_par_perp__perp with A B.
finish.
apply par_symmetry.
apply par_col_par_2 with C.

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par D C A B
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply perp_sym.
apply cop_par_perp__perp with A B.

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A B C1 C
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply perp_sym.
apply cop_par_perp__perp with A B.

*****
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E C1 C
+++++
finish.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col O C C1
+++++
apply col_permutation_2.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C C1 O
+++++
apply cop_perp2__col with D E.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E C1 O
+++++
Perp.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D E C1 O
+++++
apply coplanar_pseudo_trans with A B C.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
assumption.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
Cop.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C E
+++++
apply col_cop__cop with D.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.
apply col_cop__cop with D.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
Col.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.
apply col_cop__cop with D.
Col.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
Cop.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.
apply col_cop__cop with D.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C D)
+++++
Col.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.
apply col_cop__cop with D.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C D E
+++++
Col.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C C1
+++++
Cop.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C O
+++++
apply coplanar_perm_2, col_cop__cop with B1.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.
apply coplanar_perm_2, col_cop__cop with B1.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B B1
+++++
Col.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.
apply coplanar_perm_2, col_cop__cop with B1.
Col.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B B1
+++++
Cop.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.
apply coplanar_perm_2, col_cop__cop with B1.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B B1)
+++++
Col.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.
Perp.
apply coplanar_pseudo_trans with A B C.
apply coplanar_perm_2, col_cop__cop with B1.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B B1 O
+++++
Col.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C C1 D E
+++++
Perp.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).
idtac.
assert (Midpoint B D F).
idtac.
assert (Midpoint C D E).
idtac.
assert_diffs.
elim (eq_dec_points A O).
intro.
elim (eq_dec_points B O).
intro.
elim (eq_dec_points C O).
intro.
assert (Perp_bisect A O E F).
idtac.
assert (Perp_bisect B O D F).
idtac.
assert (Perp O C D E).
assert (Perp C1 C D E).
apply col_permutation_2.
apply cop_perp2__col with D E.

*****
H32 : Perp C1 C D E
H31 : Perp O C D E
H30 : Perp_bisect B O D F
H29 : Perp_bisect A O E F
H28 : not (eq C O)
H27 : not (eq B O)
H14 : not (eq A O)
H26 : not (eq A A1)
H25 : not (eq B B1)
H24 : not (eq C C1)
H23 : not (eq C E)
H22 : not (eq C D)
H21 : not (eq B F)
H20 : not (eq B D)
H18 : not (eq A F)
H15 : not (eq A E)
H19 : not (eq A C)
H16 : not (eq B C)
H17 : not (eq A B)
H13 : Midpoint C D E
H12 : Midpoint B D F
H11 : Midpoint A E F
H10 : not (eq E F)
H9 : not (eq D F)
H8 : not (eq D E)
H7 : Par B C A F
H6 : Par A C B F
H5 : Par A B C E
H4 : Par B C A E
H3 : Par A C B D
H2 : Par A B C D
H1 : Col C D E
H0 : Col A E F
H : Col B D F
D,E,F : Tpoint
HC2 : Col O B B1
HC1 : Col O A A1
HPerp3 : Perp C C1 A B
HPerp2 : Perp B B1 A C
HPerp1 : Perp A A1 B C
HNC : not (Col A B C)
A,A1,B,B1,C,C1,O : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C O D E
+++++
Perp.
-----
Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.
Proof.
intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.
assert (HT := HNC).
apply construct_triangle in HT.
destruct HT as [D [E [F HT]]].
spliter.
assert (Midpoint A E F).

*****

*****

+++++
Qed.
-----
Lemma is_orthocenter_cases :\n  forall A B C G,\n  is_orthocenter G A B C \/\n  is_orthocenter G A C B \/\n  is_orthocenter G B A C \/\n  is_orthocenter G B C A \/\n  is_orthocenter G C A B \/\n  is_orthocenter G C B A ->\n  is_orthocenter G A B C.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : or (is_orthocenter G A B C) (or (is_orthocenter G A C B) (or (is_orthocenter G B A C) (or (is_orthocenter G B C A) (or (is_orthocenter G C A B) (is_orthocenter G C B A)))))), is_orthocenter G A B C
+++++
Proof.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : or (is_orthocenter G A B C) (or (is_orthocenter G A C B) (or (is_orthocenter G B A C) (or (is_orthocenter G B C A) (or (is_orthocenter G C A B) (is_orthocenter G C B A)))))), is_orthocenter G A B C
+++++
intros.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.

*****
H : or (is_orthocenter G A B C)\n (or (is_orthocenter G A C B)\n (or (is_orthocenter G B A C)\n (or (is_orthocenter G B C A)\n (or (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
decompose [or] H.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.

*****
H0 : is_orthocenter G A B C
H : or (is_orthocenter G A B C)\n (or (is_orthocenter G A C B)\n (or (is_orthocenter G B A C)\n (or (is_orthocenter G B C A)\n (or (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
clear H.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.

*****
H0 : is_orthocenter G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
unfold is_orthocenter in *.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.

*****
H0 : and (not (Col A B C))\n (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
spliter.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.
spliter.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
repeat (split; finish).
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.

*****
H1 : is_orthocenter G A C B
H : or (is_orthocenter G A B C)\n (or (is_orthocenter G A C B)\n (or (is_orthocenter G B A C)\n (or (is_orthocenter G B C A)\n (or (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
clear H.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.

*****
H1 : is_orthocenter G A C B
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
unfold is_orthocenter in *.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.

*****
H1 : and (not (Col A C B))\n (and (Perp A G C B) (and (Perp C G A B) (Perp B G A C)))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
spliter.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.
spliter.

*****
H2 : Perp B G A C
H1 : Perp C G A B
H0 : Perp A G C B
H : not (Col A C B)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
repeat (split; finish).
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.

*****
H0 : is_orthocenter G B A C
H : or (is_orthocenter G A B C)\n (or (is_orthocenter G A C B)\n (or (is_orthocenter G B A C)\n (or (is_orthocenter G B C A)\n (or (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
clear H.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.

*****
H0 : is_orthocenter G B A C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
unfold is_orthocenter in *.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.

*****
H0 : and (not (Col B A C))\n (and (Perp B G A C) (and (Perp A G B C) (Perp C G B A)))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
spliter.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.
spliter.

*****
H2 : Perp C G B A
H1 : Perp A G B C
H0 : Perp B G A C
H : not (Col B A C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
repeat (split; finish).
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.

*****
H1 : is_orthocenter G B C A
H : or (is_orthocenter G A B C)\n (or (is_orthocenter G A C B)\n (or (is_orthocenter G B A C)\n (or (is_orthocenter G B C A)\n (or (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
clear H.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.

*****
H1 : is_orthocenter G B C A
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
unfold is_orthocenter in *.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.

*****
H1 : and (not (Col B C A))\n (and (Perp B G C A) (and (Perp C G B A) (Perp A G B C)))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
spliter.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.
spliter.

*****
H2 : Perp A G B C
H1 : Perp C G B A
H0 : Perp B G C A
H : not (Col B C A)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
repeat (split; finish).
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.

*****
H0 : is_orthocenter G C A B
H : or (is_orthocenter G A B C)\n (or (is_orthocenter G A C B)\n (or (is_orthocenter G B A C)\n (or (is_orthocenter G B C A)\n (or (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
clear H.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.

*****
H0 : is_orthocenter G C A B
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
unfold is_orthocenter in *.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.

*****
H0 : and (not (Col C A B))\n (and (Perp C G A B) (and (Perp A G C B) (Perp B G C A)))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
spliter.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.
spliter.

*****
H2 : Perp B G C A
H1 : Perp A G C B
H0 : Perp C G A B
H : not (Col C A B)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
repeat (split; finish).
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.

*****
H0 : is_orthocenter G C B A
H : or (is_orthocenter G A B C)\n (or (is_orthocenter G A C B)\n (or (is_orthocenter G B A C)\n (or (is_orthocenter G B C A)\n (or (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
clear H.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.

*****
H0 : is_orthocenter G C B A
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A B C
+++++
unfold is_orthocenter in *.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.

*****
H0 : and (not (Col C B A))\n (and (Perp C G B A) (and (Perp B G C A) (Perp A G C B)))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
spliter.
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.
clear H.
unfold is_orthocenter in *.
spliter.

*****
H2 : Perp A G C B
H1 : Perp B G C A
H0 : Perp C G B A
H : not (Col C B A)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
+++++
repeat (split; finish).
-----
Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.
Proof.
intros.
decompose [or] H.

*****

*****

+++++
Qed.
-----
Lemma is_orthocenter_perm : forall A B C G,\n is_orthocenter G A B C ->\n is_orthocenter G A B C /\ is_orthocenter G A C B /\\n is_orthocenter G B A C /\ is_orthocenter G B C A /\\n is_orthocenter G C A B /\ is_orthocenter G C B A.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), and (is_orthocenter G A B C) (and (is_orthocenter G A C B) (and (is_orthocenter G B A C) (and (is_orthocenter G B C A) (and (is_orthocenter G C A B) (is_orthocenter G C B A)))))
+++++
Proof.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), and (is_orthocenter G A B C) (and (is_orthocenter G A C B) (and (is_orthocenter G B A C) (and (is_orthocenter G B C A) (and (is_orthocenter G C A B) (is_orthocenter G C B A)))))
+++++
intros.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.

*****
H : is_orthocenter G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (is_orthocenter G A B C) (and (is_orthocenter G A C B) (and (is_orthocenter G B A C) (and (is_orthocenter G B C A) (and (is_orthocenter G C A B) (is_orthocenter G C B A)))))
+++++
unfold is_orthocenter in *.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.

*****
H : and (not (Col A B C))\n (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))) (and (and (not (Col A C B)) (and (Perp A G C B) (and (Perp C G A B) (Perp B G A C)))) (and (and (not (Col B A C)) (and (Perp B G A C) (and (Perp A G B C) (Perp C G B A)))) (and (and (not (Col B C A)) (and (Perp B G C A) (and (Perp C G B A) (Perp A G B C)))) (and (and (not (Col C A B)) (and (Perp C G A B) (and (Perp A G C B) (Perp B G C A)))) (and (not (Col C B A)) (and (Perp C G B A) (and (Perp B G C A) (Perp A G C B))))))))
+++++
spliter.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (and (not (Col A B C)) (and (Perp A G B C) (and (Perp B G A C) (Perp C G A B)))) (and (and (not (Col A C B)) (and (Perp A G C B) (and (Perp C G A B) (Perp B G A C)))) (and (and (not (Col B A C)) (and (Perp B G A C) (and (Perp A G B C) (Perp C G B A)))) (and (and (not (Col B C A)) (and (Perp B G C A) (and (Perp C G B A) (Perp A G B C)))) (and (and (not (Col C A B)) (and (Perp C G A B) (and (Perp A G C B) (Perp B G C A)))) (and (not (Col C B A)) (and (Perp C G B A) (and (Perp B G C A) (Perp A G C B))))))))
+++++
repeat split.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A G B C
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B G A C
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C G A B
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A C B)
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A G C B
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C G A B
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B G A C
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A C)
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B G A C
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A G B C
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C G B A
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C A)
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B G C A
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C G B A
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A G B C
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C G A B
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A G C B
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B G C A
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C B A)
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C G B A
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B G C A
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****
H2 : Perp C G A B
H1 : Perp B G A C
H0 : Perp A G B C
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A G C B
+++++
finish.
-----
Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
repeat split.

*****

*****

+++++
Qed.
-----
Lemma is_orthocenter_perm_1 : forall A B C G,\n is_orthocenter G A B C -> is_orthocenter G A C B.
-----
Lemma is_orthocenter_perm_1 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A C B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G A C B
+++++
Proof.
-----
Lemma is_orthocenter_perm_1 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A C B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G A C B
+++++
intros.
-----
Lemma is_orthocenter_perm_1 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A C B.
Proof.
intros.

*****
H : is_orthocenter G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A C B
+++++
apply is_orthocenter_perm in H.
-----
Lemma is_orthocenter_perm_1 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A C B.
Proof.
intros.
apply is_orthocenter_perm in H.

*****
H : and (is_orthocenter G A B C)\n (and (is_orthocenter G A C B)\n (and (is_orthocenter G B A C)\n (and (is_orthocenter G B C A)\n (and (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G A C B
+++++
intuition.
-----
Lemma is_orthocenter_perm_1 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A C B.
Proof.
intros.
apply is_orthocenter_perm in H.
intuition.

*****

*****

+++++
Qed.
-----
Lemma is_orthocenter_perm_2 : forall A B C G,\n is_orthocenter G A B C -> is_orthocenter G B A C.
-----
Lemma is_orthocenter_perm_2 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B A C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G B A C
+++++
Proof.
-----
Lemma is_orthocenter_perm_2 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B A C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G B A C
+++++
intros.
-----
Lemma is_orthocenter_perm_2 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B A C.
Proof.
intros.

*****
H : is_orthocenter G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G B A C
+++++
apply is_orthocenter_perm in H.
-----
Lemma is_orthocenter_perm_2 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B A C.
Proof.
intros.
apply is_orthocenter_perm in H.

*****
H : and (is_orthocenter G A B C)\n (and (is_orthocenter G A C B)\n (and (is_orthocenter G B A C)\n (and (is_orthocenter G B C A)\n (and (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G B A C
+++++
intuition.
-----
Lemma is_orthocenter_perm_2 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B A C.
Proof.
intros.
apply is_orthocenter_perm in H.
intuition.

*****

*****

+++++
Qed.
-----
Lemma is_orthocenter_perm_3 : forall A B C G,\n is_orthocenter G A B C -> is_orthocenter G B C A.
-----
Lemma is_orthocenter_perm_3 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B C A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G B C A
+++++
Proof.
-----
Lemma is_orthocenter_perm_3 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B C A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G B C A
+++++
intros.
-----
Lemma is_orthocenter_perm_3 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B C A.
Proof.
intros.

*****
H : is_orthocenter G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G B C A
+++++
apply is_orthocenter_perm in H.
-----
Lemma is_orthocenter_perm_3 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B C A.
Proof.
intros.
apply is_orthocenter_perm in H.

*****
H : and (is_orthocenter G A B C)\n (and (is_orthocenter G A C B)\n (and (is_orthocenter G B A C)\n (and (is_orthocenter G B C A)\n (and (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G B C A
+++++
intuition.
-----
Lemma is_orthocenter_perm_3 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B C A.
Proof.
intros.
apply is_orthocenter_perm in H.
intuition.

*****

*****

+++++
Qed.
-----
Lemma is_orthocenter_perm_4 : forall A B C G,\n is_orthocenter G A B C -> is_orthocenter G C A B.
-----
Lemma is_orthocenter_perm_4 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C A B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G C A B
+++++
Proof.
-----
Lemma is_orthocenter_perm_4 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C A B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G C A B
+++++
intros.
-----
Lemma is_orthocenter_perm_4 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C A B.
Proof.
intros.

*****
H : is_orthocenter G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G C A B
+++++
apply is_orthocenter_perm in H.
-----
Lemma is_orthocenter_perm_4 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C A B.
Proof.
intros.
apply is_orthocenter_perm in H.

*****
H : and (is_orthocenter G A B C)\n (and (is_orthocenter G A C B)\n (and (is_orthocenter G B A C)\n (and (is_orthocenter G B C A)\n (and (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G C A B
+++++
intuition.
-----
Lemma is_orthocenter_perm_4 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C A B.
Proof.
intros.
apply is_orthocenter_perm in H.
intuition.

*****

*****

+++++
Qed.
-----
Lemma is_orthocenter_perm_5 : forall A B C G,\n is_orthocenter G A B C -> is_orthocenter G C B A.
-----
Lemma is_orthocenter_perm_5 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C B A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G C B A
+++++
Proof.
-----
Lemma is_orthocenter_perm_5 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C B A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_orthocenter G A B C), is_orthocenter G C B A
+++++
intros.
-----
Lemma is_orthocenter_perm_5 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C B A.
Proof.
intros.

*****
H : is_orthocenter G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G C B A
+++++
apply is_orthocenter_perm in H.
-----
Lemma is_orthocenter_perm_5 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C B A.
Proof.
intros.
apply is_orthocenter_perm in H.

*****
H : and (is_orthocenter G A B C)\n (and (is_orthocenter G A C B)\n (and (is_orthocenter G B A C)\n (and (is_orthocenter G B C A)\n (and (is_orthocenter G C A B) (is_orthocenter G C B A)))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_orthocenter G C B A
+++++
intuition.
-----
Lemma is_orthocenter_perm_5 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C B A.
Proof.
intros.
apply is_orthocenter_perm in H.
intuition.

*****

*****

+++++
Qed.
-----
Lemma orthocenter_per :\n forall A B C H,\n Per A B C ->\n is_orthocenter H A B C ->\n H=B.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C H : Tpoint) (_ : Per A B C) (_ : is_orthocenter H A B C), eq H B
+++++
Proof.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C H : Tpoint) (_ : Per A B C) (_ : is_orthocenter H A B C), eq H B
+++++
intros.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.

*****
H1 : is_orthocenter H A B C
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
unfold is_orthocenter in *.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.

*****
H1 : and (not (Col A B C))\n (and (Perp A H B C) (and (Perp B H A C) (Perp C H A B)))
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
spliter.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.

*****
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
assert_diffs.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.

*****
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
assert (Perp A B B C).
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).

*****
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A B B C
+++++
apply per_perp.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
apply per_perp.

*****
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
apply per_perp.

*****
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
apply per_perp.

*****
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).

*****
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
idtac.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.

*****
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
assert (Par A H A B).
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).

*****
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A H A B
+++++
apply l12_9 with B C.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
apply l12_9 with B C.

*****
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C A A
+++++
Cop.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
apply l12_9 with B C.

*****
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C A B
+++++
Cop.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
apply l12_9 with B C.

*****
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C H A
+++++
Cop.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
apply l12_9 with B C.

*****
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C H B
+++++
Cop.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
apply l12_9 with B C.

*****
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A H B C
+++++
Cop.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
apply l12_9 with B C.

*****
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A B B C
+++++
Cop.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).

*****
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
idtac.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.

*****
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
assert (Col A B H).
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).

*****
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B H
+++++
perm_apply (par_id A B H).
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).

*****
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
idtac.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.

*****
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
assert (Par C H B C).
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).

*****
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par C H B C
+++++
apply l12_9 with A B.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
apply l12_9 with A B.

*****
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C B
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
apply l12_9 with A B.

*****
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C C
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
apply l12_9 with A B.

*****
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B H B
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
apply l12_9 with A B.

*****
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B H C
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
apply l12_9 with A B.

*****
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C H A B
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
apply l12_9 with A B.

*****
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B C A B
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).

*****
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
idtac.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.

*****
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
assert (Col B C H).
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.
assert (Col B C H).

*****
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C H
+++++
perm_apply (par_id C B H).
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.
assert (Col B C H).

*****
H15 : Col B C H
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
idtac.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.
assert (Col B C H).
idtac.

*****
H15 : Col B C H
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H B
+++++
apply l6_21 with A B C B.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.
assert (Col B C H).
idtac.
apply l6_21 with A B C B.

*****
H15 : Col B C H
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.
assert (Col B C H).
idtac.
apply l6_21 with A B C B.

*****
H15 : Col B C H
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.
assert (Col B C H).
idtac.
apply l6_21 with A B C B.

*****
H15 : Col B C H
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B H
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.
assert (Col B C H).
idtac.
apply l6_21 with A B C B.

*****
H15 : Col B C H
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B B
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.
assert (Col B C H).
idtac.
apply l6_21 with A B C B.

*****
H15 : Col B C H
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C B H
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).
idtac.
assert (Par A H A B).
idtac.
assert (Col A B H).
idtac.
assert (Par C H B C).
idtac.
assert (Col B C H).
idtac.
apply l6_21 with A B C B.

*****
H15 : Col B C H
H14 : Par C H B C
H13 : Col A B H
H12 : Par A H A B
H5 : Perp A B B C
H11 : not (eq A H)
H9 : not (eq B H)
H6 : not (eq C H)
H10 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq A B)
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Per A B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C B B
+++++
finish.
-----
Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert_diffs.
assert (Perp A B B C).

*****

*****

+++++
Qed.
-----
Lemma orthocenter_col :\n forall A B C H,\n Col H B C ->\n is_orthocenter H A B C ->\n H = B \/ H = C.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C H : Tpoint) (_ : Col H B C) (_ : is_orthocenter H A B C), or (eq H B) (eq H C)
+++++
Proof.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C H : Tpoint) (_ : Col H B C) (_ : is_orthocenter H A B C), or (eq H B) (eq H C)
+++++
intros.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.

*****
H1 : is_orthocenter H A B C
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
unfold is_orthocenter in *.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.

*****
H1 : and (not (Col A B C))\n (and (Perp A H B C) (and (Perp B H A C) (Perp C H A B)))
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
spliter.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.

*****
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
assert (Perp_at H B C A H).
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).

*****
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at H B C A H
+++++
apply l8_14_2_1b_bis.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
apply l8_14_2_1b_bis.

*****
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B C A H
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
apply l8_14_2_1b_bis.

*****
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col H B C
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
apply l8_14_2_1b_bis.

*****
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col H A H
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).

*****
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
induction (eq_dec_points B H).
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).

*****
H6 : eq B H
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
subst.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
subst.

*****
H0 : Col H H C
H1 : not (Col A H C)
H2 : Perp A H H C
H3 : Perp H H A C
H4 : Perp C H A H
H5 : Perp_at H H C A H
A,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H H) (eq H C)
+++++
auto.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).

*****
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
assert (Perp A H B H).
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).

*****
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A H B H
+++++
apply (perp_col1 A H B C H).
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
apply (perp_col1 A H B C H).

*****
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B H)
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
apply (perp_col1 A H B C H).

*****
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A H B C
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
apply (perp_col1 A H B C H).

*****
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C H
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).

*****
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
idtac.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.

*****
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
assert (Par A H A C).
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).

*****
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A H A C
+++++
apply l12_9 with B H.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
apply l12_9 with B H.

*****
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B H A A
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
apply l12_9 with B H.

*****
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B H A C
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
apply l12_9 with B H.

*****
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B H H A
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
apply l12_9 with B H.

*****
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B H H C
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
apply l12_9 with B H.

*****
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A H B H
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
apply l12_9 with B H.

*****
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A C B H
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).

*****
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
idtac.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.

*****
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
assert (Col H A C).
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).

*****
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col H A C
+++++
perm_apply (par_id A C H).
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).

*****
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
idtac.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.

*****
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
assert (H=C).
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).

*****
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H C
+++++
assert_diffs.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).
assert_diffs.

*****
H14 : not (eq C H)
H11 : not (eq A H)
H15 : not (eq A C)
H12 : not (eq B C)
H13 : not (eq A B)
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq H C
+++++
apply l6_21 with B C A C.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).
assert_diffs.
apply l6_21 with B C A C.

*****
H14 : not (eq C H)
H11 : not (eq A H)
H15 : not (eq A C)
H12 : not (eq B C)
H13 : not (eq A B)
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C A)
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).
assert_diffs.
apply l6_21 with B C A C.

*****
H14 : not (eq C H)
H11 : not (eq A H)
H15 : not (eq A C)
H12 : not (eq B C)
H13 : not (eq A B)
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).
assert_diffs.
apply l6_21 with B C A C.

*****
H14 : not (eq C H)
H11 : not (eq A H)
H15 : not (eq A C)
H12 : not (eq B C)
H13 : not (eq A B)
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C H
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).
assert_diffs.
apply l6_21 with B C A C.

*****
H14 : not (eq C H)
H11 : not (eq A H)
H15 : not (eq A C)
H12 : not (eq B C)
H13 : not (eq A B)
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C C
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).
assert_diffs.
apply l6_21 with B C A C.

*****
H14 : not (eq C H)
H11 : not (eq A H)
H15 : not (eq A C)
H12 : not (eq B C)
H13 : not (eq A B)
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C H
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).
assert_diffs.
apply l6_21 with B C A C.

*****
H14 : not (eq C H)
H11 : not (eq A H)
H15 : not (eq A C)
H12 : not (eq B C)
H13 : not (eq A B)
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C C
+++++
finish.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).

*****
H10 : eq H C
H9 : Col H A C
H8 : Par A H A C
H7 : Perp A H B H
H6 : not (eq B H)
H5 : Perp_at H B C A H
H4 : Perp C H A B
H3 : Perp B H A C
H2 : Perp A H B C
H1 : not (Col A B C)
H0 : Col H B C
A,B,C,H : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq H B) (eq H C)
+++++
subst.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).
induction (eq_dec_points B H).
assert (Perp A H B H).
idtac.
assert (Par A H A C).
idtac.
assert (Col H A C).
idtac.
assert (H=C).
subst.

*****
H2 : Perp A C B C
H3 : Perp B C A C
H4 : Perp C C A B
H5 : Perp_at C B C A C
H6 : not (eq B C)
H7 : Perp A C B C
H8 : Par A C A C
H9 : Col C A C
H1 : not (Col A B C)
H0 : Col C B C
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq C B) (eq C C)
+++++
auto.
-----
Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.
Proof.
intros.
unfold is_orthocenter in *.
spliter.
assert (Perp_at H B C A H).

*****

*****

+++++
Qed.
-----
End Orthocenter.
-----
Hint Resolve\n     is_orthocenter_perm_1\n     is_orthocenter_perm_2\n     is_orthocenter_perm_3\n     is_orthocenter_perm_4\n     is_orthocenter_perm_5 : Orthocenter.
-----
