From Coq Require Import Classical.
-----
Require Export GeoCoq.Elements.OriginalProofs.euclidean_defs.
-----
Require Export GeoCoq.Elements.OriginalProofs.general_tactics.
-----
Ltac remove_double_neg :=\nrepeat\n match goal with\n H: ~ ~ ?X |- _ => apply NNPP in H\nend.
-----
Section basic_lemmas.
-----
Context `{Ax:euclidean_neutral}.
-----
Lemma Col_or_nCol : forall A B C,\n  Col A B C \/ nCol A B C.
-----
Lemma Col_or_nCol : forall A B C, Col A B C \\/ nCol A B C.

*****
Ax : euclidean_neutral
*****
forall A B C : Point, or (Col A B C) (nCol A B C)
+++++
Proof.
-----
Lemma Col_or_nCol : forall A B C, Col A B C \\/ nCol A B C.
Proof.

*****
Ax : euclidean_neutral
*****
forall A B C : Point, or (Col A B C) (nCol A B C)
+++++
unfold nCol.
-----
Lemma Col_or_nCol : forall A B C, Col A B C \\/ nCol A B C.
Proof.
unfold nCol.

*****
Ax : euclidean_neutral
*****
forall A B C : Point, or (Col A B C) (and (neq A B) (and (neq A C) (and (neq B C) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C)))))))
+++++
unfold Col.
-----
Lemma Col_or_nCol : forall A B C, Col A B C \\/ nCol A B C.
Proof.
unfold nCol.
unfold Col.

*****
Ax : euclidean_neutral
*****
forall A B C : Point, or (or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))) (and (neq A B) (and (neq A C) (and (neq B C) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C)))))))
+++++
intros.
-----
Lemma Col_or_nCol : forall A B C, Col A B C \\/ nCol A B C.
Proof.
unfold nCol.
unfold Col.
intros.

*****
A,B,C : Point
Ax : euclidean_neutral
*****
or (or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))) (and (neq A B) (and (neq A C) (and (neq B C) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C)))))))
+++++
tauto.
-----
Lemma Col_or_nCol : forall A B C, Col A B C \\/ nCol A B C.
Proof.
unfold nCol.
unfold Col.
intros.
tauto.

*****

*****

+++++
Qed.
-----
Lemma nCol_or_Col : forall A B C,\n  nCol A B C \/ Col A B C.
-----
Lemma nCol_or_Col : forall A B C, nCol A B C \\/ Col A B C.

*****
Ax : euclidean_neutral
*****
forall A B C : Point, or (nCol A B C) (Col A B C)
+++++
Proof.
-----
Lemma nCol_or_Col : forall A B C, nCol A B C \\/ Col A B C.
Proof.

*****
Ax : euclidean_neutral
*****
forall A B C : Point, or (nCol A B C) (Col A B C)
+++++
unfold nCol.
-----
Lemma nCol_or_Col : forall A B C, nCol A B C \\/ Col A B C.
Proof.
unfold nCol.

*****
Ax : euclidean_neutral
*****
forall A B C : Point, or (and (neq A B) (and (neq A C) (and (neq B C) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C))))))) (Col A B C)
+++++
unfold Col.
-----
Lemma nCol_or_Col : forall A B C, nCol A B C \\/ Col A B C.
Proof.
unfold nCol.
unfold Col.

*****
Ax : euclidean_neutral
*****
forall A B C : Point, or (and (neq A B) (and (neq A C) (and (neq B C) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C))))))) (or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B))))))
+++++
intros.
-----
Lemma nCol_or_Col : forall A B C, nCol A B C \\/ Col A B C.
Proof.
unfold nCol.
unfold Col.
intros.

*****
A,B,C : Point
Ax : euclidean_neutral
*****
or (and (neq A B) (and (neq A C) (and (neq B C) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C))))))) (or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B))))))
+++++
tauto.
-----
Lemma nCol_or_Col : forall A B C, nCol A B C \\/ Col A B C.
Proof.
unfold nCol.
unfold Col.
intros.
tauto.

*****

*****

+++++
Qed.
-----
Lemma eq_or_neq : forall A B,\n eq A B \/ neq A B.
-----
Lemma eq_or_neq : forall A B, eq A B \\/ neq A B.

*****
Ax : euclidean_neutral
*****
forall A B : Point, or (eq A B) (neq A B)
+++++
Proof.
-----
Lemma eq_or_neq : forall A B, eq A B \\/ neq A B.
Proof.

*****
Ax : euclidean_neutral
*****
forall A B : Point, or (eq A B) (neq A B)
+++++
intros.
-----
Lemma eq_or_neq : forall A B, eq A B \\/ neq A B.
Proof.
intros.

*****
A,B : Point
Ax : euclidean_neutral
*****
or (eq A B) (neq A B)
+++++
unfold neq.
-----
Lemma eq_or_neq : forall A B, eq A B \\/ neq A B.
Proof.
intros.
unfold neq.

*****
A,B : Point
Ax : euclidean_neutral
*****
or (eq A B) (not (eq A B))
+++++
tauto.
-----
Lemma eq_or_neq : forall A B, eq A B \\/ neq A B.
Proof.
intros.
unfold neq.
tauto.

*****

*****

+++++
Qed.
-----
Lemma neq_or_eq : forall A B,\n neq A B \/ eq A B.
-----
Lemma neq_or_eq : forall A B, neq A B \\/ eq A B.

*****
Ax : euclidean_neutral
*****
forall A B : Point, or (neq A B) (eq A B)
+++++
Proof.
-----
Lemma neq_or_eq : forall A B, neq A B \\/ eq A B.
Proof.

*****
Ax : euclidean_neutral
*****
forall A B : Point, or (neq A B) (eq A B)
+++++
intros.
-----
Lemma neq_or_eq : forall A B, neq A B \\/ eq A B.
Proof.
intros.

*****
A,B : Point
Ax : euclidean_neutral
*****
or (neq A B) (eq A B)
+++++
unfold neq.
-----
Lemma neq_or_eq : forall A B, neq A B \\/ eq A B.
Proof.
intros.
unfold neq.

*****
A,B : Point
Ax : euclidean_neutral
*****
or (not (eq A B)) (eq A B)
+++++
tauto.
-----
Lemma neq_or_eq : forall A B, neq A B \\/ eq A B.
Proof.
intros.
unfold neq.
tauto.

*****

*****

+++++
Qed.
-----
Lemma Col_nCol_False : forall A B C, nCol A B C -> Col A B C -> False.
-----
Lemma Col_nCol_False : forall A B C, nCol A B C -> Col A B C -> False.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : nCol A B C) (_ : Col A B C), False
+++++
Proof.
-----
Lemma Col_nCol_False : forall A B C, nCol A B C -> Col A B C -> False.
Proof.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : nCol A B C) (_ : Col A B C), False
+++++
unfold Col.
-----
Lemma Col_nCol_False : forall A B C, nCol A B C -> Col A B C -> False.
Proof.
unfold Col.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : nCol A B C) (_ : or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))), False
+++++
unfold nCol.
-----
Lemma Col_nCol_False : forall A B C, nCol A B C -> Col A B C -> False.
Proof.
unfold Col.
unfold nCol.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : and (neq A B) (and (neq A C) (and (neq B C) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C))))))) (_ : or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))), False
+++++
intuition.
-----
Lemma Col_nCol_False : forall A B C, nCol A B C -> Col A B C -> False.
Proof.
unfold Col.
unfold nCol.
intuition.

*****

*****

+++++
Qed.
-----
Lemma nCol_notCol :\n forall A B C, ~ Col A B C -> nCol A B C.
-----
Lemma nCol_notCol : forall A B C, ~ Col A B C -> nCol A B C.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : not (Col A B C)), nCol A B C
+++++
Proof.
-----
Lemma nCol_notCol : forall A B C, ~ Col A B C -> nCol A B C.
Proof.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : not (Col A B C)), nCol A B C
+++++
intros.
-----
Lemma nCol_notCol : forall A B C, ~ Col A B C -> nCol A B C.
Proof.
intros.

*****
H : not (Col A B C)
A,B,C : Point
Ax : euclidean_neutral
*****
nCol A B C
+++++
unfold nCol in *.
-----
Lemma nCol_notCol : forall A B C, ~ Col A B C -> nCol A B C.
Proof.
intros.
unfold nCol in *.

*****
H : not (Col A B C)
A,B,C : Point
Ax : euclidean_neutral
*****
and (neq A B) (and (neq A C) (and (neq B C) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C))))))
+++++
unfold Col in *.
-----
Lemma nCol_notCol : forall A B C, ~ Col A B C -> nCol A B C.
Proof.
intros.
unfold nCol in *.
unfold Col in *.

*****
H : not\n (or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B))))))
A,B,C : Point
Ax : euclidean_neutral
*****
and (neq A B) (and (neq A C) (and (neq B C) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C))))))
+++++
unfold neq in *.
-----
Lemma nCol_notCol : forall A B C, ~ Col A B C -> nCol A B C.
Proof.
intros.
unfold nCol in *.
unfold Col in *.
unfold neq in *.

*****
H : not\n (or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B))))))
A,B,C : Point
Ax : euclidean_neutral
*****
and (not (eq A B)) (and (not (eq A C)) (and (not (eq B C)) (and (not (BetS A B C)) (and (not (BetS A C B)) (not (BetS B A C))))))
+++++
intuition.
-----
Lemma nCol_notCol : forall A B C, ~ Col A B C -> nCol A B C.
Proof.
intros.
unfold nCol in *.
unfold Col in *.
unfold neq in *.
intuition.

*****

*****

+++++
Qed.
-----
Lemma not_nCol_Col : forall A B C,\n  ~ nCol A B C -> Col A B C.
-----
Lemma not_nCol_Col : forall A B C, ~ nCol A B C -> Col A B C.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : not (nCol A B C)), Col A B C
+++++
Proof.
-----
Lemma not_nCol_Col : forall A B C, ~ nCol A B C -> Col A B C.
Proof.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : not (nCol A B C)), Col A B C
+++++
intros.
-----
Lemma not_nCol_Col : forall A B C, ~ nCol A B C -> Col A B C.
Proof.
intros.

*****
H : not (nCol A B C)
A,B,C : Point
Ax : euclidean_neutral
*****
Col A B C
+++++
unfold nCol in *.
-----
Lemma not_nCol_Col : forall A B C, ~ nCol A B C -> Col A B C.
Proof.
intros.
unfold nCol in *.

*****
H : not\n (and (neq A B)\n (and (neq A C)\n (and (neq B C)\n (and (not (BetS A B C))\n (and (not (BetS A C B)) (not (BetS B A C)))))))
A,B,C : Point
Ax : euclidean_neutral
*****
Col A B C
+++++
unfold Col in *.
-----
Lemma not_nCol_Col : forall A B C, ~ nCol A B C -> Col A B C.
Proof.
intros.
unfold nCol in *.
unfold Col in *.

*****
H : not\n (and (neq A B)\n (and (neq A C)\n (and (neq B C)\n (and (not (BetS A B C))\n (and (not (BetS A C B)) (not (BetS B A C)))))))
A,B,C : Point
Ax : euclidean_neutral
*****
or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
+++++
unfold neq in *.
-----
Lemma not_nCol_Col : forall A B C, ~ nCol A B C -> Col A B C.
Proof.
intros.
unfold nCol in *.
unfold Col in *.
unfold neq in *.

*****
H : not\n (and (not (eq A B))\n (and (not (eq A C))\n (and (not (eq B C))\n (and (not (BetS A B C))\n (and (not (BetS A C B)) (not (BetS B A C)))))))
A,B,C : Point
Ax : euclidean_neutral
*****
or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
+++++
tauto.
-----
Lemma not_nCol_Col : forall A B C, ~ nCol A B C -> Col A B C.
Proof.
intros.
unfold nCol in *.
unfold Col in *.
unfold neq in *.
tauto.

*****

*****

+++++
Qed.
-----
Lemma nCol_not_Col : forall A B C,\n  nCol A B C -> ~ Col A B C.
-----
Lemma nCol_not_Col : forall A B C, nCol A B C -> ~ Col A B C.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : nCol A B C), not (Col A B C)
+++++
Proof.
-----
Lemma nCol_not_Col : forall A B C, nCol A B C -> ~ Col A B C.
Proof.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : nCol A B C), not (Col A B C)
+++++
intros.
-----
Lemma nCol_not_Col : forall A B C, nCol A B C -> ~ Col A B C.
Proof.
intros.

*****
H : nCol A B C
A,B,C : Point
Ax : euclidean_neutral
*****
not (Col A B C)
+++++
unfold nCol in *.
-----
Lemma nCol_not_Col : forall A B C, nCol A B C -> ~ Col A B C.
Proof.
intros.
unfold nCol in *.

*****
H : and (neq A B)\n (and (neq A C)\n (and (neq B C)\n (and (not (BetS A B C))\n (and (not (BetS A C B)) (not (BetS B A C))))))
A,B,C : Point
Ax : euclidean_neutral
*****
not (Col A B C)
+++++
unfold Col in *.
-----
Lemma nCol_not_Col : forall A B C, nCol A B C -> ~ Col A B C.
Proof.
intros.
unfold nCol in *.
unfold Col in *.

*****
H : and (neq A B)\n (and (neq A C)\n (and (neq B C)\n (and (not (BetS A B C))\n (and (not (BetS A C B)) (not (BetS B A C))))))
A,B,C : Point
Ax : euclidean_neutral
*****
not (or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B))))))
+++++
unfold neq in *.
-----
Lemma nCol_not_Col : forall A B C, nCol A B C -> ~ Col A B C.
Proof.
intros.
unfold nCol in *.
unfold Col in *.
unfold neq in *.

*****
H : and (not (eq A B))\n (and (not (eq A C))\n (and (not (eq B C))\n (and (not (BetS A B C))\n (and (not (BetS A C B)) (not (BetS B A C))))))
A,B,C : Point
Ax : euclidean_neutral
*****
not (or (eq A B) (or (eq A C) (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B))))))
+++++
tauto.
-----
Lemma nCol_not_Col : forall A B C, nCol A B C -> ~ Col A B C.
Proof.
intros.
unfold nCol in *.
unfold Col in *.
unfold neq in *.
tauto.

*****

*****

+++++
Qed.
-----
End basic_lemmas.
-----
Hint Resolve not_nCol_Col \n nCol_not_Col nCol_notCol Col_nCol_False.
-----
Hint Resolve \n Col_or_nCol nCol_or_Col eq_or_neq neq_or_eq : decidability.
-----
Tactic Notation "by" "cases" "on" constr(t) :=\n(let H := hyp_of_type t in decompose [or] H; clear H) ||\n   let C := fresh in (assert (C:t) by (auto with decidability || unfold neq in *;tauto);\n decompose [or] C;clear C).
-----
Ltac remove_not_nCol :=\nrepeat\nmatch goal with\n H: ~ nCol ?A ?B ?C |- _ => apply not_nCol_Col in H\nend.
-----
Ltac forward_using thm :=\n remove_not_nCol;spliter;splits;\n match goal with\n  H: ?X |- _ => apply thm in H;spliter;assumption\n end.
-----
Ltac contradict := \n (solve [eauto using Col_nCol_False]) || contradiction || (unfold nCol in *;intuition).
-----
Ltac conclude t :=\n spliter;\n remove_double_neg;\n solve [unfold eq in *;mysubst;assumption |\n        eauto using t |\n        eapply t;eauto |\n        eapply t;intuition |\n        apply <- t;remove_exists;eauto  |\n        unfold neq,eq in *;intuition |\n        unfold neq,eq in *;remove_double_neg;congruence |\n        apply t;tauto\n].
-----
Ltac close := solve [assumption |\n                     auto |\n                     repeat (split;auto) |\n                     unfold neq, nCol in *;try assumption;tauto |\n                     remove_exists;eauto 15 \n                    ].
-----
Ltac conclude_def_aux t := (remove_double_neg;\n  (progress (unfold t);  \n   solve [remove_exists;eauto 6 | \n          remove_exists;splits;eauto  |\n          remove_exists;eauto 11 |\n          one_of_disjunct |\n          intuition\n         ])) \n || \n solve [unfold t in *;spliter;assumption |\n        unfold t in *;destruct_all;assumption |\n        unfold t in *;remove_double_neg;destruct_all;remove_exists;eauto 11  ].
-----
Tactic Notation "conclude_def" reference(x) := (conclude_def_aux x).
-----
