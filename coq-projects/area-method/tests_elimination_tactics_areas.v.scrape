Require  Import area_method.
-----
Lemma test_area_on_line_1 : forall I B C, \n  on_line I B C -> S I B C = 0.
-----
Lemma test_area_on_line_1 : forall I B C, on_line I B C -> S I B C = 0.

*****

*****
forall (I B C : Point) (_ : on_line I B C), eq (S I B C) F0
+++++
Proof.
-----
Lemma test_area_on_line_1 : forall I B C, on_line I B C -> S I B C = 0.
Proof.

*****

*****
forall (I B C : Point) (_ : on_line I B C), eq (S I B C) F0
+++++
geoInit.
-----
Lemma test_area_on_line_1 : forall I B C, on_line I B C -> S I B C = 0.
Proof.
geoInit.

*****
H0 : on_line_d I B C f
f : F
I,B,C : Point
*****
eq (S I B C) F0
+++++
eliminate I.
-----
Lemma test_area_on_line_1 : forall I B C, on_line I B C -> S I B C = 0.
Proof.
geoInit.
eliminate I.

*****
f : F
I,B,C : Point
*****
eq F0 F0
+++++
basic_simpl.
-----
Lemma test_area_on_line_1 : forall I B C, on_line I B C -> S I B C = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.

*****
f : F
I,B,C : Point
*****
eq F0 F0
+++++
auto.
-----
Lemma test_area_on_line_1 : forall I B C, on_line I B C -> S I B C = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_line_2 : forall I B C, \n  on_line I B C -> S B C I = 0.
-----
Lemma test_area_on_line_2 : forall I B C, on_line I B C -> S B C I = 0.

*****

*****
forall (I B C : Point) (_ : on_line I B C), eq (S B C I) F0
+++++
Proof.
-----
Lemma test_area_on_line_2 : forall I B C, on_line I B C -> S B C I = 0.
Proof.

*****

*****
forall (I B C : Point) (_ : on_line I B C), eq (S B C I) F0
+++++
geoInit.
-----
Lemma test_area_on_line_2 : forall I B C, on_line I B C -> S B C I = 0.
Proof.
geoInit.

*****
H0 : on_line_d I B C f
f : F
I,B,C : Point
*****
eq (S B C I) F0
+++++
eliminate I.
-----
Lemma test_area_on_line_2 : forall I B C, on_line I B C -> S B C I = 0.
Proof.
geoInit.
eliminate I.

*****
f : F
I,B,C : Point
*****
eq F0 F0
+++++
basic_simpl.
-----
Lemma test_area_on_line_2 : forall I B C, on_line I B C -> S B C I = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.

*****
f : F
I,B,C : Point
*****
eq F0 F0
+++++
auto.
-----
Lemma test_area_on_line_2 : forall I B C, on_line I B C -> S B C I = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_line_3 : forall I B C, \n  on_line I B C -> S B I C = 0.
-----
Lemma test_area_on_line_3 : forall I B C, on_line I B C -> S B I C = 0.

*****

*****
forall (I B C : Point) (_ : on_line I B C), eq (S B I C) F0
+++++
Proof.
-----
Lemma test_area_on_line_3 : forall I B C, on_line I B C -> S B I C = 0.
Proof.

*****

*****
forall (I B C : Point) (_ : on_line I B C), eq (S B I C) F0
+++++
geoInit.
-----
Lemma test_area_on_line_3 : forall I B C, on_line I B C -> S B I C = 0.
Proof.
geoInit.

*****
H0 : on_line_d I B C f
f : F
I,B,C : Point
*****
eq (S B I C) F0
+++++
eliminate I.
-----
Lemma test_area_on_line_3 : forall I B C, on_line I B C -> S B I C = 0.
Proof.
geoInit.
eliminate I.

*****
f : F
I,B,C : Point
*****
eq F0 F0
+++++
basic_simpl.
-----
Lemma test_area_on_line_3 : forall I B C, on_line I B C -> S B I C = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.

*****
f : F
I,B,C : Point
*****
eq F0 F0
+++++
auto.
-----
Lemma test_area_on_line_3 : forall I B C, on_line I B C -> S B I C = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_line_d_1 : forall I B C, forall x:F, \n  on_line_d I B C x -> S B I C = 0.
-----
Lemma test_area_on_line_d_1 : forall I B C, forall x:F, on_line_d I B C x -> S B I C = 0.

*****

*****
forall (I B C : Point) (x : F) (_ : on_line_d I B C x), eq (S B I C) F0
+++++
Proof.
-----
Lemma test_area_on_line_d_1 : forall I B C, forall x:F, on_line_d I B C x -> S B I C = 0.
Proof.

*****

*****
forall (I B C : Point) (x : F) (_ : on_line_d I B C x), eq (S B I C) F0
+++++
geoInit.
-----
Lemma test_area_on_line_d_1 : forall I B C, forall x:F, on_line_d I B C x -> S B I C = 0.
Proof.
geoInit.

*****
H : on_line_d I B C x
x : F
I,B,C : Point
*****
eq (S B I C) F0
+++++
eliminate I.
-----
Lemma test_area_on_line_d_1 : forall I B C, forall x:F, on_line_d I B C x -> S B I C = 0.
Proof.
geoInit.
eliminate I.

*****
x : F
B,C : Point
*****
eq F0 F0
+++++
basic_simpl.
-----
Lemma test_area_on_line_d_1 : forall I B C, forall x:F, on_line_d I B C x -> S B I C = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.

*****
x : F
B,C : Point
*****
eq F0 F0
+++++
auto.
-----
Lemma test_area_on_line_d_1 : forall I B C, forall x:F, on_line_d I B C x -> S B I C = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_line_d_2 : forall I B C, forall x:F, \n  on_line_d I B C x -> S I B C = 0.
-----
Lemma test_area_on_line_d_2 : forall I B C, forall x:F, on_line_d I B C x -> S I B C = 0.

*****

*****
forall (I B C : Point) (x : F) (_ : on_line_d I B C x), eq (S I B C) F0
+++++
Proof.
-----
Lemma test_area_on_line_d_2 : forall I B C, forall x:F, on_line_d I B C x -> S I B C = 0.
Proof.

*****

*****
forall (I B C : Point) (x : F) (_ : on_line_d I B C x), eq (S I B C) F0
+++++
geoInit.
-----
Lemma test_area_on_line_d_2 : forall I B C, forall x:F, on_line_d I B C x -> S I B C = 0.
Proof.
geoInit.

*****
H : on_line_d I B C x
x : F
I,B,C : Point
*****
eq (S I B C) F0
+++++
eliminate I.
-----
Lemma test_area_on_line_d_2 : forall I B C, forall x:F, on_line_d I B C x -> S I B C = 0.
Proof.
geoInit.
eliminate I.

*****
x : F
B,C : Point
*****
eq F0 F0
+++++
basic_simpl.
-----
Lemma test_area_on_line_d_2 : forall I B C, forall x:F, on_line_d I B C x -> S I B C = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.

*****
x : F
B,C : Point
*****
eq F0 F0
+++++
auto.
-----
Lemma test_area_on_line_d_2 : forall I B C, forall x:F, on_line_d I B C x -> S I B C = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_line_d_3 : forall I B C, forall x:F, \n  on_line_d I B C x -> S B C I = 0.
-----
Lemma test_area_on_line_d_3 : forall I B C, forall x:F, on_line_d I B C x -> S B C I = 0.

*****

*****
forall (I B C : Point) (x : F) (_ : on_line_d I B C x), eq (S B C I) F0
+++++
Proof.
-----
Lemma test_area_on_line_d_3 : forall I B C, forall x:F, on_line_d I B C x -> S B C I = 0.
Proof.

*****

*****
forall (I B C : Point) (x : F) (_ : on_line_d I B C x), eq (S B C I) F0
+++++
geoInit.
-----
Lemma test_area_on_line_d_3 : forall I B C, forall x:F, on_line_d I B C x -> S B C I = 0.
Proof.
geoInit.

*****
H : on_line_d I B C x
x : F
I,B,C : Point
*****
eq (S B C I) F0
+++++
eliminate I.
-----
Lemma test_area_on_line_d_3 : forall I B C, forall x:F, on_line_d I B C x -> S B C I = 0.
Proof.
geoInit.
eliminate I.

*****
x : F
B,C : Point
*****
eq F0 F0
+++++
basic_simpl.
-----
Lemma test_area_on_line_d_3 : forall I B C, forall x:F, on_line_d I B C x -> S B C I = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.

*****
x : F
B,C : Point
*****
eq F0 F0
+++++
auto.
-----
Lemma test_area_on_line_d_3 : forall I B C, forall x:F, on_line_d I B C x -> S B C I = 0.
Proof.
geoInit.
eliminate I.
basic_simpl.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_area_inter_ll_1 : forall I A B C D X Y,\n inter_ll I A B C D -> S X Y I = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
-----
Lemma test_area_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> S X Y I = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (S X Y I) (Fmult (Fdiv F1 (S4 A C B D)) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
Proof.
-----
Lemma test_area_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> S X Y I = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (S X Y I) (Fmult (Fdiv F1 (S4 A C B D)) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
geoInit.
-----
Lemma test_area_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> S X Y I = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.
geoInit.

*****
H : inter_ll I A B C D
I,A,B,C,D,X,Y : Point
*****
eq (S X Y I) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
eliminate I.
-----
Lemma test_area_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> S X Y I = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.
geoInit.
eliminate I.

*****
H0 : not (eq (Fplus (S A C B) (S A B D)) F0)
A,B,C,D,X,Y : Point
*****
eq (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A)))) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
reflexivity.
-----
Lemma test_area_inter_ll_1 : forall I A B C D X Y, inter_ll I A B C D -> S X Y I = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_inter_ll_2  : forall I A B C D X Y,\n inter_ll I A B C D -> S I X Y = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
-----
Lemma test_area_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> S I X Y = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (S I X Y) (Fmult (Fdiv F1 (S4 A C B D)) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
Proof.
-----
Lemma test_area_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> S I X Y = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (S I X Y) (Fmult (Fdiv F1 (S4 A C B D)) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
geoInit.
-----
Lemma test_area_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> S I X Y = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.
geoInit.

*****
H : inter_ll I A B C D
I,A,B,C,D,X,Y : Point
*****
eq (S I X Y) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
eliminate I.
-----
Lemma test_area_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> S I X Y = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.
geoInit.
eliminate I.

*****
H0 : not (eq (Fplus (S A C B) (S A B D)) F0)
A,B,C,D,X,Y : Point
*****
eq (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A)))) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
reflexivity.
-----
Lemma test_area_inter_ll_2 : forall I A B C D X Y, inter_ll I A B C D -> S I X Y = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_inter_ll_3  : forall I A B C D X Y,\n inter_ll I A B C D -> S Y I X = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
-----
Lemma test_area_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> S Y I X = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (S Y I X) (Fmult (Fdiv F1 (S4 A C B D)) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
Proof.
-----
Lemma test_area_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> S Y I X = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.

*****

*****
forall (I A B C D X Y : Point) (_ : inter_ll I A B C D), eq (S Y I X) (Fmult (Fdiv F1 (S4 A C B D)) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
geoInit.
-----
Lemma test_area_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> S Y I X = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.
geoInit.

*****
H : inter_ll I A B C D
I,A,B,C,D,X,Y : Point
*****
eq (S Y I X) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
eliminate I.
-----
Lemma test_area_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> S Y I X = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.
geoInit.
eliminate I.

*****
H0 : not (eq (Fplus (S A C B) (S A B D)) F0)
A,B,C,D,X,Y : Point
*****
eq (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A)))) (Fmult (Fdiv F1 (Fplus (S A C B) (S A B D))) (Fplus (Fmult (S A C D) (S X Y B)) (Fmult (S B D C) (S X Y A))))
+++++
reflexivity.
-----
Lemma test_area_inter_ll_3 : forall I A B C D X Y, inter_ll I A B C D -> S Y I X = 1 / S4 A C B D * (S A C D * S X Y B + S B D C * S X Y A).
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_parallel_1  : forall I B C D X Y,\n on_parallel I B C D -> S X Y I = S X Y B + B ** I / C ** D * S4 X C Y D.
-----
Lemma test_area_on_parallel_1 : forall I B C D X Y, on_parallel I B C D -> S X Y I = S X Y B + B ** I / C ** D * S4 X C Y D.

*****

*****
forall (I B C D X Y : Point) (_ : on_parallel I B C D), eq (S X Y I) (Fplus (S X Y B) (Fmult (Fdiv (DSeg B I) (DSeg C D)) (S4 X C Y D)))
+++++
Proof.
-----
Lemma test_area_on_parallel_1 : forall I B C D X Y, on_parallel I B C D -> S X Y I = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.

*****

*****
forall (I B C D X Y : Point) (_ : on_parallel I B C D), eq (S X Y I) (Fplus (S X Y B) (Fmult (Fdiv (DSeg B I) (DSeg C D)) (S4 X C Y D)))
+++++
geoInit.
-----
Lemma test_area_on_parallel_1 : forall I B C D X Y, on_parallel I B C D -> S X Y I = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.
geoInit.

*****
H0 : on_parallel_d I B C D f
f : F
I,B,C,D,X,Y : Point
*****
eq (S X Y I) (Fplus (S X Y B) (Fmult f (Fplus (S X C Y) (S X Y D))))
+++++
eliminate I.
-----
Lemma test_area_on_parallel_1 : forall I B C D X Y, on_parallel I B C D -> S X Y I = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.
geoInit.
eliminate I.

*****
f : F
I,B,C,D,X,Y : Point
*****
eq (Fplus (S X Y B) (Fmult f (Fplus (S X C Y) (S X Y D)))) (Fplus (S X Y B) (Fmult f (Fplus (S X C Y) (S X Y D))))
+++++
reflexivity.
-----
Lemma test_area_on_parallel_1 : forall I B C D X Y, on_parallel I B C D -> S X Y I = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_parallel_2  : forall I B C D X Y,\n on_parallel I B C D -> S Y I X = S X Y B + B ** I / C ** D * S4 X C Y D.
-----
Lemma test_area_on_parallel_2 : forall I B C D X Y, on_parallel I B C D -> S Y I X = S X Y B + B ** I / C ** D * S4 X C Y D.

*****

*****
forall (I B C D X Y : Point) (_ : on_parallel I B C D), eq (S Y I X) (Fplus (S X Y B) (Fmult (Fdiv (DSeg B I) (DSeg C D)) (S4 X C Y D)))
+++++
Proof.
-----
Lemma test_area_on_parallel_2 : forall I B C D X Y, on_parallel I B C D -> S Y I X = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.

*****

*****
forall (I B C D X Y : Point) (_ : on_parallel I B C D), eq (S Y I X) (Fplus (S X Y B) (Fmult (Fdiv (DSeg B I) (DSeg C D)) (S4 X C Y D)))
+++++
geoInit.
-----
Lemma test_area_on_parallel_2 : forall I B C D X Y, on_parallel I B C D -> S Y I X = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.
geoInit.

*****
H0 : on_parallel_d I B C D f
f : F
I,B,C,D,X,Y : Point
*****
eq (S Y I X) (Fplus (S X Y B) (Fmult f (Fplus (S X C Y) (S X Y D))))
+++++
eliminate I.
-----
Lemma test_area_on_parallel_2 : forall I B C D X Y, on_parallel I B C D -> S Y I X = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.
geoInit.
eliminate I.

*****
f : F
I,B,C,D,X,Y : Point
*****
eq (Fplus (S X Y B) (Fmult f (Fplus (S X C Y) (S X Y D)))) (Fplus (S X Y B) (Fmult f (Fplus (S X C Y) (S X Y D))))
+++++
reflexivity.
-----
Lemma test_area_on_parallel_2 : forall I B C D X Y, on_parallel I B C D -> S Y I X = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_parallel_3  : forall I B C D X Y,\n on_parallel I B C D -> S I X Y = S X Y B + B ** I / C ** D * S4 X C Y D.
-----
Lemma test_area_on_parallel_3 : forall I B C D X Y, on_parallel I B C D -> S I X Y = S X Y B + B ** I / C ** D * S4 X C Y D.

*****

*****
forall (I B C D X Y : Point) (_ : on_parallel I B C D), eq (S I X Y) (Fplus (S X Y B) (Fmult (Fdiv (DSeg B I) (DSeg C D)) (S4 X C Y D)))
+++++
Proof.
-----
Lemma test_area_on_parallel_3 : forall I B C D X Y, on_parallel I B C D -> S I X Y = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.

*****

*****
forall (I B C D X Y : Point) (_ : on_parallel I B C D), eq (S I X Y) (Fplus (S X Y B) (Fmult (Fdiv (DSeg B I) (DSeg C D)) (S4 X C Y D)))
+++++
geoInit.
-----
Lemma test_area_on_parallel_3 : forall I B C D X Y, on_parallel I B C D -> S I X Y = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.
geoInit.

*****
H0 : on_parallel_d I B C D f
f : F
I,B,C,D,X,Y : Point
*****
eq (S I X Y) (Fplus (S X Y B) (Fmult f (Fplus (S X C Y) (S X Y D))))
+++++
eliminate I.
-----
Lemma test_area_on_parallel_3 : forall I B C D X Y, on_parallel I B C D -> S I X Y = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.
geoInit.
eliminate I.

*****
f : F
I,B,C,D,X,Y : Point
*****
eq (Fplus (S X Y B) (Fmult f (Fplus (S X C Y) (S X Y D)))) (Fplus (S X Y B) (Fmult f (Fplus (S X C Y) (S X Y D))))
+++++
reflexivity.
-----
Lemma test_area_on_parallel_3 : forall I B C D X Y, on_parallel I B C D -> S I X Y = S X Y B + B ** I / C ** D * S4 X C Y D.
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_parallel_d_1  : forall I B C D X Y r,\n on_parallel_d I B C D r -> S I X Y = S X Y B + r * S4 X C Y D.
-----
Lemma test_area_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> S I X Y = S X Y B + r * S4 X C Y D.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (S I X Y) (Fplus (S X Y B) (Fmult r (S4 X C Y D)))
+++++
Proof.
-----
Lemma test_area_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> S I X Y = S X Y B + r * S4 X C Y D.
Proof.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (S I X Y) (Fplus (S X Y B) (Fmult r (S4 X C Y D)))
+++++
geoInit.
-----
Lemma test_area_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> S I X Y = S X Y B + r * S4 X C Y D.
Proof.
geoInit.

*****
H : on_parallel_d I B C D r
r : F
I,B,C,D,X,Y : Point
*****
eq (S I X Y) (Fplus (S X Y B) (Fmult r (Fplus (S X C Y) (S X Y D))))
+++++
eliminate I.
-----
Lemma test_area_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> S I X Y = S X Y B + r * S4 X C Y D.
Proof.
geoInit.
eliminate I.

*****
r : F
B,C,D,X,Y : Point
*****
eq (Fplus (S X Y B) (Fmult r (Fplus (S X C Y) (S X Y D)))) (Fplus (S X Y B) (Fmult r (Fplus (S X C Y) (S X Y D))))
+++++
reflexivity.
-----
Lemma test_area_on_parallel_d_1 : forall I B C D X Y r, on_parallel_d I B C D r -> S I X Y = S X Y B + r * S4 X C Y D.
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_parallel_d_2  : forall I B C D X Y r,\n on_parallel_d I B C D r -> S X Y I = S X Y B + r * S4 X C Y D.
-----
Lemma test_area_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> S X Y I = S X Y B + r * S4 X C Y D.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (S X Y I) (Fplus (S X Y B) (Fmult r (S4 X C Y D)))
+++++
Proof.
-----
Lemma test_area_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> S X Y I = S X Y B + r * S4 X C Y D.
Proof.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (S X Y I) (Fplus (S X Y B) (Fmult r (S4 X C Y D)))
+++++
geoInit.
-----
Lemma test_area_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> S X Y I = S X Y B + r * S4 X C Y D.
Proof.
geoInit.

*****
H : on_parallel_d I B C D r
r : F
I,B,C,D,X,Y : Point
*****
eq (S X Y I) (Fplus (S X Y B) (Fmult r (Fplus (S X C Y) (S X Y D))))
+++++
eliminate I.
-----
Lemma test_area_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> S X Y I = S X Y B + r * S4 X C Y D.
Proof.
geoInit.
eliminate I.

*****
r : F
B,C,D,X,Y : Point
*****
eq (Fplus (S X Y B) (Fmult r (Fplus (S X C Y) (S X Y D)))) (Fplus (S X Y B) (Fmult r (Fplus (S X C Y) (S X Y D))))
+++++
reflexivity.
-----
Lemma test_area_on_parallel_d_2 : forall I B C D X Y r, on_parallel_d I B C D r -> S X Y I = S X Y B + r * S4 X C Y D.
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_parallel_d_3  : forall I B C D X Y r,\n on_parallel_d I B C D r -> S Y I X = S X Y B + r * S4 X C Y D.
-----
Lemma test_area_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> S Y I X = S X Y B + r * S4 X C Y D.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (S Y I X) (Fplus (S X Y B) (Fmult r (S4 X C Y D)))
+++++
Proof.
-----
Lemma test_area_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> S Y I X = S X Y B + r * S4 X C Y D.
Proof.

*****

*****
forall (I B C D X Y : Point) (r : F) (_ : on_parallel_d I B C D r), eq (S Y I X) (Fplus (S X Y B) (Fmult r (S4 X C Y D)))
+++++
geoInit.
-----
Lemma test_area_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> S Y I X = S X Y B + r * S4 X C Y D.
Proof.
geoInit.

*****
H : on_parallel_d I B C D r
r : F
I,B,C,D,X,Y : Point
*****
eq (S Y I X) (Fplus (S X Y B) (Fmult r (Fplus (S X C Y) (S X Y D))))
+++++
eliminate I.
-----
Lemma test_area_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> S Y I X = S X Y B + r * S4 X C Y D.
Proof.
geoInit.
eliminate I.

*****
r : F
B,C,D,X,Y : Point
*****
eq (Fplus (S X Y B) (Fmult r (Fplus (S X C Y) (S X Y D)))) (Fplus (S X Y B) (Fmult r (Fplus (S X C Y) (S X Y D))))
+++++
reflexivity.
-----
Lemma test_area_on_parallel_d_3 : forall I B C D X Y r, on_parallel_d I B C D r -> S Y I X = S X Y B + r * S4 X C Y D.
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_inter_line_parallel_1 : forall I A B C D E X Y,\n  on_inter_line_parallel I A B C D E -> False -> \n  S X Y I = (S4 D B E A * S X Y C - S4 D C E A * S X Y B) / S4 D B E C.
-----
Lemma test_area_on_inter_line_parallel_1 : forall I A B C D E X Y, on_inter_line_parallel I A B C D E -> False -> S X Y I = (S4 D B E A * S X Y C - S4 D C E A * S X Y B) / S4 D B E C.

*****

*****
forall (I A B C D E X Y : Point) (_ : on_inter_line_parallel I A B C D E) (_ : False), eq (S X Y I) (Fdiv (Fminus (Fmult (S4 D B E A) (S X Y C)) (Fmult (S4 D C E A) (S X Y B))) (S4 D B E C))
+++++
Proof.
-----
Lemma test_area_on_inter_line_parallel_1 : forall I A B C D E X Y, on_inter_line_parallel I A B C D E -> False -> S X Y I = (S4 D B E A * S X Y C - S4 D C E A * S X Y B) / S4 D B E C.
Proof.

*****

*****
forall (I A B C D E X Y : Point) (_ : on_inter_line_parallel I A B C D E) (_ : False), eq (S X Y I) (Fdiv (Fminus (Fmult (S4 D B E A) (S X Y C)) (Fmult (S4 D C E A) (S X Y B))) (S4 D B E C))
+++++
geoInit.
-----
Lemma test_area_on_inter_line_parallel_1 : forall I A B C D E X Y, on_inter_line_parallel I A B C D E -> False -> S X Y I = (S4 D B E A * S X Y C - S4 D C E A * S X Y B) / S4 D B E C.
Proof.
geoInit.

*****
H0 : False
H : on_inter_line_parallel I A B C D E
I,A,B,C,D,E,X,Y : Point
*****
eq (S X Y I) (Fdiv (Fminus (Fmult (Fplus (S D B E) (S D E A)) (S X Y C)) (Fmult (Fplus (S D C E) (S D E A)) (S X Y B))) (Fplus (S D B E) (S D E C)))
+++++
eliminate I.
-----
Lemma test_area_on_inter_line_parallel_1 : forall I A B C D E X Y, on_inter_line_parallel I A B C D E -> False -> S X Y I = (S4 D B E A * S X Y C - S4 D C E A * S X Y B) / S4 D B E C.
Proof.
geoInit.
eliminate I.

*****
H1 : eq A I
H0 : False
I,A,B,C,D,E,X,Y : Point
*****
eq (S X Y A) (Fdiv (Fminus (Fmult (Fplus (S D B E) (S D E A)) (S X Y C)) (Fmult (Fplus (S D C E) (S D E A)) (S X Y B))) (Fplus (S D B E) (S D E C)))
+++++
intuition.
-----
Lemma test_area_on_inter_line_parallel_1 : forall I A B C D E X Y, on_inter_line_parallel I A B C D E -> False -> S X Y I = (S4 D B E A * S X Y C - S4 D C E A * S X Y B) / S4 D B E C.
Proof.
geoInit.
eliminate I.

*****
H2 : not (eq (Fplus (S D B E) (S D E C)) F0)
H1 : not (eq A I)
H0 : False
I,A,B,C,D,E,X,Y : Point
*****
eq (Fdiv (Fminus (Fmult (Fplus (S D B E) (S D E A)) (S X Y C)) (Fmult (Fplus (S D C E) (S D E A)) (S X Y B))) (Fplus (S D B E) (S D E C))) (Fdiv (Fminus (Fmult (Fplus (S D B E) (S D E A)) (S X Y C)) (Fmult (Fplus (S D C E) (S D E A)) (S X Y B))) (Fplus (S D B E) (S D E C)))
+++++
reflexivity.
-----
Lemma test_area_on_inter_line_parallel_1 : forall I A B C D E X Y, on_inter_line_parallel I A B C D E -> False -> S X Y I = (S4 D B E A * S X Y C - S4 D C E A * S X Y B) / S4 D B E C.
Proof.
geoInit.
eliminate I.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_inter_parallel_parallel_1 : forall I A B C D E F X Y,\n  on_inter_parallel_parallel I A B C D E F ->\n  False -> \n  S X Y I = S4 B D C A / S4 B E C F * S4 X E Y F + S X Y D.
-----
Lemma test_area_on_inter_parallel_parallel_1 : forall I A B C D E F X Y, on_inter_parallel_parallel I A B C D E F -> False -> S X Y I = S4 B D C A / S4 B E C F * S4 X E Y F + S X Y D.

*****

*****
forall (I A B C D E F0 X Y : Point) (_ : on_inter_parallel_parallel I A B C D E F0) (_ : False), eq (S X Y I) (Fplus (Fmult (Fdiv (S4 B D C A) (S4 B E C F0)) (S4 X E Y F0)) (S X Y D))
+++++
Proof.
-----
Lemma test_area_on_inter_parallel_parallel_1 : forall I A B C D E F X Y, on_inter_parallel_parallel I A B C D E F -> False -> S X Y I = S4 B D C A / S4 B E C F * S4 X E Y F + S X Y D.
Proof.

*****

*****
forall (I A B C D E F0 X Y : Point) (_ : on_inter_parallel_parallel I A B C D E F0) (_ : False), eq (S X Y I) (Fplus (Fmult (Fdiv (S4 B D C A) (S4 B E C F0)) (S4 X E Y F0)) (S X Y D))
+++++
geoInit.
-----
Lemma test_area_on_inter_parallel_parallel_1 : forall I A B C D E F X Y, on_inter_parallel_parallel I A B C D E F -> False -> S X Y I = S4 B D C A / S4 B E C F * S4 X E Y F + S X Y D.
Proof.
geoInit.

*****
H0 : False
H : on_inter_parallel_parallel I A B C D E F
I,A,B,C,D,E,F,X,Y : Point
*****
eq (S X Y I) (Fplus (Fmult (Fdiv (Fplus (S B D C) (S B C A)) (Fplus (S B E C) (S B C F))) (Fplus (S X E Y) (S X Y F))) (S X Y D))
+++++
eliminate I.
-----
Lemma test_area_on_inter_parallel_parallel_1 : forall I A B C D E F X Y, on_inter_parallel_parallel I A B C D E F -> False -> S X Y I = S4 B D C A / S4 B E C F * S4 X E Y F + S X Y D.
Proof.
geoInit.
eliminate I.

*****
H1 : eq A I
H0 : False
I,A,B,C,D,E,F,X,Y : Point
*****
eq (S X Y A) (Fplus (Fmult (Fdiv (Fplus (S B D C) (S B C A)) (Fplus (S B E C) (S B C F))) (Fplus (S X E Y) (S X Y F))) (S X Y D))
+++++
intuition.
-----
Lemma test_area_on_inter_parallel_parallel_1 : forall I A B C D E F X Y, on_inter_parallel_parallel I A B C D E F -> False -> S X Y I = S4 B D C A / S4 B E C F * S4 X E Y F + S X Y D.
Proof.
geoInit.
eliminate I.

*****
H2 : not (eq (Fplus (S B E C) (S B C F)) F0)
H1 : not (eq A I)
H0 : False
I,A,B,C,D,E,F,X,Y : Point
*****
eq (Fplus (Fmult (Fdiv (Fplus (S B D C) (S B C A)) (Fplus (S B E C) (S B C F))) (Fplus (S X E Y) (S X Y F))) (S X Y D)) (Fplus (Fmult (Fdiv (Fplus (S B D C) (S B C A)) (Fplus (S B E C) (S B C F))) (Fplus (S X E Y) (S X Y F))) (S X Y D))
+++++
reflexivity.
-----
Lemma test_area_on_inter_parallel_parallel_1 : forall I A B C D E F X Y, on_inter_parallel_parallel I A B C D E F -> False -> S X Y I = S4 B D C A / S4 B E C F * S4 X E Y F + S X Y D.
Proof.
geoInit.
eliminate I.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_foot_1  : forall I X Y Z A B,\n on_foot I X Y Z -> S A B I = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
-----
Lemma test_area_on_foot_1 : forall I X Y Z A B, on_foot I X Y Z -> S A B I = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).

*****

*****
forall (I X Y Z A B : Point) (_ : on_foot I X Y Z), eq (S A B I) (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y))
+++++
Proof.
-----
Lemma test_area_on_foot_1 : forall I X Y Z A B, on_foot I X Y Z -> S A B I = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
Proof.

*****

*****
forall (I X Y Z A B : Point) (_ : on_foot I X Y Z), eq (S A B I) (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y))
+++++
geoInit.
-----
Lemma test_area_on_foot_1 : forall I X Y Z A B, on_foot I X Y Z -> S A B I = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
Proof.
geoInit.

*****
H : on_foot I X Y Z
I,X,Y,Z,A,B : Point
*****
eq (S A B I) (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y))
+++++
eliminate I.
-----
Lemma test_area_on_foot_1 : forall I X Y Z A B, on_foot I X Y Z -> S A B I = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
Proof.
geoInit.
eliminate I.

*****
H0 : not (eq (Py Y Z Y) F0)
X,Y,Z,A,B : Point
*****
eq (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y)) (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y))
+++++
reflexivity.
-----
Lemma test_area_on_foot_1 : forall I X Y Z A B, on_foot I X Y Z -> S A B I = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_foot_2  : forall I X Y Z A B,\n on_foot I X Y Z -> S I A B = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
-----
Lemma test_area_on_foot_2 : forall I X Y Z A B, on_foot I X Y Z -> S I A B = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).

*****

*****
forall (I X Y Z A B : Point) (_ : on_foot I X Y Z), eq (S I A B) (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y))
+++++
Proof.
-----
Lemma test_area_on_foot_2 : forall I X Y Z A B, on_foot I X Y Z -> S I A B = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
Proof.

*****

*****
forall (I X Y Z A B : Point) (_ : on_foot I X Y Z), eq (S I A B) (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y))
+++++
geoInit.
-----
Lemma test_area_on_foot_2 : forall I X Y Z A B, on_foot I X Y Z -> S I A B = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
Proof.
geoInit.

*****
H : on_foot I X Y Z
I,X,Y,Z,A,B : Point
*****
eq (S I A B) (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y))
+++++
eliminate I.
-----
Lemma test_area_on_foot_2 : forall I X Y Z A B, on_foot I X Y Z -> S I A B = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
Proof.
geoInit.
eliminate I.

*****
H0 : not (eq (Py Y Z Y) F0)
X,Y,Z,A,B : Point
*****
eq (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y)) (Fdiv (Fplus (Fmult (Py X Y Z) (S A B Z)) (Fmult (Py X Z Y) (S A B Y))) (Py Y Z Y))
+++++
reflexivity.
-----
Lemma test_area_on_foot_2 : forall I X Y Z A B, on_foot I X Y Z -> S I A B = (Py X Y Z * S A B Z + Py X Z Y * S A B Y) / (Py Y Z Y).
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_perp_d_1  : forall I X Y A B r,\n on_perp_d I X Y  r -> S A B I = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
-----
Lemma test_area_on_perp_d_1 : forall I X Y A B r, on_perp_d I X Y r -> S A B I = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).

*****

*****
forall (I X Y A B : Point) (r : F) (_ : on_perp_d I X Y r), eq (S A B I) (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
Proof.
-----
Lemma test_area_on_perp_d_1 : forall I X Y A B r, on_perp_d I X Y r -> S A B I = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
Proof.

*****

*****
forall (I X Y A B : Point) (r : F) (_ : on_perp_d I X Y r), eq (S A B I) (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
geoInit.
-----
Lemma test_area_on_perp_d_1 : forall I X Y A B r, on_perp_d I X Y r -> S A B I = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
Proof.
geoInit.

*****
H : on_perp_d I X Y r
r : F
I,X,Y,A,B : Point
*****
eq (S A B I) (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
eliminate I.
-----
Lemma test_area_on_perp_d_1 : forall I X Y A B r, on_perp_d I X Y r -> S A B I = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
Proof.
geoInit.
eliminate I.

*****
r : F
X,Y,A,B : Point
*****
eq (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B)))) (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
reflexivity.
-----
Lemma test_area_on_perp_d_1 : forall I X Y A B r, on_perp_d I X Y r -> S A B I = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_perp_d_2  : forall I X Y A B r,\n on_perp_d I X Y  r -> S I A B = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
-----
Lemma test_area_on_perp_d_2 : forall I X Y A B r, on_perp_d I X Y r -> S I A B = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).

*****

*****
forall (I X Y A B : Point) (r : F) (_ : on_perp_d I X Y r), eq (S I A B) (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
Proof.
-----
Lemma test_area_on_perp_d_2 : forall I X Y A B r, on_perp_d I X Y r -> S I A B = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
Proof.

*****

*****
forall (I X Y A B : Point) (r : F) (_ : on_perp_d I X Y r), eq (S I A B) (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
geoInit.
-----
Lemma test_area_on_perp_d_2 : forall I X Y A B r, on_perp_d I X Y r -> S I A B = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
Proof.
geoInit.

*****
H : on_perp_d I X Y r
r : F
I,X,Y,A,B : Point
*****
eq (S I A B) (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
eliminate I.
-----
Lemma test_area_on_perp_d_2 : forall I X Y A B r, on_perp_d I X Y r -> S I A B = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
Proof.
geoInit.
eliminate I.

*****
r : F
X,Y,A,B : Point
*****
eq (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B)))) (Fminus (S A B X) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
reflexivity.
-----
Lemma test_area_on_perp_d_2 : forall I X Y A B r, on_perp_d I X Y r -> S I A B = S A B X - r / (2 + 2) * (Py X A B - Py Y A B).
Proof.
geoInit.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_perp_1  : forall I X Y A B,\n on_perp I X Y -> S I A B = S I A B.
-----
Lemma test_area_on_perp_1 : forall I X Y A B, on_perp I X Y -> S I A B = S I A B.

*****

*****
forall (I X Y A B : Point) (_ : on_perp I X Y), eq (S I A B) (S I A B)
+++++
Proof.
-----
Lemma test_area_on_perp_1 : forall I X Y A B, on_perp I X Y -> S I A B = S I A B.
Proof.

*****

*****
forall (I X Y A B : Point) (_ : on_perp I X Y), eq (S I A B) (S I A B)
+++++
intros.
-----
Lemma test_area_on_perp_1 : forall I X Y A B, on_perp I X Y -> S I A B = S I A B.
Proof.
intros.

*****
H : on_perp I X Y
I,X,Y,A,B : Point
*****
eq (S I A B) (S I A B)
+++++
prepare_half_free_construction.
-----
Lemma test_area_on_perp_1 : forall I X Y A B, on_perp I X Y -> S I A B = S I A B.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_perp_d I X Y f
f : F
I,X,Y,A,B : Point
*****
eq (S I A B) (S I A B)
+++++
eliminate I.
-----
Lemma test_area_on_perp_1 : forall I X Y A B, on_perp I X Y -> S I A B = S I A B.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,X,Y,A,B : Point
*****
eq (Fminus (S A B X) (Fmult (Fdiv f (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B)))) (Fminus (S A B X) (Fmult (Fdiv f (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
reflexivity.
-----
Lemma test_area_on_perp_1 : forall I X Y A B, on_perp I X Y -> S I A B = S I A B.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_area_on_perp_2  : forall I X Y A B,\n on_perp I X Y -> S A B I = S I A B.
-----
Lemma test_area_on_perp_2 : forall I X Y A B, on_perp I X Y -> S A B I = S I A B.

*****

*****
forall (I X Y A B : Point) (_ : on_perp I X Y), eq (S A B I) (S I A B)
+++++
Proof.
-----
Lemma test_area_on_perp_2 : forall I X Y A B, on_perp I X Y -> S A B I = S I A B.
Proof.

*****

*****
forall (I X Y A B : Point) (_ : on_perp I X Y), eq (S A B I) (S I A B)
+++++
intros.
-----
Lemma test_area_on_perp_2 : forall I X Y A B, on_perp I X Y -> S A B I = S I A B.
Proof.
intros.

*****
H : on_perp I X Y
I,X,Y,A,B : Point
*****
eq (S A B I) (S I A B)
+++++
prepare_half_free_construction.
-----
Lemma test_area_on_perp_2 : forall I X Y A B, on_perp I X Y -> S A B I = S I A B.
Proof.
intros.
prepare_half_free_construction.

*****
H0 : on_perp_d I X Y f
f : F
I,X,Y,A,B : Point
*****
eq (S A B I) (S I A B)
+++++
eliminate I.
-----
Lemma test_area_on_perp_2 : forall I X Y A B, on_perp I X Y -> S A B I = S I A B.
Proof.
intros.
prepare_half_free_construction.
eliminate I.

*****
f : F
I,X,Y,A,B : Point
*****
eq (Fminus (S A B X) (Fmult (Fdiv f (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B)))) (Fminus (S A B X) (Fmult (Fdiv f (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py X A B) (Py Y A B))))
+++++
reflexivity.
-----
Lemma test_area_on_perp_2 : forall I X Y A B, on_perp I X Y -> S A B I = S I A B.
Proof.
intros.
prepare_half_free_construction.
eliminate I.
reflexivity.

*****

*****

+++++
Qed.
-----
