Require Import Coq.Setoids.Setoid.
-----
Require Import ExtLib.Structures.Proper.
-----
Polymorphic Class type@{t} (T : Type@{t}) : Type :=\n{ equal : T -> T -> Prop\n; proper : T -> Prop\n}.
-----
Polymorphic Definition type_from_equal@{t} {T : Type@{t}} (r : T -> T -> Prop) : type@{t} T :=\n{| equal := r\n ; proper := fun x => r x x\n |}.
-----
Polymorphic Definition type_libniz@{t} (T : Type@{t}) : type@{t} T :=\n{| equal := @eq T\n ; proper := fun _ => True\n |}.
-----
Existing Class proper.
-----
Section type.
-----
Polymorphic Context {T : Type}.
-----
Polymorphic Variable tT : type T.
-----
Polymorphic Class typeOk :=\n  { only_proper : forall x y, equal x y -> proper x /\ proper y\n  ; equiv_prefl :> PReflexive proper equal\n  ; equiv_sym :> Symmetric equal\n  ; equiv_trans :> Transitive equal\n  }.
-----
Global Polymorphic Instance proper_left :\n    typeOk ->\n    forall x y : T, equal x y -> proper x.
-----
Global Polymorphic Instance proper_left : typeOk -> forall x y : T, equal x y -> proper x.

*****
tT : type T
T : Type
*****
forall (_ : typeOk) (x y : T) (_ : equal x y), proper x
+++++
Proof.
-----
Global Polymorphic Instance proper_left : typeOk -> forall x y : T, equal x y -> proper x.
Proof.

*****
tT : type T
T : Type
*****
forall (_ : typeOk) (x y : T) (_ : equal x y), proper x
+++++
clear.
-----
Global Polymorphic Instance proper_left : typeOk -> forall x y : T, equal x y -> proper x.
Proof.
clear.

*****
tT : type T
T : Type
*****
forall (_ : typeOk) (x y : T) (_ : equal x y), proper x
+++++
intros.
-----
Global Polymorphic Instance proper_left : typeOk -> forall x y : T, equal x y -> proper x.
Proof.
clear.
intros.

*****
H0 : equal x y
x,y : T
H : typeOk
tT : type T
T : Type
*****
proper x
+++++
match goal with | H : equal _ _ |- _ => eapply only_proper in H end.
-----
Global Polymorphic Instance proper_left : typeOk -> forall x y : T, equal x y -> proper x.
Proof.
clear.
intros.
match goal with | H : equal _ _ |- _ => eapply only_proper in H end.

*****
H0 : and (proper x) (proper y)
x,y : T
H : typeOk
tT : type T
T : Type
*****
proper x
+++++
intuition.
-----
Global Polymorphic Instance proper_left : typeOk -> forall x y : T, equal x y -> proper x.
Proof.
clear.
intros.
match goal with | H : equal _ _ |- _ => eapply only_proper in H end.
intuition.

*****

*****

+++++
Qed.
-----
Global Polymorphic Instance proper_right :\n    typeOk ->\n    forall x y : T, equal x y -> proper y.
-----
Global Polymorphic Instance proper_right : typeOk -> forall x y : T, equal x y -> proper y.

*****
tT : type T
T : Type
*****
forall (_ : typeOk) (x y : T) (_ : equal x y), proper y
+++++
Proof.
-----
Global Polymorphic Instance proper_right : typeOk -> forall x y : T, equal x y -> proper y.
Proof.

*****
tT : type T
T : Type
*****
forall (_ : typeOk) (x y : T) (_ : equal x y), proper y
+++++
clear.
-----
Global Polymorphic Instance proper_right : typeOk -> forall x y : T, equal x y -> proper y.
Proof.
clear.

*****
tT : type T
T : Type
*****
forall (_ : typeOk) (x y : T) (_ : equal x y), proper y
+++++
intros.
-----
Global Polymorphic Instance proper_right : typeOk -> forall x y : T, equal x y -> proper y.
Proof.
clear.
intros.

*****
H0 : equal x y
x,y : T
H : typeOk
tT : type T
T : Type
*****
proper y
+++++
match goal with | H : equal _ _ |- _ => eapply only_proper in H end.
-----
Global Polymorphic Instance proper_right : typeOk -> forall x y : T, equal x y -> proper y.
Proof.
clear.
intros.
match goal with | H : equal _ _ |- _ => eapply only_proper in H end.

*****
H0 : and (proper x) (proper y)
x,y : T
H : typeOk
tT : type T
T : Type
*****
proper y
+++++
intuition.
-----
Global Polymorphic Instance proper_right : typeOk -> forall x y : T, equal x y -> proper y.
Proof.
clear.
intros.
match goal with | H : equal _ _ |- _ => eapply only_proper in H end.
intuition.

*****

*****

+++++
Qed.
-----
End type.
-----
Polymorphic Definition type1@{d r z} (F : Type@{d} -> Type@{r}) : Type@{z} :=\n  forall {T:Type@{d}}, type@{d} T -> type@{r} (F T).
-----
Polymorphic Definition type2@{t u v z} (F : Type@{t} -> Type@{u} -> Type@{v}) : Type@{z} :=\n  forall {T:Type@{t}}, type T -> forall {U:Type@{u}}, type U -> type (F T U).
-----
Polymorphic Definition type3@{t u v w z} (F : Type@{t} -> Type@{u} -> Type@{v} -> Type@{w}) : Type@{z} :=\n  forall {T:Type@{t}}, type T -> forall {U:Type@{u}}, type U -> forall {V:Type@{w}}, type V ->  type (F T U V).
-----
Polymorphic Definition typeOk1@{d r z} (F : Type@{d} -> Type@{r}) (tF : type1@{d r z} F) : Type@{z} :=\n  forall (T : Type@{d}) tT, @typeOk T tT -> typeOk (tF _ tT).
-----
Polymorphic Definition typeOk2@{t u v z}\n            (F : Type@{t} -> Type@{u} -> Type@{v}) (tF : type2@{t u v z} F)\n: Type@{z} :=\n  forall (T : Type@{t}) (tT : type@{t} T), @typeOk@{t} T tT -> typeOk1@{u v z} _ (tF _ tT).
-----
Polymorphic Definition typeOk3@{t u v w z} F (tF : type3 F) : Type@{z} :=\n  forall (T : Type@{t}) (tT : type T), @typeOk@{t} T tT -> typeOk2@{u v w z} _ (tF _ tT).
-----
Existing Class type1.
-----
Existing Class type2.
-----
Existing Class type3.
-----
Global Polymorphic Instance type_type1 F (tF : type1 F) T (tT : type T) : type (F T) :=\n  tF _ tT.
-----
Global Polymorphic Instance type1_type2 F (tF : type2 F) T (tT : type T) : type1 (F T) :=\n  tF _ tT.
-----
Global Polymorphic Instance type2_type3 F (tF : type3 F) T (tT : type T) : type2 (F T) :=\n  tF _ tT.
-----
Polymorphic Class Oktype T : Type :=\n{ the_type :> type T\n; the_proof :> typeOk the_type\n}.
-----
Coercion the_type : Oktype >-> type.
-----
Global Instance typeOk_typeOk1 F (tF : type1 F) T (tT : type T) : type (F T) :=\n  tF _ tT.
-----
Global Instance typeOk1_typeOk2 F (tF : type2 F) T (tT : type T) : type1 (F T) :=\n  tF _ tT.
-----
Global Instance typeOk2_typeOk3 F (tF : type3 F) T (tT : type T) : type2 (F T) :=\n  tF _ tT.
-----
Section typeOk_from_equal.
-----
Context {T} (r : relation T).
-----
Hypothesis p : forall x y, r x y -> r x x /\ r y y.
-----
Hypothesis sym : Symmetric r.
-----
Hypothesis trans : Transitive r.
-----
Theorem typeOk_from_equal  : typeOk (type_from_equal r).
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).

*****
trans : Transitive r
sym : Symmetric r
p : forall (x y : T) (_ : r x y), and (r x x) (r y y)
r : relation T
T : Type
*****
typeOk (type_from_equal r)
+++++
Proof.
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).
Proof.

*****
trans : Transitive r
sym : Symmetric r
p : forall (x y : T) (_ : r x y), and (r x x) (r y y)
r : relation T
T : Type
*****
typeOk (type_from_equal r)
+++++
constructor.
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).
Proof.
constructor.

*****
trans : Transitive r
sym : Symmetric r
p : forall (x y : T) (_ : r x y), and (r x x) (r y y)
r : relation T
T : Type
*****
forall (x y : T) (_ : equal x y), and (proper x) (proper y)
+++++
auto.
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).
Proof.
constructor.

*****
trans : Transitive r
sym : Symmetric r
p : forall (x y : T) (_ : r x y), and (r x x) (r y y)
r : relation T
T : Type
*****
PReflexive proper equal
+++++
auto.
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).
Proof.
constructor.
auto.

*****
trans : Transitive r
sym : Symmetric r
p : forall (x y : T) (_ : r x y), and (r x x) (r y y)
r : relation T
T : Type
*****
PReflexive proper equal
+++++
simpl.
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).
Proof.
constructor.
auto.
simpl.

*****
trans : Transitive r
sym : Symmetric r
p : forall (x y : T) (_ : r x y), and (r x x) (r y y)
r : relation T
T : Type
*****
PReflexive (fun x : T => r x x) r
+++++
red.
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).
Proof.
constructor.
auto.
simpl.
red.

*****
trans : Transitive r
sym : Symmetric r
p : forall (x y : T) (_ : r x y), and (r x x) (r y y)
r : relation T
T : Type
*****
forall (x : T) (_ : r x x), r x x
+++++
auto.
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).
Proof.
constructor.

*****
trans : Transitive r
sym : Symmetric r
p : forall (x y : T) (_ : r x y), and (r x x) (r y y)
r : relation T
T : Type
*****
Symmetric equal
+++++
auto.
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).
Proof.
constructor.

*****
trans : Transitive r
sym : Symmetric r
p : forall (x y : T) (_ : r x y), and (r x x) (r y y)
r : relation T
T : Type
*****
Transitive equal
+++++
auto.
-----
Theorem typeOk_from_equal : typeOk (type_from_equal r).
Proof.
constructor.

*****

*****

+++++
Qed.
-----
End typeOk_from_equal.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).

*****
T : Type
*****
typeOk (type_libniz T)
+++++
Proof.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.

*****
T : Type
*****
typeOk (type_libniz T)
+++++
constructor.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.

*****
T : Type
*****
forall (x y : T) (_ : equal x y), and (proper x) (proper y)
+++++
unfold equal.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.

*****
T : Type
*****
forall (x y : T) (_ : (let (equal, _) := type_libniz T in equal) x y), and (proper x) (proper y)
+++++
unfold type_libniz.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.
unfold type_libniz.

*****
T : Type
*****
forall (x y : T) (_ : eq x y), and (proper x) (proper y)
+++++
auto with typeclass_instances.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.
unfold type_libniz.
auto with typeclass_instances.

*****
T : Type
*****
forall (x y : T) (_ : eq x y), and (proper x) (proper y)
+++++
split.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.
unfold type_libniz.
auto with typeclass_instances.
split.

*****
H : eq x y
x,y : T
T : Type
*****
proper x
+++++
exact I.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.
unfold type_libniz.
auto with typeclass_instances.
split.

*****
H : eq x y
x,y : T
T : Type
*****
proper y
+++++
exact I.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.

*****
T : Type
*****
PReflexive proper equal
+++++
unfold equal.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.

*****
T : Type
*****
PReflexive proper (let (equal, _) := type_libniz T in equal)
+++++
unfold type_libniz.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.
unfold type_libniz.

*****
T : Type
*****
PReflexive proper eq
+++++
auto with typeclass_instances.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.

*****
T : Type
*****
Symmetric equal
+++++
unfold equal.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.

*****
T : Type
*****
Symmetric (let (equal, _) := type_libniz T in equal)
+++++
unfold type_libniz.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.
unfold type_libniz.

*****
T : Type
*****
Symmetric eq
+++++
auto with typeclass_instances.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.

*****
T : Type
*****
Transitive equal
+++++
unfold equal.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.

*****
T : Type
*****
Transitive (let (equal, _) := type_libniz T in equal)
+++++
unfold type_libniz.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.
unfold equal.
unfold type_libniz.

*****
T : Type
*****
Transitive eq
+++++
auto with typeclass_instances.
-----
Theorem typeOk_libniz T : typeOk (type_libniz T).
Proof.
constructor.

*****

*****

+++++
Qed.
-----
