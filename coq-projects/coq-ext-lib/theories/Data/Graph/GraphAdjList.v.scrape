Require Import ExtLib.Core.RelDec.
-----
Require Import ExtLib.Structures.Monads.
-----
Require Import ExtLib.Structures.Monoid.
-----
Require Import ExtLib.Structures.Reducible.
-----
Require Import ExtLib.Structures.Maps.
-----
Require Import ExtLib.Data.List.
-----
Require Import ExtLib.Data.PPair.
-----
Require Import ExtLib.Data.Monads.WriterMonad.
-----
Require Import ExtLib.Data.Monads.IdentityMonad.
-----
Require Import ExtLib.Data.Graph.Graph.
-----
Require Import ExtLib.Data.Graph.BuildGraph.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section GraphImpl.
-----
Variable V : Type.
-----
Variable map : Type.
-----
Variable Map : Map V (list V) map.
-----
Variable FMap : Foldable map (V * (list V)).
-----
Variable RelDec_V : RelDec (@eq V).
-----
Definition adj_graph : Type := map.
-----
Definition verts (g : adj_graph) : list V :=\n    let c := foldM (m := writerT (Monoid_list_app) ident)\n      (fun k_v _ => let k := fst k_v in tell (k :: nil)) (ret tt) g\n    in\n    psnd (unIdent (runWriterT c)).
-----
Definition succs (g : adj_graph) (v : V) : list V :=\n    match lookup v g with\n      | None => nil\n      | Some vs => vs\n    end.
-----
Global Instance Graph_adj_graph : Graph V adj_graph :=\n  { verticies := verts\n  ; successors := succs\n  }.
-----
Definition add_vertex (v : V) (g : adj_graph) : adj_graph :=\n    if contains v g then g else add v nil g.
-----
Fixpoint list_in_dec v (ls : list V) : bool :=\n    match ls with\n    | nil => false\n    | l :: ls =>\n      if eq_dec l v then true\n      else list_in_dec v ls\n    end.
-----
Definition add_edge (f t : V) (g : adj_graph) : adj_graph :=\n    match lookup f g with\n      | None =>\n        add f (t :: nil) g\n      | Some vs =>\n        if list_in_dec t vs then g\n        else add f (t :: vs) g\n    end.
-----
Global Instance GraphBuilder_adj_graph : BuildGraph V adj_graph :=\n  { emptyGraph := empty\n  ; addVertex := add_vertex\n  ; addEdge   := add_edge\n  }.
-----
End GraphImpl.
-----
