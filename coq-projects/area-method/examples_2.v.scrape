Require  Import area_method.
-----
Lemma l3_43 : forall O A B X Y C D P Q R T r,\n mratio C A B r ->\n mratio D A B (0-r) ->\n inter_ll P O A X Y ->\n inter_ll Q O B X Y ->\n inter_ll R O C X Y ->\n inter_ll T O D X Y ->\n parallel P R R Q ->\n R<>Q ->\n parallel T P T Q ->\n T<>Q ->\n P<>T ->\n P<>R ->\n ~ Col P X Y ->\n harmonic P Q R T.
-----
Lemma l3_43 : forall O A B X Y C D P Q R T r, mratio C A B r -> mratio D A B (0-r) -> inter_ll P O A X Y -> inter_ll Q O B X Y -> inter_ll R O C X Y -> inter_ll T O D X Y -> parallel P R R Q -> R<>Q -> parallel T P T Q -> T<>Q -> P<>T -> P<>R -> ~ Col P X Y -> harmonic P Q R T.

*****

*****
forall (O A B X Y C D P Q R T : Point) (r : F) (_ : mratio C A B r) (_ : mratio D A B (Fminus F0 r)) (_ : inter_ll P O A X Y) (_ : inter_ll Q O B X Y) (_ : inter_ll R O C X Y) (_ : inter_ll T O D X Y) (_ : parallel P R R Q) (_ : not (eq R Q)) (_ : parallel T P T Q) (_ : not (eq T Q)) (_ : not (eq P T)) (_ : not (eq P R)) (_ : not (Col P X Y)), harmonic P Q R T
+++++
Proof.
-----
Lemma l3_43 : forall O A B X Y C D P Q R T r, mratio C A B r -> mratio D A B (0-r) -> inter_ll P O A X Y -> inter_ll Q O B X Y -> inter_ll R O C X Y -> inter_ll T O D X Y -> parallel P R R Q -> R<>Q -> parallel T P T Q -> T<>Q -> P<>T -> P<>R -> ~ Col P X Y -> harmonic P Q R T.
Proof.

*****

*****
forall (O A B X Y C D P Q R T : Point) (r : F) (_ : mratio C A B r) (_ : mratio D A B (Fminus F0 r)) (_ : inter_ll P O A X Y) (_ : inter_ll Q O B X Y) (_ : inter_ll R O C X Y) (_ : inter_ll T O D X Y) (_ : parallel P R R Q) (_ : not (eq R Q)) (_ : parallel T P T Q) (_ : not (eq T Q)) (_ : not (eq P T)) (_ : not (eq P R)) (_ : not (Col P X Y)), harmonic P Q R T
+++++
area_method.
-----
Lemma l3_43 : forall O A B X Y C D P Q R T r, mratio C A B r -> mratio D A B (0-r) -> inter_ll P O A X Y -> inter_ll Q O B X Y -> inter_ll R O C X Y -> inter_ll T O D X Y -> parallel P R R Q -> R<>Q -> parallel T P T Q -> T<>Q -> P<>T -> P<>R -> ~ Col P X Y -> harmonic P Q R T.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Ceva :\n forall A B C D E F G P : Point,\n inter_ll D B C A P ->\n inter_ll E A C B P ->\n inter_ll F A B C P ->\n F <> B ->\n D <> C ->\n E <> A ->\n parallel A F F B ->\n parallel B D D C ->\n parallel C E E A -> \n (A ** F / F ** B) *  (B ** D / D ** C) *  (C ** E / E ** A) = 1.
-----
Theorem Ceva : forall A B C D E F G P : Point, inter_ll D B C A P -> inter_ll E A C B P -> inter_ll F A B C P -> F <> B -> D <> C -> E <> A -> parallel A F F B -> parallel B D D C -> parallel C E E A -> (A ** F / F ** B) * (B ** D / D ** C) * (C ** E / E ** A) = 1.

*****

*****
forall (A B C D E F0 _ : Point) (P : Point) (_ : inter_ll D B C A P) (_ : inter_ll E A C B P) (_ : inter_ll F0 A B C P) (_ : not (eq F0 B)) (_ : not (eq D C)) (_ : not (eq E A)) (_ : parallel A F0 F0 B) (_ : parallel B D D C) (_ : parallel C E E A), eq (Fmult (Fmult (Fdiv (DSeg A F0) (DSeg F0 B)) (Fdiv (DSeg B D) (DSeg D C))) (Fdiv (DSeg C E) (DSeg E A))) F1
+++++
Proof.
-----
Theorem Ceva : forall A B C D E F G P : Point, inter_ll D B C A P -> inter_ll E A C B P -> inter_ll F A B C P -> F <> B -> D <> C -> E <> A -> parallel A F F B -> parallel B D D C -> parallel C E E A -> (A ** F / F ** B) * (B ** D / D ** C) * (C ** E / E ** A) = 1.
Proof.

*****

*****
forall (A B C D E F0 _ : Point) (P : Point) (_ : inter_ll D B C A P) (_ : inter_ll E A C B P) (_ : inter_ll F0 A B C P) (_ : not (eq F0 B)) (_ : not (eq D C)) (_ : not (eq E A)) (_ : parallel A F0 F0 B) (_ : parallel B D D C) (_ : parallel C E E A), eq (Fmult (Fmult (Fdiv (DSeg A F0) (DSeg F0 B)) (Fdiv (DSeg B D) (DSeg D C))) (Fdiv (DSeg C E) (DSeg E A))) F1
+++++
area_method.
-----
Theorem Ceva : forall A B C D E F G P : Point, inter_ll D B C A P -> inter_ll E A C B P -> inter_ll F A B C P -> F <> B -> D <> C -> E <> A -> parallel A F F B -> parallel B D D C -> parallel C E E A -> (A ** F / F ** B) * (B ** D / D ** C) * (C ** E / E ** A) = 1.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_217 : forall A B C D E F G H,\nis_midpoint E A B  ->\nis_midpoint F B C ->\nis_midpoint G C D ->\nis_midpoint H D A ->\nparallel H E G F ->\nG<>F ->\nE<>H ->\n~ Col E D A ->\nH**E / G**F = 1.
-----
Lemma l6_217 : forall A B C D E F G H, is_midpoint E A B -> is_midpoint F B C -> is_midpoint G C D -> is_midpoint H D A -> parallel H E G F -> G<>F -> E<>H -> ~ Col E D A -> H**E / G**F = 1.

*****

*****
forall (A B C D E F0 G H : Point) (_ : is_midpoint E A B) (_ : is_midpoint F0 B C) (_ : is_midpoint G C D) (_ : is_midpoint H D A) (_ : parallel H E G F0) (_ : not (eq G F0)) (_ : not (eq E H)) (_ : not (Col E D A)), eq (Fdiv (DSeg H E) (DSeg G F0)) F1
+++++
Proof.
-----
Lemma l6_217 : forall A B C D E F G H, is_midpoint E A B -> is_midpoint F B C -> is_midpoint G C D -> is_midpoint H D A -> parallel H E G F -> G<>F -> E<>H -> ~ Col E D A -> H**E / G**F = 1.
Proof.

*****

*****
forall (A B C D E F0 G H : Point) (_ : is_midpoint E A B) (_ : is_midpoint F0 B C) (_ : is_midpoint G C D) (_ : is_midpoint H D A) (_ : parallel H E G F0) (_ : not (eq G F0)) (_ : not (eq E H)) (_ : not (Col E D A)), eq (Fdiv (DSeg H E) (DSeg G F0)) F1
+++++
area_method.
-----
Lemma l6_217 : forall A B C D E F G H, is_midpoint E A B -> is_midpoint F B C -> is_midpoint G C D -> is_midpoint H D A -> parallel H E G F -> G<>F -> E<>H -> ~ Col E D A -> H**E / G**F = 1.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Menelaus :\n forall A B C X Y D E F : Point,\n inter_ll D B C X Y ->\n inter_ll E A C X Y ->\n inter_ll F A B X Y ->\n F <> B -> \n D <> C ->\n E <> A ->\n parallel A F F B ->\n parallel B D D C ->\n parallel C E E A -> \n (A ** F / F ** B) * (B ** D / D ** C) * (C ** E / E ** A) = - (1).
-----
Theorem Menelaus : forall A B C X Y D E F : Point, inter_ll D B C X Y -> inter_ll E A C X Y -> inter_ll F A B X Y -> F <> B -> D <> C -> E <> A -> parallel A F F B -> parallel B D D C -> parallel C E E A -> (A ** F / F ** B) * (B ** D / D ** C) * (C ** E / E ** A) = - (1).

*****

*****
forall (A B C X Y D E F0 : Point) (_ : inter_ll D B C X Y) (_ : inter_ll E A C X Y) (_ : inter_ll F0 A B X Y) (_ : not (eq F0 B)) (_ : not (eq D C)) (_ : not (eq E A)) (_ : parallel A F0 F0 B) (_ : parallel B D D C) (_ : parallel C E E A), eq (Fmult (Fmult (Fdiv (DSeg A F0) (DSeg F0 B)) (Fdiv (DSeg B D) (DSeg D C))) (Fdiv (DSeg C E) (DSeg E A))) (Fopp F1)
+++++
Proof.
-----
Theorem Menelaus : forall A B C X Y D E F : Point, inter_ll D B C X Y -> inter_ll E A C X Y -> inter_ll F A B X Y -> F <> B -> D <> C -> E <> A -> parallel A F F B -> parallel B D D C -> parallel C E E A -> (A ** F / F ** B) * (B ** D / D ** C) * (C ** E / E ** A) = - (1).
Proof.

*****

*****
forall (A B C X Y D E F0 : Point) (_ : inter_ll D B C X Y) (_ : inter_ll E A C X Y) (_ : inter_ll F0 A B X Y) (_ : not (eq F0 B)) (_ : not (eq D C)) (_ : not (eq E A)) (_ : parallel A F0 F0 B) (_ : parallel B D D C) (_ : parallel C E E A), eq (Fmult (Fmult (Fdiv (DSeg A F0) (DSeg F0 B)) (Fdiv (DSeg B D) (DSeg D C))) (Fdiv (DSeg C E) (DSeg E A))) (Fopp F1)
+++++
area_method.
-----
Theorem Menelaus : forall A B C X Y D E F : Point, inter_ll D B C X Y -> inter_ll E A C X Y -> inter_ll F A B X Y -> F <> B -> D <> C -> E <> A -> parallel A F F B -> parallel B D D C -> parallel C E E A -> (A ** F / F ** B) * (B ** D / D ** C) * (C ** E / E ** A) = - (1).
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Pascal :\n forall A B C A' B' C' : Point, A<>C' ->  \n on_line C A B -> \n on_parallel B' A B A' -> \n on_inter_line_parallel C' A A' B' C A' -> \n parallel B C' B' C.
-----
Theorem Pascal : forall A B C A' B' C' : Point, A<>C' -> on_line C A B -> on_parallel B' A B A' -> on_inter_line_parallel C' A A' B' C A' -> parallel B C' B' C.

*****

*****
forall (A B C A' B' C' : Point) (_ : not (eq A C')) (_ : on_line C A B) (_ : on_parallel B' A B A') (_ : on_inter_line_parallel C' A A' B' C A'), parallel B C' B' C
+++++
Proof.
-----
Theorem Pascal : forall A B C A' B' C' : Point, A<>C' -> on_line C A B -> on_parallel B' A B A' -> on_inter_line_parallel C' A A' B' C A' -> parallel B C' B' C.
Proof.

*****

*****
forall (A B C A' B' C' : Point) (_ : not (eq A C')) (_ : on_line C A B) (_ : on_parallel B' A B A') (_ : on_inter_line_parallel C' A A' B' C A'), parallel B C' B' C
+++++
area_method.
-----
Theorem Pascal : forall A B C A' B' C' : Point, A<>C' -> on_line C A B -> on_parallel B' A B A' -> on_inter_line_parallel C' A A' B' C A' -> parallel B C' B' C.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Desargues :\n forall A B C X A' B' C' : Point, A' <>C' -> A' <> B' ->\n on_line A' X A ->\n on_inter_line_parallel B' A' X B A B -> \n on_inter_line_parallel C' A' X C A C ->\n parallel B C B' C'.
-----
Theorem Desargues : forall A B C X A' B' C' : Point, A' <>C' -> A' <> B' -> on_line A' X A -> on_inter_line_parallel B' A' X B A B -> on_inter_line_parallel C' A' X C A C -> parallel B C B' C'.

*****

*****
forall (A B C X A' B' C' : Point) (_ : not (eq A' C')) (_ : not (eq A' B')) (_ : on_line A' X A) (_ : on_inter_line_parallel B' A' X B A B) (_ : on_inter_line_parallel C' A' X C A C), parallel B C B' C'
+++++
Proof.
-----
Theorem Desargues : forall A B C X A' B' C' : Point, A' <>C' -> A' <> B' -> on_line A' X A -> on_inter_line_parallel B' A' X B A B -> on_inter_line_parallel C' A' X C A C -> parallel B C B' C'.
Proof.

*****

*****
forall (A B C X A' B' C' : Point) (_ : not (eq A' C')) (_ : not (eq A' B')) (_ : on_line A' X A) (_ : on_inter_line_parallel B' A' X B A B) (_ : on_inter_line_parallel C' A' X C A C), parallel B C B' C'
+++++
area_method.
-----
Theorem Desargues : forall A B C X A' B' C' : Point, A' <>C' -> A' <> B' -> on_line A' X A -> on_inter_line_parallel B' A' X B A B -> on_inter_line_parallel C' A' X C A C -> parallel B C B' C'.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem ex1_6auto :\nforall A B C D E F G P : Point,\n inter_ll D B C A P ->\n inter_ll E A C B P ->\n inter_ll F A B C P ->\n A <> D ->\n B <> E ->\n C <> F ->\n parallel P D A D ->\n parallel P E B E ->\n parallel P F C F -> \n P ** D / A ** D + P ** E / B ** E + P ** F / C ** F = 1.
-----
Theorem ex1_6auto : forall A B C D E F G P : Point, inter_ll D B C A P -> inter_ll E A C B P -> inter_ll F A B C P -> A <> D -> B <> E -> C <> F -> parallel P D A D -> parallel P E B E -> parallel P F C F -> P ** D / A ** D + P ** E / B ** E + P ** F / C ** F = 1.

*****

*****
forall (A B C D E F0 _ : Point) (P : Point) (_ : inter_ll D B C A P) (_ : inter_ll E A C B P) (_ : inter_ll F0 A B C P) (_ : not (eq A D)) (_ : not (eq B E)) (_ : not (eq C F0)) (_ : parallel P D A D) (_ : parallel P E B E) (_ : parallel P F0 C F0), eq (Fplus (Fplus (Fdiv (DSeg P D) (DSeg A D)) (Fdiv (DSeg P E) (DSeg B E))) (Fdiv (DSeg P F0) (DSeg C F0))) F1
+++++
Proof.
-----
Theorem ex1_6auto : forall A B C D E F G P : Point, inter_ll D B C A P -> inter_ll E A C B P -> inter_ll F A B C P -> A <> D -> B <> E -> C <> F -> parallel P D A D -> parallel P E B E -> parallel P F C F -> P ** D / A ** D + P ** E / B ** E + P ** F / C ** F = 1.
Proof.

*****

*****
forall (A B C D E F0 _ : Point) (P : Point) (_ : inter_ll D B C A P) (_ : inter_ll E A C B P) (_ : inter_ll F0 A B C P) (_ : not (eq A D)) (_ : not (eq B E)) (_ : not (eq C F0)) (_ : parallel P D A D) (_ : parallel P E B E) (_ : parallel P F0 C F0), eq (Fplus (Fplus (Fdiv (DSeg P D) (DSeg A D)) (Fdiv (DSeg P E) (DSeg B E))) (Fdiv (DSeg P F0) (DSeg C F0))) F1
+++++
area_method.
-----
Theorem ex1_6auto : forall A B C D E F G P : Point, inter_ll D B C A P -> inter_ll E A C B P -> inter_ll F A B C P -> A <> D -> B <> E -> C <> F -> parallel P D A D -> parallel P E B E -> parallel P F C F -> P ** D / A ** D + P ** E / B ** E + P ** F / C ** F = 1.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem th2_41 :\n forall A B C D P Q M : Point,\n on_line C A P ->\n on_inter_line_parallel D C B P A B ->\n inter_ll Q A D B C -> \n inter_ll M A B P Q -> \n B <> M -> \n parallel A M B M -> \n C<>D ->\n A ** M / B ** M = - (1).
-----
Theorem th2_41 : forall A B C D P Q M : Point, on_line C A P -> on_inter_line_parallel D C B P A B -> inter_ll Q A D B C -> inter_ll M A B P Q -> B <> M -> parallel A M B M -> C<>D -> A ** M / B ** M = - (1).

*****

*****
forall (A B C D P Q M : Point) (_ : on_line C A P) (_ : on_inter_line_parallel D C B P A B) (_ : inter_ll Q A D B C) (_ : inter_ll M A B P Q) (_ : not (eq B M)) (_ : parallel A M B M) (_ : not (eq C D)), eq (Fdiv (DSeg A M) (DSeg B M)) (Fopp F1)
+++++
Proof.
-----
Theorem th2_41 : forall A B C D P Q M : Point, on_line C A P -> on_inter_line_parallel D C B P A B -> inter_ll Q A D B C -> inter_ll M A B P Q -> B <> M -> parallel A M B M -> C<>D -> A ** M / B ** M = - (1).
Proof.

*****

*****
forall (A B C D P Q M : Point) (_ : on_line C A P) (_ : on_inter_line_parallel D C B P A B) (_ : inter_ll Q A D B C) (_ : inter_ll M A B P Q) (_ : not (eq B M)) (_ : parallel A M B M) (_ : not (eq C D)), eq (Fdiv (DSeg A M) (DSeg B M)) (Fopp F1)
+++++
area_method.
-----
Theorem th2_41 : forall A B C D P Q M : Point, on_line C A P -> on_inter_line_parallel D C B P A B -> inter_ll Q A D B C -> inter_ll M A B P Q -> B <> M -> parallel A M B M -> C<>D -> A ** M / B ** M = - (1).
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Prop51Hartsshorne :\n forall A B C D E : Point, \n is_midpoint D A B -> \n is_midpoint E A C -> \n parallel D E B C.
-----
Theorem Prop51Hartsshorne : forall A B C D E : Point, is_midpoint D A B -> is_midpoint E A C -> parallel D E B C.

*****

*****
forall (A B C D E : Point) (_ : is_midpoint D A B) (_ : is_midpoint E A C), parallel D E B C
+++++
Proof.
-----
Theorem Prop51Hartsshorne : forall A B C D E : Point, is_midpoint D A B -> is_midpoint E A C -> parallel D E B C.
Proof.

*****

*****
forall (A B C D E : Point) (_ : is_midpoint D A B) (_ : is_midpoint E A C), parallel D E B C
+++++
area_method.
-----
Theorem Prop51Hartsshorne : forall A B C D E : Point, is_midpoint D A B -> is_midpoint E A C -> parallel D E B C.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem is_midpoint_A :\n forall A B C A' B' : Point, \n is_midpoint A' B C -> \n is_midpoint B' A C -> \n parallel A' B' A B.
-----
Theorem is_midpoint_A : forall A B C A' B' : Point, is_midpoint A' B C -> is_midpoint B' A C -> parallel A' B' A B.

*****

*****
forall (A B C A' B' : Point) (_ : is_midpoint A' B C) (_ : is_midpoint B' A C), parallel A' B' A B
+++++
Proof.
-----
Theorem is_midpoint_A : forall A B C A' B' : Point, is_midpoint A' B C -> is_midpoint B' A C -> parallel A' B' A B.
Proof.

*****

*****
forall (A B C A' B' : Point) (_ : is_midpoint A' B C) (_ : is_midpoint B' A C), parallel A' B' A B
+++++
area_method.
-----
Theorem is_midpoint_A : forall A B C A' B' : Point, is_midpoint A' B C -> is_midpoint B' A C -> parallel A' B' A B.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Prop51Hartsshornebis :\n forall A B C D E : Point,\n ~ Col D A C ->\n ~ Col A B C ->\n is_midpoint D A B ->\n is_midpoint E A C -> \n parallel D E B C -> \n B <> C -> \n D ** E / B ** C = 1 / 2.
-----
Theorem Prop51Hartsshornebis : forall A B C D E : Point, ~ Col D A C -> ~ Col A B C -> is_midpoint D A B -> is_midpoint E A C -> parallel D E B C -> B <> C -> D ** E / B ** C = 1 / 2.

*****

*****
forall (A B C D E : Point) (_ : not (Col D A C)) (_ : not (Col A B C)) (_ : is_midpoint D A B) (_ : is_midpoint E A C) (_ : parallel D E B C) (_ : not (eq B C)), eq (Fdiv (DSeg D E) (DSeg B C)) (Fdiv F1 (Fplus F1 F1))
+++++
Proof.
-----
Theorem Prop51Hartsshornebis : forall A B C D E : Point, ~ Col D A C -> ~ Col A B C -> is_midpoint D A B -> is_midpoint E A C -> parallel D E B C -> B <> C -> D ** E / B ** C = 1 / 2.
Proof.

*****

*****
forall (A B C D E : Point) (_ : not (Col D A C)) (_ : not (Col A B C)) (_ : is_midpoint D A B) (_ : is_midpoint E A C) (_ : parallel D E B C) (_ : not (eq B C)), eq (Fdiv (DSeg D E) (DSeg B C)) (Fdiv F1 (Fplus F1 F1))
+++++
area_method.
-----
Theorem Prop51Hartsshornebis : forall A B C D E : Point, ~ Col D A C -> ~ Col A B C -> is_midpoint D A B -> is_midpoint E A C -> parallel D E B C -> B <> C -> D ** E / B ** C = 1 / 2.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem th6_40_Centroid :\n forall A B C E F O : Point,\n is_midpoint F A B ->\n is_midpoint E B C -> \n inter_ll O A E C F -> \n O <> E -> \n parallel A O O E -> \n A ** O / O ** E = 2.
-----
Theorem th6_40_Centroid : forall A B C E F O : Point, is_midpoint F A B -> is_midpoint E B C -> inter_ll O A E C F -> O <> E -> parallel A O O E -> A ** O / O ** E = 2.

*****

*****
forall (A B C E F0 O : Point) (_ : is_midpoint F0 A B) (_ : is_midpoint E B C) (_ : inter_ll O A E C F0) (_ : not (eq O E)) (_ : parallel A O O E), eq (Fdiv (DSeg A O) (DSeg O E)) (Fplus F1 F1)
+++++
Proof.
-----
Theorem th6_40_Centroid : forall A B C E F O : Point, is_midpoint F A B -> is_midpoint E B C -> inter_ll O A E C F -> O <> E -> parallel A O O E -> A ** O / O ** E = 2.
Proof.

*****

*****
forall (A B C E F0 O : Point) (_ : is_midpoint F0 A B) (_ : is_midpoint E B C) (_ : inter_ll O A E C F0) (_ : not (eq O E)) (_ : parallel A O O E), eq (Fdiv (DSeg A O) (DSeg O E)) (Fplus F1 F1)
+++++
area_method.
-----
Theorem th6_40_Centroid : forall A B C E F O : Point, is_midpoint F A B -> is_midpoint E B C -> inter_ll O A E C F -> O <> E -> parallel A O O E -> A ** O / O ** E = 2.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Prop54Hartsshorne :\n forall A B C D E F G : Point,\n is_midpoint D A B ->\n is_midpoint E A C -> \n is_midpoint F B C -> \n inter_ll G E B C D -> \n Col A G F.
-----
Theorem Prop54Hartsshorne : forall A B C D E F G : Point, is_midpoint D A B -> is_midpoint E A C -> is_midpoint F B C -> inter_ll G E B C D -> Col A G F.

*****

*****
forall (A B C D E F G : Point) (_ : is_midpoint D A B) (_ : is_midpoint E A C) (_ : is_midpoint F B C) (_ : inter_ll G E B C D), Col A G F
+++++
Proof.
-----
Theorem Prop54Hartsshorne : forall A B C D E F G : Point, is_midpoint D A B -> is_midpoint E A C -> is_midpoint F B C -> inter_ll G E B C D -> Col A G F.
Proof.

*****

*****
forall (A B C D E F G : Point) (_ : is_midpoint D A B) (_ : is_midpoint E A C) (_ : is_midpoint F B C) (_ : inter_ll G E B C D), Col A G F
+++++
area_method.
-----
Theorem Prop54Hartsshorne : forall A B C D E F G : Point, is_midpoint D A B -> is_midpoint E A C -> is_midpoint F B C -> inter_ll G E B C D -> Col A G F.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Exo55Hartsshorne : \n forall A B C D I J K L,\n is_midpoint I A B -> \n is_midpoint J B C -> \n is_midpoint K C D -> \n is_midpoint L D A -> \n parallel I J K L /\ parallel I L J K.
-----
Theorem Exo55Hartsshorne : forall A B C D I J K L, is_midpoint I A B -> is_midpoint J B C -> is_midpoint K C D -> is_midpoint L D A -> parallel I J K L /\\ parallel I L J K.

*****

*****
forall (A B C D I J K L : Point) (_ : is_midpoint I A B) (_ : is_midpoint J B C) (_ : is_midpoint K C D) (_ : is_midpoint L D A), and (parallel I J K L) (parallel I L J K)
+++++
Proof.
-----
Theorem Exo55Hartsshorne : forall A B C D I J K L, is_midpoint I A B -> is_midpoint J B C -> is_midpoint K C D -> is_midpoint L D A -> parallel I J K L /\\ parallel I L J K.
Proof.

*****

*****
forall (A B C D I J K L : Point) (_ : is_midpoint I A B) (_ : is_midpoint J B C) (_ : is_midpoint K C D) (_ : is_midpoint L D A), and (parallel I J K L) (parallel I L J K)
+++++
area_method.
-----
Theorem Exo55Hartsshorne : forall A B C D I J K L, is_midpoint I A B -> is_midpoint J B C -> is_midpoint K C D -> is_midpoint L D A -> parallel I J K L /\\ parallel I L J K.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem th6_42 :\n forall A B C L M N P K : Point,\n is_midpoint M A B ->\n is_midpoint N A C ->\n is_midpoint K B C ->\n is_midpoint L A K -> \n on_inter_parallel_parallel P A C M K B N -> \n P<>A ->\n (2 + 2) * S A K P = (1 + 2) * S A B C.
-----
Theorem th6_42 : forall A B C L M N P K : Point, is_midpoint M A B -> is_midpoint N A C -> is_midpoint K B C -> is_midpoint L A K -> on_inter_parallel_parallel P A C M K B N -> P<>A -> (2 + 2) * S A K P = (1 + 2) * S A B C.

*****

*****
forall (A B C L M N P K : Point) (_ : is_midpoint M A B) (_ : is_midpoint N A C) (_ : is_midpoint K B C) (_ : is_midpoint L A K) (_ : on_inter_parallel_parallel P A C M K B N) (_ : not (eq P A)), eq (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S A K P)) (Fmult (Fplus F1 (Fplus F1 F1)) (S A B C))
+++++
Proof.
-----
Theorem th6_42 : forall A B C L M N P K : Point, is_midpoint M A B -> is_midpoint N A C -> is_midpoint K B C -> is_midpoint L A K -> on_inter_parallel_parallel P A C M K B N -> P<>A -> (2 + 2) * S A K P = (1 + 2) * S A B C.
Proof.

*****

*****
forall (A B C L M N P K : Point) (_ : is_midpoint M A B) (_ : is_midpoint N A C) (_ : is_midpoint K B C) (_ : is_midpoint L A K) (_ : on_inter_parallel_parallel P A C M K B N) (_ : not (eq P A)), eq (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S A K P)) (Fmult (Fplus F1 (Fplus F1 F1)) (S A B C))
+++++
am_before_field.
-----
Theorem th6_42 : forall A B C L M N P K : Point, is_midpoint M A B -> is_midpoint N A C -> is_midpoint K B C -> is_midpoint L A K -> on_inter_parallel_parallel P A C M K B N -> P<>A -> (2 + 2) * S A K P = (1 + 2) * S A B C.
Proof.
am_before_field.

*****
H : not (eq F0 F0)
H1 : eq A P
H0 : not (eq A A)
A,B,C,P : Point
*****
eq F0 (Fmult (Fplus F1 (Fplus F1 F1)) (S A B C))
+++++
intuition.
-----
Theorem th6_42 : forall A B C L M N P K : Point, is_midpoint M A B -> is_midpoint N A C -> is_midpoint K B C -> is_midpoint L A K -> on_inter_parallel_parallel P A C M K B N -> P<>A -> (2 + 2) * S A K P = (1 + 2) * S A B C.
Proof.
am_before_field.

*****
H2 : not\n (eq\n (Fplus (Fmult (Finv (Fplus F1 F1)) (S C B A))\n (Fmult (Finv (Fplus F1 F1))\n (Fmult (Finv (Fplus F1 F1)) (S C B A)))) F0)
H : not (eq (DSeg P A) F0)
H1 : not (eq A P)
H0 : not (eq P A)
A,B,C,P : Point
*****
eq (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fmult (Fmult (Fplus (Fmult (Finv (Fplus F1 F1)) (Fmult (Finv (Fplus F1 F1)) (S C B A))) (Fmult (Finv (Fplus F1 F1)) (S C B A))) (Finv (Fplus (Fmult (Finv (Fplus F1 F1)) (S C B A)) (Fmult (Finv (Fplus F1 F1)) (Fmult (Finv (Fplus F1 F1)) (S C B A)))))) (Fminus (Fopp (Fmult (Finv (Fplus F1 F1)) (S C B A))) (Fmult (Finv (Fplus F1 F1)) (Fmult (Finv (Fplus F1 F1)) (S C B A)))))) (Fopp (Fmult (Fplus F1 (Fplus F1 F1)) (S C B A)))
+++++
field_and_conclude.
-----
Theorem th6_42 : forall A B C L M N P K : Point, is_midpoint M A B -> is_midpoint N A C -> is_midpoint K B C -> is_midpoint L A K -> on_inter_parallel_parallel P A C M K B N -> P<>A -> (2 + 2) * S A K P = (1 + 2) * S A B C.
Proof.
am_before_field.

*****

*****

+++++
Qed.
-----
Theorem th6_43 :\n forall A B C F N K : Point,\n is_midpoint F A B ->\n is_midpoint N C F ->\n inter_ll K B C A N ->\n K <> C ->\n parallel B K K C ->\n B ** K / K ** C = 2.
-----
Theorem th6_43 : forall A B C F N K : Point, is_midpoint F A B -> is_midpoint N C F -> inter_ll K B C A N -> K <> C -> parallel B K K C -> B ** K / K ** C = 2.

*****

*****
forall (A B C F0 N K : Point) (_ : is_midpoint F0 A B) (_ : is_midpoint N C F0) (_ : inter_ll K B C A N) (_ : not (eq K C)) (_ : parallel B K K C), eq (Fdiv (DSeg B K) (DSeg K C)) (Fplus F1 F1)
+++++
Proof.
-----
Theorem th6_43 : forall A B C F N K : Point, is_midpoint F A B -> is_midpoint N C F -> inter_ll K B C A N -> K <> C -> parallel B K K C -> B ** K / K ** C = 2.
Proof.

*****

*****
forall (A B C F0 N K : Point) (_ : is_midpoint F0 A B) (_ : is_midpoint N C F0) (_ : inter_ll K B C A N) (_ : not (eq K C)) (_ : parallel B K K C), eq (Fdiv (DSeg B K) (DSeg K C)) (Fplus F1 F1)
+++++
area_method.
-----
Theorem th6_43 : forall A B C F N K : Point, is_midpoint F A B -> is_midpoint N C F -> inter_ll K B C A N -> K <> C -> parallel B K K C -> B ** K / K ** C = 2.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Conversemenelaus :\n forall (A B C D E G : Point) (r1 r2 : F),\n mratio D B C r1 ->\n mratio E C A r2 ->\n inter_ll G D E A B ->\n G <> A ->\n parallel B G G A ->\n B ** G / G ** A = - r1 * r2.
-----
Theorem Conversemenelaus : forall (A B C D E G : Point) (r1 r2 : F), mratio D B C r1 -> mratio E C A r2 -> inter_ll G D E A B -> G <> A -> parallel B G G A -> B ** G / G ** A = - r1 * r2.

*****

*****
forall (A B C D E G : Point) (r1 r2 : F) (_ : mratio D B C r1) (_ : mratio E C A r2) (_ : inter_ll G D E A B) (_ : not (eq G A)) (_ : parallel B G G A), eq (Fdiv (DSeg B G) (DSeg G A)) (Fmult (Fopp r1) r2)
+++++
Proof.
-----
Theorem Conversemenelaus : forall (A B C D E G : Point) (r1 r2 : F), mratio D B C r1 -> mratio E C A r2 -> inter_ll G D E A B -> G <> A -> parallel B G G A -> B ** G / G ** A = - r1 * r2.
Proof.

*****

*****
forall (A B C D E G : Point) (r1 r2 : F) (_ : mratio D B C r1) (_ : mratio E C A r2) (_ : inter_ll G D E A B) (_ : not (eq G A)) (_ : parallel B G G A), eq (Fdiv (DSeg B G) (DSeg G A)) (Fmult (Fopp r1) r2)
+++++
area_method.
-----
Theorem Conversemenelaus : forall (A B C D E G : Point) (r1 r2 : F), mratio D B C r1 -> mratio E C A r2 -> inter_ll G D E A B -> G <> A -> parallel B G G A -> B ** G / G ** A = - r1 * r2.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem MenelausQuadri :\n forall A B C D X Y A1 B1 C1 D1 : Point,\n inter_ll A1 A B X Y ->\n inter_ll B1 B C X Y ->\n inter_ll C1 C D X Y ->\n inter_ll D1 A D X Y ->\n B <> A1 ->\n C <> B1 ->\n D <> C1 ->\n A <> D1 ->\n parallel A A1 B A1 ->\n parallel B B1 C B1 ->\n parallel C C1 D C1 ->\n parallel D D1 A D1 ->\n A ** A1 / B ** A1 * (B ** B1 / C ** B1 * (C ** C1 / D ** C1 * (D ** D1 / A ** D1))) =\n 1.
-----
Theorem MenelausQuadri : forall A B C D X Y A1 B1 C1 D1 : Point, inter_ll A1 A B X Y -> inter_ll B1 B C X Y -> inter_ll C1 C D X Y -> inter_ll D1 A D X Y -> B <> A1 -> C <> B1 -> D <> C1 -> A <> D1 -> parallel A A1 B A1 -> parallel B B1 C B1 -> parallel C C1 D C1 -> parallel D D1 A D1 -> A ** A1 / B ** A1 * (B ** B1 / C ** B1 * (C ** C1 / D ** C1 * (D ** D1 / A ** D1))) = 1.

*****

*****
forall (A B C D X Y A1 B1 C1 D1 : Point) (_ : inter_ll A1 A B X Y) (_ : inter_ll B1 B C X Y) (_ : inter_ll C1 C D X Y) (_ : inter_ll D1 A D X Y) (_ : not (eq B A1)) (_ : not (eq C B1)) (_ : not (eq D C1)) (_ : not (eq A D1)) (_ : parallel A A1 B A1) (_ : parallel B B1 C B1) (_ : parallel C C1 D C1) (_ : parallel D D1 A D1), eq (Fmult (Fdiv (DSeg A A1) (DSeg B A1)) (Fmult (Fdiv (DSeg B B1) (DSeg C B1)) (Fmult (Fdiv (DSeg C C1) (DSeg D C1)) (Fdiv (DSeg D D1) (DSeg A D1))))) F1
+++++
Proof.
-----
Theorem MenelausQuadri : forall A B C D X Y A1 B1 C1 D1 : Point, inter_ll A1 A B X Y -> inter_ll B1 B C X Y -> inter_ll C1 C D X Y -> inter_ll D1 A D X Y -> B <> A1 -> C <> B1 -> D <> C1 -> A <> D1 -> parallel A A1 B A1 -> parallel B B1 C B1 -> parallel C C1 D C1 -> parallel D D1 A D1 -> A ** A1 / B ** A1 * (B ** B1 / C ** B1 * (C ** C1 / D ** C1 * (D ** D1 / A ** D1))) = 1.
Proof.

*****

*****
forall (A B C D X Y A1 B1 C1 D1 : Point) (_ : inter_ll A1 A B X Y) (_ : inter_ll B1 B C X Y) (_ : inter_ll C1 C D X Y) (_ : inter_ll D1 A D X Y) (_ : not (eq B A1)) (_ : not (eq C B1)) (_ : not (eq D C1)) (_ : not (eq A D1)) (_ : parallel A A1 B A1) (_ : parallel B B1 C B1) (_ : parallel C C1 D C1) (_ : parallel D D1 A D1), eq (Fmult (Fdiv (DSeg A A1) (DSeg B A1)) (Fmult (Fdiv (DSeg B B1) (DSeg C B1)) (Fmult (Fdiv (DSeg C C1) (DSeg D C1)) (Fdiv (DSeg D D1) (DSeg A D1))))) F1
+++++
area_method.
-----
Theorem MenelausQuadri : forall A B C D X Y A1 B1 C1 D1 : Point, inter_ll A1 A B X Y -> inter_ll B1 B C X Y -> inter_ll C1 C D X Y -> inter_ll D1 A D X Y -> B <> A1 -> C <> B1 -> D <> C1 -> A <> D1 -> parallel A A1 B A1 -> parallel B B1 C B1 -> parallel C C1 D C1 -> parallel D D1 A D1 -> A ** A1 / B ** A1 * (B ** B1 / C ** B1 * (C ** C1 / D ** C1 * (D ** D1 / A ** D1))) = 1.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem ConverseMenelauseQuadri :\n forall (A B C D A1 B1 C1 D1 : Point) (r1 r2 : F),\n mratio B1 B C r1 ->\n mratio C1 C D r2 ->\n inter_ll D1 D A B1 C1 ->\n inter_ll A1 A B B1 C1 ->\n A1 <> A ->\n D1 <> A ->\n parallel B A1 A1 A ->\n parallel D D1 D1 A -> B ** A1 / A1 ** A = r1 * (r2 * (D ** D1 / D1 ** A)).
-----
Theorem ConverseMenelauseQuadri : forall (A B C D A1 B1 C1 D1 : Point) (r1 r2 : F), mratio B1 B C r1 -> mratio C1 C D r2 -> inter_ll D1 D A B1 C1 -> inter_ll A1 A B B1 C1 -> A1 <> A -> D1 <> A -> parallel B A1 A1 A -> parallel D D1 D1 A -> B ** A1 / A1 ** A = r1 * (r2 * (D ** D1 / D1 ** A)).

*****

*****
forall (A B C D A1 B1 C1 D1 : Point) (r1 r2 : F) (_ : mratio B1 B C r1) (_ : mratio C1 C D r2) (_ : inter_ll D1 D A B1 C1) (_ : inter_ll A1 A B B1 C1) (_ : not (eq A1 A)) (_ : not (eq D1 A)) (_ : parallel B A1 A1 A) (_ : parallel D D1 D1 A), eq (Fdiv (DSeg B A1) (DSeg A1 A)) (Fmult r1 (Fmult r2 (Fdiv (DSeg D D1) (DSeg D1 A))))
+++++
Proof.
-----
Theorem ConverseMenelauseQuadri : forall (A B C D A1 B1 C1 D1 : Point) (r1 r2 : F), mratio B1 B C r1 -> mratio C1 C D r2 -> inter_ll D1 D A B1 C1 -> inter_ll A1 A B B1 C1 -> A1 <> A -> D1 <> A -> parallel B A1 A1 A -> parallel D D1 D1 A -> B ** A1 / A1 ** A = r1 * (r2 * (D ** D1 / D1 ** A)).
Proof.

*****

*****
forall (A B C D A1 B1 C1 D1 : Point) (r1 r2 : F) (_ : mratio B1 B C r1) (_ : mratio C1 C D r2) (_ : inter_ll D1 D A B1 C1) (_ : inter_ll A1 A B B1 C1) (_ : not (eq A1 A)) (_ : not (eq D1 A)) (_ : parallel B A1 A1 A) (_ : parallel D D1 D1 A), eq (Fdiv (DSeg B A1) (DSeg A1 A)) (Fmult r1 (Fmult r2 (Fdiv (DSeg D D1) (DSeg D1 A))))
+++++
area_method.
-----
Theorem ConverseMenelauseQuadri : forall (A B C D A1 B1 C1 D1 : Point) (r1 r2 : F), mratio B1 B C r1 -> mratio C1 C D r2 -> inter_ll D1 D A B1 C1 -> inter_ll A1 A B B1 C1 -> A1 <> A -> D1 <> A -> parallel B A1 A1 A -> parallel D D1 D1 A -> B ** A1 / A1 ** A = r1 * (r2 * (D ** D1 / D1 ** A)).
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem th6_6 :\n forall A B C L M N O : Point,\n inter_ll L B C A O ->\n inter_ll N B A C O ->\n inter_ll M A C B O ->\n A <> L ->\n B <> M ->\n C <> N ->\n parallel O L A L ->\n parallel O M B M ->\n parallel O N C N -> O ** L / A ** L + O ** M / B ** M + O ** N / C ** N = 1.
-----
Theorem th6_6 : forall A B C L M N O : Point, inter_ll L B C A O -> inter_ll N B A C O -> inter_ll M A C B O -> A <> L -> B <> M -> C <> N -> parallel O L A L -> parallel O M B M -> parallel O N C N -> O ** L / A ** L + O ** M / B ** M + O ** N / C ** N = 1.

*****

*****
forall (A B C L M N O : Point) (_ : inter_ll L B C A O) (_ : inter_ll N B A C O) (_ : inter_ll M A C B O) (_ : not (eq A L)) (_ : not (eq B M)) (_ : not (eq C N)) (_ : parallel O L A L) (_ : parallel O M B M) (_ : parallel O N C N), eq (Fplus (Fplus (Fdiv (DSeg O L) (DSeg A L)) (Fdiv (DSeg O M) (DSeg B M))) (Fdiv (DSeg O N) (DSeg C N))) F1
+++++
Proof.
-----
Theorem th6_6 : forall A B C L M N O : Point, inter_ll L B C A O -> inter_ll N B A C O -> inter_ll M A C B O -> A <> L -> B <> M -> C <> N -> parallel O L A L -> parallel O M B M -> parallel O N C N -> O ** L / A ** L + O ** M / B ** M + O ** N / C ** N = 1.
Proof.

*****

*****
forall (A B C L M N O : Point) (_ : inter_ll L B C A O) (_ : inter_ll N B A C O) (_ : inter_ll M A C B O) (_ : not (eq A L)) (_ : not (eq B M)) (_ : not (eq C N)) (_ : parallel O L A L) (_ : parallel O M B M) (_ : parallel O N C N), eq (Fplus (Fplus (Fdiv (DSeg O L) (DSeg A L)) (Fdiv (DSeg O M) (DSeg B M))) (Fdiv (DSeg O N) (DSeg C N))) F1
+++++
area_method.
-----
Theorem th6_6 : forall A B C L M N O : Point, inter_ll L B C A O -> inter_ll N B A C O -> inter_ll M A C B O -> A <> L -> B <> M -> C <> N -> parallel O L A L -> parallel O M B M -> parallel O N C N -> O ** L / A ** L + O ** M / B ** M + O ** N / C ** N = 1.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem th6_7 :\n forall A B C L M N O : Point,\n inter_ll L B C A O ->\n inter_ll N B A C O ->\n inter_ll M A C B O ->\n S A M L * (S B N M * S C L N) = S A N L * (S B L M * S C N M).
-----
Theorem th6_7 : forall A B C L M N O : Point, inter_ll L B C A O -> inter_ll N B A C O -> inter_ll M A C B O -> S A M L * (S B N M * S C L N) = S A N L * (S B L M * S C N M).

*****

*****
forall (A B C L M N O : Point) (_ : inter_ll L B C A O) (_ : inter_ll N B A C O) (_ : inter_ll M A C B O), eq (Fmult (S A M L) (Fmult (S B N M) (S C L N))) (Fmult (S A N L) (Fmult (S B L M) (S C N M)))
+++++
Proof.
-----
Theorem th6_7 : forall A B C L M N O : Point, inter_ll L B C A O -> inter_ll N B A C O -> inter_ll M A C B O -> S A M L * (S B N M * S C L N) = S A N L * (S B L M * S C N M).
Proof.

*****

*****
forall (A B C L M N O : Point) (_ : inter_ll L B C A O) (_ : inter_ll N B A C O) (_ : inter_ll M A C B O), eq (Fmult (S A M L) (Fmult (S B N M) (S C L N))) (Fmult (S A N L) (Fmult (S B L M) (S C N M)))
+++++
area_method.
-----
Theorem th6_7 : forall A B C L M N O : Point, inter_ll L B C A O -> inter_ll N B A C O -> inter_ll M A C B O -> S A M L * (S B N M * S C L N) = S A N L * (S B L M * S C N M).
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem th6_256_1 :\n forall (A B C D P Q R S : Point) (r1 r2 : F),\n on_parallel_d D A B C 1 ->\n on_line_d S D A r2 ->\n on_line_d P A B r1 -> \n on_line_d R C D r1 -> \n on_line_d Q B C r2 ->\n P <> S -> \n parallel Q R P S.
-----
Theorem th6_256_1 : forall (A B C D P Q R S : Point) (r1 r2 : F), on_parallel_d D A B C 1 -> on_line_d S D A r2 -> on_line_d P A B r1 -> on_line_d R C D r1 -> on_line_d Q B C r2 -> P <> S -> parallel Q R P S.

*****

*****
forall (A B C D P Q R S : Point) (r1 r2 : F) (_ : on_parallel_d D A B C F1) (_ : on_line_d S D A r2) (_ : on_line_d P A B r1) (_ : on_line_d R C D r1) (_ : on_line_d Q B C r2) (_ : not (eq P S)), parallel Q R P S
+++++
Proof.
-----
Theorem th6_256_1 : forall (A B C D P Q R S : Point) (r1 r2 : F), on_parallel_d D A B C 1 -> on_line_d S D A r2 -> on_line_d P A B r1 -> on_line_d R C D r1 -> on_line_d Q B C r2 -> P <> S -> parallel Q R P S.
Proof.

*****

*****
forall (A B C D P Q R S : Point) (r1 r2 : F) (_ : on_parallel_d D A B C F1) (_ : on_line_d S D A r2) (_ : on_line_d P A B r1) (_ : on_line_d R C D r1) (_ : on_line_d Q B C r2) (_ : not (eq P S)), parallel Q R P S
+++++
area_method.
-----
Theorem th6_256_1 : forall (A B C D P Q R S : Point) (r1 r2 : F), on_parallel_d D A B C 1 -> on_line_d S D A r2 -> on_line_d P A B r1 -> on_line_d R C D r1 -> on_line_d Q B C r2 -> P <> S -> parallel Q R P S.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem th6_257 :\n forall (A B C D P Q R S : Point) (r1 r2 : F),\n on_parallel_d D A B C 1 ->\n on_line_d S D A r2 ->\n on_line_d P A B r1 ->\n on_line_d R C D r1 ->\n on_line_d Q B C r2 ->\n S4 P Q R S = (2 * (r2 * r1) - r2 - r1 + 1) * S4 A B C D.
-----
Theorem th6_257 : forall (A B C D P Q R S : Point) (r1 r2 : F), on_parallel_d D A B C 1 -> on_line_d S D A r2 -> on_line_d P A B r1 -> on_line_d R C D r1 -> on_line_d Q B C r2 -> S4 P Q R S = (2 * (r2 * r1) - r2 - r1 + 1) * S4 A B C D.

*****

*****
forall (A B C D P Q R S : Point) (r1 r2 : F) (_ : on_parallel_d D A B C F1) (_ : on_line_d S D A r2) (_ : on_line_d P A B r1) (_ : on_line_d R C D r1) (_ : on_line_d Q B C r2), eq (S4 P Q R S) (Fmult (Fplus (Fminus (Fminus (Fmult (Fplus F1 F1) (Fmult r2 r1)) r2) r1) F1) (S4 A B C D))
+++++
Proof.
-----
Theorem th6_257 : forall (A B C D P Q R S : Point) (r1 r2 : F), on_parallel_d D A B C 1 -> on_line_d S D A r2 -> on_line_d P A B r1 -> on_line_d R C D r1 -> on_line_d Q B C r2 -> S4 P Q R S = (2 * (r2 * r1) - r2 - r1 + 1) * S4 A B C D.
Proof.

*****

*****
forall (A B C D P Q R S : Point) (r1 r2 : F) (_ : on_parallel_d D A B C F1) (_ : on_line_d S D A r2) (_ : on_line_d P A B r1) (_ : on_line_d R C D r1) (_ : on_line_d Q B C r2), eq (S4 P Q R S) (Fmult (Fplus (Fminus (Fminus (Fmult (Fplus F1 F1) (Fmult r2 r1)) r2) r1) F1) (S4 A B C D))
+++++
area_method.
-----
Theorem th6_257 : forall (A B C D P Q R S : Point) (r1 r2 : F), on_parallel_d D A B C 1 -> on_line_d S D A r2 -> on_line_d P A B r1 -> on_line_d R C D r1 -> on_line_d Q B C r2 -> S4 P Q R S = (2 * (r2 * r1) - r2 - r1 + 1) * S4 A B C D.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem gauss_line :\n forall A0 A1 A2 A3 X Y M1 M2 M3 : Point,\n inter_ll X A0 A3 A1 A2 ->\n inter_ll Y A2 A3 A1 A0 ->\n is_midpoint M1 A1 A3 ->\n is_midpoint M2 A0 A2 ->\n is_midpoint M3 X Y -> \n S A0 A1 A2 <> 0 ->\n Col M1 M2 M3.
-----
Theorem gauss_line : forall A0 A1 A2 A3 X Y M1 M2 M3 : Point, inter_ll X A0 A3 A1 A2 -> inter_ll Y A2 A3 A1 A0 -> is_midpoint M1 A1 A3 -> is_midpoint M2 A0 A2 -> is_midpoint M3 X Y -> S A0 A1 A2 <> 0 -> Col M1 M2 M3.

*****

*****
forall (A0 A1 A2 A3 X Y M1 M2 M3 : Point) (_ : inter_ll X A0 A3 A1 A2) (_ : inter_ll Y A2 A3 A1 A0) (_ : is_midpoint M1 A1 A3) (_ : is_midpoint M2 A0 A2) (_ : is_midpoint M3 X Y) (_ : not (eq (S A0 A1 A2) F0)), Col M1 M2 M3
+++++
Proof.
-----
Theorem gauss_line : forall A0 A1 A2 A3 X Y M1 M2 M3 : Point, inter_ll X A0 A3 A1 A2 -> inter_ll Y A2 A3 A1 A0 -> is_midpoint M1 A1 A3 -> is_midpoint M2 A0 A2 -> is_midpoint M3 X Y -> S A0 A1 A2 <> 0 -> Col M1 M2 M3.
Proof.

*****

*****
forall (A0 A1 A2 A3 X Y M1 M2 M3 : Point) (_ : inter_ll X A0 A3 A1 A2) (_ : inter_ll Y A2 A3 A1 A0) (_ : is_midpoint M1 A1 A3) (_ : is_midpoint M2 A0 A2) (_ : is_midpoint M3 X Y) (_ : not (eq (S A0 A1 A2) F0)), Col M1 M2 M3
+++++
area_method.
-----
Theorem gauss_line : forall A0 A1 A2 A3 X Y M1 M2 M3 : Point, inter_ll X A0 A3 A1 A2 -> inter_ll Y A2 A3 A1 A0 -> is_midpoint M1 A1 A3 -> is_midpoint M2 A0 A2 -> is_midpoint M3 X Y -> S A0 A1 A2 <> 0 -> Col M1 M2 M3.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
