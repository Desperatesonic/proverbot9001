38d86a1dad228d5a03998bb8a92ded0c
Require Export GeoCoq.Tarski_dev.Annexes.midpoint_theorems.
Section Varignon.
Context `{TE:Tarski_euclidean}.
Lemma varignon :
 forall A B C D I J K L,
  A<>C -> B<>D -> ~ Col I J K ->
  Midpoint I A B ->
  Midpoint J B C ->
  Midpoint K C D ->
  Midpoint L A D ->
  Parallelogram I J K L.
Proof.
  intros.
  assert_diffs.
  assert (Par I L B D).
  {
    perm_apply (triangle_mid_par B D A L I).
  }
  {
    idtac.
    assert (Par J K B D).
    {
      perm_apply (triangle_mid_par B D C K J).
    }
    {
      idtac.
      assert (Par I L J K).
      {
        apply par_trans with B D.
        {
          finish.
        }
        {
          finish.
        }
      }
      {
        idtac.
        assert (Par I J A C).
        {
          perm_apply (triangle_mid_par A C B J I).
        }
        {
          idtac.
          assert (Par L K A C).
          {
            perm_apply (triangle_mid_par A C D K L).
          }
          {
            idtac.
            assert (Par I J K L).
            {
              apply par_trans with A C.
              {
                finish.
              }
              {
                finish.
              }
            }
            {
              idtac.
              apply par_2_plg.
              {
                finish.
              }
              {
                finish.
              }
              {
                finish.
              }
            }
          }
        }
      }
    }
  }
Qed.
Lemma varignon_aux_aux :
 forall A B C D I J K L,
  A<>C ->
  J<>L -> 
  Midpoint I A B ->
  Midpoint J B C ->
  Midpoint K C D ->
  Midpoint L A D ->
  Parallelogram I J K L.
Proof.
  intros.
  induction (eq_dec_points B D).
  {
    treat_equalities.
    apply plg_trivial.
    intro.
    treat_equalities.
    intuition.
  }
  {
    Name X the midpoint of B and D.
    assert_diffs.
    assert (Par B D L I /\ Cong B X L I).
    {
      apply (triangle_mid_par_cong_1 A B D X L I).
      {
        finish.
      }
      {
        finish.
      }
      {
        finish.
      }
      {
        finish.
      }
    }
    {
      idtac.
      assert (Par B D K J /\ Cong B X K J).
      {
        apply (triangle_mid_par_cong_1 C B D X K J).
        {
          finish.
        }
        {
          finish.
        }
        {
          finish.
        }
        {
          finish.
        }
      }
      {
        idtac.
        spliter.
        assert (Par I L J K).
        {
          eapply par_trans with B D.
          {
            finish.
          }
          {
            finish.
          }
        }
        {
          idtac.
          assert (Cong I L J K).
          {
            eapply cong_transitivity with B X.
            {
              finish.
            }
            {
              finish.
            }
          }
          {
            idtac.
            Name X' the midpoint of A and C.
            assert (Par A C J I /\ Cong A X' J I).
            {
              apply (triangle_mid_par_cong_1 B A C X' J  I).
              {
                finish.
              }
              {
                finish.
              }
              {
                finish.
              }
              {
                finish.
              }
            }
            {
              idtac.
              assert (Par A C K L /\ Cong A X' K L).
              {
                apply (triangle_mid_par_cong_1 D A C X' K L).
                {
                  finish.
                }
                {
                  finish.
                }
                {
                  finish.
                }
                {
                  finish.
                }
              }
              {
                idtac.
                spliter.
                assert (Par I J K L).
                {
                  eapply par_trans with A C.
                  {
                    finish.
                  }
                  {
                    finish.
                  }
                }
                {
                  idtac.
                  assert (Cong I J K L).
                  {
                    eapply cong_transitivity with A X'.
                    {
                      finish.
                    }
                    {
                      finish.
                    }
                  }
                  {
                    idtac.
                    apply par_par_cong_cong_parallelogram.
                    {
                      finish.
                    }
                    {
                      finish.
                    }
                    {
                      finish.
                    }
                    {
                      finish.
                    }
                    {
                      finish.
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
Qed.
Lemma varignon_aux :
 forall A B C D I J K L,
  (A<>C \/ B<>D) ->
  J<>L ->
  Midpoint I A B ->
  Midpoint J B C ->
  Midpoint K C D ->
  Midpoint L A D ->
  Parallelogram I J K L.
Proof.
  intros.
  induction H.
  {
    eauto using varignon_aux_aux.
  }
  {
    induction (eq_dec_points A C).
    {
      treat_equalities.
      apply plg_trivial1.
      intro.
      treat_equalities.
      intuition.
    }
    {
      Name X the midpoint of B and D.
      assert_diffs.
      assert (Par B D L I /\ Cong B X L I).
      {
        apply (triangle_mid_par_cong_1 A B D X L I).
        {
          finish.
        }
        {
          finish.
        }
        {
          finish.
        }
        {
          finish.
        }
      }
      {
        idtac.
        assert (Par B D K J /\ Cong B X K J).
        {
          apply (triangle_mid_par_cong_1 C B D X K J).
          {
            finish.
          }
          {
            finish.
          }
          {
            finish.
          }
          {
            finish.
          }
        }
        {
          idtac.
          spliter.
          assert (Par I L J K).
          {
            eapply par_trans with B D.
            {
              finish.
            }
            {
              finish.
            }
          }
          {
            idtac.
            assert (Cong I L J K).
            {
              eapply cong_transitivity with B X.
              {
                finish.
              }
              {
                finish.
              }
            }
            {
              idtac.
              Name X' the midpoint of A and C.
              assert (Par A C J I /\ Cong A X' J I).
              {
                apply (triangle_mid_par_cong_1 B A C X' J  I).
                {
                  finish.
                }
                {
                  finish.
                }
                {
                  finish.
                }
                {
                  finish.
                }
              }
              {
                idtac.
                assert (Par A C K L /\ Cong A X' K L).
                {
                  apply (triangle_mid_par_cong_1 D A C X' K L).
                  {
                    finish.
                  }
                  {
                    finish.
                  }
                  {
                    finish.
                  }
                  {
                    finish.
                  }
                }
                {
                  idtac.
                  spliter.
                  assert (Par I J K L).
                  {
                    eapply par_trans with A C.
                    {
                      finish.
                    }
                    {
                      finish.
                    }
                  }
                  {
                    idtac.
                    assert (Cong I J K L).
                    {
                      eapply cong_transitivity with A X'.
                      {
                        finish.
                      }
                      {
                        finish.
                      }
                    }
                    {
                      idtac.
                      apply par_par_cong_cong_parallelogram.
                      {
                        finish.
                      }
                      {
                        finish.
                      }
                      {
                        finish.
                      }
                      {
                        finish.
                      }
                      {
                        finish.
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
Qed.
Lemma varignon' :
 forall A B C D I J K L,
  (A<>C \/ B<>D) ->
  Midpoint I A B ->
  Midpoint J B C ->
  Midpoint K C D ->
  Midpoint L A D ->
  Parallelogram I J K L.
Proof.
  intros.
  induction (eq_dec_points J L).
  {
    subst.
    unfold Parallelogram.
    right.
    unfold Parallelogram_flat.
    assert_congs_perm.
    Name X the midpoint of B and D.
    induction (eq_dec_points A B).
    {
      treat_equalities.
      assert_cols.
      repeat split.
      {
        Cong.
        Col.
      }
      {
        Cong.
        Col.
      }
      {
        Cong.
      }
      {
        Cong.
      }
      {
        Cong.
        Col.
        intuition.
      }
    }
    {
      induction (eq_dec_points A D).
      {
        treat_equalities.
        induction (eq_dec_points X K).
        {
          treat_equalities.
          intuition.
        }
        {
          assert_cols.
          assert (Cong X L K L).
          {
            assert (Par B L L K /\
       Par B C K X /\
       Par L C L X /\
       Cong B X K L /\
       Cong L X K L /\
       Cong B L K X /\ Cong C L K X /\ Cong L K L X /\ Cong C K L X).
            {
              apply (triangle_mid_par_flat_cong B L C K L X).
              {
                Col.
              }
              {
                Col.
                Midpoint.
                intro.
                treat_equalities.
                intuition.
              }
              {
                Col.
                Midpoint.
                intro.
                treat_equalities.
                intuition.
              }
              {
                Col.
              }
              {
                Col.
                Midpoint.
              }
              {
                Col.
              }
              {
                Col.
                Midpoint.
              }
            }
            {
              spliter.
              Cong.
            }
          }
          {
            repeat split.
            {
              show_distinct L X.
              {
                intuition.
              }
              {
                assert_diffs.
                ColR.
              }
            }
            {
              Col.
            }
            {
              auto.
            }
            {
              auto.
            }
            {
              left.
              auto.
            }
          }
        }
      }
      {
        induction (eq_dec_points B D).
        {
          treat_equalities.
          intuition.
        }
        {
          assert (Midpoint L I K).
          {
            assert (Par A B L X /\
       Par A D X I /\
       Par B D L I /\
       Cong A I X L /\
       Cong B I X L /\
       Cong A L X I /\ Cong D L X I /\ Cong B X L I /\ Cong D X L I).
            {
              apply (triangle_mid_par_cong A B D X L I).
              {
                auto.
              }
              {
                auto.
              }
              {
                auto.
              }
              {
                auto.
              }
              {
                auto.
              }
              {
                auto.
              }
            }
            {
              spliter.
              induction (eq_dec_points C D).
              {
                treat_equalities.
                intuition.
              }
              {
                assert_diffs.
                induction (eq_dec_points B C).
                {
                  treat_equalities.
                  assert_cols.
                  apply cong_col_mid.
                  {
                    auto.
                  }
                  {
                    ColR.
                  }
                  {
                    Cong.
                  }
                }
                {
                  assert (Par B C X K /\
       Par B D K L /\
       Par C D X L /\
       Cong B L K X /\
       Cong C L K X /\
       Cong B X K L /\ Cong D X K L /\ Cong C K X L /\ Cong D K X L).
                  {
                    apply (triangle_mid_par_cong B C D K X L).
                    {
                      auto.
                    }
                    {
                      auto.
                    }
                    {
                      auto.
                    }
                    {
                      auto.
                    }
                    {
                      auto.
                    }
                    {
                      auto.
                    }
                  }
                  {
                    spliter.
                    induction (eq_dec_points I K).
                    {
                      treat_equalities.
                      assert (Parallelogram A D B C).
                      {
                        apply mid_plg with I.
                        {
                          Midpoint.
                        }
                        {
                          Midpoint.
                        }
                        {
                          Midpoint.
                        }
                      }
                      {
                        idtac.
                        assert (Parallelogram A B D C).
                        {
                          apply mid_plg with L.
                          {
                            Midpoint.
                          }
                          {
                            Midpoint.
                          }
                          {
                            Midpoint.
                          }
                        }
                        {
                          idtac.
                          exfalso.
                          apply Plg_perm in H39.
                          apply Plg_perm in H40.
                          spliter.
                          apply (plg_not_comm_1 B D A C).
                          {
                            auto.
                          }
                          {
                            auto.
                          }
                          {
                            auto.
                          }
                        }
                      }
                    }
                    {
                      apply cong_col_mid.
                      {
                        auto.
                      }
                      {
                        assert (Par I L K L).
                        {
                          apply par_trans with B D.
                          {
                            Par.
                          }
                          {
                            Par.
                          }
                        }
                        {
                          apply par_id_5.
                          Par.
                        }
                      }
                      {
                        eCong.
                      }
                    }
                  }
                }
              }
            }
          }
          {
            assert_congs_perm.
            assert_cols.
            repeat split.
            {
              Col.
            }
            {
              Col.
            }
            {
              Col.
              Cong.
            }
            {
              Col.
              Cong.
            }
            {
              Col.
              Cong.
              left.
              intro.
              subst.
              treat_equalities.
              intuition.
            }
          }
        }
      }
    }
  }
  {
    eapply varignon_aux.
    {
      eauto.
    }
    {
      eauto.
    }
    {
      eauto.
    }
    {
      eauto.
    }
    {
      eauto.
    }
    {
      eauto.
    }
  }
Qed.
End Varignon.
