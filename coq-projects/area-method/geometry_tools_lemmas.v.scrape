Require Export field_general_properties.
-----
Require Export chou_gao_zhang_axioms.
-----
Lemma S_0 : forall A B C : Point, S A B C = S C A B.
-----
Lemma S_0 : forall A B C : Point, S A B C = S C A B.

*****

*****
forall A B C : Point, eq (S A B C) (S C A B)
+++++
auto with Geom.
-----
Lemma S_0 : forall A B C : Point, S A B C = S C A B.
auto with Geom.

*****

*****

+++++
Qed.
-----
Lemma S_1 : forall A B C : Point, S A B C = S B C A.
-----
Lemma S_1 : forall A B C : Point, S A B C = S B C A.

*****

*****
forall A B C : Point, eq (S A B C) (S B C A)
+++++
auto with Geom.
-----
Lemma S_1 : forall A B C : Point, S A B C = S B C A.
auto with Geom.

*****

*****

+++++
Qed.
-----
Hint Resolve S_1: Geom.
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.

*****

*****
forall A B C : Point, eq (S A B C) (Fopp (S C B A))
+++++
Proof.
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
Proof.

*****

*****
forall A B C : Point, eq (S A B C) (Fopp (S C B A))
+++++
intros.
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
Proof.
intros.

*****
A,B,C : Point
*****
eq (S A B C) (Fopp (S C B A))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
Proof.
intros.
try solve [ Geometry | congruence ].

*****
A,B,C : Point
*****
eq (S A B C) (Fopp (S C B A))
+++++
assert (S A B C = - S B A C).
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).

*****
A,B,C : Point
*****
eq (S A B C) (Fopp (S B A C))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).

*****
H : eq (S A B C) (Fopp (S B A C))
A,B,C : Point
*****
eq (S A B C) (Fopp (S C B A))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).
try solve [ Geometry | congruence ].

*****
H : eq (S A B C) (Fopp (S B A C))
A,B,C : Point
*****
eq (S A B C) (Fopp (S C B A))
+++++
assert (S B A C = S C B A).
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).
try solve [ Geometry | congruence ].
assert (S B A C = S C B A).

*****
H : eq (S A B C) (Fopp (S B A C))
A,B,C : Point
*****
eq (S B A C) (S C B A)
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).
try solve [ Geometry | congruence ].
assert (S B A C = S C B A).

*****
H0 : eq (S B A C) (S C B A)
H : eq (S A B C) (Fopp (S B A C))
A,B,C : Point
*****
eq (S A B C) (Fopp (S C B A))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_2 : forall A B C : Point, S A B C = - S C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).

*****

*****

+++++
Qed.
-----
Hint Resolve S_2: Geom.
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.

*****

*****
forall A B C : Point, eq (S A B C) (Fopp (S A C B))
+++++
Proof.
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
Proof.

*****

*****
forall A B C : Point, eq (S A B C) (Fopp (S A C B))
+++++
intros.
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
Proof.
intros.

*****
A,B,C : Point
*****
eq (S A B C) (Fopp (S A C B))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
Proof.
intros.
try solve [ Geometry | congruence ].

*****
A,B,C : Point
*****
eq (S A B C) (Fopp (S A C B))
+++++
assert (S A B C = - S B A C).
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).

*****
A,B,C : Point
*****
eq (S A B C) (Fopp (S B A C))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).

*****
H : eq (S A B C) (Fopp (S B A C))
A,B,C : Point
*****
eq (S A B C) (Fopp (S A C B))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).
try solve [ Geometry | congruence ].

*****
H : eq (S A B C) (Fopp (S B A C))
A,B,C : Point
*****
eq (S A B C) (Fopp (S A C B))
+++++
assert (S B A C = S A C B).
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).
try solve [ Geometry | congruence ].
assert (S B A C = S A C B).

*****
H : eq (S A B C) (Fopp (S B A C))
A,B,C : Point
*****
eq (S B A C) (S A C B)
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).
try solve [ Geometry | congruence ].
assert (S B A C = S A C B).

*****
H0 : eq (S B A C) (S A C B)
H : eq (S A B C) (Fopp (S B A C))
A,B,C : Point
*****
eq (S A B C) (Fopp (S A C B))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S_3 : forall A B C : Point, S A B C = - S A C B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S A B C = - S B A C).

*****

*****

+++++
Qed.
-----
Hint Resolve S_3: Geom.
-----
Lemma S_4 : forall A B C : Point, S A B C = - S B A C.
-----
Lemma S_4 : forall A B C : Point, S A B C = - S B A C.

*****

*****
forall A B C : Point, eq (S A B C) (Fopp (S B A C))
+++++
intros.
-----
Lemma S_4 : forall A B C : Point, S A B C = - S B A C.
intros.

*****
A,B,C : Point
*****
eq (S A B C) (Fopp (S B A C))
+++++
Geometry.
-----
Lemma S_4 : forall A B C : Point, S A B C = - S B A C.
intros.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fminus (S A B D) (S C B D))
+++++
Proof.
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fminus (S A B D) (S C B D))
+++++
intros.
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fminus (S A B D) (S C B D))
+++++
unfold S4 in |- *.
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.

*****
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].

*****
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
assert (S A B C = S A B D + S A D C + S D B C).
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).

*****
A,B,C,D : Point
*****
eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (S D B C))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).

*****
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (S D B C))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].

*****
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (S D B C))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
assert (S D B C = - S C B D).
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).

*****
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (S D B C))
A,B,C,D : Point
*****
eq (S D B C) (Fopp (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).

*****
H0 : eq (S D B C) (Fopp (S C B D))
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (S D B C))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].

*****
H0 : eq (S D B C) (Fopp (S C B D))
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (S D B C))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
rewrite H0 in H.
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.

*****
H0 : eq (S D B C) (Fopp (S C B D))
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.
try solve [ Geometry | ring ].

*****
H0 : eq (S D B C) (Fopp (S C B D))
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
assert (S A D C = - S A C D).
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.
try solve [ Geometry | ring ].
assert (S A D C = - S A C D).

*****
H0 : eq (S D B C) (Fopp (S C B D))
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (S A D C) (Fopp (S A C D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.
try solve [ Geometry | ring ].
assert (S A D C = - S A C D).

*****
H1 : eq (S A D C) (Fopp (S A C D))
H0 : eq (S D B C) (Fopp (S C B D))
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.
try solve [ Geometry | ring ].
assert (S A D C = - S A C D).
try solve [ Geometry | ring ].

*****
H1 : eq (S A D C) (Fopp (S A C D))
H0 : eq (S D B C) (Fopp (S C B D))
H : eq (S A B C) (Fplus (Fplus (S A B D) (S A D C)) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
rewrite H1 in H.
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.
try solve [ Geometry | ring ].
assert (S A D C = - S A C D).
try solve [ Geometry | ring ].
rewrite H1 in H.

*****
H1 : eq (S A D C) (Fopp (S A C D))
H0 : eq (S D B C) (Fopp (S C B D))
H : eq (S A B C)\n (Fplus (Fplus (S A B D) (Fopp (S A C D))) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.
try solve [ Geometry | ring ].
assert (S A D C = - S A C D).
try solve [ Geometry | ring ].
rewrite H1 in H.
try solve [ Geometry | ring ].

*****
H1 : eq (S A D C) (Fopp (S A C D))
H0 : eq (S D B C) (Fopp (S C B D))
H : eq (S A B C)\n (Fplus (Fplus (S A B D) (Fopp (S A C D))) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
clear H0 H1.
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.
try solve [ Geometry | ring ].
assert (S A D C = - S A C D).
try solve [ Geometry | ring ].
rewrite H1 in H.
try solve [ Geometry | ring ].
clear H0 H1.

*****
H : eq (S A B C)\n (Fplus (Fplus (S A B D) (Fopp (S A C D))) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.
try solve [ Geometry | ring ].
assert (S A D C = - S A C D).
try solve [ Geometry | ring ].
rewrite H1 in H.
try solve [ Geometry | ring ].
clear H0 H1.
try solve [ Geometry | ring ].

*****
H : eq (S A B C)\n (Fplus (Fplus (S A B D) (Fopp (S A C D))) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
rewrite H.
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).
try solve [ Geometry | ring ].
assert (S D B C = - S C B D).
try solve [ Geometry | ring ].
rewrite H0 in H.
try solve [ Geometry | ring ].
assert (S A D C = - S A C D).
try solve [ Geometry | ring ].
rewrite H1 in H.
try solve [ Geometry | ring ].
clear H0 H1.
try solve [ Geometry | ring ].
rewrite H.

*****
H : eq (S A B C)\n (Fplus (Fplus (S A B D) (Fopp (S A C D))) (Fopp (S C B D)))
A,B,C,D : Point
*****
eq (Fplus (Fplus (Fplus (S A B D) (Fopp (S A C D))) (Fopp (S C B D))) (S A C D)) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_1 : forall A B C D : Point, S4 A B C D = S A B D - S C B D.
Proof.
intros.
try solve [ Geometry | ring ].
unfold S4 in |- *.
try solve [ Geometry | ring ].
assert (S A B C = S A B D + S A D C + S D B C).

*****

*****

+++++
Qed.
-----
Hint Resolve S4_1: Geom.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (S4 B C D A)
+++++
Proof.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (S4 B C D A)
+++++
unfold S4 in |- *.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.

*****

*****
forall A B C D : Point, eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].

*****

*****
forall A B C D : Point, eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
intros.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.

*****
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].

*****
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
assert (S B D A = S A B D).
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).

*****
A,B,C,D : Point
*****
eq (S B D A) (S A B D)
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).

*****
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].

*****
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
assert (S B C D = - S C B D).
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).

*****
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (S B C D) (Fopp (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).

*****
H0 : eq (S B C D) (Fopp (S C B D))
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).
try solve [ Geometry | ring ].

*****
H0 : eq (S B C D) (Fopp (S C B D))
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
assert (S4 A B C D = S A B D - S C B D).
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).
try solve [ Geometry | ring ].
assert (S4 A B C D = S A B D - S C B D).

*****
H0 : eq (S B C D) (Fopp (S C B D))
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fminus (S A B D) (S C B D))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).
try solve [ Geometry | ring ].
assert (S4 A B C D = S A B D - S C B D).

*****
H1 : eq (S4 A B C D) (Fminus (S A B D) (S C B D))
H0 : eq (S B C D) (Fopp (S C B D))
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
try solve [ Geometry | ring ].
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).
try solve [ Geometry | ring ].
assert (S4 A B C D = S A B D - S C B D).
try solve [ Geometry | ring ].

*****
H1 : eq (S4 A B C D) (Fminus (S A B D) (S C B D))
H0 : eq (S B C D) (Fopp (S C B D))
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
rewrite <- H in H1.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).
try solve [ Geometry | ring ].
assert (S4 A B C D = S A B D - S C B D).
try solve [ Geometry | ring ].
rewrite <- H in H1.

*****
H1 : eq (S4 A B C D) (Fminus (S B D A) (S C B D))
H0 : eq (S B C D) (Fopp (S C B D))
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (S B C D) (S B D A))
+++++
rewrite H0.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).
try solve [ Geometry | ring ].
assert (S4 A B C D = S A B D - S C B D).
try solve [ Geometry | ring ].
rewrite <- H in H1.
rewrite H0.

*****
H1 : eq (S4 A B C D) (Fminus (S B D A) (S C B D))
H0 : eq (S B C D) (Fopp (S C B D))
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (Fopp (S C B D)) (S B D A))
+++++
unfold S4 in H1.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).
try solve [ Geometry | ring ].
assert (S4 A B C D = S A B D - S C B D).
try solve [ Geometry | ring ].
rewrite <- H in H1.
rewrite H0.
unfold S4 in H1.

*****
H1 : eq (Fplus (S A B C) (S A C D)) (Fminus (S B D A) (S C B D))
H0 : eq (S B C D) (Fopp (S C B D))
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fplus (Fopp (S C B D)) (S B D A))
+++++
rewrite H1 in |- *.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).
try solve [ Geometry | ring ].
assert (S B C D = - S C B D).
try solve [ Geometry | ring ].
assert (S4 A B C D = S A B D - S C B D).
try solve [ Geometry | ring ].
rewrite <- H in H1.
rewrite H0.
unfold S4 in H1.
rewrite H1 in |- *.

*****
H1 : eq (Fplus (S A B C) (S A C D)) (Fminus (S B D A) (S C B D))
H0 : eq (S B C D) (Fopp (S C B D))
H : eq (S B D A) (S A B D)
A,B,C,D : Point
*****
eq (Fminus (S B D A) (S C B D)) (Fplus (Fopp (S C B D)) (S B D A))
+++++
ring.
-----
Lemma S4_2 : forall A B C D : Point, S4 A B C D = S4 B C D A.
Proof.
unfold S4 in |- *.
try solve [ Geometry | ring ].
intros.
try solve [ Geometry | ring ].
assert (S B D A = S A B D).

*****

*****

+++++
Qed.
-----
Hint Resolve S4_2: Geom.
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (S4 C D A B)
+++++
Proof.
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.
Proof.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (S4 C D A B)
+++++
intros.
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.
Proof.
intros.

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (S4 C D A B)
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.
Proof.
intros.
try solve [ Geometry | congruence ].

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (S4 C D A B)
+++++
assert (S4 A B C D = S4 B C D A).
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A B C D = S4 B C D A).

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (S4 B C D A)
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A B C D = S4 B C D A).

*****
H : eq (S4 A B C D) (S4 B C D A)
A,B,C,D : Point
*****
eq (S4 A B C D) (S4 C D A B)
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A B C D = S4 B C D A).
try solve [ Geometry | congruence ].

*****
H : eq (S4 A B C D) (S4 B C D A)
A,B,C,D : Point
*****
eq (S4 A B C D) (S4 C D A B)
+++++
rewrite H.
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A B C D = S4 B C D A).
try solve [ Geometry | congruence ].
rewrite H.

*****
H : eq (S4 A B C D) (S4 B C D A)
A,B,C,D : Point
*****
eq (S4 B C D A) (S4 C D A B)
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_3 : forall A B C D : Point, S4 A B C D = S4 C D A B.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A B C D = S4 B C D A).

*****

*****

+++++
Qed.
-----
Hint Resolve S4_3: Geom.
-----
Lemma S4_4 : forall A B C D : Point, S4 A B C D = S4 D A B C.
-----
Lemma S4_4 : forall A B C D : Point, S4 A B C D = S4 D A B C.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (S4 D A B C)
+++++
Proof.
-----
Lemma S4_4 : forall A B C D : Point, S4 A B C D = S4 D A B C.
Proof.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (S4 D A B C)
+++++
intros.
-----
Lemma S4_4 : forall A B C D : Point, S4 A B C D = S4 D A B C.
Proof.
intros.

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (S4 D A B C)
+++++
Geometry.
-----
Lemma S4_4 : forall A B C D : Point, S4 A B C D = S4 D A B C.
Proof.
intros.
Geometry.

*****

*****

+++++
Qed.
-----
Hint Resolve S4_4: Geom.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fopp (S4 A D C B))
+++++
Proof.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fopp (S4 A D C B))
+++++
intros.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 A D C B))
+++++
Geometry.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 A D C B))
+++++
unfold S4 in |- *.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.

*****
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fopp (Fplus (S A D C) (S A C B)))
+++++
Geometry.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.

*****
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fopp (Fplus (S A D C) (S A C B)))
+++++
assert (S A C D = - S A D C).
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.
assert (S A C D = - S A D C).

*****
A,B,C,D : Point
*****
eq (S A C D) (Fopp (S A D C))
+++++
Geometry.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.
assert (S A C D = - S A D C).

*****
H : eq (S A C D) (Fopp (S A D C))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fopp (Fplus (S A D C) (S A C B)))
+++++
Geometry.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.
assert (S A C D = - S A D C).
Geometry.

*****
H : eq (S A C D) (Fopp (S A D C))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (S A C D)) (Fopp (Fplus (S A D C) (S A C B)))
+++++
rewrite H.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.
assert (S A C D = - S A D C).
Geometry.
rewrite H.

*****
H : eq (S A C D) (Fopp (S A D C))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (Fopp (S A D C))) (Fopp (Fplus (S A D C) (S A C B)))
+++++
assert (S A B C = - S A C B).
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.
assert (S A C D = - S A D C).
Geometry.
rewrite H.
assert (S A B C = - S A C B).

*****
H : eq (S A C D) (Fopp (S A D C))
A,B,C,D : Point
*****
eq (S A B C) (Fopp (S A C B))
+++++
Geometry.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.
assert (S A C D = - S A D C).
Geometry.
rewrite H.
assert (S A B C = - S A C B).

*****
H0 : eq (S A B C) (Fopp (S A C B))
H : eq (S A C D) (Fopp (S A D C))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (Fopp (S A D C))) (Fopp (Fplus (S A D C) (S A C B)))
+++++
Geometry.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.
assert (S A C D = - S A D C).
Geometry.
rewrite H.
assert (S A B C = - S A C B).
Geometry.

*****
H0 : eq (S A B C) (Fopp (S A C B))
H : eq (S A C D) (Fopp (S A D C))
A,B,C,D : Point
*****
eq (Fplus (S A B C) (Fopp (S A D C))) (Fopp (Fplus (S A D C) (S A C B)))
+++++
rewrite H0.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.
assert (S A C D = - S A D C).
Geometry.
rewrite H.
assert (S A B C = - S A C B).
Geometry.
rewrite H0.

*****
H0 : eq (S A B C) (Fopp (S A C B))
H : eq (S A C D) (Fopp (S A D C))
A,B,C,D : Point
*****
eq (Fplus (Fopp (S A C B)) (Fopp (S A D C))) (Fopp (Fplus (S A D C) (S A C B)))
+++++
ring.
-----
Lemma S4_5 : forall A B C D : Point, S4 A B C D = - S4 A D C B.
Proof.
intros.
Geometry.
unfold S4 in |- *.
Geometry.
assert (S A C D = - S A D C).

*****

*****

+++++
Qed.
-----
Hint Resolve S4_5: Geom.
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fopp (S4 D C B A))
+++++
Proof.
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.
Proof.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fopp (S4 D C B A))
+++++
intros.
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.
Proof.
intros.

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 D C B A))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.
Proof.
intros.
try solve [ Geometry | congruence ].

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 D C B A))
+++++
assert (S4 D C B A = S4 A D C B).
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 D C B A = S4 A D C B).

*****
A,B,C,D : Point
*****
eq (S4 D C B A) (S4 A D C B)
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 D C B A = S4 A D C B).

*****
H : eq (S4 D C B A) (S4 A D C B)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 D C B A))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 D C B A = S4 A D C B).
try solve [ Geometry | congruence ].

*****
H : eq (S4 D C B A) (S4 A D C B)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 D C B A))
+++++
rewrite H.
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 D C B A = S4 A D C B).
try solve [ Geometry | congruence ].
rewrite H.

*****
H : eq (S4 D C B A) (S4 A D C B)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 A D C B))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_6 : forall A B C D : Point, S4 A B C D = - S4 D C B A.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 D C B A = S4 A D C B).

*****

*****

+++++
Qed.
-----
Hint Resolve S4_6: Geom.
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fopp (S4 C B A D))
+++++
Proof.
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.
Proof.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fopp (S4 C B A D))
+++++
intros.
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.
Proof.
intros.

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 C B A D))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.
Proof.
intros.
try solve [ Geometry | congruence ].

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 C B A D))
+++++
assert (S4 A D C B = S4 C B A D).
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A D C B = S4 C B A D).

*****
A,B,C,D : Point
*****
eq (S4 A D C B) (S4 C B A D)
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A D C B = S4 C B A D).

*****
H : eq (S4 A D C B) (S4 C B A D)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 C B A D))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A D C B = S4 C B A D).
try solve [ Geometry | congruence ].

*****
H : eq (S4 A D C B) (S4 C B A D)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 C B A D))
+++++
rewrite <- H.
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A D C B = S4 C B A D).
try solve [ Geometry | congruence ].
rewrite <- H.

*****
H : eq (S4 A D C B) (S4 C B A D)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 A D C B))
+++++
try solve [ Geometry | congruence ].
-----
Lemma S4_7 : forall A B C D : Point, S4 A B C D = - S4 C B A D.
Proof.
intros.
try solve [ Geometry | congruence ].
assert (S4 A D C B = S4 C B A D).

*****

*****

+++++
Qed.
-----
Hint Resolve S4_7: Geom.
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fopp (S4 B A D C))
+++++
Proof.
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.
Proof.

*****

*****
forall A B C D : Point, eq (S4 A B C D) (Fopp (S4 B A D C))
+++++
intros.
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.
Proof.
intros.

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 B A D C))
+++++
Geometry.
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.
Proof.
intros.
Geometry.

*****
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 B A D C))
+++++
assert (S4 A D C B = S4 B A D C).
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.
Proof.
intros.
Geometry.
assert (S4 A D C B = S4 B A D C).

*****
A,B,C,D : Point
*****
eq (S4 A D C B) (S4 B A D C)
+++++
Geometry.
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.
Proof.
intros.
Geometry.
assert (S4 A D C B = S4 B A D C).

*****
H : eq (S4 A D C B) (S4 B A D C)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 B A D C))
+++++
Geometry.
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.
Proof.
intros.
Geometry.
assert (S4 A D C B = S4 B A D C).
Geometry.

*****
H : eq (S4 A D C B) (S4 B A D C)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 B A D C))
+++++
rewrite <- H.
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.
Proof.
intros.
Geometry.
assert (S4 A D C B = S4 B A D C).
Geometry.
rewrite <- H.

*****
H : eq (S4 A D C B) (S4 B A D C)
A,B,C,D : Point
*****
eq (S4 A B C D) (Fopp (S4 A D C B))
+++++
Geometry.
-----
Lemma S4_8 : forall A B C D : Point, S4 A B C D = - S4 B A D C.
Proof.
intros.
Geometry.
assert (S4 A D C B = S4 B A D C).

*****

*****

+++++
Qed.
-----
Hint Resolve S4_8: Geom.
-----
Lemma lpar1 : forall A B C D : Point, parallel A B C D -> parallel A B D C.
-----
Lemma lpar1 : forall A B C D : Point, parallel A B C D -> parallel A B D C.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D), parallel A B D C
+++++
Proof.
-----
Lemma lpar1 : forall A B C D : Point, parallel A B C D -> parallel A B D C.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D), parallel A B D C
+++++
intros.
-----
Lemma lpar1 : forall A B C D : Point, parallel A B C D -> parallel A B D C.
Proof.
intros.

*****
H : parallel A B C D
A,B,C,D : Point
*****
parallel A B D C
+++++
unfold parallel in *.
-----
Lemma lpar1 : forall A B C D : Point, parallel A B C D -> parallel A B D C.
Proof.
intros.
unfold parallel in *.

*****
H : eq (S4 A C B D) F0
A,B,C,D : Point
*****
eq (S4 A D B C) F0
+++++
rewrite S4_5.
-----
Lemma lpar1 : forall A B C D : Point, parallel A B C D -> parallel A B D C.
Proof.
intros.
unfold parallel in *.
rewrite S4_5.

*****
H : eq (S4 A C B D) F0
A,B,C,D : Point
*****
eq (Fopp (S4 A C B D)) F0
+++++
rewrite H.
-----
Lemma lpar1 : forall A B C D : Point, parallel A B C D -> parallel A B D C.
Proof.
intros.
unfold parallel in *.
rewrite S4_5.
rewrite H.

*****
H : eq (S4 A C B D) F0
A,B,C,D : Point
*****
eq (Fopp F0) F0
+++++
ring.
-----
Lemma lpar1 : forall A B C D : Point, parallel A B C D -> parallel A B D C.
Proof.
intros.
unfold parallel in *.
rewrite S4_5.
rewrite H.
ring.

*****

*****

+++++
Qed.
-----
Lemma lpar2 : forall A B C D : Point, parallel A B C D -> parallel B A C D.
-----
Lemma lpar2 : forall A B C D : Point, parallel A B C D -> parallel B A C D.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D), parallel B A C D
+++++
Proof.
-----
Lemma lpar2 : forall A B C D : Point, parallel A B C D -> parallel B A C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D), parallel B A C D
+++++
intros.
-----
Lemma lpar2 : forall A B C D : Point, parallel A B C D -> parallel B A C D.
Proof.
intros.

*****
H : parallel A B C D
A,B,C,D : Point
*****
parallel B A C D
+++++
unfold parallel in *.
-----
Lemma lpar2 : forall A B C D : Point, parallel A B C D -> parallel B A C D.
Proof.
intros.
unfold parallel in *.

*****
H : eq (S4 A C B D) F0
A,B,C,D : Point
*****
eq (S4 B C A D) F0
+++++
rewrite S4_7.
-----
Lemma lpar2 : forall A B C D : Point, parallel A B C D -> parallel B A C D.
Proof.
intros.
unfold parallel in *.
rewrite S4_7.

*****
H : eq (S4 A C B D) F0
A,B,C,D : Point
*****
eq (Fopp (S4 A C B D)) F0
+++++
rewrite H.
-----
Lemma lpar2 : forall A B C D : Point, parallel A B C D -> parallel B A C D.
Proof.
intros.
unfold parallel in *.
rewrite S4_7.
rewrite H.

*****
H : eq (S4 A C B D) F0
A,B,C,D : Point
*****
eq (Fopp F0) F0
+++++
ring.
-----
Lemma lpar2 : forall A B C D : Point, parallel A B C D -> parallel B A C D.
Proof.
intros.
unfold parallel in *.
rewrite S4_7.
rewrite H.
ring.

*****

*****

+++++
Qed.
-----
Lemma lpar3 : forall A B C D : Point, parallel A B C D -> parallel B A D C.
-----
Lemma lpar3 : forall A B C D : Point, parallel A B C D -> parallel B A D C.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D), parallel B A D C
+++++
Proof.
-----
Lemma lpar3 : forall A B C D : Point, parallel A B C D -> parallel B A D C.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D), parallel B A D C
+++++
intros.
-----
Lemma lpar3 : forall A B C D : Point, parallel A B C D -> parallel B A D C.
Proof.
intros.

*****
H : parallel A B C D
A,B,C,D : Point
*****
parallel B A D C
+++++
unfold parallel in *.
-----
Lemma lpar3 : forall A B C D : Point, parallel A B C D -> parallel B A D C.
Proof.
intros.
unfold parallel in *.

*****
H : eq (S4 A C B D) F0
A,B,C,D : Point
*****
eq (S4 B D A C) F0
+++++
rewrite S4_3.
-----
Lemma lpar3 : forall A B C D : Point, parallel A B C D -> parallel B A D C.
Proof.
intros.
unfold parallel in *.
rewrite S4_3.

*****
H : eq (S4 A C B D) F0
A,B,C,D : Point
*****
eq (S4 A C B D) F0
+++++
assumption.
-----
Lemma lpar3 : forall A B C D : Point, parallel A B C D -> parallel B A D C.
Proof.
intros.
unfold parallel in *.
rewrite S4_3.
assumption.

*****

*****

+++++
Qed.
-----
Lemma ldiff : forall A B : Point, A <> B -> B <> A.
-----
Lemma ldiff : forall A B : Point, A <> B -> B <> A.

*****

*****
forall (A B : Point) (_ : not (eq A B)), not (eq B A)
+++++
Proof.
-----
Lemma ldiff : forall A B : Point, A <> B -> B <> A.
Proof.

*****

*****
forall (A B : Point) (_ : not (eq A B)), not (eq B A)
+++++
intros.
-----
Lemma ldiff : forall A B : Point, A <> B -> B <> A.
Proof.
intros.

*****
H : not (eq A B)
A,B : Point
*****
not (eq B A)
+++++
Geometry.
-----
Lemma ldiff : forall A B : Point, A <> B -> B <> A.
Proof.
intros.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma simplring1 : forall x : F, x = - - x.
-----
Lemma simplring1 : forall x : F, x = - - x.

*****

*****
forall x : F, eq x (Fopp (Fopp x))
+++++
Proof.
-----
Lemma simplring1 : forall x : F, x = - - x.
Proof.

*****

*****
forall x : F, eq x (Fopp (Fopp x))
+++++
intro.
-----
Lemma simplring1 : forall x : F, x = - - x.
Proof.
intro.

*****
x : F
*****
eq x (Fopp (Fopp x))
+++++
ring.
-----
Lemma simplring1 : forall x : F, x = - - x.
Proof.
intro.
ring.

*****

*****

+++++
Qed.
-----
Lemma zeroegal : forall A B : Point, A = B -> A ** B = 0.
-----
Lemma zeroegal : forall A B : Point, A = B -> A ** B = 0.

*****

*****
forall (A B : Point) (_ : eq A B), eq (DSeg A B) F0
+++++
Proof.
-----
Lemma zeroegal : forall A B : Point, A = B -> A ** B = 0.
Proof.

*****

*****
forall (A B : Point) (_ : eq A B), eq (DSeg A B) F0
+++++
intros.
-----
Lemma zeroegal : forall A B : Point, A = B -> A ** B = 0.
Proof.
intros.

*****
H : eq A B
A,B : Point
*****
eq (DSeg A B) F0
+++++
assert (P := A1b A B).
-----
Lemma zeroegal : forall A B : Point, A = B -> A ** B = 0.
Proof.
intros.
assert (P := A1b A B).

*****
P : iff (eq (DSeg A B) F0) (eq A B)
H : eq A B
A,B : Point
*****
eq (DSeg A B) F0
+++++
intuition.
-----
Lemma zeroegal : forall A B : Point, A = B -> A ** B = 0.
Proof.
intros.
assert (P := A1b A B).
intuition.

*****

*****

+++++
Qed.
-----
Lemma egalzero : forall A B : Point, A ** B = 0 -> A = B.
-----
Lemma egalzero : forall A B : Point, A ** B = 0 -> A = B.

*****

*****
forall (A B : Point) (_ : eq (DSeg A B) F0), eq A B
+++++
Proof.
-----
Lemma egalzero : forall A B : Point, A ** B = 0 -> A = B.
Proof.

*****

*****
forall (A B : Point) (_ : eq (DSeg A B) F0), eq A B
+++++
intros.
-----
Lemma egalzero : forall A B : Point, A ** B = 0 -> A = B.
Proof.
intros.

*****
H : eq (DSeg A B) F0
A,B : Point
*****
eq A B
+++++
assert (P := A1b A B).
-----
Lemma egalzero : forall A B : Point, A ** B = 0 -> A = B.
Proof.
intros.
assert (P := A1b A B).

*****
P : iff (eq (DSeg A B) F0) (eq A B)
H : eq (DSeg A B) F0
A,B : Point
*****
eq A B
+++++
intuition.
-----
Lemma egalzero : forall A B : Point, A ** B = 0 -> A = B.
Proof.
intros.
assert (P := A1b A B).
intuition.

*****

*****

+++++
Qed.
-----
Hint Resolve zeroegal egalzero: Geom.
-----
Lemma nuldirseg : forall A : Point, 0 = A ** A.
-----
Lemma nuldirseg : forall A : Point, 0 = A ** A.

*****

*****
forall A : Point, eq F0 (DSeg A A)
+++++
Proof.
-----
Lemma nuldirseg : forall A : Point, 0 = A ** A.
Proof.

*****

*****
forall A : Point, eq F0 (DSeg A A)
+++++
intros.
-----
Lemma nuldirseg : forall A : Point, 0 = A ** A.
Proof.
intros.

*****
A : Point
*****
eq F0 (DSeg A A)
+++++
symmetry in |- *.
-----
Lemma nuldirseg : forall A : Point, 0 = A ** A.
Proof.
intros.
symmetry in |- *.

*****
A : Point
*****
eq (DSeg A A) F0
+++++
Geometry.
-----
Lemma nuldirseg : forall A : Point, 0 = A ** A.
Proof.
intros.
symmetry in |- *.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma neq_not_zero : forall A B:Point, \n  A<>B -> A**B<>0.
-----
Lemma neq_not_zero : forall A B:Point, A<>B -> A**B<>0.

*****

*****
forall (A B : Point) (_ : not (eq A B)), not (eq (DSeg A B) F0)
+++++
Proof.
-----
Lemma neq_not_zero : forall A B:Point, A<>B -> A**B<>0.
Proof.

*****

*****
forall (A B : Point) (_ : not (eq A B)), not (eq (DSeg A B) F0)
+++++
intros.
-----
Lemma neq_not_zero : forall A B:Point, A<>B -> A**B<>0.
Proof.
intros.

*****
H : not (eq A B)
A,B : Point
*****
not (eq (DSeg A B) F0)
+++++
Geometry.
-----
Lemma neq_not_zero : forall A B:Point, A<>B -> A**B<>0.
Proof.
intros.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.

*****

*****
forall (a : F) (_ : eq a (Fopp a)), eq a F0
+++++
Proof.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.

*****

*****
forall (a : F) (_ : eq a (Fopp a)), eq a F0
+++++
intros.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.

*****
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].

*****
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
assert (a + a = - a + a).
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).

*****
H : eq a (Fopp a)
a : F
*****
eq (Fplus a a) (Fplus (Fopp a) a)
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).

*****
H0 : eq (Fplus a a) (Fplus (Fopp a) a)
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].

*****
H0 : eq (Fplus a a) (Fplus (Fopp a) a)
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
assert (- a + a = 0).
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).

*****
H0 : eq (Fplus a a) (Fplus (Fopp a) a)
H : eq a (Fopp a)
a : F
*****
eq (Fplus (Fopp a) a) F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).

*****
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fplus a a) (Fplus (Fopp a) a)
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].

*****
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fplus a a) (Fplus (Fopp a) a)
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
rewrite H1 in H0.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.

*****
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fplus a a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].

*****
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fplus a a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
assert (a + a = 2 * a).
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).

*****
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fplus a a) F0
H : eq a (Fopp a)
a : F
*****
eq (Fplus a a) (Fmult (Fplus F1 F1) a)
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).

*****
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fplus a a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].

*****
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fplus a a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
rewrite H2 in H0.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.

*****
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].

*****
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
assert (2 * a / 2 = a).
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).

*****
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].

*****
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
+++++
field.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
field.

*****
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
not (eq (Fplus F1 F1) F0)
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
field.
try solve [ ring | congruence ].

*****
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).

*****
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].

*****
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
assert (2 * a / 2 = 0 / 2).
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).

*****
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) (Fdiv F0 (Fplus F1 F1))
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).

*****
H4 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) (Fdiv F0 (Fplus F1 F1))
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).
try solve [ ring | congruence ].

*****
H4 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) (Fdiv F0 (Fplus F1 F1))
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
rewrite H3 in H4.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).
try solve [ ring | congruence ].
rewrite H3 in H4.

*****
H4 : eq a (Fdiv F0 (Fplus F1 F1))
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).
try solve [ ring | congruence ].
rewrite H3 in H4.
try solve [ ring | congruence ].

*****
H4 : eq a (Fdiv F0 (Fplus F1 F1))
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
assert (0 / 2 = 0).
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).
try solve [ ring | congruence ].
rewrite H3 in H4.
try solve [ ring | congruence ].
assert (0 / 2 = 0).

*****
H4 : eq a (Fdiv F0 (Fplus F1 F1))
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq (Fdiv F0 (Fplus F1 F1)) F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).
try solve [ ring | congruence ].
rewrite H3 in H4.
try solve [ ring | congruence ].
assert (0 / 2 = 0).
try solve [ ring | congruence ].

*****
H4 : eq a (Fdiv F0 (Fplus F1 F1))
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq (Fdiv F0 (Fplus F1 F1)) F0
+++++
field.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).
try solve [ ring | congruence ].
rewrite H3 in H4.
try solve [ ring | congruence ].
assert (0 / 2 = 0).
try solve [ ring | congruence ].
field.

*****
H4 : eq a (Fdiv F0 (Fplus F1 F1))
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
not (eq (Fplus F1 F1) F0)
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).
try solve [ ring | congruence ].
rewrite H3 in H4.
try solve [ ring | congruence ].
assert (0 / 2 = 0).
try solve [ ring | congruence ].
field.
try solve [ ring | congruence ].

*****
H4 : eq a (Fdiv F0 (Fplus F1 F1))
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).
try solve [ ring | congruence ].
assert (- a + a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + a = 2 * a).
try solve [ ring | congruence ].
rewrite H2 in H0.
try solve [ ring | congruence ].
assert (2 * a / 2 = a).
try solve [ ring | congruence ].
assert (2 * a / 2 = 0 / 2).
try solve [ ring | congruence ].
rewrite H3 in H4.
try solve [ ring | congruence ].
assert (0 / 2 = 0).

*****
H5 : eq (Fdiv F0 (Fplus F1 F1)) F0
H4 : eq a (Fdiv F0 (Fplus F1 F1))
H3 : eq (Fdiv (Fmult (Fplus F1 F1) a) (Fplus F1 F1)) a
H2 : eq (Fplus a a) (Fmult (Fplus F1 F1) a)
H1 : eq (Fplus (Fopp a) a) F0
H0 : eq (Fmult (Fplus F1 F1) a) F0
H : eq a (Fopp a)
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_2 : forall a : F, a = - a -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + a = - a + a).

*****

*****

+++++
Qed.
-----
Hint Resolve field_prop_2: Geom.
-----
Lemma trivial_col1 : forall A B : Point, 0 = S A A B.
-----
Lemma trivial_col1 : forall A B : Point, 0 = S A A B.

*****

*****
forall A B : Point, eq F0 (S A A B)
+++++
intros.
-----
Lemma trivial_col1 : forall A B : Point, 0 = S A A B.
intros.

*****
A,B : Point
*****
eq F0 (S A A B)
+++++
symmetry in |- *.
-----
Lemma trivial_col1 : forall A B : Point, 0 = S A A B.
intros.
symmetry in |- *.

*****
A,B : Point
*****
eq (S A A B) F0
+++++
Geometry.
-----
Lemma trivial_col1 : forall A B : Point, 0 = S A A B.
intros.
symmetry in |- *.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma trivial_col2 : forall A B : Point, 0 = S A B B.
-----
Lemma trivial_col2 : forall A B : Point, 0 = S A B B.

*****

*****
forall A B : Point, eq F0 (S A B B)
+++++
intros.
-----
Lemma trivial_col2 : forall A B : Point, 0 = S A B B.
intros.

*****
A,B : Point
*****
eq F0 (S A B B)
+++++
symmetry in |- *.
-----
Lemma trivial_col2 : forall A B : Point, 0 = S A B B.
intros.
symmetry in |- *.

*****
A,B : Point
*****
eq (S A B B) F0
+++++
Geometry.
-----
Lemma trivial_col2 : forall A B : Point, 0 = S A B B.
intros.
symmetry in |- *.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma trivial_col3 : forall A B : Point, 0 = S A B A.
-----
Lemma trivial_col3 : forall A B : Point, 0 = S A B A.

*****

*****
forall A B : Point, eq F0 (S A B A)
+++++
intros.
-----
Lemma trivial_col3 : forall A B : Point, 0 = S A B A.
intros.

*****
A,B : Point
*****
eq F0 (S A B A)
+++++
symmetry in |- *.
-----
Lemma trivial_col3 : forall A B : Point, 0 = S A B A.
intros.
symmetry in |- *.

*****
A,B : Point
*****
eq (S A B A) F0
+++++
Geometry.
-----
Lemma trivial_col3 : forall A B : Point, 0 = S A B A.
intros.
symmetry in |- *.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.

*****

*****
forall A B : Point, eq (DSeg A B) (Fopp (DSeg B A))
+++++
Proof.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.

*****

*****
forall A B : Point, eq (DSeg A B) (Fopp (DSeg B A))
+++++
intros.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.

*****
A,B : Point
*****
eq (DSeg A B) (Fopp (DSeg B A))
+++++
assert (Col A B A).
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.
assert (Col A B A).

*****
A,B : Point
*****
Col A B A
+++++
Geometry.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.
assert (Col A B A).

*****
H : Col A B A
A,B : Point
*****
eq (DSeg A B) (Fopp (DSeg B A))
+++++
assert (T:=chasles A B A H).
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.
assert (Col A B A).
assert (T:=chasles A B A H).

*****
T : eq (Fplus (DSeg A B) (DSeg B A)) (DSeg A A)
H : Col A B A
A,B : Point
*****
eq (DSeg A B) (Fopp (DSeg B A))
+++++
replace (A**A) with 0 in T.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.
assert (Col A B A).
assert (T:=chasles A B A H).
replace (A**A) with 0 in T.

*****
T : eq (Fplus (DSeg A B) (DSeg B A)) F0
H : Col A B A
A,B : Point
*****
eq (DSeg A B) (Fopp (DSeg B A))
+++++
IsoleVar (A**B) T.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.
assert (Col A B A).
assert (T:=chasles A B A H).
replace (A**A) with 0 in T.
IsoleVar (A**B) T.

*****
T : eq (DSeg A B) (Fminus F0 (DSeg B A))
H : Col A B A
A,B : Point
*****
eq (DSeg A B) (Fopp (DSeg B A))
+++++
rewrite T.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.
assert (Col A B A).
assert (T:=chasles A B A H).
replace (A**A) with 0 in T.
IsoleVar (A**B) T.
rewrite T.

*****
T : eq (DSeg A B) (Fminus F0 (DSeg B A))
H : Col A B A
A,B : Point
*****
eq (Fminus F0 (DSeg B A)) (Fopp (DSeg B A))
+++++
ring.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.
assert (Col A B A).
assert (T:=chasles A B A H).
replace (A**A) with 0 in T.

*****
T : eq (Fplus (DSeg A B) (DSeg B A)) (DSeg A A)
H : Col A B A
A,B : Point
*****
eq F0 (DSeg A A)
+++++
symmetry.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.
assert (Col A B A).
assert (T:=chasles A B A H).
replace (A**A) with 0 in T.
symmetry.

*****
T : eq (Fplus (DSeg A B) (DSeg B A)) (DSeg A A)
H : Col A B A
A,B : Point
*****
eq (DSeg A A) F0
+++++
Geometry.
-----
Lemma A1a : forall A B : Point, A ** B = - B ** A.
Proof.
intros.
assert (Col A B A).

*****

*****

+++++
Qed.
-----
Lemma degenerated_ratio : forall A B C D, \n  A=B -> C<>D -> A**B/C**D=0.
-----
Lemma degenerated_ratio : forall A B C D, A=B -> C<>D -> A**B/C**D=0.

*****

*****
forall (A B C D : Point) (_ : eq A B) (_ : not (eq C D)), eq (Fdiv (DSeg A B) (DSeg C D)) F0
+++++
Proof.
-----
Lemma degenerated_ratio : forall A B C D, A=B -> C<>D -> A**B/C**D=0.
Proof.

*****

*****
forall (A B C D : Point) (_ : eq A B) (_ : not (eq C D)), eq (Fdiv (DSeg A B) (DSeg C D)) F0
+++++
intros.
-----
Lemma degenerated_ratio : forall A B C D, A=B -> C<>D -> A**B/C**D=0.
Proof.
intros.

*****
H0 : not (eq C D)
H : eq A B
A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) F0
+++++
field_simplify_eq.
-----
Lemma degenerated_ratio : forall A B C D, A=B -> C<>D -> A**B/C**D=0.
Proof.
intros.
field_simplify_eq.

*****
H0 : not (eq C D)
H : eq A B
A,B,C,D : Point
*****
eq (DSeg A B) F0
+++++
Geometry.
-----
Lemma degenerated_ratio : forall A B C D, A=B -> C<>D -> A**B/C**D=0.
Proof.
intros.
field_simplify_eq.

*****
H0 : not (eq C D)
H : eq A B
A,B,C,D : Point
*****
not (eq (DSeg C D) F0)
+++++
Geometry.
-----
Lemma degenerated_ratio : forall A B C D, A=B -> C<>D -> A**B/C**D=0.
Proof.
intros.
field_simplify_eq.

*****

*****

+++++
Qed.
-----
Hint Immediate A1a: Geom.
-----
