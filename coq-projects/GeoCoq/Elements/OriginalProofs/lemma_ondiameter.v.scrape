Require Export GeoCoq.Elements.OriginalProofs.lemma_betweennotequal.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_inequalitysymmetric.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_ondiameter : \n   forall D F K M N P Q, \n   CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M ->\n   InCirc N K.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (D F : Point) (K : Circle) (M N P Q : Point) (_ : CI K F P Q) (_ : Cong F D P Q) (_ : Cong F M P Q) (_ : BetS D F M) (_ : BetS D N M), InCirc N K
+++++
Proof.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (D F : Point) (K : Circle) (M N P Q : Point) (_ : CI K F P Q) (_ : Cong F D P Q) (_ : Cong F M P Q) (_ : BetS D F M) (_ : BetS D N M), InCirc N K
+++++
intros.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.

*****
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (neq D F) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).

*****
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (neq F D) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).

*****
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (~ ~ (BetS D N F \/ BetS F N M \/ eq F N)).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).

*****
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
+++++
intro.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
intro.

*****
H6 : not (or (BetS D N F) (or (BetS F N M) (eq F N)))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ BetS D F N).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
intro.
assert (~ BetS D F N).

*****
H6 : not (or (BetS D N F) (or (BetS F N M) (eq F N)))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (BetS D F N)
+++++
intro.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
intro.
assert (~ BetS D F N).
intro.

*****
H7 : BetS D F N
H6 : not (or (BetS D N F) (or (BetS F N M) (eq F N)))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS F N M) by (conclude lemma_3_6a).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
intro.
assert (~ BetS D F N).
intro.
assert (BetS F N M) by (conclude lemma_3_6a).

*****
H8 : BetS F N M
H7 : BetS D F N
H6 : not (or (BetS D N F) (or (BetS F N M) (eq F N)))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
intro.
assert (~ BetS D F N).

*****
H7 : not (BetS D F N)
H6 : not (or (BetS D N F) (or (BetS F N M) (eq F N)))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq F N) by (conclude axiom_connectivity).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
intro.
assert (~ BetS D F N).
assert (eq F N) by (conclude axiom_connectivity).

*****
H8 : eq F N
H7 : not (BetS D F N)
H6 : not (or (BetS D N F) (or (BetS F N M) (eq F N)))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).

*****
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (Cong F N F N) by (conclude cn_congruencereflexive).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).

*****
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (InCirc N K).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).

*****
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
by cases on (BetS D N F \/ BetS F N M \/ eq F N).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).

*****
H9 : BetS D N F
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (BetS F N D) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).
assert (BetS F N D) by (conclude axiom_betweennesssymmetry).

*****
H8 : BetS F N D
H9 : BetS D N F
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (InCirc N K) by (conclude_def InCirc ).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).
assert (BetS F N D) by (conclude axiom_betweennesssymmetry).
assert (InCirc N K) by (conclude_def InCirc ).

*****
H10 : InCirc N K
H8 : BetS F N D
H9 : BetS D N F
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
close.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).

*****
H10 : BetS F N M
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (InCirc N K) by (conclude_def InCirc ).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).
assert (InCirc N K) by (conclude_def InCirc ).

*****
H8 : InCirc N K
H10 : BetS F N M
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
close.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).

*****
H10 : eq F N
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (eq N F) by (conclude lemma_equalitysymmetric).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).
assert (eq N F) by (conclude lemma_equalitysymmetric).

*****
H8 : eq N F
H10 : eq F N
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
assert (InCirc N K) by (conclude_def InCirc ).
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).
assert (eq N F) by (conclude lemma_equalitysymmetric).
assert (InCirc N K) by (conclude_def InCirc ).

*****
H9 : InCirc N K
H8 : eq N F
H10 : eq F N
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
close.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).

*****
H8 : InCirc N K
H7 : Cong F N F N
H6 : not (not (or (BetS D N F) (or (BetS F N M) (eq F N))))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
InCirc N K
+++++
close.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).
close.

*****

*****

+++++
Unshelve.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).
close.
Unshelve.

*****
H8 : eq N F
H10 : eq F N
H7 : Cong F N F N
H6 : or (BetS D N F) (or (BetS F N M) (eq F N))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Point
+++++
exact M.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).
close.
Unshelve.
exact M.

*****
H8 : eq N F
H10 : eq F N
H7 : Cong F N F N
H6 : or (BetS D N F) (or (BetS F N M) (eq F N))
H5 : neq F D
H4 : neq D F
H3 : BetS D N M
H2 : BetS D F M
H1 : Cong F M P Q
H0 : Cong F D P Q
H : CI K F P Q
M,N,P,Q : Point
K : Circle
D,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Point
+++++
exact M.
-----
Lemma lemma_ondiameter : forall D F K M N P Q, CI K F P Q -> Cong F D P Q -> Cong F M P Q -> BetS D F M -> BetS D N M -> InCirc N K.
Proof.
intros.
assert (neq D F) by (forward_using lemma_betweennotequal).
assert (neq F D) by (conclude lemma_inequalitysymmetric).
assert (~ ~ (BetS D N F \\/ BetS F N M \\/ eq F N)).
assert (Cong F N F N) by (conclude cn_congruencereflexive).
assert (InCirc N K).
by cases on (BetS D N F \\/ BetS F N M \\/ eq F N).
close.
Unshelve.
exact M.
exact M.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
