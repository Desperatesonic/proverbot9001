Require Import Coq.Strings.String.
-----
Require Import Coq.Program.Program.
-----
Require Import Coq.Numbers.Natural.Peano.NPeano.
-----
Require Import Coq.Arith.Arith.
-----
Require Import ExtLib.Tactics.Consider.
-----
Require Import ExtLib.Core.RelDec.
-----
Require Import ExtLib.Structures.Reducible.
-----
Require Import ExtLib.Structures.Monoid.
-----
Require Import ExtLib.Data.Char.
-----
Require Import ExtLib.Data.Nat.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Local Notation "x >> y" := (match x with\n                              | Eq => y\n                              | z => z\n                            end) (only parsing, at level 30).
-----
Definition bool_cmp (l r : bool) : comparison :=\n  match l , r with\n    | true , false => Gt\n    | false , true => Lt\n    | true , true\n    | false , false => Eq\n  end.
-----
Definition ascii_cmp (l r : Ascii.ascii) : comparison :=\n  match l , r with\n    | Ascii.Ascii l1 l2 l3 l4 l5 l6 l7 l8 ,\n      Ascii.Ascii r1 r2 r3 r4 r5 r6 r7 r8 =>\n      bool_cmp l8 r8 >> bool_cmp l7 r7 >> bool_cmp l6 r6 >> bool_cmp l5 r5 >>\n      bool_cmp l4 r4 >> bool_cmp l3 r3 >> bool_cmp l2 r2 >> bool_cmp l1 r1\n  end.
-----
Fixpoint string_dec (l r : string) : bool :=\n  match l , r with\n    | EmptyString , EmptyString => true\n    | String l ls , String r rs =>\n      if ascii_dec l r then string_dec ls rs\n      else false\n    | _ , _ => false\n  end.
-----
Theorem string_dec_sound : forall l r,\n  string_dec l r = true <-> l = r.
-----
Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.

*****

*****
forall l r : string, iff (eq (string_dec l r) true) (eq l r)
+++++
Proof.
-----
Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.
Proof.

*****

*****
forall l r : string, iff (eq (string_dec l r) true) (eq l r)
+++++
induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.
-----
Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.
Proof.
induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.

*****
H : eq (string_dec l r) true
r : string
a0 : ascii
IHl : forall r : string, iff (eq (string_dec l r) true) (eq l r)
l : string
*****
eq (String a0 l) (String a0 r)
+++++
f_equal.
-----
Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.
Proof.
induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.
f_equal.

*****
H : eq (string_dec l r) true
r : string
a0 : ascii
IHl : forall r : string, iff (eq (string_dec l r) true) (eq l r)
l : string
*****
eq l r
+++++
eapply IHl; auto.
-----
Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.
Proof.
induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.
f_equal.
eapply IHl; auto.

*****
H : eq (String a0 l) (String a0 r)
r : string
a0 : ascii
IHl : forall r : string, iff (eq (string_dec l r) true) (eq l r)
l : string
*****
eq (string_dec l r) true
+++++
apply IHl.
-----
Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.
Proof.
induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.
f_equal.
eapply IHl; auto.
apply IHl.

*****
H : eq (String a0 l) (String a0 r)
r : string
a0 : ascii
IHl : forall r : string, iff (eq (string_dec l r) true) (eq l r)
l : string
*****
eq l r
+++++
congruence.
-----
Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.
Proof.
induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.
f_equal.
eapply IHl; auto.
apply IHl.
congruence.

*****
H : eq (String a l) (String a0 r)
n : not (eq a a0)
r : string
a0 : ascii
IHl : forall r : string, iff (eq (string_dec l r) true) (eq l r)
l : string
a : ascii
*****
eq false true
+++++
inversion H.
-----
Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.
Proof.
induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.
f_equal.
eapply IHl; auto.
apply IHl.
congruence.
inversion H.

*****
H2 : eq l r
H1 : eq a a0
H : eq (String a l) (String a0 r)
n : not (eq a a0)
r : string
a0 : ascii
IHl : forall r : string, iff (eq (string_dec l r) true) (eq l r)
l : string
a : ascii
*****
eq false true
+++++
congruence.
-----
Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.
Proof.
induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.
f_equal.
eapply IHl; auto.
apply IHl.
congruence.
inversion H.
congruence.

*****

*****

+++++
Qed.
-----
Global Instance RelDec_string : RelDec (@eq string) :=\n{| rel_dec := string_dec |}.
-----
Global Instance RelDec_Correct_string : RelDec_Correct RelDec_string.
-----
Global Instance RelDec_Correct_string : RelDec_Correct RelDec_string.

*****

*****
RelDec_Correct RelDec_string
+++++
Proof.
-----
Global Instance RelDec_Correct_string : RelDec_Correct RelDec_string.
Proof.

*****

*****
RelDec_Correct RelDec_string
+++++
constructor.
-----
Global Instance RelDec_Correct_string : RelDec_Correct RelDec_string.
Proof.
constructor.

*****

*****
forall x y : string, iff (eq (rel_dec x y) true) (eq x y)
+++++
auto using string_dec_sound.
-----
Global Instance RelDec_Correct_string : RelDec_Correct RelDec_string.
Proof.
constructor.
auto using string_dec_sound.

*****

*****

+++++
Qed.
-----
Global Instance Reflect_string_dec a b : Reflect (string_dec a b) (a = b) (a <> b).
-----
Global Instance Reflect_string_dec a b : Reflect (string_dec a b) (a = b) (a <> b).

*****
a,b : string
*****
Reflect (string_dec a b) (eq a b) (not (eq a b))
+++++
Proof.
-----
Global Instance Reflect_string_dec a b : Reflect (string_dec a b) (a = b) (a <> b).
Proof.

*****
a,b : string
*****
Reflect (string_dec a b) (eq a b) (not (eq a b))
+++++
apply iff_to_reflect.
-----
Global Instance Reflect_string_dec a b : Reflect (string_dec a b) (a = b) (a <> b).
Proof.
apply iff_to_reflect.

*****
a,b : string
*****
forall x y : string, iff (eq (string_dec x y) true) (eq x y)
+++++
auto using string_dec_sound.
-----
Global Instance Reflect_string_dec a b : Reflect (string_dec a b) (a = b) (a <> b).
Proof.
apply iff_to_reflect.
auto using string_dec_sound.

*****

*****

+++++
Qed.
-----
Fixpoint string_cmp (l r : string) : comparison :=\n  match l , r with\n    | EmptyString , EmptyString => Eq\n    | EmptyString , _ => Lt\n    | _ , EmptyString => Gt\n    | String l ls , String r rs =>\n      ascii_cmp l r >> string_cmp ls rs\n  end.
-----
Section Program_Scope.
-----
Variable modulus : nat.
-----
Hypothesis one_lt_mod : 1 < modulus.
-----
Lemma _xxx : forall m n,\n                 1 < m -> ~ n < m -> 0 < n.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.

*****
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (m n : nat) (_ : lt (S O) m) (_ : not (lt n m)), lt O n
+++++
Proof.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.

*****
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (m n : nat) (_ : lt (S O) m) (_ : not (lt n m)), lt O n
+++++
destruct n.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.

*****
m : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (_ : lt (S O) m) (_ : not (lt O m)), lt O O
+++++
destruct m.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.

*****
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (_ : lt (S O) O) (_ : not (lt O O)), lt O O
+++++
intros.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.
intros.

*****
H0 : not (lt O O)
H : lt (S O) O
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt O O
+++++
inversion H.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.

*****
m : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (_ : lt (S O) (S m)) (_ : not (lt O (S m))), lt O O
+++++
intros.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.
intros.

*****
H0 : not (lt O (S m))
H : lt (S O) (S m)
m : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt O O
+++++
exfalso.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.
intros.
exfalso.

*****
H0 : not (lt O (S m))
H : lt (S O) (S m)
m : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
False
+++++
apply H0.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.
intros.
exfalso.
apply H0.

*****
H0 : not (lt O (S m))
H : lt (S O) (S m)
m : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt O (S m)
+++++
etransitivity.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.
intros.
exfalso.
apply H0.
etransitivity.

*****
H0 : not (lt O (S m))
H : lt (S O) (S m)
m : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt O ?y
+++++
repeat constructor.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.
intros.
exfalso.
apply H0.
etransitivity.

*****
H0 : not (lt O (S m))
H : lt (S O) (S m)
m : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt (S O) (S m)
+++++
eassumption.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.

*****
m,n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (_ : lt (S O) m) (_ : not (lt (S n) m)), lt O (S n)
+++++
destruct m.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.

*****
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (_ : lt (S O) O) (_ : not (lt (S n) O)), lt O (S n)
+++++
intros.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.
intros.

*****
H0 : not (lt (S n) O)
H : lt (S O) O
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt O (S n)
+++++
inversion H.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.

*****
m,n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (_ : lt (S O) (S m)) (_ : not (lt (S n) (S m))), lt O (S n)
+++++
intros.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.
intros.

*****
H0 : not (lt (S n) (S m))
H : lt (S O) (S m)
m,n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt O (S n)
+++++
eapply neq_0_lt.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.
destruct m.
intros.
eapply neq_0_lt.

*****
H0 : not (lt (S n) (S m))
H : lt (S O) (S m)
m,n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
not (eq O (S n))
+++++
congruence.
-----
Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.
Proof.
destruct n.

*****

*****

+++++
Qed.
-----
Program Fixpoint nat2string (n:nat) {measure n}: string :=\n    match NPeano.Nat.ltb n modulus as x return NPeano.Nat.ltb n modulus = x -> string with\n      | true => fun _ => String (digit2ascii n) EmptyString\n      | false => fun pf =>\n        let m := NPeano.Nat.div n modulus in\n        append (nat2string m) (String (digit2ascii (n - modulus * m)) EmptyString)\n    end (@Logic.eq_refl _ (NPeano.Nat.ltb n modulus)).
-----
Next Obligation.
-----
Next Obligation.

*****
pf : eq (NPeano.Nat.ltb n modulus) false
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt (NPeano.Nat.div n modulus) n
+++++
eapply NPeano.Nat.div_lt.
-----
Next Obligation.
eapply NPeano.Nat.div_lt.

*****
pf : eq (NPeano.Nat.ltb n modulus) false
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt O n
+++++
auto.
-----
Next Obligation.
eapply NPeano.Nat.div_lt.
auto.

*****
pf : eq (NPeano.Nat.ltb n modulus) false
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt O n
+++++
consider (NPeano.Nat.ltb n modulus).
-----
Next Obligation.
eapply NPeano.Nat.div_lt.
auto.
consider (NPeano.Nat.ltb n modulus).

*****
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (_ : lt n modulus) (_ : eq true false), lt O n
+++++
try congruence.
-----
Next Obligation.
eapply NPeano.Nat.div_lt.
auto.
consider (NPeano.Nat.ltb n modulus).

*****
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (_ : not (lt n modulus)) (_ : eq false false), lt O n
+++++
try congruence.
-----
Next Obligation.
eapply NPeano.Nat.div_lt.
auto.
consider (NPeano.Nat.ltb n modulus).
try congruence.

*****
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
forall (_ : not (lt n modulus)) (_ : eq false false), lt O n
+++++
intros.
-----
Next Obligation.
eapply NPeano.Nat.div_lt.
auto.
consider (NPeano.Nat.ltb n modulus).
try congruence.
intros.

*****
H0 : eq false false
H : not (lt n modulus)
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt O n
+++++
eapply _xxx.
-----
Next Obligation.
eapply NPeano.Nat.div_lt.
auto.
consider (NPeano.Nat.ltb n modulus).
try congruence.
intros.
eapply _xxx.

*****
H0 : eq false false
H : not (lt n modulus)
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt (S O) ?m
+++++
eassumption.
-----
Next Obligation.
eapply NPeano.Nat.div_lt.
auto.
consider (NPeano.Nat.ltb n modulus).
try congruence.
intros.
eapply _xxx.

*****
H0 : eq false false
H : not (lt n modulus)
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
not (lt n modulus)
+++++
eassumption.
-----
Next Obligation.
eapply NPeano.Nat.div_lt.

*****
pf : eq (NPeano.Nat.ltb n modulus) false
nat2string : forall (n0 : nat) (_ : lt n0 n), string
n : nat
one_lt_mod : lt (S O) modulus
modulus : nat
*****
lt (S O) modulus
+++++
auto.
-----
Next Obligation.
eapply NPeano.Nat.div_lt.

*****

*****

+++++
Defined.
-----
End Program_Scope.
-----
Definition nat2string10 : nat -> string.
-----
Definition nat2string10 : nat -> string.

*****

*****
forall _ : nat, string
+++++
refine (@nat2string 10 _).
-----
Definition nat2string10 : nat -> string.
refine (@nat2string 10 _).

*****

*****
lt (S O) (S (S (S (S (S (S (S (S (S (S O))))))))))
+++++
repeat constructor.
-----
Definition nat2string10 : nat -> string.
refine (@nat2string 10 _).
repeat constructor.

*****

*****

+++++
Defined.
-----
Definition nat2string2 : nat -> string.
-----
Definition nat2string2 : nat -> string.

*****

*****
forall _ : nat, string
+++++
refine (@nat2string 2 _).
-----
Definition nat2string2 : nat -> string.
refine (@nat2string 2 _).

*****

*****
lt (S O) (S (S O))
+++++
repeat constructor.
-----
Definition nat2string2 : nat -> string.
refine (@nat2string 2 _).
repeat constructor.

*****

*****

+++++
Defined.
-----
Definition nat2string8 : nat -> string.
-----
Definition nat2string8 : nat -> string.

*****

*****
forall _ : nat, string
+++++
refine (@nat2string 8 _).
-----
Definition nat2string8 : nat -> string.
refine (@nat2string 8 _).

*****

*****
lt (S O) (S (S (S (S (S (S (S (S O))))))))
+++++
repeat constructor.
-----
Definition nat2string8 : nat -> string.
refine (@nat2string 8 _).
repeat constructor.

*****

*****

+++++
Defined.
-----
Definition nat2string16 : nat -> string.
-----
Definition nat2string16 : nat -> string.

*****

*****
forall _ : nat, string
+++++
refine (@nat2string 16 _).
-----
Definition nat2string16 : nat -> string.
refine (@nat2string 16 _).

*****

*****
lt (S O) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))))
+++++
repeat constructor.
-----
Definition nat2string16 : nat -> string.
refine (@nat2string 16 _).
repeat constructor.

*****

*****

+++++
Defined.
-----
Global Instance Foldable_string : Foldable string ascii :=\n  fun _ f base =>\n    fix go ls :=\n    match ls with\n    | EmptyString => base\n    | String l ls =>\n      f l (go ls)\n    end.
-----
Section string.
-----
Inductive R_string_len : string -> string -> Prop :=\n  | R_s_len : forall n m, length n < length m -> R_string_len n m.
-----
Theorem wf_R_string_len : well_founded R_string_len.
-----
Theorem wf_R_string_len : well_founded R_string_len.

*****

*****
well_founded R_string_len
+++++
Proof.
-----
Theorem wf_R_string_len : well_founded R_string_len.
Proof.

*****

*****
well_founded R_string_len
+++++
constructor.
-----
Theorem wf_R_string_len : well_founded R_string_len.
Proof.
constructor.

*****
a : string
*****
forall (y : string) (_ : R_string_len y a), Acc R_string_len y
+++++
intros.
-----
Theorem wf_R_string_len : well_founded R_string_len.
Proof.
constructor.
intros.

*****
H : R_string_len y a
a,y : string
*****
Acc R_string_len y
+++++
refine (@Fix _ _ wf_R_lt (fun n : nat => forall ls : string, n = length ls -> Acc R_string_len ls) (fun x rec ls pfls => Acc_intro _ _) _ _ refl_equal).
-----
Theorem wf_R_string_len : well_founded R_string_len.
Proof.
constructor.
intros.
refine (@Fix _ _ wf_R_lt (fun n : nat => forall ls : string, n = length ls -> Acc R_string_len ls) (fun x rec ls pfls => Acc_intro _ _) _ _ refl_equal).

*****
pfls : eq x (length ls)
ls : string
rec : forall (y : nat) (_ : R_nat_lt y x),\n(fun n : nat =>\n forall (ls : string) (_ : eq n (length ls)), Acc R_string_len ls) y
x : nat
H : R_string_len y a
a,y : string
*****
forall (y : string) (_ : R_string_len y ls), Acc R_string_len y
+++++
refine ( match ls as ls return x = length ls -> forall z : string, R_string_len z ls -> Acc R_string_len z with | EmptyString => fun (pfls : x = 0) z pf => _ | String l ls => fun pfls z pf => rec _ (match pf in R_string_len xs ys return x = length ys -> R_nat_lt (length xs) x with | R_s_len n m pf' => fun pf_eq => match eq_sym pf_eq in _ = x return R_nat_lt (length n) x with | refl_equal => R_lt pf' end end pfls) _ eq_refl end pfls).
-----
Theorem wf_R_string_len : well_founded R_string_len.
Proof.
constructor.
intros.
refine (@Fix _ _ wf_R_lt (fun n : nat => forall ls : string, n = length ls -> Acc R_string_len ls) (fun x rec ls pfls => Acc_intro _ _) _ _ refl_equal).
refine ( match ls as ls return x = length ls -> forall z : string, R_string_len z ls -> Acc R_string_len z with | EmptyString => fun (pfls : x = 0) z pf => _ | String l ls => fun pfls z pf => rec _ (match pf in R_string_len xs ys return x = length ys -> R_nat_lt (length xs) x with | R_s_len n m pf' => fun pf_eq => match eq_sym pf_eq in _ = x return R_nat_lt (length n) x with | refl_equal => R_lt pf' end end pfls) _ eq_refl end pfls).

*****
pf : R_string_len z EmptyString
z : string
pfls : eq x O
pfls0 : eq x (length ls)
ls : string
rec : forall (y : nat) (_ : R_nat_lt y x),\n(fun n : nat =>\n forall (ls : string) (_ : eq n (length ls)), Acc R_string_len ls) y
x : nat
H : R_string_len y a
a,y : string
*****
Acc R_string_len z
+++++
clear - pf.
-----
Theorem wf_R_string_len : well_founded R_string_len.
Proof.
constructor.
intros.
refine (@Fix _ _ wf_R_lt (fun n : nat => forall ls : string, n = length ls -> Acc R_string_len ls) (fun x rec ls pfls => Acc_intro _ _) _ _ refl_equal).
refine ( match ls as ls return x = length ls -> forall z : string, R_string_len z ls -> Acc R_string_len z with | EmptyString => fun (pfls : x = 0) z pf => _ | String l ls => fun pfls z pf => rec _ (match pf in R_string_len xs ys return x = length ys -> R_nat_lt (length xs) x with | R_s_len n m pf' => fun pf_eq => match eq_sym pf_eq in _ = x return R_nat_lt (length n) x with | refl_equal => R_lt pf' end end pfls) _ eq_refl end pfls).
clear - pf.

*****
pf : R_string_len z EmptyString
z : string
*****
Acc R_string_len z
+++++
abstract (inversion pf; subst; simpl in *; inversion H).
-----
Theorem wf_R_string_len : well_founded R_string_len.
Proof.
constructor.
intros.
refine (@Fix _ _ wf_R_lt (fun n : nat => forall ls : string, n = length ls -> Acc R_string_len ls) (fun x rec ls pfls => Acc_intro _ _) _ _ refl_equal).
refine ( match ls as ls return x = length ls -> forall z : string, R_string_len z ls -> Acc R_string_len z with | EmptyString => fun (pfls : x = 0) z pf => _ | String l ls => fun pfls z pf => rec _ (match pf in R_string_len xs ys return x = length ys -> R_nat_lt (length xs) x with | R_s_len n m pf' => fun pf_eq => match eq_sym pf_eq in _ = x return R_nat_lt (length n) x with | refl_equal => R_lt pf' end end pfls) _ eq_refl end pfls).
clear - pf.
abstract (inversion pf; subst; simpl in *; inversion H).

*****

*****

+++++
Defined.
-----
End string.
-----
Definition Monoid_string_append : Monoid string :=\n{| monoid_plus := append\n ; monoid_unit := EmptyString\n|}.
-----
