Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section playfair_bis_playfair.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : alternative_playfair_s_postulate, playfair_s_postulate
+++++
Proof.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : alternative_playfair_s_postulate, playfair_s_postulate
+++++
intros playfair_bis.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.

*****
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
playfair_s_postulate
+++++
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
elim (col_dec A1 A2 P).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col A1 A2 P, and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HCol.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.

*****
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
treat_equalities.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.

*****
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
elim HParAB.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.

*****
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Par_strict A1 A2 B1 B2, and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intros [_ [_ [_ HF]]].
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
intros [_ [_ [_ HF]]].

*****
HF : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
exfalso.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
intros [_ [_ [_ HF]]].
exfalso.

*****
HF : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HF.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
intros [_ [_ [_ HF]]].
exfalso.
apply HF.

*****
HF : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2))
+++++
exists P.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
intros [_ [_ [_ HF]]].
exfalso.
apply HF.
exists P.

*****
HF : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P A1 A2) (Col P B1 B2)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.

*****
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (not (eq A1 A2)) (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2))), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.

*****
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (not (eq A1 A2)) (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2))), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intros [_ [_ [HCol1 HCol2]]].
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].

*****
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
elim HParAC.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.

*****
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Par_strict A1 A2 C1 C2, and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intros [_ [_ [_ HF]]].
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.
intros [_ [_ [_ HF]]].

*****
HF : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
exfalso.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.
intros [_ [_ [_ HF]]].
exfalso.

*****
HF : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HF.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.
intros [_ [_ [_ HF]]].
exfalso.
apply HF.

*****
HF : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2))
+++++
exists P.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.
intros [_ [_ [_ HF]]].
exfalso.
apply HF.
exists P.

*****
HF : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P A1 A2) (Col P C1 C2)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.

*****
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (not (eq A1 A2)) (and (not (eq C1 C2)) (and (Col A1 C1 C2) (Col A2 C1 C2))), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.
idtac.

*****
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (not (eq A1 A2)) (and (not (eq C1 C2)) (and (Col A1 C1 C2) (Col A2 C1 C2))), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intros [_ [_ [HCol3 HCol4]]].
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.
idtac.
intros [_ [_ [HCol3 HCol4]]].

*****
HCol4 : Col A2 C1 C2
HCol3 : Col A1 C1 C2
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert_diffs.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.
idtac.
intros [_ [_ [HCol3 HCol4]]].
assert_diffs.

*****
H1 : not (eq B1 B2)
H0 : not (eq C1 C2)
H : not (eq A1 A2)
HCol4 : Col A2 C1 C2
HCol3 : Col A1 C1 C2
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
split.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.
idtac.
intros [_ [_ [HCol3 HCol4]]].
assert_diffs.
split.

*****
H1 : not (eq B1 B2)
H0 : not (eq C1 C2)
H : not (eq A1 A2)
HCol4 : Col A2 C1 C2
HCol3 : Col A1 C1 C2
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
ColR.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HCol.
treat_equalities.
elim HParAB.
idtac.
intros [_ [_ [HCol1 HCol2]]].
elim HParAC.
idtac.
intros [_ [_ [HCol3 HCol4]]].
assert_diffs.
split.

*****
H1 : not (eq B1 B2)
H0 : not (eq C1 C2)
H : not (eq A1 A2)
HCol4 : Col A2 C1 C2
HCol3 : Col A1 C1 C2
HCol2 : Col A2 B1 B2
HCol1 : Col A1 B1 B2
HCol : Col A1 A2 P
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
ColR.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col A1 A2 P), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HNC1.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.

*****
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert_diffs.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.

*****
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(HX := perp_exists P A1 A2).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).

*****
HX : forall _ : not (eq A1 A2), ex (fun X : Tpoint => Perp P X A1 A2)
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
destruct HX as [X HPerp1].
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].

*****
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A1 A2)
+++++
auto.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].

*****
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
auto.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.

*****
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert_diffs.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.

*****
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HCop1 : Coplanar P X A1 A2).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).

*****
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P X A1 A2
+++++
Cop.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).

*****
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.

*****
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
elim (perp_not_col2 _ _ _ _ HPerp1).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).

*****
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col P X A1), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HNC2.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.

*****
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(HD := ex_perp_cop P X P A1).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).

*****
HD : forall _ : not (eq P X),\nex (fun Q : Tpoint => and (Perp P X Q P) (Coplanar P X A1 Q))
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
destruct HD as [D [HPerp2 HCop2]].
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].

*****
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P X)
+++++
auto.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].

*****
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
auto.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.

*****
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert_diffs.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.

*****
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(Perp2 A1 A2 P D P).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).

*****
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 P D P
+++++
exists X.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.

*****
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Col P X Y) (and (Perp X Y A1 A2) (Perp X Y P D)))
+++++
exists P.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.

*****
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P X P) (and (Perp X P A1 A2) (Perp X P P D))
+++++
split.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.

*****
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P X P
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.

*****
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Perp X P A1 A2) (Perp X P P D)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.
Col.

*****
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Perp X P A1 A2) (Perp X P P D)
+++++
split.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.
Col.
split.

*****
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X P A1 A2
+++++
Perp.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.
Col.
split.

*****
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X P P D
+++++
Perp.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(Col B1 P D /\ Col B2 P D).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col B1 P D) (Col B2 P D)
+++++
apply (playfair_bis A1 A2 _ _ _ _ P).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 P D P
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 P)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P P D
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P D
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).
Col.

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P D
+++++
CopR.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P B1 B2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(Col C1 P D /\ Col C2 P D).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 P D) (Col C2 P D)
+++++
apply (playfair_bis A1 A2 _ _ _ _ P).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 P D P
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 P)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P P D
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P D
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).
Col.

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P D
+++++
CopR.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 C2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).

*****
H9 : and (Col C1 P D) (Col C2 P D)
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.

*****
H9 : and (Col C1 P D) (Col C2 P D)
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
spliter.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
split.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply(col3 P D).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P D)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D C1
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D B1
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D B2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
apply(col3 P D).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P D)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D C2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D B1
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A1).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A1)
HCop2 : Coplanar P X A1 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A1)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D B2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).

*****
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col P X A2), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HNC2.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.

*****
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(HD := ex_perp_cop P X P A2).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).

*****
HD : forall _ : not (eq P X),\nex (fun Q : Tpoint => and (Perp P X Q P) (Coplanar P X A2 Q))
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
destruct HD as [D [HPerp2 HCop2]].
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].

*****
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P X)
+++++
auto.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].

*****
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
auto.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.

*****
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert_diffs.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.

*****
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(Perp2 A1 A2 P D P).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).

*****
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 P D P
+++++
exists X.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.

*****
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Col P X Y) (and (Perp X Y A1 A2) (Perp X Y P D)))
+++++
exists P.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.

*****
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P X P) (and (Perp X P A1 A2) (Perp X P P D))
+++++
split.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.

*****
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P X P
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.

*****
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Perp X P A1 A2) (Perp X P P D)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.
Col.

*****
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Perp X P A1 A2) (Perp X P P D)
+++++
split.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.
Col.
split.

*****
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X P A1 A2
+++++
Perp.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
exists X.
exists P.
split.
Col.
split.

*****
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X P P D
+++++
Perp.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(Col B1 P D /\ Col B2 P D).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col B1 P D) (Col B2 P D)
+++++
apply (playfair_bis A1 A2 _ _ _ _ P).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 P D P
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 P)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P P D
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P D
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).
Col.

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P D
+++++
CopR.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P B1 B2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(Col C1 P D /\ Col C2 P D).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 P D) (Col C2 P D)
+++++
apply (playfair_bis A1 A2 _ _ _ _ P).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 P D P
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 P)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P P D
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P D
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).
Col.

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P D
+++++
CopR.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
apply (playfair_bis A1 A2 _ _ _ _ P).

*****
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 C2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).

*****
H9 : and (Col C1 P D) (Col C2 P D)
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.

*****
H9 : and (Col C1 P D) (Col C2 P D)
H6 : and (Col B1 P D) (Col B2 P D)
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
spliter.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
split.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply(col3 P D).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P D)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D C1
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D B1
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D B2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
apply(col3 P D).
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P D)
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D C2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D B1
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).
intro HNC1.
assert_diffs.
assert(HX := perp_exists P A1 A2).
destruct HX as [X HPerp1].
auto.
assert_diffs.
assert (HCop1 : Coplanar P X A1 A2).
idtac.
elim (perp_not_col2 _ _ _ _ HPerp1).
intro HNC2.
assert(HD := ex_perp_cop P X P A2).
destruct HD as [D [HPerp2 HCop2]].
auto.
assert_diffs.
assert(Perp2 A1 A2 P D P).
assert(Col B1 P D /\\ Col B2 P D).
idtac.
assert(Col C1 P D /\\ Col C2 P D).
idtac.
spliter.
split.
apply(col3 P D).

*****
H10 : Col C2 P D
H9 : Col C1 P D
H11 : Col B2 P D
H6 : Col B1 P D
H3 : Perp2 A1 A2 P D P
H8 : not (eq D P)
H7 : not (eq X A2)
HCop2 : Coplanar P X A2 D
HPerp2 : Perp P X D P
D : Tpoint
HNC2 : not (Col P X A2)
HCop1 : Coplanar P X A1 A2
H5 : not (eq P X)
HPerp1 : Perp P X A1 A2
X : Tpoint
H0 : not (eq B1 B2)
H : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HNC1 : not (Col A1 A2 P)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HPB : Col P B1 B2
HParAB : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
playfair_bis : alternative_playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P D B2
+++++
Col.
-----
Lemma playfair_bis__playfair : alternative_playfair_s_postulate -> playfair_s_postulate.
Proof.
intros playfair_bis.
intros A1 A2 B1 B2 C1 C2 P HParAB HPB HParAC HPC.
elim (col_dec A1 A2 P).

*****

*****

+++++
Qed.
-----
End playfair_bis_playfair.
-----
