Require Import GeoCoq.Axioms.continuity_axioms.
-----
Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Export GeoCoq.Meta_theory.Parallel_postulates.proclus_SPP.
-----
Require Export GeoCoq.Meta_theory.Parallel_postulates.SPP_tarski.
-----
Require Export GeoCoq.Meta_theory.Parallel_postulates.tarski_playfair.
-----
Require Export GeoCoq.Meta_theory.Parallel_postulates.playfair_alternate_interior_angles.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section proclus_aristotle.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : proclus_postulate, aristotle_s_axiom
+++++
Proof.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : proclus_postulate, aristotle_s_axiom
+++++
intros proclus P Q A B C HNCol Hacute.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.

*****
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(HD0 := l10_15 B A B C).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).

*****
HD0 : forall (_ : Col B A B) (_ : not (Col B A C)),\nex (fun Q : Tpoint => and (Perp B A Q B) (OS B A C Q))
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
destruct HD0 as [D0 []].
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].

*****
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A B
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].

*****
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A C)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].

*****
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.

*****
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(HD := segment_construction B D0 P Q).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).

*****
HD : ex (fun E : Tpoint => and (Bet B D0 E) (Cong D0 E P Q))
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
destruct HD as [D []].
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].

*****
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(HNCol1 : ~ Col B A D0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).

*****
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A D0)
+++++
apply perp_not_col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
apply perp_not_col.

*****
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A D0 B
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).

*****
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.

*****
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert_diffs.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.

*****
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(D<>B).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).

*****
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D B)
+++++
intro.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
intro.

*****
H4 : eq D B
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Between.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).

*****
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.

*****
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(~ Col D B A).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).

*****
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D B A)
+++++
intro.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
intro.

*****
H9 : Col D B A
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
intro.
apply HNCol1.

*****
H9 : Col D B A
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A D0
+++++
ColR.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).

*****
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.

*****
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(HY0 := l10_15 D B D A).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).

*****
HY0 : forall (_ : Col D B D) (_ : not (Col D B A)),\nex (fun Q : Tpoint => and (Perp D B Q D) (OS D B A Q))
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
destruct HY0 as [Y0 [HPerp HOS]].
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].

*****
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col D B D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].

*****
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D B A)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].

*****
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.

*****
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(Perp B A B D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).

*****
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A B D
+++++
apply (perp_col1 _ _ _ D0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
apply (perp_col1 _ _ _ D0).

*****
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B D)
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
apply (perp_col1 _ _ _ D0).

*****
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A B D0
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
apply (perp_col1 _ _ _ D0).

*****
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B D0 D
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
apply (perp_col1 _ _ _ D0).
Perp.

*****
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B D0 D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(HPar : Par B A Y0 D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B A Y0 D
+++++
apply (l12_9 _ _ _ _ D B).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B B Y0
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).
Perp.

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B B Y0
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B B D
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).
Perp.

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B B D
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B A Y0
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).
Perp.

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B A Y0
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B A D
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).
Perp.

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B A D
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A D B
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
apply (l12_9 _ _ _ _ D B).

*****
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp Y0 D D B
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).

*****
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(HY := proclus B A Y0 D B C).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).

*****
HY : forall (_ : Par B A Y0 D) (_ : Col B A B) (_ : not (Col B A C))\n (_ : Coplanar Y0 D B C),\nex (fun Y : Tpoint => and (Col B C Y) (Col Y0 D Y))
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
destruct HY as [Y []].
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].

*****
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B A Y0 D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].

*****
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A B
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].

*****
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A C)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].

*****
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Y0 D B C
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.

*****
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Y0 D B C
+++++
assert (Coplanar B A C D0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).

*****
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A C D0
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).

*****
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Y0 D B C
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.

*****
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Y0 D B C
+++++
assert (Coplanar A C B D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).

*****
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D
+++++
assert_diffs.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.

*****
H20 : not (eq B Y0)
H14 : not (eq Y0 D)
H18 : not (eq D A)
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D
+++++
assert_cols.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.

*****
H4 : Col B D0 D
H20 : not (eq B Y0)
H14 : not (eq Y0 D)
H18 : not (eq D A)
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D
+++++
apply col2_cop__cop with B D0.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.

*****
H4 : Col B D0 D
H20 : not (eq B Y0)
H14 : not (eq Y0 D)
H18 : not (eq D A)
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D0
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.
Col.

*****
H4 : Col B D0 D
H20 : not (eq B Y0)
H14 : not (eq Y0 D)
H18 : not (eq D A)
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D0
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.

*****
H4 : Col B D0 D
H20 : not (eq B Y0)
H14 : not (eq Y0 D)
H18 : not (eq D A)
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B D0)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.

*****
H4 : Col B D0 D
H20 : not (eq B Y0)
H14 : not (eq Y0 D)
H18 : not (eq D A)
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B D0 B
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.

*****
H4 : Col B D0 D
H20 : not (eq B Y0)
H14 : not (eq Y0 D)
H18 : not (eq D A)
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B D0 D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).

*****
H13 : Coplanar A C B D
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Y0 D B C
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.

*****
H13 : Coplanar A C B D
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Y0 D B C
+++++
assert (Coplanar D B A Y0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.
assert (Coplanar D B A Y0).

*****
H13 : Coplanar A C B D
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B A Y0
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.
assert (Coplanar D B A Y0).

*****
H14 : Coplanar D B A Y0
H13 : Coplanar A C B D
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Y0 D B C
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.
assert (Coplanar D B A Y0).
idtac.

*****
H14 : Coplanar D B A Y0
H13 : Coplanar A C B D
H12 : Coplanar B A C D0
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Y0 D B C
+++++
CopR.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
apply (par_not_col_strict _ _ _ _ D) in HPar.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(~ Col Y B A).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y B A)
+++++
apply (par_not_col Y0 D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
apply (par_not_col Y0 D).

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Y0 D B A
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
apply (par_not_col Y0 D).
Col.

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Y0 D B A
+++++
Par.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
apply (par_not_col Y0 D).

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y Y0 D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).

*****
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.

*****
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
assert(HX := l8_18_existence A B Y).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).

*****
HX : forall _ : not (Col A B Y),\nex (fun X : Tpoint => and (Col A B X) (Perp A B Y X))
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
destruct HX as [X []].
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].

*****
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B Y)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
+++++
exists X.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y))))
+++++
exists Y.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(OS B A C D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A C D
+++++
apply (one_side_transitivity _ _ _ D0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A C D0
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A D0 D
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A D0 D
+++++
apply out_one_side.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (Col B A D0)) (not (Col B A D))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B D0 D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.
Col.

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B D0 D
+++++
apply bet_out.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.
Col.
apply bet_out.

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D0 B)
+++++
Between.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.
Col.
apply bet_out.

*****
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B D0 D
+++++
Between.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(Hlta : LtA A B C A B D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C A B D
+++++
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hlta : LtA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C A B D
+++++
apply (conga_preserves_lta A B C A' B' C').
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hlta : LtA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C A B C
+++++
try (apply conga_refl).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hlta : LtA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hlta : LtA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hlta : LtA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A' B' C' A B D
+++++
try (apply conga_refl).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hlta : LtA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A' B' C' A B D
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hlta : LtA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A' B' C' A B D
+++++
destruct Hlta.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A' B' C' A B D
+++++
assert_diffs.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.
assert_diffs.

*****
H4 : not (eq A' C')
H29 : not (eq C' B')
H24 : not (eq A' B')
H30 : not (eq B Y0)
H22 : not (eq Y0 D)
H21 : not (eq Y X)
H26 : not (eq D A)
H25 : not (eq Y A)
H23 : not (eq Y B)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A' B' C' A B D
+++++
apply l11_16.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.
assert_diffs.
apply l11_16.

*****
H4 : not (eq A' C')
H29 : not (eq C' B')
H24 : not (eq A' B')
H30 : not (eq B Y0)
H22 : not (eq Y0 D)
H21 : not (eq Y X)
H26 : not (eq D A)
H25 : not (eq Y A)
H23 : not (eq Y B)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A' B' C'
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.
assert_diffs.
apply l11_16.

*****
H4 : not (eq A' C')
H29 : not (eq C' B')
H24 : not (eq A' B')
H30 : not (eq B Y0)
H22 : not (eq Y0 D)
H21 : not (eq Y X)
H26 : not (eq D A)
H25 : not (eq Y A)
H23 : not (eq Y B)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A' B')
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.
assert_diffs.
apply l11_16.

*****
H4 : not (eq A' C')
H29 : not (eq C' B')
H24 : not (eq A' B')
H30 : not (eq B Y0)
H22 : not (eq Y0 D)
H21 : not (eq Y X)
H26 : not (eq D A)
H25 : not (eq Y A)
H23 : not (eq Y B)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C' B')
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.
assert_diffs.
apply l11_16.

*****
H4 : not (eq A' C')
H29 : not (eq C' B')
H24 : not (eq A' B')
H30 : not (eq B Y0)
H22 : not (eq Y0 D)
H21 : not (eq Y X)
H26 : not (eq D A)
H25 : not (eq Y A)
H23 : not (eq Y B)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B D
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.
assert_diffs.
apply l11_16.
auto.

*****
H4 : not (eq A' C')
H29 : not (eq C' B')
H24 : not (eq A' B')
H30 : not (eq B Y0)
H22 : not (eq Y0 D)
H21 : not (eq Y X)
H26 : not (eq D A)
H25 : not (eq Y A)
H23 : not (eq Y B)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B D
+++++
apply perp_per_2.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.
assert_diffs.
apply l11_16.
auto.
apply perp_per_2.

*****
H4 : not (eq A' C')
H29 : not (eq C' B')
H24 : not (eq A' B')
H30 : not (eq B Y0)
H22 : not (eq Y0 D)
H21 : not (eq Y X)
H26 : not (eq D A)
H25 : not (eq Y A)
H23 : not (eq Y B)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A B D
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.
assert_diffs.
apply l11_16.

*****
H4 : not (eq A' C')
H29 : not (eq C' B')
H24 : not (eq A' B')
H30 : not (eq B Y0)
H22 : not (eq Y0 D)
H21 : not (eq Y X)
H26 : not (eq D A)
H25 : not (eq Y A)
H23 : not (eq Y B)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).
auto.
destruct Hlta.
assert_diffs.
apply l11_16.

*****
H4 : not (eq A' C')
H29 : not (eq C' B')
H24 : not (eq A' B')
H30 : not (eq B Y0)
H22 : not (eq Y0 D)
H21 : not (eq Y X)
H26 : not (eq D A)
H25 : not (eq Y A)
H23 : not (eq Y B)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
H19 : not (CongA A B C A' B' C')
H18 : LeA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D B)
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hlta : LtA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C A' B' C'
+++++
try (apply conga_refl).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
destruct Hacute as [A' [B' [C' [HPer Hlta]]]].
apply (conga_preserves_lta A B C A' B' C').
try (apply conga_refl).

*****
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hlta : LtA A B C A' B' C'
HPer : Per A' B' C'
A',B',C' : Tpoint
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C A' B' C'
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).

*****
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(HNCol2 : ~ Col B C D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).

*****
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C D)
+++++
intro.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.

*****
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim(bet_dec C B D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).

*****
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet C B D, False
+++++
intro.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(~ OS B A C D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (OS B A C D)
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).
auto.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (OS B A C D)
+++++
apply l9_9.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).
auto.
apply l9_9.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS B A C D
+++++
repeat split.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).
auto.
apply l9_9.
repeat split.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C B A)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).
auto.
apply l9_9.
repeat split.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D B A)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).
auto.
apply l9_9.
repeat split.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T B A) (Bet C T D))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).
auto.
apply l9_9.
repeat split.
Col.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T B A) (Bet C T D))
+++++
exists B.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).
auto.
apply l9_9.
repeat split.
Col.
exists B.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col B B A) (Bet C B D)
+++++
repeat split.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).
auto.
apply l9_9.
repeat split.
Col.
exists B.
repeat split.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B B A
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).
auto.
apply l9_9.
repeat split.
Col.
exists B.
repeat split.

*****
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet C B D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
assert(~ OS B A C D).

*****
H20 : not (OS B A C D)
H19 : Bet C B D
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).

*****
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Bet C B D), False
+++++
intro.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.

*****
H19 : not (Bet C B D)
H18 : Col B C D
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Hlta as [_ HNConga].
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNConga.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C A B D
+++++
apply (out_conga A B C A B C).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C A B C
+++++
try (apply out_trivial).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C A B C
+++++
CongA.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A A
+++++
try (apply out_trivial).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
CongA.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C C
+++++
try (apply out_trivial).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
CongA.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A A
+++++
try (apply out_trivial).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
CongA.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C D
+++++
try (apply out_trivial).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C D
+++++
CongA.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).
try (apply out_trivial).
CongA.

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C D
+++++
apply not_bet_out.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).
try (apply out_trivial).
CongA.
apply not_bet_out.

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C B D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
intro.
elim(bet_dec C B D).
intro.
destruct Hlta as [_ HNConga].
apply HNConga.
apply (out_conga A B C A B C).
try (apply out_trivial).
CongA.
apply not_bet_out.

*****
H19 : not (Bet C B D)
H18 : Col B C D
HNConga : not (CongA A B C A B D)
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet C B D)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).

*****
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert_diffs.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.

*****
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(Y<>D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).

*****
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Y D)
+++++
intro.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
intro.

*****
H4 : eq Y D
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst Y.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
intro.
subst Y.

*****
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq D X)
H25 : not (eq D A)
H21 : not (eq D B)
H23 : not (eq D A)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B D X
H15 : Col A B X
X : Tpoint
H12 : Col B C D
H13 : Col Y0 D D
H14 : not (Col D B A)
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(OS B A C D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A C D
+++++
apply (one_side_transitivity _ _ _ D0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A C D0
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A D0 D
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A D0 D
+++++
apply out_one_side.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (Col B A D0)) (not (Col B A D))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B D0 D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.
Col.

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B D0 D
+++++
apply bet_out.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.
Col.
apply bet_out.

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D0 B)
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
apply (one_side_transitivity _ _ _ D0).
auto.
apply out_one_side.
Col.
apply bet_out.

*****
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B D0 D
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(Par_strict B D X Y).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B D X Y
+++++
apply (par_not_col_strict _ _ _ _ Y).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B D X Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B D X Y
+++++
apply (l12_9 _ _ _ _ B A).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A B X
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A B X
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A B Y
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A B Y
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D X
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D X
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D Y
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D Y
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D Y
+++++
assert (Coplanar B A C D0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A C D0
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).

*****
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D Y
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.

*****
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D Y
+++++
assert (Coplanar A C B D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).

*****
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D
+++++
assert_diffs.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.

*****
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D
+++++
assert_cols.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.

*****
H26 : Col B D0 D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D
+++++
apply col2_cop__cop with B D0.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.

*****
H26 : Col B D0 D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D0
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.
Col.

*****
H26 : Col B D0 D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D0
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.

*****
H26 : Col B D0 D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B D0)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.

*****
H26 : Col B D0 D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B D0 B
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
assert_diffs.
assert_cols.
apply col2_cop__cop with B D0.

*****
H26 : Col B D0 D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B D0 D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).

*****
H26 : Coplanar A C B D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D Y
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.

*****
H26 : Coplanar A C B D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D Y
+++++
apply coplanar_perm_12, col2_cop__cop with B C.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.
apply coplanar_perm_12, col2_cop__cop with B C.

*****
H26 : Coplanar A C B D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A D B C
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.
apply coplanar_perm_12, col2_cop__cop with B C.
Col.

*****
H26 : Coplanar A C B D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A D B C
+++++
Cop.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.
apply coplanar_perm_12, col2_cop__cop with B C.

*****
H26 : Coplanar A C B D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.
apply coplanar_perm_12, col2_cop__cop with B C.

*****
H26 : Coplanar A C B D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C B
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).
Perp.
Cop.
assert (Coplanar B A C D0).
idtac.
assert (Coplanar A C B D).
idtac.
apply coplanar_perm_12, col2_cop__cop with B C.

*****
H26 : Coplanar A C B D
H24 : Coplanar B A C D0
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B D B A
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
apply (l12_9 _ _ _ _ B A).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Y B A
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B D Y)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.

*****
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B D Y)
+++++
intro.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
intro.

*****
H24 : Col B D Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Col B C D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
intro.
assert(Col B C D).

*****
H24 : Col B D Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
intro.
assert(Col B C D).
Col.

*****
H24 : Col B D Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C D
+++++
ColR.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
apply (par_not_col_strict _ _ _ _ Y).
Col.
intro.
assert(Col B C D).

*****
H26 : Col B C D
H24 : Col B D Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).

*****
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(InAngle C A B D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).

*****
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C A B D
+++++
apply lea_in_angle.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
apply lea_in_angle.

*****
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA A B C A B D
+++++
Lea.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
apply lea_in_angle.

*****
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B D C
+++++
Lea.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
apply lea_in_angle.
Lea.

*****
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B D C
+++++
CongA.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
apply lea_in_angle.
Lea.
CongA.

*****
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B D C
+++++
Side.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(Out B C Y).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
apply (col_one_side_out _ A).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A C Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).
Col.

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A C Y
+++++
apply (one_side_transitivity _ _ _ D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).
Col.
apply (one_side_transitivity _ _ _ D).

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A C D
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).
Col.
apply (one_side_transitivity _ _ _ D).

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A D Y
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).
Col.
apply (one_side_transitivity _ _ _ D).
auto.

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A D Y
+++++
apply l12_6.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).
Col.
apply (one_side_transitivity _ _ _ D).
auto.
apply l12_6.

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B A D Y
+++++
apply (par_strict_col_par_strict _ _ _ Y0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).
Col.
apply (one_side_transitivity _ _ _ D).
auto.
apply l12_6.
apply (par_strict_col_par_strict _ _ _ Y0).

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D Y)
+++++
Par.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).
Col.
apply (one_side_transitivity _ _ _ D).
auto.
apply l12_6.
apply (par_strict_col_par_strict _ _ _ Y0).

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B A D Y0
+++++
Par.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).
Col.
apply (one_side_transitivity _ _ _ D).
auto.
apply l12_6.
apply (par_strict_col_par_strict _ _ _ Y0).

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col D Y0 Y
+++++
Par.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
apply (col_one_side_out _ A).
Col.
apply (one_side_transitivity _ _ _ D).
auto.
apply l12_6.
apply (par_strict_col_par_strict _ _ _ Y0).
Par.

*****
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col D Y0 Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(Out B A X).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A X
+++++
apply (col_one_side_out _ D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A X
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B D A X
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B D A X
+++++
apply one_side_symmetry.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B D X A
+++++
apply (one_side_transitivity _ _ _ Y).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B D X Y
+++++
apply l12_6.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply l12_6.

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B D X Y
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B D Y A
+++++
apply (one_side_transitivity _ _ _ C).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B D Y C
+++++
apply out_one_side.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply out_one_side.

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (Col B D Y)) (not (Col B D C))
+++++
try (apply l6_6).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply out_one_side.
try (apply l6_6).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (Col B D Y)) (not (Col B D C))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply out_one_side.

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B Y C
+++++
try (apply l6_6).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply out_one_side.
try (apply l6_6).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B D C A
+++++
apply invert_one_side.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply invert_one_side.

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS D B C A
+++++
apply in_angle_one_side.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply invert_one_side.
apply in_angle_one_side.

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D B A)
+++++
try (apply l11_24).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply invert_one_side.
apply in_angle_one_side.
try (apply l11_24).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D B A)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply invert_one_side.
apply in_angle_one_side.

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B D C)
+++++
try (apply l11_24).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply invert_one_side.
apply in_angle_one_side.
try (apply l11_24).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B D C)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply invert_one_side.
apply in_angle_one_side.

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C D B A
+++++
try (apply l11_24).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
apply (col_one_side_out _ D).
Col.
apply one_side_symmetry.
apply (one_side_transitivity _ _ _ Y).
apply (one_side_transitivity _ _ _ C).
apply invert_one_side.
apply in_angle_one_side.
try (apply l11_24).

*****
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C A B D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).

*****
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(Per B X Y).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).

*****
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Y
+++++
assert (~ Col B D X).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).

*****
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B D X)
+++++
apply (par_strict_not_col_1 _ _ _ Y).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
apply (par_strict_not_col_1 _ _ _ Y).

*****
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B D X Y
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).

*****
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Y
+++++
idtac.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
idtac.

*****
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Y
+++++
assert_diffs.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
idtac.
assert_diffs.

*****
H36 : not (eq B X)
H33 : not (eq D X)
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Y
+++++
apply perp_per_1.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
idtac.
assert_diffs.
apply perp_per_1.

*****
H36 : not (eq B X)
H33 : not (eq D X)
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X B Y X
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
idtac.
assert_diffs.
apply perp_per_1.
auto.

*****
H36 : not (eq B X)
H33 : not (eq D X)
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X B Y X
+++++
apply perp_left_comm.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
idtac.
assert_diffs.
apply perp_per_1.
auto.
apply perp_left_comm.

*****
H36 : not (eq B X)
H33 : not (eq D X)
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B X Y X
+++++
apply (perp_col _ A).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
idtac.
assert_diffs.
apply perp_per_1.
auto.
apply perp_left_comm.
apply (perp_col _ A).

*****
H36 : not (eq B X)
H33 : not (eq D X)
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B X)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
idtac.
assert_diffs.
apply perp_per_1.
auto.
apply perp_left_comm.
apply (perp_col _ A).

*****
H36 : not (eq B X)
H33 : not (eq D X)
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A Y X
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
idtac.
assert_diffs.
apply perp_per_1.
auto.
apply perp_left_comm.
apply (perp_col _ A).
Col.

*****
H36 : not (eq B X)
H33 : not (eq D X)
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A Y X
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert (~ Col B D X).
idtac.
assert_diffs.
apply perp_per_1.
auto.
apply perp_left_comm.
apply (perp_col _ A).

*****
H36 : not (eq B X)
H33 : not (eq D X)
H30 : not (Col B D X)
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A X
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).

*****
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
assert(Cong B D X Y).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).

*****
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B D X Y
+++++
assert_diffs.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B D X Y
+++++
assert(HAAS := l11_50_2 B Y D Y B X).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).

*****
HAAS : forall (_ : not (Col B Y D)) (_ : CongA Y D B B X Y)\n (_ : CongA B Y D Y B X) (_ : Cong B Y Y B),\nand (Cong B D Y X) (and (Cong Y D B X) (CongA D B Y X Y B))
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B D X Y
+++++
destruct HAAS.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B Y D)
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B Y D)
+++++
apply not_col_permutation_5.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply not_col_permutation_5.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B D Y)
+++++
apply (par_strict_not_col_4 _ _ X).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply not_col_permutation_5.
apply (par_strict_not_col_4 _ _ X).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B D X Y
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA Y D B B X Y
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA Y D B B X Y
+++++
apply l11_16.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Y D B
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.
Perp.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Y D B
+++++
apply perp_per_2.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.
Perp.
apply perp_per_2.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp D Y D B
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.
Perp.
apply perp_per_2.
auto.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp D Y D B
+++++
apply (perp_col _ Y0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.
Perp.
apply perp_per_2.
auto.
apply (perp_col _ Y0).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D Y)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.
Perp.
apply perp_per_2.
auto.
apply (perp_col _ Y0).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp D Y0 D B
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.
Perp.
apply perp_per_2.
auto.
apply (perp_col _ Y0).
Col.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp D Y0 D B
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.
Perp.
apply perp_per_2.
auto.
apply (perp_col _ Y0).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col D Y0 Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Y D)
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B D)
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B X Y
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B X)
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply l11_16.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Y X)
+++++
Perp.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B Y D Y B X
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B Y D Y B X
+++++
apply conga_comm.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA D Y B X B Y
+++++
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA D Y B X B Y
+++++
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA D Y B X B Y
+++++
apply tarski_s_euclid_implies_playfair in proclus.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA D Y B X B Y
+++++
apply playfair__alternate_interior in proclus.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA D Y B X B Y
+++++
rename proclus into aia.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA D Y B X B Y
+++++
apply aia.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Y B D X
+++++
apply l9_2.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Y B X D
+++++
apply (l9_8_2 _ _ A).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS Y B A D
+++++
apply (col_preserves_two_sides C B).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply (col_preserves_two_sides C B).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Y B)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply (col_preserves_two_sides C B).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C B Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply (col_preserves_two_sides C B).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C B B
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply (col_preserves_two_sides C B).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS C B A D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply (col_preserves_two_sides C B).
Col.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS C B A D
+++++
apply in_angle_two_sides.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply (col_preserves_two_sides C B).
Col.
apply in_angle_two_sides.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A C)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply (col_preserves_two_sides C B).
Col.
apply in_angle_two_sides.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B D C)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply (col_preserves_two_sides C B).
Col.
apply in_angle_two_sides.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C A B D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Y B A X
+++++
apply invert_one_side.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply invert_one_side.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B Y A X
+++++
apply out_one_side.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply invert_one_side.
apply out_one_side.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (Col B Y A)) (not (Col B Y X))
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply l9_2.
apply (l9_8_2 _ _ A).
apply invert_one_side.
apply out_one_side.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A X
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Y D B X
+++++
apply par_left_comm.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par D Y B X
+++++
apply (par_col_par _ _ _ A).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.
apply (par_col_par _ _ _ A).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B X)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.
apply (par_col_par _ _ _ A).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par D Y B A
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.
apply (par_col_par _ _ _ A).
Col.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par D Y B A
+++++
apply (par_col_par_2 _ Y0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.
apply (par_col_par _ _ _ A).
Col.
apply (par_col_par_2 _ Y0).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D Y)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.
apply (par_col_par _ _ _ A).
Col.
apply (par_col_par_2 _ Y0).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col D Y0 Y
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.
apply (par_col_par _ _ _ A).
Col.
apply (par_col_par_2 _ Y0).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par D Y0 B A
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.
apply (par_col_par _ _ _ A).
Col.
apply (par_col_par_2 _ Y0).
Col.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par D Y0 B A
+++++
apply par_strict_par.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.
apply (par_col_par _ _ _ A).
Col.
apply (par_col_par_2 _ Y0).
Col.
apply par_strict_par.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict D Y0 B A
+++++
Par.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.
Cong.
apply conga_comm.
apply proclus_s_postulate_implies_strong_parallel_postulate in proclus.
apply strong_parallel_postulate_implies_tarski_s_euclid in proclus.
apply tarski_s_euclid_implies_playfair in proclus.
apply playfair__alternate_interior in proclus.
rename proclus into aia.
apply aia.
apply par_left_comm.
apply (par_col_par _ _ _ A).

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A X
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.

*****
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B Y Y B
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
assert_diffs.
assert(HAAS := l11_50_2 B Y D Y B X).
destruct HAAS.

*****
H31 : and (Cong Y D B X) (CongA D B Y X Y B)
H18 : Cong B D Y X
H33 : not (eq X B)
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B D X Y
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))
+++++
repeat (split; auto).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le P Q X Y
+++++
apply (l5_6 P Q B D).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
apply (l5_6 P Q B D).

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le P Q B D
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
apply (l5_6 P Q B D).
Cong.

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le P Q B D
+++++
apply le_right_comm.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
apply (l5_6 P Q B D).
Cong.
apply le_right_comm.

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le P Q D B
+++++
exists D0.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
apply (l5_6 P Q B D).
Cong.
apply le_right_comm.
exists D0.

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet D D0 B) (Cong P Q D D0)
+++++
split.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
apply (l5_6 P Q B D).
Cong.
apply le_right_comm.
exists D0.
split.

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet D D0 B
+++++
Between.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
apply (l5_6 P Q B D).
Cong.
apply le_right_comm.
exists D0.
split.

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q D D0
+++++
Between.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
apply (l5_6 P Q B D).
Cong.
apply le_right_comm.
exists D0.
split.
Between.

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q D D0
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
apply (l5_6 P Q B D).

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q P Q
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
apply (l5_6 P Q B D).

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B D X Y
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).

*****
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Cong P Q X Y)
+++++
intro.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(D0=B).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq D0 B
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).
auto.

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq D0 B
+++++
apply (between_cong D B D0).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).
auto.
apply (between_cong D B D0).

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet D D0 B
+++++
Between.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).
auto.
apply (between_cong D B D0).

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong D D0 D B
+++++
Between.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).
auto.
apply (between_cong D B D0).
Between.

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong D D0 D B
+++++
apply (cong_transitivity _ _ P Q).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).
auto.
apply (between_cong D B D0).
Between.
apply (cong_transitivity _ _ P Q).

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong D D0 P Q
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).
auto.
apply (between_cong D B D0).
Between.
apply (cong_transitivity _ _ P Q).

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q D B
+++++
apply (cong_transitivity _ _ X Y).
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).
auto.
apply (between_cong D B D0).
Between.
apply (cong_transitivity _ _ P Q).
apply (cong_transitivity _ _ X Y).

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q X Y
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).
auto.
apply (between_cong D B D0).
Between.
apply (cong_transitivity _ _ P Q).
apply (cong_transitivity _ _ X Y).

*****
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X Y D B
+++++
Cong.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.
Col.
assert(~ Col Y B A).
idtac.
assert(HX := l8_18_existence A B Y).
destruct HX as [X []].
Col.
exists X.
exists Y.
assert(OS B A C D).
assert(Hlta : LtA A B C A B D).
assert(HNCol2 : ~ Col B C D).
assert_diffs.
assert(Y<>D).
idtac.
assert(OS B A C D).
assert(Par_strict B D X Y).
assert(InAngle C A B D).
idtac.
assert(Out B C Y).
assert(Out B A X).
assert(Per B X Y).
assert(Cong B D X Y).
repeat (split; auto).
intro.
assert(D0=B).

*****
H33 : eq D0 B
H32 : Cong P Q X Y
H31 : Cong B D X Y
H30 : Per B X Y
H28 : Out B A X
H27 : Out B C Y
H26 : InAngle C A B D
H24 : Par_strict B D X Y
H18 : OS B A C D
H4 : not (eq Y D)
H29 : not (eq B Y0)
H22 : not (eq Y0 D)
H19 : not (eq Y X)
H25 : not (eq D A)
H23 : not (eq Y A)
H21 : not (eq Y B)
H20 : not (eq C D)
HNCol2 : not (Col B C D)
Hlta : LtA A B C A B D
H17 : OS B A C D
H16 : Perp A B Y X
H15 : Col A B X
X : Tpoint
H14 : not (Col Y B A)
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par_strict B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y0 D D
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].
Col.
assert(HD := segment_construction B D0 P Q).
destruct HD as [D []].
assert(HNCol1 : ~ Col B A D0).
idtac.
assert_diffs.
assert(D<>B).
idtac.
assert(~ Col D B A).
idtac.
assert(HY0 := l10_15 D B D A).
destruct HY0 as [Y0 [HPerp HOS]].
Col.
assert(Perp B A B D).
idtac.
assert(HPar : Par B A Y0 D).
assert(HY := proclus B A Y0 D B C).
destruct HY as [Y []].
Col.
apply (par_not_col_strict _ _ _ _ D) in HPar.

*****
H13 : Col Y0 D Y
H12 : Col B C Y
Y : Tpoint
HPar : Par B A Y0 D
H10 : Perp B A B D
HOS : OS D B A Y0
HPerp : Perp D B Y0 D
Y0 : Tpoint
H9 : not (Col D B A)
H4 : not (eq D B)
H3 : not (eq B D)
H11 : not (eq A C)
H7 : not (eq B C)
H8 : not (eq B D0)
H5 : not (eq A D0)
H6 : not (eq B A)
HNCol1 : not (Col B A D0)
H2 : Cong D0 D P Q
H1 : Bet B D0 D
D : Tpoint
H0 : OS B A C D0
H : Perp B A D0 B
D0 : Tpoint
Hacute : Acute A B C
HNCol : not (Col A B C)
P,Q,A,B,C : Tpoint
proclus : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A D)
+++++
Col.
-----
Lemma proclus__aristotle : proclus_postulate -> aristotle_s_axiom.
Proof.
intros proclus P Q A B C HNCol Hacute.
assert(HD0 := l10_15 B A B C).
destruct HD0 as [D0 []].

*****

*****

+++++
Qed.
-----
End proclus_aristotle.
-----
