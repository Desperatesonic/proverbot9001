Require Export GeoCoq.Elements.OriginalProofs.lemma_26helper.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_trichotomy1.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma proposition_26B : \n   forall A B C D E F, \n   Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E ->\n   Cong B C E F /\ Cong A C D F /\ CongA B A C E D F.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F : Point) (_ : Triangle A B C) (_ : Triangle D E F) (_ : CongA A B C D E F) (_ : CongA B C A E F D) (_ : Cong A B D E), and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
Proof.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F : Point) (_ : Triangle A B C) (_ : Triangle D E F) (_ : CongA A B C D E F) (_ : CongA B C A E F D) (_ : Cong A B D E), and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
intros.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.

*****
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert (~ Lt E F B C).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).

*****
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Lt E F B C)
+++++
conclude lemma_26helper.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).

*****
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.

*****
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert (CongA D E F A B C).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).

*****
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA D E F A B C
+++++
conclude lemma_equalanglessymmetric.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).

*****
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.

*****
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert (CongA E F D B C A).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).

*****
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA E F D B C A
+++++
conclude lemma_equalanglessymmetric.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).

*****
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.

*****
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert (Cong D E A B).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).

*****
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong D E A B
+++++
conclude lemma_congruencesymmetric.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).

*****
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.

*****
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert (~ Lt B C E F).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).

*****
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Lt B C E F)
+++++
conclude lemma_26helper.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).

*****
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.

*****
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert (~ eq B C).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).

*****
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq B C)
+++++
intro.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
intro.

*****
H9 : eq B C
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
intro.
assert (Col A B C).

*****
H9 : eq B C
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col A B C
+++++
conclude_def Col .
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
intro.
assert (Col A B C).

*****
H10 : Col A B C
H9 : eq B C
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
intro.
assert (Col A B C).
idtac.

*****
H10 : Col A B C
H9 : eq B C
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol A B C).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
intro.
assert (Col A B C).
idtac.
assert (nCol A B C).

*****
H10 : Col A B C
H9 : eq B C
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol A B C
+++++
conclude_def Triangle .
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
intro.
assert (Col A B C).
idtac.
assert (nCol A B C).

*****
H11 : nCol A B C
H10 : Col A B C
H9 : eq B C
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
intro.
assert (Col A B C).
idtac.
assert (nCol A B C).
idtac.

*****
H11 : nCol A B C
H10 : Col A B C
H9 : eq B C
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).

*****
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert (~ eq E F).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).

*****
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq E F)
+++++
intro.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
intro.

*****
H10 : eq E F
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col D E F).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
intro.
assert (Col D E F).

*****
H10 : eq E F
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col D E F
+++++
conclude_def Col .
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
intro.
assert (Col D E F).

*****
H11 : Col D E F
H10 : eq E F
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
intro.
assert (Col D E F).
idtac.

*****
H11 : Col D E F
H10 : eq E F
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol D E F).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
intro.
assert (Col D E F).
idtac.
assert (nCol D E F).

*****
H11 : Col D E F
H10 : eq E F
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol D E F
+++++
conclude_def Triangle .
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
intro.
assert (Col D E F).
idtac.
assert (nCol D E F).

*****
H12 : nCol D E F
H11 : Col D E F
H10 : eq E F
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
intro.
assert (Col D E F).
idtac.
assert (nCol D E F).
idtac.

*****
H12 : nCol D E F
H11 : Col D E F
H10 : eq E F
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).

*****
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert (Cong B C E F).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
assert (Cong B C E F).

*****
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong B C E F
+++++
conclude lemma_trichotomy1.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
assert (Cong B C E F).

*****
H11 : Cong B C E F
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
assert (Cong B C E F).
idtac.

*****
H11 : Cong B C E F
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert (Cong B A E D).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
assert (Cong B C E F).
idtac.
assert (Cong B A E D).

*****
H11 : Cong B C E F
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong B A E D
+++++
forward_using lemma_congruenceflip.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
assert (Cong B C E F).
idtac.
assert (Cong B A E D).

*****
H12 : Cong B A E D
H11 : Cong B C E F
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
assert (Cong B C E F).
idtac.
assert (Cong B A E D).
idtac.

*****
H12 : Cong B A E D
H11 : Cong B C E F
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
assert ((Cong A C D F /\ CongA B A C E D F /\ CongA B C A E F D)).
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
assert (Cong B C E F).
idtac.
assert (Cong B A E D).
idtac.
assert ((Cong A C D F /\\ CongA B A C E D F /\\ CongA B C A E F D)).

*****
H12 : Cong B A E D
H11 : Cong B C E F
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong A C D F) (and (CongA B A C E D F) (CongA B C A E F D))
+++++
conclude proposition_04.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
assert (Cong B C E F).
idtac.
assert (Cong B A E D).
idtac.
assert ((Cong A C D F /\\ CongA B A C E D F /\\ CongA B C A E F D)).

*****
H13 : and (Cong A C D F) (and (CongA B A C E D F) (CongA B C A E F D))
H12 : Cong B A E D
H11 : Cong B C E F
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
idtac.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).
idtac.
assert (CongA D E F A B C).
idtac.
assert (CongA E F D B C A).
idtac.
assert (Cong D E A B).
idtac.
assert (~ Lt B C E F).
idtac.
assert (~ eq B C).
assert (~ eq E F).
assert (Cong B C E F).
idtac.
assert (Cong B A E D).
idtac.
assert ((Cong A C D F /\\ CongA B A C E D F /\\ CongA B C A E F D)).
idtac.

*****
H13 : and (Cong A C D F) (and (CongA B A C E D F) (CongA B C A E F D))
H12 : Cong B A E D
H11 : Cong B C E F
H10 : not (eq E F)
H9 : not (eq B C)
H8 : not (Lt B C E F)
H7 : Cong D E A B
H6 : CongA E F D B C A
H5 : CongA D E F A B C
H4 : not (Lt E F B C)
H3 : Cong A B D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : Triangle D E F
H : Triangle A B C
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong B C E F) (and (Cong A C D F) (CongA B A C E D F))
+++++
close.
-----
Lemma proposition_26B : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E -> Cong B C E F /\\ Cong A C D F /\\ CongA B A C E D F.
Proof.
intros.
assert (~ Lt E F B C).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
