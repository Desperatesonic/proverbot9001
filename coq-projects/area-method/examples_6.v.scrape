Require  Import area_method.
-----
Lemma perp_bissect_perp : forall A B M C,\n is_midpoint M A B ->\n on_perp C M B ->\n perp C M A B.
-----
Lemma perp_bissect_perp : forall A B M C, is_midpoint M A B -> on_perp C M B -> perp C M A B.

*****

*****
forall (A B M C : Point) (_ : is_midpoint M A B) (_ : on_perp C M B), perp C M A B
+++++
Proof.
-----
Lemma perp_bissect_perp : forall A B M C, is_midpoint M A B -> on_perp C M B -> perp C M A B.
Proof.

*****

*****
forall (A B M C : Point) (_ : is_midpoint M A B) (_ : on_perp C M B), perp C M A B
+++++
area_method.
-----
Lemma perp_bissect_perp : forall A B M C, is_midpoint M A B -> on_perp C M B -> perp C M A B.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma perp_bissect_eq_distance : forall A B M C,\n is_midpoint M A B ->\n on_perp C M B ->\n eq_distance C A C B.
-----
Lemma perp_bissect_eq_distance : forall A B M C, is_midpoint M A B -> on_perp C M B -> eq_distance C A C B.

*****

*****
forall (A B M C : Point) (_ : is_midpoint M A B) (_ : on_perp C M B), eq_distance C A C B
+++++
Proof.
-----
Lemma perp_bissect_eq_distance : forall A B M C, is_midpoint M A B -> on_perp C M B -> eq_distance C A C B.
Proof.

*****

*****
forall (A B M C : Point) (_ : is_midpoint M A B) (_ : on_perp C M B), eq_distance C A C B
+++++
area_method.
-----
Lemma perp_bissect_eq_distance : forall A B M C, is_midpoint M A B -> on_perp C M B -> eq_distance C A C B.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma perp_bissect_eq_angle : forall A B M C,\n is_midpoint M A B ->\n on_perp C M B ->\n eq_angle C A B A B C.
-----
Lemma perp_bissect_eq_angle : forall A B M C, is_midpoint M A B -> on_perp C M B -> eq_angle C A B A B C.

*****

*****
forall (A B M C : Point) (_ : is_midpoint M A B) (_ : on_perp C M B), eq_angle C A B A B C
+++++
Proof.
-----
Lemma perp_bissect_eq_angle : forall A B M C, is_midpoint M A B -> on_perp C M B -> eq_angle C A B A B C.
Proof.

*****

*****
forall (A B M C : Point) (_ : is_midpoint M A B) (_ : on_perp C M B), eq_angle C A B A B C
+++++
area_method.
-----
Lemma perp_bissect_eq_angle : forall A B M C, is_midpoint M A B -> on_perp C M B -> eq_angle C A B A B C.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma rectangle_1 : forall A B C D,\n on_perp C B A ->\n on_parallel_d D C A B (0-1) ->\n perp A D  A B.
-----
Lemma rectangle_1 : forall A B C D, on_perp C B A -> on_parallel_d D C A B (0-1) -> perp A D A B.

*****

*****
forall (A B C D : Point) (_ : on_perp C B A) (_ : on_parallel_d D C A B (Fminus F0 F1)), perp A D A B
+++++
Proof.
-----
Lemma rectangle_1 : forall A B C D, on_perp C B A -> on_parallel_d D C A B (0-1) -> perp A D A B.
Proof.

*****

*****
forall (A B C D : Point) (_ : on_perp C B A) (_ : on_parallel_d D C A B (Fminus F0 F1)), perp A D A B
+++++
area_method.
-----
Lemma rectangle_1 : forall A B C D, on_perp C B A -> on_parallel_d D C A B (0-1) -> perp A D A B.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma rectangle_2 : forall A B C D,\n on_perp C B A ->\n on_parallel_d D C A B (0-1) ->\n parallel A D B C.
-----
Lemma rectangle_2 : forall A B C D, on_perp C B A -> on_parallel_d D C A B (0-1) -> parallel A D B C.

*****

*****
forall (A B C D : Point) (_ : on_perp C B A) (_ : on_parallel_d D C A B (Fminus F0 F1)), parallel A D B C
+++++
Proof.
-----
Lemma rectangle_2 : forall A B C D, on_perp C B A -> on_parallel_d D C A B (0-1) -> parallel A D B C.
Proof.

*****

*****
forall (A B C D : Point) (_ : on_perp C B A) (_ : on_parallel_d D C A B (Fminus F0 F1)), parallel A D B C
+++++
area_method.
-----
Lemma rectangle_2 : forall A B C D, on_perp C B A -> on_parallel_d D C A B (0-1) -> parallel A D B C.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma rectangle_3 : forall A B C D I,\n on_perp C B A ->\n on_parallel_d D C A B (0-1) ->\n inter_ll I A C B D -> \n parallel A I A C ->\n A<> C ->\n A <> I ->\n A ** I / A ** C = 1 / 2.
-----
Lemma rectangle_3 : forall A B C D I, on_perp C B A -> on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> parallel A I A C -> A<> C -> A <> I -> A ** I / A ** C = 1 / 2.

*****

*****
forall (A B C D I : Point) (_ : on_perp C B A) (_ : on_parallel_d D C A B (Fminus F0 F1)) (_ : inter_ll I A C B D) (_ : parallel A I A C) (_ : not (eq A C)) (_ : not (eq A I)), eq (Fdiv (DSeg A I) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
+++++
Proof.
-----
Lemma rectangle_3 : forall A B C D I, on_perp C B A -> on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> parallel A I A C -> A<> C -> A <> I -> A ** I / A ** C = 1 / 2.
Proof.

*****

*****
forall (A B C D I : Point) (_ : on_perp C B A) (_ : on_parallel_d D C A B (Fminus F0 F1)) (_ : inter_ll I A C B D) (_ : parallel A I A C) (_ : not (eq A C)) (_ : not (eq A I)), eq (Fdiv (DSeg A I) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
+++++
am_before_field.
-----
Lemma rectangle_3 : forall A B C D I, on_perp C B A -> on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> parallel A I A C -> A<> C -> A <> I -> A ** I / A ** C = 1 / 2.
Proof.
am_before_field.

*****
H5 : eq (S B D A) F0
H4 : not (eq F0 F0)
H0 : not (eq (Fopp (DSeg C A)) F0)
H : not (eq (DSeg A I) F0)
H3 : not (eq A I)
H1 : not (eq A C)
f : F
H2 : parallel A I A C
A,B,C,D,I : Point
*****
eq F1 (Finv (Fplus F1 F1))
+++++
intuition.
-----
Lemma rectangle_3 : forall A B C D I, on_perp C B A -> on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> parallel A I A C -> A<> C -> A <> I -> A ** I / A ** C = 1 / 2.
Proof.
am_before_field.

*****
H5 : not\n (eq\n (Fminus\n (Fminus F0\n (Fmult (Fmult f (Finv (Fplus (Fplus F1 F1) (Fplus F1 F1))))\n (Py B A B)))\n (Fmult (Fminus F0 F1)\n (Fminus F0\n (Fmult\n (Fmult f (Finv (Fplus (Fplus F1 F1) (Fplus F1 F1))))\n (Py B A B))))) F0)
H4 : not\n (eq\n (Fminus F0\n (Fmult (Fmult f (Finv (Fplus (Fplus F1 F1) (Fplus F1 F1))))\n (Py B A B))) F0)
H0 : not (eq (Fopp (DSeg C A)) F0)
H : not (eq (DSeg A I) F0)
H3 : not (eq A I)
H1 : not (eq A C)
f : F
H2 : parallel A I A C
A,B,C,I : Point
*****
eq (Fmult (Fminus F0 (Fmult (Fmult f (Finv (Fplus (Fplus F1 F1) (Fplus F1 F1)))) (Py B A B))) (Finv (Fminus (Fminus F0 (Fmult (Fmult f (Finv (Fplus (Fplus F1 F1) (Fplus F1 F1)))) (Py B A B))) (Fmult (Fminus F0 F1) (Fminus F0 (Fmult (Fmult f (Finv (Fplus (Fplus F1 F1) (Fplus F1 F1)))) (Py B A B))))))) (Finv (Fplus F1 F1))
+++++
field_and_conclude.
-----
Lemma rectangle_3 : forall A B C D I, on_perp C B A -> on_parallel_d D C A B (0-1) -> inter_ll I A C B D -> parallel A I A C -> A<> C -> A <> I -> A ** I / A ** C = 1 / 2.
Proof.
am_before_field.

*****

*****

+++++
Qed.
-----
Lemma square_1 : forall A B C D,\n on_perp_d C B A 1 ->\n on_parallel_d D C A B (0-1) ->\n eq_distance A B B C.
-----
Lemma square_1 : forall A B C D, on_perp_d C B A 1 -> on_parallel_d D C A B (0-1) -> eq_distance A B B C.

*****

*****
forall (A B C D : Point) (_ : on_perp_d C B A F1) (_ : on_parallel_d D C A B (Fminus F0 F1)), eq_distance A B B C
+++++
Proof.
-----
Lemma square_1 : forall A B C D, on_perp_d C B A 1 -> on_parallel_d D C A B (0-1) -> eq_distance A B B C.
Proof.

*****

*****
forall (A B C D : Point) (_ : on_perp_d C B A F1) (_ : on_parallel_d D C A B (Fminus F0 F1)), eq_distance A B B C
+++++
area_method.
-----
Lemma square_1 : forall A B C D, on_perp_d C B A 1 -> on_parallel_d D C A B (0-1) -> eq_distance A B B C.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma square_2 : forall A B C D,\n on_perp_d C B A 1 ->\n on_parallel_d D C A B (0-1) ->\n eq_distance A B C D.
-----
Lemma square_2 : forall A B C D, on_perp_d C B A 1 -> on_parallel_d D C A B (0-1) -> eq_distance A B C D.

*****

*****
forall (A B C D : Point) (_ : on_perp_d C B A F1) (_ : on_parallel_d D C A B (Fminus F0 F1)), eq_distance A B C D
+++++
Proof.
-----
Lemma square_2 : forall A B C D, on_perp_d C B A 1 -> on_parallel_d D C A B (0-1) -> eq_distance A B C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : on_perp_d C B A F1) (_ : on_parallel_d D C A B (Fminus F0 F1)), eq_distance A B C D
+++++
area_method.
-----
Lemma square_2 : forall A B C D, on_perp_d C B A 1 -> on_parallel_d D C A B (0-1) -> eq_distance A B C D.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma circle_square_triangle : forall A B C M,\nis_midpoint M B C ->\non_perp C A B ->\neq_distance M B M A.
-----
Lemma circle_square_triangle : forall A B C M, is_midpoint M B C -> on_perp C A B -> eq_distance M B M A.

*****

*****
forall (A B C M : Point) (_ : is_midpoint M B C) (_ : on_perp C A B), eq_distance M B M A
+++++
Proof.
-----
Lemma circle_square_triangle : forall A B C M, is_midpoint M B C -> on_perp C A B -> eq_distance M B M A.
Proof.

*****

*****
forall (A B C M : Point) (_ : is_midpoint M B C) (_ : on_perp C A B), eq_distance M B M A
+++++
area_method.
-----
Lemma circle_square_triangle : forall A B C M, is_midpoint M B C -> on_perp C A B -> eq_distance M B M A.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_264 : forall A B C F H,\n on_perp_d F A B 1 ->\n on_perp_d H A C (0-1) ->\n S A B C = S A H F.
-----
Lemma l_6_264 : forall A B C F H, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> S A B C = S A H F.

*****

*****
forall (A B C F2 H : Point) (_ : on_perp_d F2 A B F1) (_ : on_perp_d H A C (Fminus F0 F1)), eq (S A B C) (S A H F2)
+++++
Proof.
-----
Lemma l_6_264 : forall A B C F H, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> S A B C = S A H F.
Proof.

*****

*****
forall (A B C F2 H : Point) (_ : on_perp_d F2 A B F1) (_ : on_perp_d H A C (Fminus F0 F1)), eq (S A B C) (S A H F2)
+++++
area_method.
-----
Lemma l_6_264 : forall A B C F H, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> S A B C = S A H F.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_266 : forall A B C F H N,\n on_perp_d F A B 1 ->\n on_perp_d H A C (0-1) ->\n is_midpoint N F H ->\n perp N A B C.
-----
Lemma l_6_266 : forall A B C F H N, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> is_midpoint N F H -> perp N A B C.

*****

*****
forall (A B C F H N : Point) (_ : on_perp_d F A B F1) (_ : on_perp_d H A C (Fminus F0 F1)) (_ : is_midpoint N F H), perp N A B C
+++++
Proof.
-----
Lemma l_6_266 : forall A B C F H N, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> is_midpoint N F H -> perp N A B C.
Proof.

*****

*****
forall (A B C F H N : Point) (_ : on_perp_d F A B F1) (_ : on_perp_d H A C (Fminus F0 F1)) (_ : is_midpoint N F H), perp N A B C
+++++
area_method.
-----
Lemma l_6_266 : forall A B C F H N, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> is_midpoint N F H -> perp N A B C.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_267 : forall A B C F H,\n on_perp_d F A B 1 ->\n on_perp_d H A C (0-1) ->\n eq_distance F C B H.
-----
Lemma l_6_267 : forall A B C F H, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> eq_distance F C B H.

*****

*****
forall (A B C F H : Point) (_ : on_perp_d F A B F1) (_ : on_perp_d H A C (Fminus F0 F1)), eq_distance F C B H
+++++
Proof.
-----
Lemma l_6_267 : forall A B C F H, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> eq_distance F C B H.
Proof.

*****

*****
forall (A B C F H : Point) (_ : on_perp_d F A B F1) (_ : on_perp_d H A C (Fminus F0 F1)), eq_distance F C B H
+++++
area_method.
-----
Lemma l_6_267 : forall A B C F H, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> eq_distance F C B H.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_268 : forall A B C F H,\n on_perp_d F A B 1 ->\n on_perp_d H A C (0-1) ->\n perp F C B H.
-----
Lemma l_6_268 : forall A B C F H, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> perp F C B H.

*****

*****
forall (A B C F H : Point) (_ : on_perp_d F A B F1) (_ : on_perp_d H A C (Fminus F0 F1)), perp F C B H
+++++
Proof.
-----
Lemma l_6_268 : forall A B C F H, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> perp F C B H.
Proof.

*****

*****
forall (A B C F H : Point) (_ : on_perp_d F A B F1) (_ : on_perp_d H A C (Fminus F0 F1)), perp F C B H
+++++
area_method.
-----
Lemma l_6_268 : forall A B C F H, on_perp_d F A B 1 -> on_perp_d H A C (0-1) -> perp F C B H.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_269 : forall A B C D F E G,\n on_perp_d D B A 1 ->\n on_foot F D B C ->\n on_perp_d E C A (0-1) ->\n on_foot G E B C ->\n S A B C = S B D F + S C G E.
-----
Lemma l_6_269 : forall A B C D F E G, on_perp_d D B A 1 -> on_foot F D B C -> on_perp_d E C A (0-1) -> on_foot G E B C -> S A B C = S B D F + S C G E.

*****

*****
forall (A B C D F2 E G : Point) (_ : on_perp_d D B A F1) (_ : on_foot F2 D B C) (_ : on_perp_d E C A (Fminus F0 F1)) (_ : on_foot G E B C), eq (S A B C) (Fplus (S B D F2) (S C G E))
+++++
Proof.
-----
Lemma l_6_269 : forall A B C D F E G, on_perp_d D B A 1 -> on_foot F D B C -> on_perp_d E C A (0-1) -> on_foot G E B C -> S A B C = S B D F + S C G E.
Proof.

*****

*****
forall (A B C D F2 E G : Point) (_ : on_perp_d D B A F1) (_ : on_foot F2 D B C) (_ : on_perp_d E C A (Fminus F0 F1)) (_ : on_foot G E B C), eq (S A B C) (Fplus (S B D F2) (S C G E))
+++++
area_method.
-----
Lemma l_6_269 : forall A B C D F E G, on_perp_d D B A 1 -> on_foot F D B C -> on_perp_d E C A (0-1) -> on_foot G E B C -> S A B C = S B D F + S C G E.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_270 : forall A B C E G P,\n on_perp_d E B A 1 ->\n on_perp_d G C A (0-1) ->\n is_midpoint P E G ->\n eq_distance B P C P.
-----
Lemma l_6_270 : forall A B C E G P, on_perp_d E B A 1 -> on_perp_d G C A (0-1) -> is_midpoint P E G -> eq_distance B P C P.

*****

*****
forall (A B C E G P : Point) (_ : on_perp_d E B A F1) (_ : on_perp_d G C A (Fminus F0 F1)) (_ : is_midpoint P E G), eq_distance B P C P
+++++
Proof.
-----
Lemma l_6_270 : forall A B C E G P, on_perp_d E B A 1 -> on_perp_d G C A (0-1) -> is_midpoint P E G -> eq_distance B P C P.
Proof.

*****

*****
forall (A B C E G P : Point) (_ : on_perp_d E B A F1) (_ : on_perp_d G C A (Fminus F0 F1)) (_ : is_midpoint P E G), eq_distance B P C P
+++++
area_method.
-----
Lemma l_6_270 : forall A B C E G P, on_perp_d E B A 1 -> on_perp_d G C A (0-1) -> is_midpoint P E G -> eq_distance B P C P.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_271 : forall B C D G E r,\n  on_perp_d B C D 1 ->\n  on_line_d G C D r ->\n  on_line_d E C B (0-r) ->\n  perp D E B G.
-----
Lemma l_6_271 : forall B C D G E r, on_perp_d B C D 1 -> on_line_d G C D r -> on_line_d E C B (0-r) -> perp D E B G.

*****

*****
forall (B C D G E : Point) (r : F) (_ : on_perp_d B C D F1) (_ : on_line_d G C D r) (_ : on_line_d E C B (Fminus F0 r)), perp D E B G
+++++
Proof.
-----
Lemma l_6_271 : forall B C D G E r, on_perp_d B C D 1 -> on_line_d G C D r -> on_line_d E C B (0-r) -> perp D E B G.
Proof.

*****

*****
forall (B C D G E : Point) (r : F) (_ : on_perp_d B C D F1) (_ : on_line_d G C D r) (_ : on_line_d E C B (Fminus F0 r)), perp D E B G
+++++
area_method.
-----
Lemma l_6_271 : forall B C D G E r, on_perp_d B C D 1 -> on_line_d G C D r -> on_line_d E C B (0-r) -> perp D E B G.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_222 : forall A B C D P Q R S,\nis_midpoint P A B ->\nis_midpoint Q B C ->\nis_midpoint S D A ->\nis_midpoint R C D ->\nPy A C A + Py B D B = 2* (Py Q S Q + Py P R P).
-----
Lemma l6_222 : forall A B C D P Q R S, is_midpoint P A B -> is_midpoint Q B C -> is_midpoint S D A -> is_midpoint R C D -> Py A C A + Py B D B = 2* (Py Q S Q + Py P R P).

*****

*****
forall (A B C D P Q R S : Point) (_ : is_midpoint P A B) (_ : is_midpoint Q B C) (_ : is_midpoint S D A) (_ : is_midpoint R C D), eq (Fplus (Py A C A) (Py B D B)) (Fmult (Fplus F1 F1) (Fplus (Py Q S Q) (Py P R P)))
+++++
Proof.
-----
Lemma l6_222 : forall A B C D P Q R S, is_midpoint P A B -> is_midpoint Q B C -> is_midpoint S D A -> is_midpoint R C D -> Py A C A + Py B D B = 2* (Py Q S Q + Py P R P).
Proof.

*****

*****
forall (A B C D P Q R S : Point) (_ : is_midpoint P A B) (_ : is_midpoint Q B C) (_ : is_midpoint S D A) (_ : is_midpoint R C D), eq (Fplus (Py A C A) (Py B D B)) (Fmult (Fplus F1 F1) (Fplus (Py Q S Q) (Py P R P)))
+++++
area_method.
-----
Lemma l6_222 : forall A B C D P Q R S, is_midpoint P A B -> is_midpoint Q B C -> is_midpoint S D A -> is_midpoint R C D -> Py A C A + Py B D B = 2* (Py Q S Q + Py P R P).
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_3_40 : forall A B C E G,\non_perp_d E A B 1 ->\non_perp_d G A C (0 - 1) ->\nperp E C G B.
-----
Lemma l_3_40 : forall A B C E G, on_perp_d E A B 1 -> on_perp_d G A C (0 - 1) -> perp E C G B.

*****

*****
forall (A B C E G : Point) (_ : on_perp_d E A B F1) (_ : on_perp_d G A C (Fminus F0 F1)), perp E C G B
+++++
Proof.
-----
Lemma l_3_40 : forall A B C E G, on_perp_d E A B 1 -> on_perp_d G A C (0 - 1) -> perp E C G B.
Proof.

*****

*****
forall (A B C E G : Point) (_ : on_perp_d E A B F1) (_ : on_perp_d G A C (Fminus F0 F1)), perp E C G B
+++++
area_method.
-----
Lemma l_3_40 : forall A B C E G, on_perp_d E A B 1 -> on_perp_d G A C (0 - 1) -> perp E C G B.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_3_41 : forall A B C D F M,\non_perp_d D C A 1 ->\non_perp_d F C B (0-1) ->\nis_midpoint M A B ->\nperp D F C M.
-----
Lemma l_3_41 : forall A B C D F M, on_perp_d D C A 1 -> on_perp_d F C B (0-1) -> is_midpoint M A B -> perp D F C M.

*****

*****
forall (A B C D F M : Point) (_ : on_perp_d D C A F1) (_ : on_perp_d F C B (Fminus F0 F1)) (_ : is_midpoint M A B), perp D F C M
+++++
Proof.
-----
Lemma l_3_41 : forall A B C D F M, on_perp_d D C A 1 -> on_perp_d F C B (0-1) -> is_midpoint M A B -> perp D F C M.
Proof.

*****

*****
forall (A B C D F M : Point) (_ : on_perp_d D C A F1) (_ : on_perp_d F C B (Fminus F0 F1)) (_ : is_midpoint M A B), perp D F C M
+++++
area_method.
-----
Lemma l_3_41 : forall A B C D F M, on_perp_d D C A 1 -> on_perp_d F C B (0-1) -> is_midpoint M A B -> perp D F C M.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma test_elim : forall A B C D Q,\n  is_midpoint Q B C ->\n  Py A Q A + Py A Q D = Py Q A Q + Py A Q D.
-----
Lemma test_elim : forall A B C D Q, is_midpoint Q B C -> Py A Q A + Py A Q D = Py Q A Q + Py A Q D.

*****

*****
forall (A B C D Q : Point) (_ : is_midpoint Q B C), eq (Fplus (Py A Q A) (Py A Q D)) (Fplus (Py Q A Q) (Py A Q D))
+++++
Proof.
-----
Lemma test_elim : forall A B C D Q, is_midpoint Q B C -> Py A Q A + Py A Q D = Py Q A Q + Py A Q D.
Proof.

*****

*****
forall (A B C D Q : Point) (_ : is_midpoint Q B C), eq (Fplus (Py A Q A) (Py A Q D)) (Fplus (Py Q A Q) (Py A Q D))
+++++
area_method.
-----
Lemma test_elim : forall A B C D Q, is_midpoint Q B C -> Py A Q A + Py A Q D = Py Q A Q + Py A Q D.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_134 : forall A B C M D E F I J,\n on_foot M A B C ->\n is_midpoint D B C ->\n is_midpoint E A C ->\n is_midpoint F A B ->\n is_midpoint I E F ->\n is_midpoint J M D ->\n B<>C ->\n parallel I J A M.
-----
Lemma l_6_134 : forall A B C M D E F I J, on_foot M A B C -> is_midpoint D B C -> is_midpoint E A C -> is_midpoint F A B -> is_midpoint I E F -> is_midpoint J M D -> B<>C -> parallel I J A M.

*****

*****
forall (A B C M D E F I J : Point) (_ : on_foot M A B C) (_ : is_midpoint D B C) (_ : is_midpoint E A C) (_ : is_midpoint F A B) (_ : is_midpoint I E F) (_ : is_midpoint J M D) (_ : not (eq B C)), parallel I J A M
+++++
Proof.
-----
Lemma l_6_134 : forall A B C M D E F I J, on_foot M A B C -> is_midpoint D B C -> is_midpoint E A C -> is_midpoint F A B -> is_midpoint I E F -> is_midpoint J M D -> B<>C -> parallel I J A M.
Proof.

*****

*****
forall (A B C M D E F I J : Point) (_ : on_foot M A B C) (_ : is_midpoint D B C) (_ : is_midpoint E A C) (_ : is_midpoint F A B) (_ : is_midpoint I E F) (_ : is_midpoint J M D) (_ : not (eq B C)), parallel I J A M
+++++
area_method.
-----
Lemma l_6_134 : forall A B C M D E F I J, on_foot M A B C -> is_midpoint D B C -> is_midpoint E A C -> is_midpoint F A B -> is_midpoint I E F -> is_midpoint J M D -> B<>C -> parallel I J A M.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma nine_point_1 : forall A B C A' B' C' M, \n is_midpoint A' B C ->\n is_midpoint B' A C ->\n is_midpoint C' A B ->\n on_foot M A B C ->\n co_circle M A' B' C'.
-----
Lemma nine_point_1 : forall A B C A' B' C' M, is_midpoint A' B C -> is_midpoint B' A C -> is_midpoint C' A B -> on_foot M A B C -> co_circle M A' B' C'.

*****

*****
forall (A B C A' B' C' M : Point) (_ : is_midpoint A' B C) (_ : is_midpoint B' A C) (_ : is_midpoint C' A B) (_ : on_foot M A B C), co_circle M A' B' C'
+++++
Proof.
-----
Lemma nine_point_1 : forall A B C A' B' C' M, is_midpoint A' B C -> is_midpoint B' A C -> is_midpoint C' A B -> on_foot M A B C -> co_circle M A' B' C'.
Proof.

*****

*****
forall (A B C A' B' C' M : Point) (_ : is_midpoint A' B C) (_ : is_midpoint B' A C) (_ : is_midpoint C' A B) (_ : on_foot M A B C), co_circle M A' B' C'
+++++
area_method.
-----
Lemma nine_point_1 : forall A B C A' B' C' M, is_midpoint A' B C -> is_midpoint B' A C -> is_midpoint C' A B -> on_foot M A B C -> co_circle M A' B' C'.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_265 : forall A B C M F H,\n is_midpoint M B C ->\n on_perp_d F A B 1 ->\n on_perp_d H A C (- (1)) ->\n Py H F H = (2+2) * Py M A M.
-----
Lemma l_6_265 : forall A B C M F H, is_midpoint M B C -> on_perp_d F A B 1 -> on_perp_d H A C (- (1)) -> Py H F H = (2+2) * Py M A M.

*****

*****
forall (A B C M F0 H : Point) (_ : is_midpoint M B C) (_ : on_perp_d F0 A B F1) (_ : on_perp_d H A C (Fopp F1)), eq (Py H F0 H) (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Py M A M))
+++++
Proof.
-----
Lemma l_6_265 : forall A B C M F H, is_midpoint M B C -> on_perp_d F A B 1 -> on_perp_d H A C (- (1)) -> Py H F H = (2+2) * Py M A M.
Proof.

*****

*****
forall (A B C M F0 H : Point) (_ : is_midpoint M B C) (_ : on_perp_d F0 A B F1) (_ : on_perp_d H A C (Fopp F1)), eq (Py H F0 H) (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Py M A M))
+++++
area_method.
-----
Lemma l_6_265 : forall A B C M F H, is_midpoint M B C -> on_perp_d F A B 1 -> on_perp_d H A C (- (1)) -> Py H F H = (2+2) * Py M A M.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l3_51: forall A B C D J M N,\n on_foot D A B C ->\n on_line J A D ->\n inter_ll M A B C J ->\n inter_ll N A C B J ->\n eq_angle M D A A D N.
-----
Lemma l3_51: forall A B C D J M N, on_foot D A B C -> on_line J A D -> inter_ll M A B C J -> inter_ll N A C B J -> eq_angle M D A A D N.

*****

*****
forall (A B C D J M N : Point) (_ : on_foot D A B C) (_ : on_line J A D) (_ : inter_ll M A B C J) (_ : inter_ll N A C B J), eq_angle M D A A D N
+++++
Proof.
-----
Lemma l3_51: forall A B C D J M N, on_foot D A B C -> on_line J A D -> inter_ll M A B C J -> inter_ll N A C B J -> eq_angle M D A A D N.
Proof.

*****

*****
forall (A B C D J M N : Point) (_ : on_foot D A B C) (_ : on_line J A D) (_ : inter_ll M A B C J) (_ : inter_ll N A C B J), eq_angle M D A A D N
+++++
area_method.
-----
Lemma l3_51: forall A B C D J M N, on_foot D A B C -> on_line J A D -> inter_ll M A B C J -> inter_ll N A C B J -> eq_angle M D A A D N.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_17 : forall A B R P Q S C F,\n on_line P B R ->\n on_line Q A R ->\n inter_ll S A P B Q ->\n inter_ll C R S A B ->\n inter_ll F P Q A B ->\n parallel A C B C ->\n parallel A F B F ->\n B<>C -> B<>F ->\n A**C / B**C = - A**F / B**F.
-----
Lemma l6_17 : forall A B R P Q S C F, on_line P B R -> on_line Q A R -> inter_ll S A P B Q -> inter_ll C R S A B -> inter_ll F P Q A B -> parallel A C B C -> parallel A F B F -> B<>C -> B<>F -> A**C / B**C = - A**F / B**F.

*****

*****
forall (A B R P Q S C F0 : Point) (_ : on_line P B R) (_ : on_line Q A R) (_ : inter_ll S A P B Q) (_ : inter_ll C R S A B) (_ : inter_ll F0 P Q A B) (_ : parallel A C B C) (_ : parallel A F0 B F0) (_ : not (eq B C)) (_ : not (eq B F0)), eq (Fdiv (DSeg A C) (DSeg B C)) (Fdiv (Fopp (DSeg A F0)) (DSeg B F0))
+++++
Proof.
-----
Lemma l6_17 : forall A B R P Q S C F, on_line P B R -> on_line Q A R -> inter_ll S A P B Q -> inter_ll C R S A B -> inter_ll F P Q A B -> parallel A C B C -> parallel A F B F -> B<>C -> B<>F -> A**C / B**C = - A**F / B**F.
Proof.

*****

*****
forall (A B R P Q S C F0 : Point) (_ : on_line P B R) (_ : on_line Q A R) (_ : inter_ll S A P B Q) (_ : inter_ll C R S A B) (_ : inter_ll F0 P Q A B) (_ : parallel A C B C) (_ : parallel A F0 B F0) (_ : not (eq B C)) (_ : not (eq B F0)), eq (Fdiv (DSeg A C) (DSeg B C)) (Fdiv (Fopp (DSeg A F0)) (DSeg B F0))
+++++
area_method.
-----
Lemma l6_17 : forall A B R P Q S C F, on_line P B R -> on_line Q A R -> inter_ll S A P B Q -> inter_ll C R S A B -> inter_ll F P Q A B -> parallel A C B C -> parallel A F B F -> B<>C -> B<>F -> A**C / B**C = - A**F / B**F.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_6_272 : forall A B C M E P G Q L,\n  is_midpoint M B C ->\n  on_perp_d E A B 1 ->\n  is_midpoint P B E ->\n  on_perp_d G A C (0-1) ->\n  is_midpoint Q C G ->\n  is_midpoint L E G ->\n  eq_distance P M L Q.
-----
Lemma l_6_272 : forall A B C M E P G Q L, is_midpoint M B C -> on_perp_d E A B 1 -> is_midpoint P B E -> on_perp_d G A C (0-1) -> is_midpoint Q C G -> is_midpoint L E G -> eq_distance P M L Q.

*****

*****
forall (A B C M E P G Q L : Point) (_ : is_midpoint M B C) (_ : on_perp_d E A B F1) (_ : is_midpoint P B E) (_ : on_perp_d G A C (Fminus F0 F1)) (_ : is_midpoint Q C G) (_ : is_midpoint L E G), eq_distance P M L Q
+++++
Proof.
-----
Lemma l_6_272 : forall A B C M E P G Q L, is_midpoint M B C -> on_perp_d E A B 1 -> is_midpoint P B E -> on_perp_d G A C (0-1) -> is_midpoint Q C G -> is_midpoint L E G -> eq_distance P M L Q.
Proof.

*****

*****
forall (A B C M E P G Q L : Point) (_ : is_midpoint M B C) (_ : on_perp_d E A B F1) (_ : is_midpoint P B E) (_ : on_perp_d G A C (Fminus F0 F1)) (_ : is_midpoint Q C G) (_ : is_midpoint L E G), eq_distance P M L Q
+++++
area_method.
-----
Lemma l_6_272 : forall A B C M E P G Q L, is_midpoint M B C -> on_perp_d E A B 1 -> is_midpoint P B E -> on_perp_d G A C (0-1) -> is_midpoint Q C G -> is_midpoint L E G -> eq_distance P M L Q.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_84 : forall  A B C D E F G,\n on_foot D C A B ->\n on_foot E B A C ->\n is_midpoint F B C ->\n is_midpoint G D E ->\n perp G F D E.
-----
Lemma l6_84 : forall A B C D E F G, on_foot D C A B -> on_foot E B A C -> is_midpoint F B C -> is_midpoint G D E -> perp G F D E.

*****

*****
forall (A B C D E F G : Point) (_ : on_foot D C A B) (_ : on_foot E B A C) (_ : is_midpoint F B C) (_ : is_midpoint G D E), perp G F D E
+++++
Proof.
-----
Lemma l6_84 : forall A B C D E F G, on_foot D C A B -> on_foot E B A C -> is_midpoint F B C -> is_midpoint G D E -> perp G F D E.
Proof.

*****

*****
forall (A B C D E F G : Point) (_ : on_foot D C A B) (_ : on_foot E B A C) (_ : is_midpoint F B C) (_ : is_midpoint G D E), perp G F D E
+++++
area_method.
-----
Lemma l6_84 : forall A B C D E F G, on_foot D C A B -> on_foot E B A C -> is_midpoint F B C -> is_midpoint G D E -> perp G F D E.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l_3_45 : forall A B C E F G A1 B1 C1 r,\n is_midpoint E A C ->\n on_perp_d B1 E A r ->\n is_midpoint F B C ->\n on_perp_d A1 F C r ->\n is_midpoint G A B ->\n on_perp_d C1 G B (0-r) ->\n parallel A1 C1 C B1.
-----
Lemma l_3_45 : forall A B C E F G A1 B1 C1 r, is_midpoint E A C -> on_perp_d B1 E A r -> is_midpoint F B C -> on_perp_d A1 F C r -> is_midpoint G A B -> on_perp_d C1 G B (0-r) -> parallel A1 C1 C B1.

*****

*****
forall (A B C E F1 G A1 B1 C1 : Point) (r : F) (_ : is_midpoint E A C) (_ : on_perp_d B1 E A r) (_ : is_midpoint F1 B C) (_ : on_perp_d A1 F1 C r) (_ : is_midpoint G A B) (_ : on_perp_d C1 G B (Fminus F0 r)), parallel A1 C1 C B1
+++++
Proof.
-----
Lemma l_3_45 : forall A B C E F G A1 B1 C1 r, is_midpoint E A C -> on_perp_d B1 E A r -> is_midpoint F B C -> on_perp_d A1 F C r -> is_midpoint G A B -> on_perp_d C1 G B (0-r) -> parallel A1 C1 C B1.
Proof.

*****

*****
forall (A B C E F1 G A1 B1 C1 : Point) (r : F) (_ : is_midpoint E A C) (_ : on_perp_d B1 E A r) (_ : is_midpoint F1 B C) (_ : on_perp_d A1 F1 C r) (_ : is_midpoint G A B) (_ : on_perp_d C1 G B (Fminus F0 r)), parallel A1 C1 C B1
+++++
area_method.
-----
Lemma l_3_45 : forall A B C E F G A1 B1 C1 r, is_midpoint E A C -> on_perp_d B1 E A r -> is_midpoint F B C -> on_perp_d A1 F C r -> is_midpoint G A B -> on_perp_d C1 G B (0-r) -> parallel A1 C1 C B1.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_46 : forall A B C F N K J,\n is_midpoint F A B ->\n on_line N C F ->\n on_foot K N A C ->\n on_foot J N B C ->\n Py N K N * Py A C A = Py N J N * Py B C B.
-----
Lemma l6_46 : forall A B C F N K J, is_midpoint F A B -> on_line N C F -> on_foot K N A C -> on_foot J N B C -> Py N K N * Py A C A = Py N J N * Py B C B.

*****

*****
forall (A B C F0 N K J : Point) (_ : is_midpoint F0 A B) (_ : on_line N C F0) (_ : on_foot K N A C) (_ : on_foot J N B C), eq (Fmult (Py N K N) (Py A C A)) (Fmult (Py N J N) (Py B C B))
+++++
Proof.
-----
Lemma l6_46 : forall A B C F N K J, is_midpoint F A B -> on_line N C F -> on_foot K N A C -> on_foot J N B C -> Py N K N * Py A C A = Py N J N * Py B C B.
Proof.

*****

*****
forall (A B C F0 N K J : Point) (_ : is_midpoint F0 A B) (_ : on_line N C F0) (_ : on_foot K N A C) (_ : on_foot J N B C), eq (Fmult (Py N K N) (Py A C A)) (Fmult (Py N J N) (Py B C B))
+++++
area_method.
-----
Lemma l6_46 : forall A B C F N K J, is_midpoint F A B -> on_line N C F -> on_foot K N A C -> on_foot J N B C -> Py N K N * Py A C A = Py N J N * Py B C B.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_44 : forall A B C G P Q I J,\nis_midpoint J A C ->\nis_midpoint I B C ->\ninter_ll G J B I A ->\non_inter_line_parallel P G A B B C ->\non_inter_line_parallel Q G A C B C ->\nG<>P ->\nG<>Q -> \n(2+2)*S4 P Q C B = (2+2+1)*S A Q P.
-----
Lemma l6_44 : forall A B C G P Q I J, is_midpoint J A C -> is_midpoint I B C -> inter_ll G J B I A -> on_inter_line_parallel P G A B B C -> on_inter_line_parallel Q G A C B C -> G<>P -> G<>Q -> (2+2)*S4 P Q C B = (2+2+1)*S A Q P.

*****

*****
forall (A B C G P Q I J : Point) (_ : is_midpoint J A C) (_ : is_midpoint I B C) (_ : inter_ll G J B I A) (_ : on_inter_line_parallel P G A B B C) (_ : on_inter_line_parallel Q G A C B C) (_ : not (eq G P)) (_ : not (eq G Q)), eq (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S4 P Q C B)) (Fmult (Fplus (Fplus (Fplus F1 F1) (Fplus F1 F1)) F1) (S A Q P))
+++++
Proof.
-----
Lemma l6_44 : forall A B C G P Q I J, is_midpoint J A C -> is_midpoint I B C -> inter_ll G J B I A -> on_inter_line_parallel P G A B B C -> on_inter_line_parallel Q G A C B C -> G<>P -> G<>Q -> (2+2)*S4 P Q C B = (2+2+1)*S A Q P.
Proof.

*****

*****
forall (A B C G P Q I J : Point) (_ : is_midpoint J A C) (_ : is_midpoint I B C) (_ : inter_ll G J B I A) (_ : on_inter_line_parallel P G A B B C) (_ : on_inter_line_parallel Q G A C B C) (_ : not (eq G P)) (_ : not (eq G Q)), eq (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S4 P Q C B)) (Fmult (Fplus (Fplus (Fplus F1 F1) (Fplus F1 F1)) F1) (S A Q P))
+++++
area_method.
-----
Lemma l6_44 : forall A B C G P Q I J, is_midpoint J A C -> is_midpoint I B C -> inter_ll G J B I A -> on_inter_line_parallel P G A B B C -> on_inter_line_parallel Q G A C B C -> G<>P -> G<>Q -> (2+2)*S4 P Q C B = (2+2+1)*S A Q P.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem th6_259 :\n forall A B C D E F G H R L : Point,\n on_parallel_d E A B D 1 ->\n on_parallel_d G A C F 1 ->\n inter_ll H D E F G ->\n inter_ll R B C H A -> \n on_parallel_d L B H A 1 -> \n S F A B <> 0 -> \n S A C F + S B A D = S C B L.
-----
Theorem th6_259 : forall A B C D E F G H R L : Point, on_parallel_d E A B D 1 -> on_parallel_d G A C F 1 -> inter_ll H D E F G -> inter_ll R B C H A -> on_parallel_d L B H A 1 -> S F A B <> 0 -> S A C F + S B A D = S C B L.

*****

*****
forall (A B C D E F2 G H R L : Point) (_ : on_parallel_d E A B D F1) (_ : on_parallel_d G A C F2 F1) (_ : inter_ll H D E F2 G) (_ : inter_ll R B C H A) (_ : on_parallel_d L B H A F1) (_ : not (eq (S F2 A B) F0)), eq (Fplus (S A C F2) (S B A D)) (S C B L)
+++++
Proof.
-----
Theorem th6_259 : forall A B C D E F G H R L : Point, on_parallel_d E A B D 1 -> on_parallel_d G A C F 1 -> inter_ll H D E F G -> inter_ll R B C H A -> on_parallel_d L B H A 1 -> S F A B <> 0 -> S A C F + S B A D = S C B L.
Proof.

*****

*****
forall (A B C D E F2 G H R L : Point) (_ : on_parallel_d E A B D F1) (_ : on_parallel_d G A C F2 F1) (_ : inter_ll H D E F2 G) (_ : inter_ll R B C H A) (_ : on_parallel_d L B H A F1) (_ : not (eq (S F2 A B) F0)), eq (Fplus (S A C F2) (S B A D)) (S C B L)
+++++
area_method.
-----
Theorem th6_259 : forall A B C D E F G H R L : Point, on_parallel_d E A B D 1 -> on_parallel_d G A C F 1 -> inter_ll H D E F G -> inter_ll R B C H A -> on_parallel_d L B H A 1 -> S F A B <> 0 -> S A C F + S B A D = S C B L.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
