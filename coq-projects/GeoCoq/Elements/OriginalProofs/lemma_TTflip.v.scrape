Require Export GeoCoq.Elements.OriginalProofs.lemma_TGflip.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_TGsymmetric.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_TTflip : \n   forall A B C D E F G H, \n   TT A B C D E F G H ->\n   TT B A D C E F G H.
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F G H : Point) (_ : TT A B C D E F G H), TT B A D C E F G H
+++++
Proof.
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F G H : Point) (_ : TT A B C D E F G H), TT B A D C E F G H
+++++
intros.
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.
Proof.
intros.

*****
H0 : TT A B C D E F G H
A,B,C,D,E,F,G,H : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TT B A D C E F G H
+++++
let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\ Cong F J G H /\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\\ Cong F J G H /\\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.

*****
H3 : TG A B C D E J
H2 : Cong F J G H
H1 : BetS E F J
J : Point
H0 : TT A B C D E F G H
A,B,C,D,E,F,G,H : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TT B A D C E F G H
+++++
assert (TG B A C D E J) by (forward_using lemma_TGflip).
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\\ Cong F J G H /\\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.
assert (TG B A C D E J) by (forward_using lemma_TGflip).

*****
H4 : TG B A C D E J
H3 : TG A B C D E J
H2 : Cong F J G H
H1 : BetS E F J
J : Point
H0 : TT A B C D E F G H
A,B,C,D,E,F,G,H : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TT B A D C E F G H
+++++
assert (TG C D B A E J) by (conclude lemma_TGsymmetric).
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\\ Cong F J G H /\\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.
assert (TG B A C D E J) by (forward_using lemma_TGflip).
assert (TG C D B A E J) by (conclude lemma_TGsymmetric).

*****
H5 : TG C D B A E J
H4 : TG B A C D E J
H3 : TG A B C D E J
H2 : Cong F J G H
H1 : BetS E F J
J : Point
H0 : TT A B C D E F G H
A,B,C,D,E,F,G,H : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TT B A D C E F G H
+++++
assert (TG D C B A E J) by (forward_using lemma_TGflip).
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\\ Cong F J G H /\\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.
assert (TG B A C D E J) by (forward_using lemma_TGflip).
assert (TG C D B A E J) by (conclude lemma_TGsymmetric).
assert (TG D C B A E J) by (forward_using lemma_TGflip).

*****
H6 : TG D C B A E J
H5 : TG C D B A E J
H4 : TG B A C D E J
H3 : TG A B C D E J
H2 : Cong F J G H
H1 : BetS E F J
J : Point
H0 : TT A B C D E F G H
A,B,C,D,E,F,G,H : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TT B A D C E F G H
+++++
assert (TG B A D C E J) by (conclude lemma_TGsymmetric).
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\\ Cong F J G H /\\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.
assert (TG B A C D E J) by (forward_using lemma_TGflip).
assert (TG C D B A E J) by (conclude lemma_TGsymmetric).
assert (TG D C B A E J) by (forward_using lemma_TGflip).
assert (TG B A D C E J) by (conclude lemma_TGsymmetric).

*****
H7 : TG B A D C E J
H6 : TG D C B A E J
H5 : TG C D B A E J
H4 : TG B A C D E J
H3 : TG A B C D E J
H2 : Cong F J G H
H1 : BetS E F J
J : Point
H0 : TT A B C D E F G H
A,B,C,D,E,F,G,H : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TT B A D C E F G H
+++++
assert (TT B A D C E F G H) by (conclude_def TT ).
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\\ Cong F J G H /\\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.
assert (TG B A C D E J) by (forward_using lemma_TGflip).
assert (TG C D B A E J) by (conclude lemma_TGsymmetric).
assert (TG D C B A E J) by (forward_using lemma_TGflip).
assert (TG B A D C E J) by (conclude lemma_TGsymmetric).
assert (TT B A D C E F G H) by (conclude_def TT ).

*****
H8 : TT B A D C E F G H
H7 : TG B A D C E J
H6 : TG D C B A E J
H5 : TG C D B A E J
H4 : TG B A C D E J
H3 : TG A B C D E J
H2 : Cong F J G H
H1 : BetS E F J
J : Point
H0 : TT A B C D E F G H
A,B,C,D,E,F,G,H : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TT B A D C E F G H
+++++
close.
-----
Lemma lemma_TTflip : forall A B C D E F G H, TT A B C D E F G H -> TT B A D C E F G H.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\\ Cong F J G H /\\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.
assert (TG B A C D E J) by (forward_using lemma_TGflip).
assert (TG C D B A E J) by (conclude lemma_TGsymmetric).
assert (TG D C B A E J) by (forward_using lemma_TGflip).
assert (TG B A D C E J) by (conclude lemma_TGsymmetric).
assert (TT B A D C E F G H) by (conclude_def TT ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
