Require  Import area_method.
-----
Lemma test_on_line_4 : forall I X Y A B C , \n  on_line I X Y -> B<>C -> parallel A I B C ->\n  False ->\n  A**I/B**C = 1.
-----
Lemma test_on_line_4 : forall I X Y A B C , on_line I X Y -> B<>C -> parallel A I B C -> False -> A**I/B**C = 1.

*****

*****
forall (I X Y A B C : Point) (_ : on_line I X Y) (_ : not (eq B C)) (_ : parallel A I B C) (_ : False), eq (Fdiv (DSeg A I) (DSeg B C)) F1
+++++
Proof.
-----
Lemma test_on_line_4 : forall I X Y A B C , on_line I X Y -> B<>C -> parallel A I B C -> False -> A**I/B**C = 1.
Proof.

*****

*****
forall (I X Y A B C : Point) (_ : on_line I X Y) (_ : not (eq B C)) (_ : parallel A I B C) (_ : False), eq (Fdiv (DSeg A I) (DSeg B C)) F1
+++++
geoInit.
-----
Lemma test_on_line_4 : forall I X Y A B C , on_line I X Y -> B<>C -> parallel A I B C -> False -> A**I/B**C = 1.
Proof.
geoInit.

*****
H0 : not (eq B C)
H : not (eq (DSeg B C) F0)
H3 : on_line_d I X Y f
f : F
H2 : False
H1 : parallel A I B C
I,X,Y,A,B,C : Point
*****
eq (Fdiv (DSeg A I) (DSeg B C)) F1
+++++
eliminate I.
-----
Lemma test_on_line_4 : forall I X Y A B C , on_line I X Y -> B<>C -> parallel A I B C -> False -> A**I/B**C = 1.
Proof.
geoInit.
eliminate I.

*****
H9 : eq A I
H8 : parallel X A X Y
H7 : parallel A X X Y
H6 : not (eq (DSeg X Y) F0)
H5 : not (eq X Y)
H4 : eq (S A X Y) F0
H0 : not (eq B C)
H : not (eq (DSeg B C) F0)
f : F
H2 : False
H1 : parallel A A B C
I,X,Y,A,B,C : Point
*****
eq F0 F1
+++++
intuition.
-----
Lemma test_on_line_4 : forall I X Y A B C , on_line I X Y -> B<>C -> parallel A I B C -> False -> A**I/B**C = 1.
Proof.
geoInit.
eliminate I.

*****
H10 : parallel B C X Y
H9 : not (eq A I)
H8 : parallel X I X Y
H7 : parallel A X X Y
H6 : not (eq (DSeg X Y) F0)
H5 : not (eq X Y)
H4 : eq (S A X Y) F0
H0 : not (eq B C)
H : not (eq (DSeg B C) F0)
f : F
H2 : False
H1 : parallel A I B C
I,X,Y,A,B,C : Point
*****
eq (Fdiv (Fplus (Fdiv (DSeg A X) (DSeg X Y)) f) (Fdiv (DSeg B C) (DSeg X Y))) F1
+++++
intuition.
-----
Lemma test_on_line_4 : forall I X Y A B C , on_line I X Y -> B<>C -> parallel A I B C -> False -> A**I/B**C = 1.
Proof.
geoInit.
eliminate I.

*****
H5 : not (eq (Fplus (S B X C) (S B C Y)) F0)
H4 : not (eq (S A X Y) F0)
H0 : not (eq B C)
H : not (eq (DSeg B C) F0)
f : F
H2 : False
H1 : parallel A I B C
I,X,Y,A,B,C : Point
*****
eq (Fdiv (S A X Y) (Fplus (S B X C) (S B C Y))) F1
+++++
intuition.
-----
Lemma test_on_line_4 : forall I X Y A B C , on_line I X Y -> B<>C -> parallel A I B C -> False -> A**I/B**C = 1.
Proof.
geoInit.
eliminate I.

*****

*****

+++++
Qed.
-----
Lemma test_on_line_d_11 : forall Y P Q A C D lambda,\n  on_line_d Y P Q lambda ->  C<>D -> parallel A Y C D ->\n  False -> A**Y/C**D =  1.
-----
Lemma test_on_line_d_11 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.

*****

*****
forall (Y P Q A C D : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : not (eq C D)) (_ : parallel A Y C D) (_ : False), eq (Fdiv (DSeg A Y) (DSeg C D)) F1
+++++
Proof.
-----
Lemma test_on_line_d_11 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.

*****

*****
forall (Y P Q A C D : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : not (eq C D)) (_ : parallel A Y C D) (_ : False), eq (Fdiv (DSeg A Y) (DSeg C D)) F1
+++++
geoInit.
-----
Lemma test_on_line_d_11 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.

*****
H0 : not (eq C D)
H3 : not (eq (DSeg C D) F0)
H2 : False
H1 : parallel A Y C D
H : on_line_d Y P Q lambda
lambda : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) F1
+++++
eliminate Y.
-----
Lemma test_on_line_d_11 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.
eliminate Y.

*****
H9 : eq A Y
H8 : parallel P A P Q
H7 : parallel A P P Q
H6 : not (eq (DSeg P Q) F0)
H5 : not (eq P Q)
H4 : eq (S A P Q) F0
H0 : not (eq C D)
H3 : not (eq (DSeg C D) F0)
H2 : False
H1 : parallel A A C D
lambda : F
Y,P,Q,A,C,D : Point
*****
eq F0 F1
+++++
intuition.
-----
Lemma test_on_line_d_11 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.
eliminate Y.

*****
H10 : parallel C D P Q
H9 : not (eq A Y)
H8 : parallel P Y P Q
H7 : parallel A P P Q
H6 : not (eq (DSeg P Q) F0)
H5 : not (eq P Q)
H4 : eq (S A P Q) F0
H0 : not (eq C D)
H3 : not (eq (DSeg C D) F0)
H2 : False
H1 : parallel A Y C D
lambda : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q))) F1
+++++
intuition.
-----
Lemma test_on_line_d_11 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.
eliminate Y.

*****
H5 : not (eq (Fplus (S C P D) (S C D Q)) F0)
H4 : not (eq (S A P Q) F0)
H0 : not (eq C D)
H3 : not (eq (DSeg C D) F0)
H2 : False
H1 : parallel A Y C D
lambda : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (S A P Q) (Fplus (S C P D) (S C D Q))) F1
+++++
intuition.
-----
Lemma test_on_line_d_11 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.
eliminate Y.

*****

*****

+++++
Qed.
-----
Lemma test_on_line_d_12 : forall Y P Q A C D lambda,\n  on_line_d Y P Q lambda ->  C<>D -> parallel Y A C D ->\n  False ->\n  Y**A/C**D = 1.
-----
Lemma test_on_line_d_12 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel Y A C D -> False -> Y**A/C**D = 1.

*****

*****
forall (Y P Q A C D : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : not (eq C D)) (_ : parallel Y A C D) (_ : False), eq (Fdiv (DSeg Y A) (DSeg C D)) F1
+++++
Proof.
-----
Lemma test_on_line_d_12 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel Y A C D -> False -> Y**A/C**D = 1.
Proof.

*****

*****
forall (Y P Q A C D : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : not (eq C D)) (_ : parallel Y A C D) (_ : False), eq (Fdiv (DSeg Y A) (DSeg C D)) F1
+++++
intros.
-----
Lemma test_on_line_d_12 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel Y A C D -> False -> Y**A/C**D = 1.
Proof.
intros.

*****
H2 : False
H1 : parallel Y A C D
H0 : not (eq C D)
H : on_line_d Y P Q lambda
lambda : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg Y A) (DSeg C D)) F1
+++++
eliminate Y.
-----
Lemma test_on_line_d_12 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel Y A C D -> False -> Y**A/C**D = 1.
Proof.
intros.
eliminate Y.

*****
H8 : eq A Y
H7 : parallel P A P Q
H6 : parallel A P P Q
H5 : not (eq (DSeg P Q) F0)
H4 : not (eq P Q)
H0 : eq (S A P Q) F0
H1 : not (eq D C)
H3 : parallel A A D C
H2 : False
lambda : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv F0 (DSeg D C)) F1
+++++
intuition.
-----
Lemma test_on_line_d_12 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel Y A C D -> False -> Y**A/C**D = 1.
Proof.
intros.
eliminate Y.

*****
H9 : parallel D C P Q
H8 : not (eq A Y)
H7 : parallel P Y P Q
H6 : parallel A P P Q
H5 : not (eq (DSeg P Q) F0)
H4 : not (eq P Q)
H0 : eq (S A P Q) F0
H1 : not (eq D C)
H3 : parallel A Y D C
H2 : False
lambda : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg D C) (DSeg P Q))) F1
+++++
intuition.
-----
Lemma test_on_line_d_12 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel Y A C D -> False -> Y**A/C**D = 1.
Proof.
intros.
eliminate Y.

*****
H4 : not (eq (Fplus (S D P C) (S D C Q)) F0)
H0 : not (eq (S A P Q) F0)
H1 : not (eq D C)
H3 : parallel A Y D C
H2 : False
lambda : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (S A P Q) (Fplus (S D P C) (S D C Q))) F1
+++++
intuition.
-----
Lemma test_on_line_d_12 : forall Y P Q A C D lambda, on_line_d Y P Q lambda -> C<>D -> parallel Y A C D -> False -> Y**A/C**D = 1.
Proof.
intros.
eliminate Y.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_1 :  forall Y P Q U V,\n  inter_ll Y P Q U V ->  V<>Y -> parallel U Y V Y ->\n  U**Y/V**Y = S U P Q / S V P Q.
-----
Lemma test_inter_ll_1 : forall Y P Q U V, inter_ll Y P Q U V -> V<>Y -> parallel U Y V Y -> U**Y/V**Y = S U P Q / S V P Q.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq V Y)) (_ : parallel U Y V Y), eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U P Q) (S V P Q))
+++++
Proof.
-----
Lemma test_inter_ll_1 : forall Y P Q U V, inter_ll Y P Q U V -> V<>Y -> parallel U Y V Y -> U**Y/V**Y = S U P Q / S V P Q.
Proof.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq V Y)) (_ : parallel U Y V Y), eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U P Q) (S V P Q))
+++++
geoInit.
-----
Lemma test_inter_ll_1 : forall Y P Q U V, inter_ll Y P Q U V -> V<>Y -> parallel U Y V Y -> U**Y/V**Y = S U P Q / S V P Q.
Proof.
geoInit.

*****
H0 : not (eq V Y)
H2 : not (eq (DSeg V Y) F0)
H1 : parallel U Y V Y
H : inter_ll Y P Q U V
Y,P,Q,U,V : Point
*****
eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U P Q) (S V P Q))
+++++
eliminate Y.
-----
Lemma test_inter_ll_1 : forall Y P Q U V, inter_ll Y P Q U V -> V<>Y -> parallel U Y V Y -> U**Y/V**Y = S U P Q / S V P Q.
Proof.
geoInit.
eliminate Y.

*****
H4 : not (eq (S V P Q) F0)
H0 : not (eq V Y)
H2 : not (eq (DSeg V Y) F0)
H1 : parallel U Y V Y
Y,P,Q,U,V : Point
*****
eq (Fdiv (S U P Q) (S V P Q)) (Fdiv (S U P Q) (S V P Q))
+++++
reflexivity.
-----
Lemma test_inter_ll_1 : forall Y P Q U V, inter_ll Y P Q U V -> V<>Y -> parallel U Y V Y -> U**Y/V**Y = S U P Q / S V P Q.
Proof.
geoInit.
eliminate Y.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_2 :  forall Y P Q U V,\n  inter_ll Y P Q U V ->  U<>Y -> parallel V Y U Y ->\n  V**Y/U**Y = S V P Q / S U P Q.
-----
Lemma test_inter_ll_2 : forall Y P Q U V, inter_ll Y P Q U V -> U<>Y -> parallel V Y U Y -> V**Y/U**Y = S V P Q / S U P Q.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq U Y)) (_ : parallel V Y U Y), eq (Fdiv (DSeg V Y) (DSeg U Y)) (Fdiv (S V P Q) (S U P Q))
+++++
Proof.
-----
Lemma test_inter_ll_2 : forall Y P Q U V, inter_ll Y P Q U V -> U<>Y -> parallel V Y U Y -> V**Y/U**Y = S V P Q / S U P Q.
Proof.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq U Y)) (_ : parallel V Y U Y), eq (Fdiv (DSeg V Y) (DSeg U Y)) (Fdiv (S V P Q) (S U P Q))
+++++
geoInit.
-----
Lemma test_inter_ll_2 : forall Y P Q U V, inter_ll Y P Q U V -> U<>Y -> parallel V Y U Y -> V**Y/U**Y = S V P Q / S U P Q.
Proof.
geoInit.

*****
H0 : not (eq U Y)
H2 : not (eq (DSeg U Y) F0)
H1 : parallel V Y U Y
H : inter_ll Y P Q U V
Y,P,Q,U,V : Point
*****
eq (Fdiv (DSeg V Y) (DSeg U Y)) (Fdiv (S V P Q) (S U P Q))
+++++
eliminate Y.
-----
Lemma test_inter_ll_2 : forall Y P Q U V, inter_ll Y P Q U V -> U<>Y -> parallel V Y U Y -> V**Y/U**Y = S V P Q / S U P Q.
Proof.
geoInit.
eliminate Y.

*****
H4 : not (eq (S U P Q) F0)
H0 : not (eq U Y)
H2 : not (eq (DSeg U Y) F0)
H1 : parallel V Y U Y
Y,P,Q,U,V : Point
*****
eq (Fdiv (S V P Q) (S U P Q)) (Fdiv (S V P Q) (S U P Q))
+++++
reflexivity.
-----
Lemma test_inter_ll_2 : forall Y P Q U V, inter_ll Y P Q U V -> U<>Y -> parallel V Y U Y -> V**Y/U**Y = S V P Q / S U P Q.
Proof.
geoInit.
eliminate Y.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_3 :  forall Y P Q U V,\n  inter_ll Y P Q U V ->  Q<>Y -> parallel P Y Q Y ->\n  P**Y/Q**Y =S P U V / S Q U V.
-----
Lemma test_inter_ll_3 : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel P Y Q Y -> P**Y/Q**Y =S P U V / S Q U V.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq Q Y)) (_ : parallel P Y Q Y), eq (Fdiv (DSeg P Y) (DSeg Q Y)) (Fdiv (S P U V) (S Q U V))
+++++
Proof.
-----
Lemma test_inter_ll_3 : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel P Y Q Y -> P**Y/Q**Y =S P U V / S Q U V.
Proof.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq Q Y)) (_ : parallel P Y Q Y), eq (Fdiv (DSeg P Y) (DSeg Q Y)) (Fdiv (S P U V) (S Q U V))
+++++
geoInit.
-----
Lemma test_inter_ll_3 : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel P Y Q Y -> P**Y/Q**Y =S P U V / S Q U V.
Proof.
geoInit.

*****
H0 : not (eq Q Y)
H2 : not (eq (DSeg Q Y) F0)
H1 : parallel P Y Q Y
H : inter_ll Y P Q U V
Y,P,Q,U,V : Point
*****
eq (Fdiv (DSeg P Y) (DSeg Q Y)) (Fdiv (S P U V) (S Q U V))
+++++
eliminate Y.
-----
Lemma test_inter_ll_3 : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel P Y Q Y -> P**Y/Q**Y =S P U V / S Q U V.
Proof.
geoInit.
eliminate Y.

*****
H4 : not (eq (S Q U V) F0)
H0 : not (eq Q Y)
H2 : not (eq (DSeg Q Y) F0)
H1 : parallel P Y Q Y
Y,P,Q,U,V : Point
*****
eq (Fdiv (S P U V) (S Q U V)) (Fdiv (S P U V) (S Q U V))
+++++
reflexivity.
-----
Lemma test_inter_ll_3 : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel P Y Q Y -> P**Y/Q**Y =S P U V / S Q U V.
Proof.
geoInit.
eliminate Y.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_4 :  forall Y P Q U V,\n  inter_ll Y P Q U V ->  P<>Y -> parallel Q Y P Y ->\n  Q**Y/P**Y =S Q U V / S P U V.
-----
Lemma test_inter_ll_4 : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq P Y)) (_ : parallel Q Y P Y), eq (Fdiv (DSeg Q Y) (DSeg P Y)) (Fdiv (S Q U V) (S P U V))
+++++
Proof.
-----
Lemma test_inter_ll_4 : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.
Proof.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq P Y)) (_ : parallel Q Y P Y), eq (Fdiv (DSeg Q Y) (DSeg P Y)) (Fdiv (S Q U V) (S P U V))
+++++
geoInit.
-----
Lemma test_inter_ll_4 : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.
Proof.
geoInit.

*****
H0 : not (eq P Y)
H2 : not (eq (DSeg P Y) F0)
H1 : parallel Q Y P Y
H : inter_ll Y P Q U V
Y,P,Q,U,V : Point
*****
eq (Fdiv (DSeg Q Y) (DSeg P Y)) (Fdiv (S Q U V) (S P U V))
+++++
eliminate Y.
-----
Lemma test_inter_ll_4 : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.
Proof.
geoInit.
eliminate Y.

*****
H4 : not (eq (S P U V) F0)
H0 : not (eq P Y)
H2 : not (eq (DSeg P Y) F0)
H1 : parallel Q Y P Y
Y,P,Q,U,V : Point
*****
eq (Fdiv (S Q U V) (S P U V)) (Fdiv (S Q U V) (S P U V))
+++++
reflexivity.
-----
Lemma test_inter_ll_4 : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.
Proof.
geoInit.
eliminate Y.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll : forall T P Q A B C D,\n inter_ll T A B C D-> \n parallel T P T Q ->\n T<>Q ->\n P<>T ->\n T ** P / T ** Q = T ** P / T ** Q + 1 - 1.
-----
Lemma test_inter_ll : forall T P Q A B C D, inter_ll T A B C D-> parallel T P T Q -> T<>Q -> P<>T -> T ** P / T ** Q = T ** P / T ** Q + 1 - 1.

*****

*****
forall (T P Q A B C D : Point) (_ : inter_ll T A B C D) (_ : parallel T P T Q) (_ : not (eq T Q)) (_ : not (eq P T)), eq (Fdiv (DSeg T P) (DSeg T Q)) (Fminus (Fplus (Fdiv (DSeg T P) (DSeg T Q)) F1) F1)
+++++
Proof.
-----
Lemma test_inter_ll : forall T P Q A B C D, inter_ll T A B C D-> parallel T P T Q -> T<>Q -> P<>T -> T ** P / T ** Q = T ** P / T ** Q + 1 - 1.
Proof.

*****

*****
forall (T P Q A B C D : Point) (_ : inter_ll T A B C D) (_ : parallel T P T Q) (_ : not (eq T Q)) (_ : not (eq P T)), eq (Fdiv (DSeg T P) (DSeg T Q)) (Fminus (Fplus (Fdiv (DSeg T P) (DSeg T Q)) F1) F1)
+++++
geoInit.
-----
Lemma test_inter_ll : forall T P Q A B C D, inter_ll T A B C D-> parallel T P T Q -> T<>Q -> P<>T -> T ** P / T ** Q = T ** P / T ** Q + 1 - 1.
Proof.
geoInit.

*****
H4 : not (eq P T)
H1 : not (eq T Q)
H2 : not (eq (DSeg T Q) F0)
H3 : not (eq (DSeg P T) F0)
H0 : parallel T P T Q
H : inter_ll T A B C D
T,P,Q,A,B,C,D : Point
*****
eq (Fdiv (DSeg T P) (DSeg T Q)) (Fminus (Fplus (Fdiv (DSeg T P) (DSeg T Q)) F1) F1)
+++++
eliminate T.
-----
Lemma test_inter_ll : forall T P Q A B C D, inter_ll T A B C D-> parallel T P T Q -> T<>Q -> P<>T -> T ** P / T ** Q = T ** P / T ** Q + 1 - 1.
Proof.
geoInit.
eliminate T.

*****
H6 : eq (S P C D) F0
H0 : not (eq Q T)
H5 : parallel P T Q T
H4 : not (eq P T)
H2 : not (eq (DSeg T Q) F0)
H3 : not (eq (DSeg P T) F0)
T,P,Q,A,B,C,D : Point
*****
eq (Fdiv (S P A B) (S Q A B)) (Fminus (Fplus (Fdiv (S P A B) (S Q A B)) F1) F1)
+++++
ring.
-----
Lemma test_inter_ll : forall T P Q A B C D, inter_ll T A B C D-> parallel T P T Q -> T<>Q -> P<>T -> T ** P / T ** Q = T ** P / T ** Q + 1 - 1.
Proof.
geoInit.
eliminate T.

*****
H6 : not (eq (S P C D) F0)
H0 : not (eq Q T)
H5 : parallel P T Q T
H4 : not (eq P T)
H2 : not (eq (DSeg T Q) F0)
H3 : not (eq (DSeg P T) F0)
T,P,Q,A,B,C,D : Point
*****
eq (Fdiv (S P C D) (S Q C D)) (Fminus (Fplus (Fdiv (S P C D) (S Q C D)) F1) F1)
+++++
ring.
-----
Lemma test_inter_ll : forall T P Q A B C D, inter_ll T A B C D-> parallel T P T Q -> T<>Q -> P<>T -> T ** P / T ** Q = T ** P / T ** Q + 1 - 1.
Proof.
geoInit.
eliminate T.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_1b :  forall Y P Q U V,\n  inter_ll Y P Q U V ->  Y<>V -> parallel Y U Y V ->\n  Y**U/Y**V = S U P Q / S V P Q.
-----
Lemma test_inter_ll_1b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>V -> parallel Y U Y V -> Y**U/Y**V = S U P Q / S V P Q.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq Y V)) (_ : parallel Y U Y V), eq (Fdiv (DSeg Y U) (DSeg Y V)) (Fdiv (S U P Q) (S V P Q))
+++++
Proof.
-----
Lemma test_inter_ll_1b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>V -> parallel Y U Y V -> Y**U/Y**V = S U P Q / S V P Q.
Proof.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq Y V)) (_ : parallel Y U Y V), eq (Fdiv (DSeg Y U) (DSeg Y V)) (Fdiv (S U P Q) (S V P Q))
+++++
geoInit.
-----
Lemma test_inter_ll_1b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>V -> parallel Y U Y V -> Y**U/Y**V = S U P Q / S V P Q.
Proof.
geoInit.

*****
H0 : not (eq Y V)
H2 : not (eq (DSeg Y V) F0)
H1 : parallel Y U Y V
H : inter_ll Y P Q U V
Y,P,Q,U,V : Point
*****
eq (Fdiv (DSeg Y U) (DSeg Y V)) (Fdiv (S U P Q) (S V P Q))
+++++
eliminate Y.
-----
Lemma test_inter_ll_1b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>V -> parallel Y U Y V -> Y**U/Y**V = S U P Q / S V P Q.
Proof.
geoInit.
eliminate Y.

*****
H4 : not (eq (S V P Q) F0)
H1 : not (eq V Y)
H3 : parallel U Y V Y
H2 : not (eq (DSeg Y V) F0)
Y,P,Q,U,V : Point
*****
eq (Fdiv (S U P Q) (S V P Q)) (Fdiv (S U P Q) (S V P Q))
+++++
reflexivity.
-----
Lemma test_inter_ll_1b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>V -> parallel Y U Y V -> Y**U/Y**V = S U P Q / S V P Q.
Proof.
geoInit.
eliminate Y.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_2b :  forall Y P Q U V,\n  inter_ll Y P Q U V ->  Y<>U -> parallel V Y Y U ->\n  V**Y/Y**U = - (S V P Q / S U P Q).
-----
Lemma test_inter_ll_2b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>U -> parallel V Y Y U -> V**Y/Y**U = - (S V P Q / S U P Q).

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq Y U)) (_ : parallel V Y Y U), eq (Fdiv (DSeg V Y) (DSeg Y U)) (Fopp (Fdiv (S V P Q) (S U P Q)))
+++++
Proof.
-----
Lemma test_inter_ll_2b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>U -> parallel V Y Y U -> V**Y/Y**U = - (S V P Q / S U P Q).
Proof.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq Y U)) (_ : parallel V Y Y U), eq (Fdiv (DSeg V Y) (DSeg Y U)) (Fopp (Fdiv (S V P Q) (S U P Q)))
+++++
geoInit.
-----
Lemma test_inter_ll_2b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>U -> parallel V Y Y U -> V**Y/Y**U = - (S V P Q / S U P Q).
Proof.
geoInit.

*****
H0 : not (eq Y U)
H2 : not (eq (DSeg Y U) F0)
H1 : parallel V Y Y U
H : inter_ll Y P Q U V
Y,P,Q,U,V : Point
*****
eq (Fdiv (DSeg V Y) (DSeg Y U)) (Fopp (Fdiv (S V P Q) (S U P Q)))
+++++
eliminate Y.
-----
Lemma test_inter_ll_2b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>U -> parallel V Y Y U -> V**Y/Y**U = - (S V P Q / S U P Q).
Proof.
geoInit.
eliminate Y.

*****
H4 : not (eq (S U P Q) F0)
H1 : not (eq U Y)
H3 : parallel V Y U Y
H2 : not (eq (DSeg Y U) F0)
Y,P,Q,U,V : Point
*****
eq (Fopp (Fdiv (S V P Q) (S U P Q))) (Fopp (Fdiv (S V P Q) (S U P Q)))
+++++
reflexivity.
-----
Lemma test_inter_ll_2b : forall Y P Q U V, inter_ll Y P Q U V -> Y<>U -> parallel V Y Y U -> V**Y/Y**U = - (S V P Q / S U P Q).
Proof.
geoInit.
eliminate Y.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_3b :  forall Y P Q U V,\n  inter_ll Y P Q U V ->  Q<>Y -> parallel Y P Q Y ->\n  Y**P/Q**Y = - (S P U V / S Q U V).
-----
Lemma test_inter_ll_3b : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel Y P Q Y -> Y**P/Q**Y = - (S P U V / S Q U V).

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq Q Y)) (_ : parallel Y P Q Y), eq (Fdiv (DSeg Y P) (DSeg Q Y)) (Fopp (Fdiv (S P U V) (S Q U V)))
+++++
Proof.
-----
Lemma test_inter_ll_3b : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel Y P Q Y -> Y**P/Q**Y = - (S P U V / S Q U V).
Proof.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq Q Y)) (_ : parallel Y P Q Y), eq (Fdiv (DSeg Y P) (DSeg Q Y)) (Fopp (Fdiv (S P U V) (S Q U V)))
+++++
geoInit.
-----
Lemma test_inter_ll_3b : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel Y P Q Y -> Y**P/Q**Y = - (S P U V / S Q U V).
Proof.
geoInit.

*****
H0 : not (eq Q Y)
H2 : not (eq (DSeg Q Y) F0)
H1 : parallel Y P Q Y
H : inter_ll Y P Q U V
Y,P,Q,U,V : Point
*****
eq (Fdiv (DSeg Y P) (DSeg Q Y)) (Fopp (Fdiv (S P U V) (S Q U V)))
+++++
eliminate Y.
-----
Lemma test_inter_ll_3b : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel Y P Q Y -> Y**P/Q**Y = - (S P U V / S Q U V).
Proof.
geoInit.
eliminate Y.

*****
H4 : not (eq (S Q U V) F0)
H3 : not (eq Q Y)
H0 : parallel P Y Q Y
H2 : not (eq (DSeg Q Y) F0)
Y,P,Q,U,V : Point
*****
eq (Fopp (Fdiv (S P U V) (S Q U V))) (Fopp (Fdiv (S P U V) (S Q U V)))
+++++
reflexivity.
-----
Lemma test_inter_ll_3b : forall Y P Q U V, inter_ll Y P Q U V -> Q<>Y -> parallel Y P Q Y -> Y**P/Q**Y = - (S P U V / S Q U V).
Proof.
geoInit.
eliminate Y.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_4b :  forall Y P Q U V,\n  inter_ll Y P Q U V ->  P<>Y -> parallel Q Y P Y ->\n  Q**Y/P**Y =S Q U V / S P U V.
-----
Lemma test_inter_ll_4b : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq P Y)) (_ : parallel Q Y P Y), eq (Fdiv (DSeg Q Y) (DSeg P Y)) (Fdiv (S Q U V) (S P U V))
+++++
Proof.
-----
Lemma test_inter_ll_4b : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.
Proof.

*****

*****
forall (Y P Q U V : Point) (_ : inter_ll Y P Q U V) (_ : not (eq P Y)) (_ : parallel Q Y P Y), eq (Fdiv (DSeg Q Y) (DSeg P Y)) (Fdiv (S Q U V) (S P U V))
+++++
geoInit.
-----
Lemma test_inter_ll_4b : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.
Proof.
geoInit.

*****
H0 : not (eq P Y)
H2 : not (eq (DSeg P Y) F0)
H1 : parallel Q Y P Y
H : inter_ll Y P Q U V
Y,P,Q,U,V : Point
*****
eq (Fdiv (DSeg Q Y) (DSeg P Y)) (Fdiv (S Q U V) (S P U V))
+++++
eliminate Y.
-----
Lemma test_inter_ll_4b : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.
Proof.
geoInit.
eliminate Y.

*****
H4 : not (eq (S P U V) F0)
H0 : not (eq P Y)
H2 : not (eq (DSeg P Y) F0)
H1 : parallel Q Y P Y
Y,P,Q,U,V : Point
*****
eq (Fdiv (S Q U V) (S P U V)) (Fdiv (S Q U V) (S P U V))
+++++
reflexivity.
-----
Lemma test_inter_ll_4b : forall Y P Q U V, inter_ll Y P Q U V -> P<>Y -> parallel Q Y P Y -> Q**Y/P**Y =S Q U V / S P U V.
Proof.
geoInit.
eliminate Y.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_5 :  forall Y P Q U V A C,\n  inter_ll Y P Q U V ->  C<>Y -> parallel A Y C Y ->\n  A**Y/C**Y = A**Y/C**Y.
-----
Lemma test_inter_ll_5 : forall Y P Q U V A C, inter_ll Y P Q U V -> C<>Y -> parallel A Y C Y -> A**Y/C**Y = A**Y/C**Y.

*****

*****
forall (Y P Q U V A C : Point) (_ : inter_ll Y P Q U V) (_ : not (eq C Y)) (_ : parallel A Y C Y), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (DSeg A Y) (DSeg C Y))
+++++
Proof.
-----
Lemma test_inter_ll_5 : forall Y P Q U V A C, inter_ll Y P Q U V -> C<>Y -> parallel A Y C Y -> A**Y/C**Y = A**Y/C**Y.
Proof.

*****

*****
forall (Y P Q U V A C : Point) (_ : inter_ll Y P Q U V) (_ : not (eq C Y)) (_ : parallel A Y C Y), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (DSeg A Y) (DSeg C Y))
+++++
intros.
-----
Lemma test_inter_ll_5 : forall Y P Q U V A C, inter_ll Y P Q U V -> C<>Y -> parallel A Y C Y -> A**Y/C**Y = A**Y/C**Y.
Proof.
intros.

*****
H1 : parallel A Y C Y
H0 : not (eq C Y)
H : inter_ll Y P Q U V
Y,P,Q,U,V,A,C : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (DSeg A Y) (DSeg C Y))
+++++
elimi_inter_ll P Q U V A Y C Y H.
-----
Lemma test_inter_ll_5 : forall Y P Q U V A C, inter_ll Y P Q U V -> C<>Y -> parallel A Y C Y -> A**Y/C**Y = A**Y/C**Y.
Proof.
intros.
elimi_inter_ll P Q U V A Y C Y H.

*****
H3 : eq A Y
H2 : not (eq C A)
H1 : parallel A A C A
H0 : not (eq C A)
H : inter_ll Y P Q U V
Y,P,Q,U,V,A,C : Point
*****
eq (Fdiv (DSeg A A) (DSeg C A)) (Fdiv (DSeg A A) (DSeg C A))
+++++
reflexivity.
-----
Lemma test_inter_ll_5 : forall Y P Q U V A C, inter_ll Y P Q U V -> C<>Y -> parallel A Y C Y -> A**Y/C**Y = A**Y/C**Y.
Proof.
intros.
elimi_inter_ll P Q U V A Y C Y H.

*****
H4 : eq (S A U V) F0
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (eq C Y)
H : inter_ll Y P Q U V
Y,P,Q,U,V,A,C : Point
*****
eq (Fdiv (S A P Q) (S C P Q)) (Fdiv (S A P Q) (S C P Q))
+++++
reflexivity.
-----
Lemma test_inter_ll_5 : forall Y P Q U V A C, inter_ll Y P Q U V -> C<>Y -> parallel A Y C Y -> A**Y/C**Y = A**Y/C**Y.
Proof.
intros.
elimi_inter_ll P Q U V A Y C Y H.

*****
H4 : not (eq (S A U V) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (eq C Y)
H : inter_ll Y P Q U V
Y,P,Q,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (S C U V)) (Fdiv (S A U V) (S C U V))
+++++
reflexivity.
-----
Lemma test_inter_ll_5 : forall Y P Q U V A C, inter_ll Y P Q U V -> C<>Y -> parallel A Y C Y -> A**Y/C**Y = A**Y/C**Y.
Proof.
intros.
elimi_inter_ll P Q U V A Y C Y H.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_gen_1 :  forall Y P Q U V A C D,\n  inter_ll Y P Q U V ->  C<>D -> parallel A Y C D ->\n  False ->\n  A**Y/C**D = 1.
-----
Lemma test_inter_ll_gen_1 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.

*****

*****
forall (Y P Q U V A C D : Point) (_ : inter_ll Y P Q U V) (_ : not (eq C D)) (_ : parallel A Y C D) (_ : False), eq (Fdiv (DSeg A Y) (DSeg C D)) F1
+++++
Proof.
-----
Lemma test_inter_ll_gen_1 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.

*****

*****
forall (Y P Q U V A C D : Point) (_ : inter_ll Y P Q U V) (_ : not (eq C D)) (_ : parallel A Y C D) (_ : False), eq (Fdiv (DSeg A Y) (DSeg C D)) F1
+++++
geoInit.
-----
Lemma test_inter_ll_gen_1 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.

*****
H0 : not (eq C D)
H3 : not (eq (DSeg C D) F0)
H2 : False
H1 : parallel A Y C D
H : inter_ll Y P Q U V
Y,P,Q,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) F1
+++++
eliminate Y.
-----
Lemma test_inter_ll_gen_1 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.
eliminate Y.

*****
H5 : eq A Y
H0 : not (eq C D)
H3 : not (eq (DSeg C D) F0)
H2 : False
H1 : parallel A A C D
Y,P,Q,U,V,A,C,D : Point
*****
eq F0 F1
+++++
intuition.
-----
Lemma test_inter_ll_gen_1 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.
eliminate Y.

*****
H7 : not (eq (Fplus (S C P D) (S C D Q)) F0)
H6 : eq (S A U V) F0
H5 : not (eq A Y)
H0 : not (eq C D)
H3 : not (eq (DSeg C D) F0)
H2 : False
H1 : parallel A Y C D
Y,P,Q,U,V,A,C,D : Point
*****
eq (Fdiv (S A P Q) (Fplus (S C P D) (S C D Q))) F1
+++++
intuition.
-----
Lemma test_inter_ll_gen_1 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.
eliminate Y.

*****
H7 : not (eq (Fplus (S C U D) (S C D V)) F0)
H6 : not (eq (S A U V) F0)
H5 : not (eq A Y)
H0 : not (eq C D)
H3 : not (eq (DSeg C D) F0)
H2 : False
H1 : parallel A Y C D
Y,P,Q,U,V,A,C,D : Point
*****
eq (Fdiv (S A U V) (Fplus (S C U D) (S C D V))) F1
+++++
intuition.
-----
Lemma test_inter_ll_gen_1 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> False -> A**Y/C**D = 1.
Proof.
geoInit.
eliminate Y.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_gen_2 :  forall Y P Q U V A C D,\n  inter_ll Y P Q U V ->  C<>D -> parallel A Y C D -> parallel Y A C D -> A<>Y -> Y<>A ->\n  A**Y/C**D + Y**A/C**D=0.
-----
Lemma test_inter_ll_gen_2 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> parallel Y A C D -> A<>Y -> Y<>A -> A**Y/C**D + Y**A/C**D=0.

*****

*****
forall (Y P Q U V A C D : Point) (_ : inter_ll Y P Q U V) (_ : not (eq C D)) (_ : parallel A Y C D) (_ : parallel Y A C D) (_ : not (eq A Y)) (_ : not (eq Y A)), eq (Fplus (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (DSeg Y A) (DSeg C D))) F0
+++++
Proof.
-----
Lemma test_inter_ll_gen_2 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> parallel Y A C D -> A<>Y -> Y<>A -> A**Y/C**D + Y**A/C**D=0.
Proof.

*****

*****
forall (Y P Q U V A C D : Point) (_ : inter_ll Y P Q U V) (_ : not (eq C D)) (_ : parallel A Y C D) (_ : parallel Y A C D) (_ : not (eq A Y)) (_ : not (eq Y A)), eq (Fplus (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (DSeg Y A) (DSeg C D))) F0
+++++
area_method.
-----
Lemma test_inter_ll_gen_2 : forall Y P Q U V A C D, inter_ll Y P Q U V -> C<>D -> parallel A Y C D -> parallel Y A C D -> A<>Y -> Y<>A -> A**Y/C**D + Y**A/C**D=0.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma test_inter_ll_gen_3 :  forall Y P Q U V A C D,\n  inter_ll Y P Q U V ->  A<>Y -> C<>D -> parallel C D A Y ->\n  C**D/A**Y = C**D/A**Y.
-----
Lemma test_inter_ll_gen_3 : forall Y P Q U V A C D, inter_ll Y P Q U V -> A<>Y -> C<>D -> parallel C D A Y -> C**D/A**Y = C**D/A**Y.

*****

*****
forall (Y P Q U V A C D : Point) (_ : inter_ll Y P Q U V) (_ : not (eq A Y)) (_ : not (eq C D)) (_ : parallel C D A Y), eq (Fdiv (DSeg C D) (DSeg A Y)) (Fdiv (DSeg C D) (DSeg A Y))
+++++
Proof.
-----
Lemma test_inter_ll_gen_3 : forall Y P Q U V A C D, inter_ll Y P Q U V -> A<>Y -> C<>D -> parallel C D A Y -> C**D/A**Y = C**D/A**Y.
Proof.

*****

*****
forall (Y P Q U V A C D : Point) (_ : inter_ll Y P Q U V) (_ : not (eq A Y)) (_ : not (eq C D)) (_ : parallel C D A Y), eq (Fdiv (DSeg C D) (DSeg A Y)) (Fdiv (DSeg C D) (DSeg A Y))
+++++
intros.
-----
Lemma test_inter_ll_gen_3 : forall Y P Q U V A C D, inter_ll Y P Q U V -> A<>Y -> C<>D -> parallel C D A Y -> C**D/A**Y = C**D/A**Y.
Proof.
intros.

*****
H2 : parallel C D A Y
H1 : not (eq C D)
H0 : not (eq A Y)
H : inter_ll Y P Q U V
Y,P,Q,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg C D) (DSeg A Y)) (Fdiv (DSeg C D) (DSeg A Y))
+++++
eliminate Y.
-----
Lemma test_inter_ll_gen_3 : forall Y P Q U V A C D, inter_ll Y P Q U V -> A<>Y -> C<>D -> parallel C D A Y -> C**D/A**Y = C**D/A**Y.
Proof.
intros.
eliminate Y.

*****
H6 : not (eq (Fplus (S C P D) (S C D Q)) F0)
H5 : eq (S A U V) F0
H4 : parallel A Y C D
H3 : not (eq (Fdiv (S A P Q) (Fplus (S C P D) (S C D Q))) F0)
H1 : not (eq C D)
H0 : not (eq A Y)
Y,P,Q,U,V,A,C,D : Point
*****
eq (Fdiv F1 (Fdiv (S A P Q) (Fplus (S C P D) (S C D Q)))) (Fdiv F1 (Fdiv (S A P Q) (Fplus (S C P D) (S C D Q))))
+++++
reflexivity.
-----
Lemma test_inter_ll_gen_3 : forall Y P Q U V A C D, inter_ll Y P Q U V -> A<>Y -> C<>D -> parallel C D A Y -> C**D/A**Y = C**D/A**Y.
Proof.
intros.
eliminate Y.

*****
H6 : not (eq (Fplus (S C U D) (S C D V)) F0)
H5 : not (eq (S A U V) F0)
H4 : parallel A Y C D
H3 : not (eq (Fdiv (S A U V) (Fplus (S C U D) (S C D V))) F0)
H1 : not (eq C D)
H0 : not (eq A Y)
Y,P,Q,U,V,A,C,D : Point
*****
eq (Fdiv F1 (Fdiv (S A U V) (Fplus (S C U D) (S C D V)))) (Fdiv F1 (Fdiv (S A U V) (Fplus (S C U D) (S C D V))))
+++++
reflexivity.
-----
Lemma test_inter_ll_gen_3 : forall Y P Q U V A C D, inter_ll Y P Q U V -> A<>Y -> C<>D -> parallel C D A Y -> C**D/A**Y = C**D/A**Y.
Proof.
intros.
eliminate Y.

*****

*****

+++++
Qed.
-----
Lemma test_on_parallel_d_1 : forall A C D Y R P Q lambda,\n  on_parallel_d Y R P Q lambda ->\n  C<>D ->\n  parallel A Y C D ->\n  A**Y/C**D = A**Y/C**D.
-----
Lemma test_on_parallel_d_1 : forall A C D Y R P Q lambda, on_parallel_d Y R P Q lambda -> C<>D -> parallel A Y C D -> A**Y/C**D = A**Y/C**D.

*****

*****
forall (A C D Y R P Q : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (DSeg A Y) (DSeg C D))
+++++
Proof.
-----
Lemma test_on_parallel_d_1 : forall A C D Y R P Q lambda, on_parallel_d Y R P Q lambda -> C<>D -> parallel A Y C D -> A**Y/C**D = A**Y/C**D.
Proof.

*****

*****
forall (A C D Y R P Q : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (DSeg A Y) (DSeg C D))
+++++
intros.
-----
Lemma test_on_parallel_d_1 : forall A C D Y R P Q lambda, on_parallel_d Y R P Q lambda -> C<>D -> parallel A Y C D -> A**Y/C**D = A**Y/C**D.
Proof.
intros.

*****
H1 : parallel A Y C D
H0 : not (eq C D)
H : on_parallel_d Y R P Q lambda
lambda : F
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (DSeg A Y) (DSeg C D))
+++++
eliminate Y.
-----
Lemma test_on_parallel_d_1 : forall A C D Y R P Q lambda, on_parallel_d Y R P Q lambda -> C<>D -> parallel A Y C D -> A**Y/C**D = A**Y/C**D.
Proof.
intros.
eliminate Y.

*****
H3 : eq R Y
H2 : Col A R R
H1 : parallel A R C D
H0 : not (eq C D)
lambda : F
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (DSeg A R) (DSeg C D)) (Fdiv (DSeg A R) (DSeg C D))
+++++
reflexivity.
-----
Lemma test_on_parallel_d_1 : forall A C D Y R P Q lambda, on_parallel_d Y R P Q lambda -> C<>D -> parallel A Y C D -> A**Y/C**D = A**Y/C**D.
Proof.
intros.
eliminate Y.

*****
H4 : eq A Y
H3 : not (eq R A)
H2 : Col A R A
H1 : parallel A A C D
H0 : not (eq C D)
lambda : F
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv F0 (DSeg C D)) (Fdiv F0 (DSeg C D))
+++++
reflexivity.
-----
Lemma test_on_parallel_d_1 : forall A C D Y R P Q lambda, on_parallel_d Y R P Q lambda -> C<>D -> parallel A Y C D -> A**Y/C**D = A**Y/C**D.
Proof.
intros.
eliminate Y.

*****
H7 : parallel C D P Q
H6 : parallel A R P Q
H5 : not (eq P Q)
H4 : not (eq A Y)
H3 : not (eq R Y)
H2 : Col A R Y
H1 : parallel A Y C D
H0 : not (eq C D)
lambda : F
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q))) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
reflexivity.
-----
Lemma test_on_parallel_d_1 : forall A C D Y R P Q lambda, on_parallel_d Y R P Q lambda -> C<>D -> parallel A Y C D -> A**Y/C**D = A**Y/C**D.
Proof.
intros.
eliminate Y.

*****
H3 : not (eq (Fplus (S C P D) (S C D Q)) F0)
H2 : not (Col A R Y)
H1 : parallel A Y C D
H0 : not (eq C D)
lambda : F
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (Fplus (S A P R) (S A R Q)) (Fplus (S C P D) (S C D Q))) (Fdiv (Fplus (S A P R) (S A R Q)) (Fplus (S C P D) (S C D Q)))
+++++
reflexivity.
-----
Lemma test_on_parallel_d_1 : forall A C D Y R P Q lambda, on_parallel_d Y R P Q lambda -> C<>D -> parallel A Y C D -> A**Y/C**D = A**Y/C**D.
Proof.
intros.
eliminate Y.

*****

*****

+++++
Qed.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q,\n  on_foot Y R P Q ->\n  C<>D ->\n  parallel A Y C D ->\n  A**Y/C**D = 1-1+ A**Y/C**D.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q, on_foot Y R P Q -> C<>D -> parallel A Y C D -> A**Y/C**D = 1-1+ A**Y/C**D.

*****

*****
forall (A C D Y R P Q : Point) (_ : on_foot Y R P Q) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fplus (Fminus F1 F1) (Fdiv (DSeg A Y) (DSeg C D)))
+++++
Proof.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q, on_foot Y R P Q -> C<>D -> parallel A Y C D -> A**Y/C**D = 1-1+ A**Y/C**D.
Proof.

*****

*****
forall (A C D Y R P Q : Point) (_ : on_foot Y R P Q) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fplus (Fminus F1 F1) (Fdiv (DSeg A Y) (DSeg C D)))
+++++
geoInit.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q, on_foot Y R P Q -> C<>D -> parallel A Y C D -> A**Y/C**D = 1-1+ A**Y/C**D.
Proof.
geoInit.

*****
H0 : not (eq C D)
H2 : not (eq (DSeg C D) F0)
H1 : parallel A Y C D
H : on_foot Y R P Q
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fplus (Fminus F1 F1) (Fdiv (DSeg A Y) (DSeg C D)))
+++++
eliminate Y.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q, on_foot Y R P Q -> C<>D -> parallel A Y C D -> A**Y/C**D = 1-1+ A**Y/C**D.
Proof.
geoInit.
eliminate Y.

*****
H5 : eq A Y
H4 : not (eq (Py C D C) F0)
H3 : eq (S A P Q) F0
H0 : not (eq C D)
H2 : not (eq (DSeg C D) F0)
H1 : parallel A A C D
A,C,D,Y,R,P,Q : Point
*****
eq F0 F0
+++++
field.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q, on_foot Y R P Q -> C<>D -> parallel A Y C D -> A**Y/C**D = 1-1+ A**Y/C**D.
Proof.
geoInit.
eliminate Y.

*****
H5 : not (eq A Y)
H4 : not (eq (Py C D C) F0)
H3 : eq (S A P Q) F0
H0 : not (eq C D)
H2 : not (eq (DSeg C D) F0)
H1 : parallel A Y C D
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (Fminus (Py R C D) (Py A C D)) (Py C D C)) (Fdiv (Fminus (Py R C D) (Py A C D)) (Py C D C))
+++++
field.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q, on_foot Y R P Q -> C<>D -> parallel A Y C D -> A**Y/C**D = 1-1+ A**Y/C**D.
Proof.
geoInit.
eliminate Y.
field.

*****
H5 : not (eq A Y)
H4 : not (eq (Py C D C) F0)
H3 : eq (S A P Q) F0
H0 : not (eq C D)
H2 : not (eq (DSeg C D) F0)
H1 : parallel A Y C D
A,C,D,Y,R,P,Q : Point
*****
not (eq (Py C D C) F0)
+++++
assumption.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q, on_foot Y R P Q -> C<>D -> parallel A Y C D -> A**Y/C**D = 1-1+ A**Y/C**D.
Proof.
geoInit.
eliminate Y.

*****
H4 : not (eq (Fplus (S C P D) (S C D Q)) F0)
H3 : not (eq (S A P Q) F0)
H0 : not (eq C D)
H2 : not (eq (DSeg C D) F0)
H1 : parallel A Y C D
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (S A P Q) (Fplus (S C P D) (S C D Q))) (Fdiv (S A P Q) (Fplus (S C P D) (S C D Q)))
+++++
field.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q, on_foot Y R P Q -> C<>D -> parallel A Y C D -> A**Y/C**D = 1-1+ A**Y/C**D.
Proof.
geoInit.
eliminate Y.
field.

*****
H4 : not (eq (Fplus (S C P D) (S C D Q)) F0)
H3 : not (eq (S A P Q) F0)
H0 : not (eq C D)
H2 : not (eq (DSeg C D) F0)
H1 : parallel A Y C D
A,C,D,Y,R,P,Q : Point
*****
not (eq (Fplus (S C P D) (S C D Q)) F0)
+++++
assumption.
-----
Lemma test_on_foot_1 : forall A C D Y R P Q, on_foot Y R P Q -> C<>D -> parallel A Y C D -> A**Y/C**D = 1-1+ A**Y/C**D.
Proof.
geoInit.
eliminate Y.

*****

*****

+++++
Qed.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q,\n	on_foot Y R P Q ->\n        False ->\n        C <> D ->\n        parallel Y A C D ->\n        Y**A/C**D = - - (Y**A/C**D).
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).

*****

*****
forall (A C D Y R P Q : Point) (_ : on_foot Y R P Q) (_ : False) (_ : not (eq C D)) (_ : parallel Y A C D), eq (Fdiv (DSeg Y A) (DSeg C D)) (Fopp (Fopp (Fdiv (DSeg Y A) (DSeg C D))))
+++++
Proof.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).
Proof.

*****

*****
forall (A C D Y R P Q : Point) (_ : on_foot Y R P Q) (_ : False) (_ : not (eq C D)) (_ : parallel Y A C D), eq (Fdiv (DSeg Y A) (DSeg C D)) (Fopp (Fopp (Fdiv (DSeg Y A) (DSeg C D))))
+++++
geoInit.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).
Proof.
geoInit.

*****
H1 : not (eq C D)
H3 : not (eq (DSeg C D) F0)
H2 : parallel Y A C D
H0 : False
H : on_foot Y R P Q
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (DSeg Y A) (DSeg C D)) (Fopp (Fopp (Fdiv (DSeg Y A) (DSeg C D))))
+++++
eliminate Y.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).
Proof.
geoInit.
eliminate Y.

*****
H6 : eq A Y
H5 : not (eq (Py D C D) F0)
H1 : eq (S A P Q) F0
H2 : not (eq D C)
H4 : parallel A A D C
H3 : not (eq (DSeg C D) F0)
H0 : False
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv F0 (DSeg D C)) (Fdiv F0 (DSeg D C))
+++++
field.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).
Proof.
geoInit.
eliminate Y.
field.

*****
H6 : eq A Y
H5 : not (eq (Py D C D) F0)
H1 : eq (S A P Q) F0
H2 : not (eq D C)
H4 : parallel A A D C
H3 : not (eq (DSeg C D) F0)
H0 : False
A,C,D,Y,R,P,Q : Point
*****
not (eq (DSeg D C) F0)
+++++
auto.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).
Proof.
geoInit.
eliminate Y.

*****
H6 : not (eq A Y)
H5 : not (eq (Py D C D) F0)
H1 : eq (S A P Q) F0
H2 : not (eq D C)
H4 : parallel A Y D C
H3 : not (eq (DSeg C D) F0)
H0 : False
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (Fminus (Py R D C) (Py A D C)) (Py D C D)) (Fdiv (Fminus (Py R D C) (Py A D C)) (Py D C D))
+++++
field.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).
Proof.
geoInit.
eliminate Y.
field.

*****
H6 : not (eq A Y)
H5 : not (eq (Py D C D) F0)
H1 : eq (S A P Q) F0
H2 : not (eq D C)
H4 : parallel A Y D C
H3 : not (eq (DSeg C D) F0)
H0 : False
A,C,D,Y,R,P,Q : Point
*****
not (eq (Py D C D) F0)
+++++
auto.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).
Proof.
geoInit.
eliminate Y.

*****
H5 : not (eq (Fplus (S D P C) (S D C Q)) F0)
H1 : not (eq (S A P Q) F0)
H2 : not (eq D C)
H4 : parallel A Y D C
H3 : not (eq (DSeg C D) F0)
H0 : False
A,C,D,Y,R,P,Q : Point
*****
eq (Fdiv (S A P Q) (Fplus (S D P C) (S D C Q))) (Fdiv (S A P Q) (Fplus (S D P C) (S D C Q)))
+++++
field.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).
Proof.
geoInit.
eliminate Y.
field.

*****
H5 : not (eq (Fplus (S D P C) (S D C Q)) F0)
H1 : not (eq (S A P Q) F0)
H2 : not (eq D C)
H4 : parallel A Y D C
H3 : not (eq (DSeg C D) F0)
H0 : False
A,C,D,Y,R,P,Q : Point
*****
not (eq (Fplus (S D P C) (S D C Q)) F0)
+++++
auto.
-----
Lemma test_on_foot_2 : forall A C D Y R P Q, on_foot Y R P Q -> False -> C <> D -> parallel Y A C D -> Y**A/C**D = - - (Y**A/C**D).
Proof.
geoInit.
eliminate Y.

*****

*****

+++++
Qed.
-----
