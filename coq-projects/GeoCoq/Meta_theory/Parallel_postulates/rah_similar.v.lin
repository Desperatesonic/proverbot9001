811222d70dd9910ba89a02e000f9034e
Require Import GeoCoq.Axioms.parallel_postulates.
Require Import GeoCoq.Tarski_dev.Annexes.saccheri.
Section rah_similar.
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
Lemma rah__similar : postulate_of_right_saccheri_quadrilaterals -> postulate_of_existence_of_similar_triangles.
Proof.
  intro rah.
  destruct lower_dim_ex as [A [B0 [C]]].
  assert(~ Col A B0 C).
  {
    unfold Col.
    assumption.
  }
  {
    idtac.
    destruct (l10_15 C A C B0) as [B []].
    {
      Col.
    }
    {
      Col.
    }
    {
      Col.
      assert(HNCol1 : ~ Col C A B).
      {
        apply (one_side_not_col123 _ _ _ B0).
        Side.
      }
      {
        idtac.
        assert(Per A C B).
        {
          Perp.
        }
        {
          idtac.
          destruct (symmetric_point_construction A B) as [B'].
          assert_diffs.
          assert(HNCol2 : ~ Col A C B').
          {
            intro.
            apply HNCol1.
            ColR.
          }
          {
            idtac.
            assert(HNCol3 : ~ Col B B' C).
            {
              intro.
              apply HNCol2.
              ColR.
            }
            {
              idtac.
              destruct (l8_18_existence A C B') as [C' []].
              {
                auto.
              }
              {
                auto.
                exists A.
                exists B.
                exists C.
                exists A.
                exists B'.
                exists C'.
                assert(Par_strict B C B' C').
                {
                  apply (par_not_col_strict _ _ _ _ B').
                  {
                    Col.
                    apply (l12_9 _ _ _ _ A C).
                    {
                      Perp.
                      Cop.
                    }
                    {
                      Perp.
                      Cop.
                    }
                    {
                      Perp.
                      Cop.
                    }
                    {
                      Perp.
                      Cop.
                    }
                    {
                      Perp.
                    }
                    {
                      Perp.
                    }
                  }
                  {
                    Col.
                  }
                  {
                    Col.
                  }
                }
                {
                  assert(HNCol4 : ~ Col B C C').
                  {
                    apply (par_strict_not_col_4 _ _ B').
                    auto.
                  }
                  {
                    idtac.
                    assert_diffs.
                    assert(Bet A C C').
                    {
                      apply (col_two_sides_bet _ B).
                      {
                        Col.
                      }
                      {
                        Col.
                        apply l9_2.
                        apply (l9_8_2 _ _ B').
                        {
                          repeat split.
                          {
                            Col.
                          }
                          {
                            Col.
                          }
                          {
                            Col.
                            exists B.
                            split.
                            {
                              Col.
                            }
                            {
                              Col.
                              Between.
                            }
                          }
                        }
                        {
                          apply l12_6.
                          Par.
                        }
                      }
                    }
                    {
                      assert(A <> C').
                      {
                        intro.
                        treat_equalities.
                        auto.
                      }
                      {
                        idtac.
                        assert(Per B' C' A).
                        {
                          apply perp_per_1.
                          auto.
                          apply (perp_col1 _ _ _ C).
                          {
                            Col.
                          }
                          {
                            Col.
                            Perp.
                          }
                          {
                            Col.
                          }
                        }
                        {
                          idtac.
                          assert(CongA B C A B' C' A).
                          {
                            apply l11_16.
                            {
                              Perp.
                            }
                            {
                              Perp.
                            }
                            {
                              Perp.
                            }
                            {
                              Perp.
                            }
                            {
                              Perp.
                            }
                            {
                              Perp.
                            }
                          }
                          {
                            idtac.
                            assert(CongA C A B C' A B').
                            {
                              apply (out_conga C A B C A B).
                              {
                                try (apply out_trivial).
                                CongA.
                              }
                              {
                                try (apply out_trivial).
                                CongA.
                              }
                              {
                                try (apply out_trivial).
                                CongA.
                              }
                              {
                                try (apply out_trivial).
                                CongA.
                                apply bet_out.
                                {
                                  Between.
                                }
                                {
                                  Between.
                                }
                              }
                              {
                                try (apply out_trivial).
                                CongA.
                                apply bet_out.
                                {
                                  Between.
                                }
                                {
                                  Between.
                                }
                              }
                            }
                            {
                              split.
                              {
                                Col.
                              }
                              {
                                Col.
                                split.
                                {
                                  intro.
                                  absurd(B = B').
                                  {
                                    auto.
                                  }
                                  {
                                    auto.
                                    apply (between_cong A).
                                    {
                                      Between.
                                    }
                                    {
                                      Between.
                                    }
                                  }
                                }
                                {
                                  split.
                                  {
                                    idtac.
                                    apply (sams2_suma2__conga456 C A B _ _ _ _ _ _ B C A).
                                    {
                                      SumA.
                                    }
                                    {
                                      apply (conga2_sams__sams C' A B' A B' C').
                                      {
                                        CongA.
                                      }
                                      {
                                        CongA.
                                      }
                                      {
                                        CongA.
                                        SumA.
                                      }
                                    }
                                    {
                                      apply t22_12__rah.
                                      {
                                        Perp.
                                      }
                                      {
                                        Perp.
                                      }
                                      {
                                        Perp.
                                      }
                                      {
                                        Perp.
                                      }
                                    }
                                    {
                                      apply (conga3_suma__suma C' A B' A B' C' B' C' A).
                                      {
                                        CongA.
                                        apply t22_12__rah.
                                        {
                                          auto.
                                        }
                                        {
                                          auto.
                                        }
                                        {
                                          auto.
                                        }
                                        {
                                          auto.
                                        }
                                      }
                                      {
                                        CongA.
                                      }
                                      {
                                        CongA.
                                      }
                                      {
                                        CongA.
                                      }
                                    }
                                  }
                                  {
                                    repeat (split; auto).
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
Qed.
End rah_similar.
