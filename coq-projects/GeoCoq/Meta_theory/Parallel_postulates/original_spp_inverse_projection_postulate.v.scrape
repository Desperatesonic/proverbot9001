Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Annexes.suma.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section original_spp_inverse_projection_postulate.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma original_spp__inverse_projection_postulate :\n  alternative_strong_parallel_postulate -> inverse_projection_postulate.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : alternative_strong_parallel_postulate, inverse_projection_postulate
+++++
Proof.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : alternative_strong_parallel_postulate, inverse_projection_postulate
+++++
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.

*****
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert_diffs.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.

*****
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert_cols.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.

*****
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
elim(col_dec A B C).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).

*****
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col A B C, ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
intro.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
exists P.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B C P) (Col P Q P)
+++++
split.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C P
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C P
+++++
apply (l6_7 _ _ A).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C A
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C A
+++++
apply not_bet_out.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C B A
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet C B A)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet C B A)
+++++
intro.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.

*****
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].

*****
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.

*****
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HN := not_lta_and_gta A B C x y z).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HN.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (LtA A B C x y z) (GtA A B C x y z)
+++++
split.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C x y z
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
GtA A B C x y z
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
GtA A B C x y z
+++++
split.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.
split.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA x y z A B C
+++++
apply l11_31_2.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.
split.
apply l11_31_2.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq x y)
+++++
Between.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.
split.
apply l11_31_2.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq z y)
+++++
Between.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.
split.
apply l11_31_2.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
Between.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.
split.
apply l11_31_2.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
Between.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.
split.
apply l11_31_2.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
Between.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.
split.

*****
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (CongA x y z A B C)
+++++
intro.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.
split.
intro.

*****
H7 : CongA x y z A B C
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hlta : LtA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Hlta.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).
auto.
apply not_bet_out.
Col.
intro.
destruct Hacute as [x [y [z [HPer2 Hlta]]]].
assert_diffs.
assert(HN := not_lta_and_gta A B C x y z).
apply HN.
split.
auto.
split.
intro.
destruct Hlta.

*****
H7 : CongA x y z A B C
HN : not (and (LtA A B C x y z) (GtA A B C x y z))
H13 : not (eq x z)
H11 : not (eq z y)
H9 : not (eq x y)
H6 : not (eq C A)
H5 : Bet C B A
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
H10 : not (CongA A B C x y z)
H8 : LeA A B C x y z
HPer2 : Per x y z
A,B,C,P,Q,x,y,z : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
CongA.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.
Col.
apply (l6_7 _ _ A).

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A P
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro.
exists P.
split.

*****
H3 : Col A B C
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q P
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).

*****
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col A B C), ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
intro HNCol1.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.

*****
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert(HNCol2 : ~ Col B P Q).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).

*****
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B P Q)
+++++
apply per_not_col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
apply per_not_col.

*****
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
apply per_not_col.

*****
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
apply per_not_col.

*****
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P Q
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
idtac.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert(HQ0 := cop_not_par_same_side A B Q P P C).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).

*****
HQ0 : forall (_ : not (eq Q P)) (_ : Col A B P) (_ : Col Q P P)\n (_ : not (Col A B Q)) (_ : not (Col A B C)) (_ : Coplanar A B Q C),\nex (fun Q0 : Tpoint => and (Col Q P Q0) (OS A B C Q0))
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
destruct HQ0 as [Q0 []].
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q P)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B P
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q P P
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B Q)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B Q)
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B Q)
+++++
intro.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
intro.

*****
H3 : Col A B Q
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol2.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
intro.
apply HNCol2.

*****
H3 : Col A B Q
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P Q
+++++
ColR.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B Q C
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B Q C
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].

*****
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.

*****
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.

*****
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert(HNCol3 : ~ Col A B Q0).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).

*****
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B Q0)
+++++
apply (one_side_not_col123 _ _ _ C).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
apply (one_side_not_col123 _ _ _ C).

*****
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B Q0 C
+++++
Side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).

*****
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
idtac.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.

*****
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert(P<>Q0).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).

*****
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q0)
+++++
intro.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
intro.

*****
H6 : eq P Q0
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
intro.
subst.

*****
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
HNCol2 : not (Col B Q0 Q)
HNCol1 : not (Col A B C)
H0 : Col B A Q0
H4 : not (eq C B)
H2 : not (eq Q0 B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
Hout : Out B A Q0
HPQ : not (eq Q0 Q)
HPer : Per B Q0 Q
H3 : Col Q Q0 Q0
Q0 : Tpoint
Hacute : Acute A B C
A,B,C,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).

*****
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
idtac.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.

*****
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert (HSuma := ex_suma C B P B P Q0).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).

*****
HSuma : forall (_ : not (eq C B)) (_ : not (eq B P)) (_ : not (eq B P))\n (_ : not (eq P Q0)),\nex\n (fun G : Tpoint =>\n ex\n (fun H : Tpoint => ex (fun I : Tpoint => SumA C B P B P Q0 G H I)))
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
destruct HSuma as [D [E [F]]].
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].

*****
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].

*****
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].

*****
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].

*****
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q0)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert(HY := ospp C B P Q0 D E F).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).

*****
HY : forall (_ : OS B P C Q0) (_ : SumA C B P B P Q0 D E F)\n (_ : not (Bet D E F)),\nex (fun Y : Tpoint => and (Col B C Y) (Col P Q0 Y))
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
destruct HY as [Y []].
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B P C Q0
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B P C Q0
+++++
apply (col_one_side _ A).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
apply (col_one_side _ A).

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A P
+++++
Side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
apply (col_one_side _ A).

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
Side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
apply (col_one_side _ A).

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A C Q0
+++++
Side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA C B P B P Q0 D E F
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet D E F)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.

*****
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet D E F)
+++++
intro.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Hlta : LtA A B C C B P).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C C B P
+++++
apply acute_per__lta.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute A B C
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C B P
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C B P
+++++
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P Q0
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).
auto.

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P Q0
+++++
apply l8_2.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).
auto.
apply l8_2.

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q0 P B
+++++
apply (l8_3 Q).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).
auto.
apply l8_2.
apply (l8_3 Q).

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Q P B
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).
auto.
apply l8_2.
apply (l8_3 Q).

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q P)
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).
auto.
apply l8_2.
apply (l8_3 Q).

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Q0
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).
auto.
apply l8_2.
apply (l8_3 Q).
Perp.

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Q0
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet D E F
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
apply acute_per__lta.
auto.
apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).

*****
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA C B P B P Q0 D E F
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).

*****
Hlta : LtA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Hlta as [Hlea HNConga].
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNConga.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C C B P
+++++
apply conga_right_comm.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C P B C
+++++
apply (out_conga A B C A B C).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C A B C
+++++
try (apply out_trivial).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C A B C
+++++
CongA.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A A
+++++
try (apply out_trivial).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
CongA.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C C
+++++
try (apply out_trivial).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
CongA.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A P
+++++
try (apply out_trivial).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A P
+++++
CongA.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C C
+++++
try (apply out_trivial).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
intro.
assert(Hlta : LtA A B C C B P).
destruct Hlta as [Hlea HNConga].
apply HNConga.
apply conga_right_comm.
apply (out_conga A B C A B C).
try (apply out_trivial).

*****
HNConga : not (CongA A B C C B P)
Hlea : LeA A B C C B P
H8 : Bet D E F
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
CongA.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].

*****
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.

*****
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
exists Y.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.

*****
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B C Y) (Col P Q Y)
+++++
split.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.

*****
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
assert(HB0 := l10_15 A B B C).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).

*****
HB0 : forall (_ : Col A B B) (_ : not (Col A B C)),\nex (fun Q : Tpoint => and (Perp A B Q B) (OS A B C Q))
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
destruct HB0 as [B0 []].
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].

*****
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B B
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].

*****
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].

*****
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.

*****
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
assert(HNCol4 : ~ Col A B B0).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).

*****
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B B0)
+++++
apply (one_side_not_col123 _ _ _ C).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
apply (one_side_not_col123 _ _ _ C).

*****
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B B0 C
+++++
Side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).

*****
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
idtac.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.

*****
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
assert(HNCol5 : ~ Col B C P).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).

*****
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C P)
+++++
intro.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
intro.

*****
H12 : Col B C P
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
intro.
apply HNCol1.

*****
H12 : Col B C P
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
ColR.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).

*****
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
idtac.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.

*****
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
assert_diffs.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.

*****
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
assert(P<>Y).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).

*****
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Y)
+++++
intro.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
intro.

*****
H12 : eq P Y
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
intro.
subst.

*****
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
HNCol5 : not (Col B C Y)
H14 : not (eq C Y)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col Y Q0 Y
H8 : Col B C Y
H7 : SumA C B Y B Y Q0 D E F
D,E,F : Tpoint
H6 : not (eq Y Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q Y Q0
Q0 : Tpoint
HNCol2 : not (Col B Y Q)
HNCol1 : not (Col A B C)
H0 : Col B A Y
H4 : not (eq C B)
H2 : not (eq Y B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
Hout : Out B A Y
HPQ : not (eq Y Q)
HPer : Per B Y Q
Y : Tpoint
Hacute : Acute A B C
A,B,C,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
idtac.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
apply (col_one_side_out _ B0).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C Y
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B B0 C Y
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B B0 C Y
+++++
apply (one_side_transitivity _ _ _ P).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B B0 C P
+++++
apply (one_side_transitivity _ _ _ A).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B B0 C A
+++++
apply invert_one_side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B0 B C A
+++++
apply in_angle_one_side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B0 B A)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B B0 C)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B B0 C)
+++++
intro.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.

*****
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HInter := l8_16_1 B0 B A C B).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).

*****
HInter : forall (_ : Col B0 B B) (_ : Col B0 B C) (_ : Perp B0 B A B),\nand (not (Col B0 B A)) (Per A B C)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HInter.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.

*****
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B0 B B
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.

*****
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B0 B C
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.

*****
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B0 B A B
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.

*****
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B0 B A B
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.

*****
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.

*****
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.
Perp.

*****
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Habs : LtA A B C A B C).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.
Perp.
assert(Habs : LtA A B C A B C).

*****
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C A B C
+++++
apply acute_per__lta.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.
Perp.
assert(Habs : LtA A B C A B C).
apply acute_per__lta.

*****
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute A B C
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.
Perp.
assert(Habs : LtA A B C A B C).
apply acute_per__lta.

*****
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.
Perp.
assert(Habs : LtA A B C A B C).
apply acute_per__lta.

*****
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.
Perp.
assert(Habs : LtA A B C A B C).
apply acute_per__lta.

*****
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.
Perp.
assert(Habs : LtA A B C A B C).

*****
Habs : LtA A B C A B C
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.
Perp.
assert(Habs : LtA A B C A B C).
idtac.

*****
Habs : LtA A B C A B C
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Habs.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
intro.
assert(HInter := l8_16_1 B0 B A C B).
destruct HInter.
Col.
Perp.
assert(Habs : LtA A B C A B C).
idtac.
destruct Habs.

*****
H23 : not (CongA A B C A B C)
H21 : LeA A B C A B C
H19 : Per A B C
H17 : not (Col B0 B A)
H13 : Col B B0 C
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
CongA.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C B0 B A
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C B0 B A
+++++
apply l11_24.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C A B B0
+++++
apply lea_in_angle.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA A B C A B B0
+++++
CongA.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA A B C A B B0
+++++
Side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.
Side.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA A B C A B B0
+++++
apply lta__lea.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.
Side.
apply lta__lea.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C A B B0
+++++
apply acute_per__lta.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.
Side.
apply lta__lea.
apply acute_per__lta.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute A B C
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.
Side.
apply lta__lea.
apply acute_per__lta.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.
Side.
apply lta__lea.
apply acute_per__lta.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B B0)
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.
Side.
apply lta__lea.
apply acute_per__lta.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B B0
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.
Side.
apply lta__lea.
apply acute_per__lta.
auto.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B B0
+++++
apply perp_per_1.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.
Side.
apply lta__lea.
apply acute_per__lta.
auto.
apply perp_per_1.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A B0 B
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B B0 C
+++++
CongA.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply invert_one_side.
apply in_angle_one_side.
Col.
apply l11_24.
apply lea_in_angle.
CongA.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B B0 C
+++++
Side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B B0 A P
+++++
apply out_one_side.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply out_one_side.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (Col B B0 A)) (not (Col B B0 P))
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply (one_side_transitivity _ _ _ A).
apply out_one_side.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A P
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B B0 P Y
+++++
apply l12_6.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B B0 P Y
+++++
assert(HPar : Par B B0 P Y).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B B0 P Y
+++++
apply (l12_9 _ _ _ _ A B).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B P
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B P
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B Y
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B Y
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B0 P
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B0 P
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B0 Y
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B0 Y
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B B0 Y
+++++
apply coplanar_trans_1 with C.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply coplanar_trans_1 with C.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply coplanar_trans_1 with C.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B B0
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply coplanar_trans_1 with C.
Col.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B B0
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply coplanar_trans_1 with C.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B Y
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply coplanar_trans_1 with C.
Col.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B Y
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B B0 A B
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P Y A B
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P Y A B
+++++
Cop.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P Y A B
+++++
apply perp_right_comm.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P Y B A
+++++
apply (perp_col1 _ _ _ P).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P Y B P
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).
Col.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P Y B P
+++++
apply perp_sym.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).
Col.
apply perp_sym.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P P Y
+++++
apply (perp_col1 _ _ _ Q).
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).
Col.
apply perp_sym.
apply (perp_col1 _ _ _ Q).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Y)
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).
Col.
apply perp_sym.
apply (perp_col1 _ _ _ Q).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P P Q
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).
Col.
apply perp_sym.
apply (perp_col1 _ _ _ Q).
Col.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P P Q
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).
Col.
apply perp_sym.
apply (perp_col1 _ _ _ Q).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Y
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).
Col.
apply perp_sym.
apply (perp_col1 _ _ _ Q).
Col.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Y
+++++
Perp.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).
Col.
apply perp_sym.
apply (perp_col1 _ _ _ Q).
Col.
Perp.

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Y
+++++
ColR.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
apply (l12_9 _ _ _ _ A B).
Perp.
Cop.
apply perp_right_comm.
apply (perp_col1 _ _ _ P).

*****
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P A
+++++
Col.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).

*****
HPar : Par B B0 P Y
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B B0 P Y
+++++
destruct HPar.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
destruct HPar.

*****
H13 : Par_strict B B0 P Y
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B B0 P Y
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
destruct HPar.

*****
H13 : and (not (eq B B0)) (and (not (eq P Y)) (and (Col B P Y) (Col B0 P Y)))
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B B0 P Y
+++++
auto.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
destruct HPar.
auto.

*****
H13 : and (not (eq B B0)) (and (not (eq P Y)) (and (Col B P Y) (Col B0 P Y)))
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B B0 P Y
+++++
exfalso.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
destruct HPar.
auto.
exfalso.

*****
H13 : and (not (eq B B0)) (and (not (eq P Y)) (and (Col B P Y) (Col B0 P Y)))
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
destruct HPar.
auto.
exfalso.
spliter.

*****
H21 : Col B0 P Y
H19 : Col B P Y
H17 : not (eq P Y)
H13 : not (eq B B0)
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol2.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.
assert(HB0 := l10_15 A B B C).
destruct HB0 as [B0 []].
Col.
assert(HNCol4 : ~ Col A B B0).
idtac.
assert(HNCol5 : ~ Col B C P).
idtac.
assert_diffs.
assert(P<>Y).
idtac.
apply (col_one_side_out _ B0).
auto.
apply (one_side_transitivity _ _ _ P).
apply l12_6.
assert(HPar : Par B B0 P Y).
destruct HPar.
auto.
exfalso.
spliter.
apply HNCol2.

*****
H21 : Col B0 P Y
H19 : Col B P Y
H17 : not (eq P Y)
H13 : not (eq B B0)
H12 : not (eq P Y)
H22 : not (eq A C)
H20 : not (eq A Q0)
H16 : not (eq B Q0)
H18 : not (eq A B0)
H15 : not (eq B B0)
H14 : not (eq C P)
HNCol5 : not (Col B C P)
HNCol4 : not (Col A B B0)
H11 : OS A B C B0
H10 : Perp A B B0 B
B0 : Tpoint
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P Q
+++++
ColR.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).
intro HNCol1.
assert(HNCol2 : ~ Col B P Q).
idtac.
assert(HQ0 := cop_not_par_same_side A B Q P P C).
destruct HQ0 as [Q0 []].
Col.
Cop.
assert(HNCol3 : ~ Col A B Q0).
idtac.
assert(P<>Q0).
idtac.
assert (HSuma := ex_suma C B P B P Q0).
destruct HSuma as [D [E [F]]].
auto.
assert(HY := ospp C B P Q0 D E F).
destruct HY as [Y []].
auto.
exists Y.
split.

*****
H9 : Col P Q0 Y
H8 : Col B C Y
Y : Tpoint
H7 : SumA C B P B P Q0 D E F
D,E,F : Tpoint
H6 : not (eq P Q0)
HNCol3 : not (Col A B Q0)
H5 : OS A B C Q0
H3 : Col Q P Q0
Q0 : Tpoint
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
H0 : Col B A P
H4 : not (eq C B)
H2 : not (eq P B)
H1 : not (eq A B)
H : not (eq B Q)
HCop : Coplanar A B C Q
HPer : Per B P Q
HPQ : not (eq P Q)
Hout : Out B A P
Hacute : Acute A B C
A,B,C,P,Q : Tpoint
ospp : alternative_strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Y
+++++
ColR.
-----
Lemma original_spp__inverse_projection_postulate : alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
assert_diffs.
assert_cols.
elim(col_dec A B C).

*****

*****

+++++
Qed.
-----
End original_spp_inverse_projection_postulate.
-----
