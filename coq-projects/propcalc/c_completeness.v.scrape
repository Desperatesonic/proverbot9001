Require Export b_soundness.
-----
Require Export Decidable.
-----
Set Implicit Arguments.
-----
Module Type complete_mod (X: base_mod) (Y: sound_mod X).
-----
Import X Y.
-----
Inductive NNF : Set :=\n | NPos : PropVars -> NNF\n | NNeg : PropVars -> NNF\n | NBot : NNF\n | NTop : NNF\n | NConj : NNF -> NNF -> NNF\n | NDisj : NNF -> NNF -> NNF.
-----
Fixpoint MakeNNF (A:PropF) : NNF := match A with\n | # P   => NPos P\n | ⊥     => NBot\n | B ∨ C => NDisj (MakeNNF B) (MakeNNF C)\n | B ∧ C => NConj (MakeNNF B) (MakeNNF C)\n | B → C => NDisj (MakeNNFN B) (MakeNNF C)\n end\nwith MakeNNFN (A:PropF) : NNF := match A with\n | # P   => NNeg P\n | ⊥     => NTop\n | B ∨ C => NConj (MakeNNFN B) (MakeNNFN C)\n | B ∧ C => NDisj (MakeNNFN B) (MakeNNFN C)\n | B → C => NConj (MakeNNF B) (MakeNNFN C)\n end.
-----
Fixpoint NNFtoPropF (A:NNF) : PropF := match A with\n | NPos P    => #P\n | NNeg P    => ¬ #P\n | NBot      => ⊥\n | NTop      => ¬⊥\n | NConj B C => NNFtoPropF B ∧ NNFtoPropF C\n | NDisj B C => NNFtoPropF B ∨ NNFtoPropF C\nend.
-----
Inductive Literal :=\n| LPos : PropVars -> Literal\n| LNeg : PropVars -> Literal\n| LBot : Literal\n| LTop : Literal.
-----
Fixpoint Bar P := match P with\n| LPos Q => LNeg Q\n| LNeg Q => LPos Q\n| LBot   => LTop\n| LTop   => LBot\nend.
-----
Fixpoint LiteraltoPropF (P:Literal) : PropF := match P with\n| LPos Q => #Q\n| LNeg Q => ¬#Q\n| LBot   => ⊥\n| LTop   => ¬⊥\nend.
-----
Definition Clause := list Literal.
-----
Definition ClausetoPropF := map_fold_right LiteraltoPropF Disj ⊥.
-----
Definition CNF := list Clause.
-----
Definition CNFtoPropF := map_fold_right ClausetoPropF Conj ⊤.
-----
Definition AddClause (l:Clause) (ll:CNF) : CNF := map (fun l2 => l++l2) ll.
-----
Definition Disjunct (ll ll2:CNF) : CNF := flat_map (fun l => AddClause l ll2) ll.
-----
Fixpoint MakeCNF (A:NNF) : CNF := match A with\n | NPos P    => [[LPos P]]\n | NNeg P    => [[LNeg P]]\n | NBot      => [[LBot]]\n | NTop      => [[LTop]]\n | NConj B C => MakeCNF B ++ MakeCNF C\n | NDisj B C => Disjunct (MakeCNF B) (MakeCNF C)\n end.
-----
Definition Valid_Clause (l:Clause) := In LTop l\/exists A,(In (LPos A) l/\In (LNeg A) l).
-----
Definition Valid_CNF ll := forall l, In l ll->Valid_Clause l.
-----
Lemma Literal_eqdec : forall x y : Literal, {x = y} + {x <> y}.
-----
Lemma Literal_eqdec : forall x y : Literal, {x = y} + {x <> y}.

*****

*****
forall x y : Literal, sumbool (eq x y) (not (eq x y))
+++++
intros;destruct x;destruct y;try (right;discriminate);try (left;reflexivity); destruct (Varseq_dec p p0); (left;f_equal;assumption)||(right;intro HH;injection HH;contradiction).
-----
Lemma Literal_eqdec : forall x y : Literal, {x = y} + {x <> y}.
intros;destruct x;destruct y;try (right;discriminate);try (left;reflexivity); destruct (Varseq_dec p p0); (left;f_equal;assumption)||(right;intro HH;injection HH;contradiction).

*****

*****

+++++
Qed.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF  A))=TrueQ v  A /\\n                                    TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.

*****

*****
forall (v : forall _ : PropVars, bool) (A : PropF), and (eq (TrueQ v (NNFtoPropF (MakeNNF A))) (TrueQ v A)) (eq (TrueQ v (NNFtoPropF (MakeNNFN A))) (TrueQ v (Neg A)))
+++++
intros v A.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.

*****
v : forall _ : PropVars, bool
A : PropF
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF A))) (TrueQ v A)) (eq (TrueQ v (NNFtoPropF (MakeNNFN A))) (TrueQ v (Neg A)))
+++++
induction A.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.

*****
v : forall _ : PropVars, bool
p : PropVars
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Var p)))) (TrueQ v (Var p))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Var p)))) (TrueQ v (Neg (Var p))))
+++++
try destruct IHA.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.

*****
v : forall _ : PropVars, bool
p : PropVars
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Var p)))) (TrueQ v (Var p))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Var p)))) (TrueQ v (Neg (Var p))))
+++++
try destruct IHA1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.

*****
v : forall _ : PropVars, bool
p : PropVars
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Var p)))) (TrueQ v (Var p))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Var p)))) (TrueQ v (Neg (Var p))))
+++++
try destruct IHA2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.

*****
v : forall _ : PropVars, bool
p : PropVars
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Var p)))) (TrueQ v (Var p))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Var p)))) (TrueQ v (Neg (Var p))))
+++++
split.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
p : PropVars
*****
eq (TrueQ v (NNFtoPropF (MakeNNF (Var p)))) (TrueQ v (Var p))
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
p : PropVars
*****
eq (v p) (v p)
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
p : PropVars
*****
eq (TrueQ v (NNFtoPropF (MakeNNFN (Var p)))) (TrueQ v (Neg (Var p)))
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
p : PropVars
*****
eq (orb (negb (v p)) false) (orb (negb (v p)) false)
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.

*****
v : forall _ : PropVars, bool
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF Bot))) (TrueQ v Bot)) (eq (TrueQ v (NNFtoPropF (MakeNNFN Bot))) (TrueQ v (Neg Bot)))
+++++
try destruct IHA.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.

*****
v : forall _ : PropVars, bool
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF Bot))) (TrueQ v Bot)) (eq (TrueQ v (NNFtoPropF (MakeNNFN Bot))) (TrueQ v (Neg Bot)))
+++++
try destruct IHA1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.

*****
v : forall _ : PropVars, bool
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF Bot))) (TrueQ v Bot)) (eq (TrueQ v (NNFtoPropF (MakeNNFN Bot))) (TrueQ v (Neg Bot)))
+++++
try destruct IHA2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.

*****
v : forall _ : PropVars, bool
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF Bot))) (TrueQ v Bot)) (eq (TrueQ v (NNFtoPropF (MakeNNFN Bot))) (TrueQ v (Neg Bot)))
+++++
split.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
*****
eq (TrueQ v (NNFtoPropF (MakeNNF Bot))) (TrueQ v Bot)
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
*****
eq false false
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
*****
eq (TrueQ v (NNFtoPropF (MakeNNFN Bot))) (TrueQ v (Neg Bot))
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
*****
eq true true
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
IHA1 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1)))
IHA2 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2)))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Conj A1 A2)))) (TrueQ v (Conj A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Conj A1 A2)))) (TrueQ v (Neg (Conj A1 A2))))
+++++
try destruct IHA.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
IHA1 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1)))
IHA2 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2)))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Conj A1 A2)))) (TrueQ v (Conj A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Conj A1 A2)))) (TrueQ v (Neg (Conj A1 A2))))
+++++
try destruct IHA1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
IHA2 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2)))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Conj A1 A2)))) (TrueQ v (Conj A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Conj A1 A2)))) (TrueQ v (Neg (Conj A1 A2))))
+++++
try destruct IHA2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Conj A1 A2)))) (TrueQ v (Conj A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Conj A1 A2)))) (TrueQ v (Neg (Conj A1 A2))))
+++++
split.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2))
*****
eq (TrueQ v (NNFtoPropF (MakeNNF (Conj A1 A2)))) (TrueQ v (Conj A1 A2))
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (andb (TrueQ v A1) (TrueQ v A2))
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (andb (TrueQ v A1) (TrueQ v A2))
+++++
try rewrite H.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (andb (TrueQ v A1) (TrueQ v A2))
+++++
try rewrite H0.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (andb (TrueQ v A1) (TrueQ v A2))
+++++
try rewrite H1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (TrueQ v A2)) (andb (TrueQ v A1) (TrueQ v A2))
+++++
try rewrite H2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (TrueQ v A2)) (andb (TrueQ v A1) (TrueQ v A2))
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2))
*****
eq (TrueQ v (NNFtoPropF (MakeNNFN (Conj A1 A2)))) (TrueQ v (Neg (Conj A1 A2)))
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (andb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (andb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try rewrite H.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (andb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try rewrite H0.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (orb (negb (TrueQ v A1)) false) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (andb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try rewrite H1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (orb (negb (TrueQ v A1)) false) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (andb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try rewrite H2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (orb (negb (TrueQ v A1)) false) (orb (negb (TrueQ v A2)) false)) (orb (negb (andb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (orb (negb (TrueQ v A1)) false) (orb (negb (TrueQ v A2)) false)) (orb (negb (andb (TrueQ v A1) (TrueQ v A2))) false)
+++++
repeat rewrite orb_false_r.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (negb (andb (TrueQ v A1) (TrueQ v A2)))
+++++
repeat rewrite orb_false_l.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (negb (andb (TrueQ v A1) (TrueQ v A2)))
+++++
try rewrite negb_andb.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (orb (negb (TrueQ v A1)) (negb (TrueQ v A2)))
+++++
try rewrite negb_orb.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.
try rewrite negb_orb.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (orb (negb (TrueQ v A1)) (negb (TrueQ v A2)))
+++++
try rewrite negb_involutive.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.
try rewrite negb_orb.
try rewrite negb_involutive.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (orb (negb (TrueQ v A1)) (negb (TrueQ v A2)))
+++++
reflexivity.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
IHA1 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1)))
IHA2 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2)))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Disj A1 A2)))) (TrueQ v (Disj A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Disj A1 A2)))) (TrueQ v (Neg (Disj A1 A2))))
+++++
try destruct IHA.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
IHA1 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1)))
IHA2 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2)))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Disj A1 A2)))) (TrueQ v (Disj A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Disj A1 A2)))) (TrueQ v (Neg (Disj A1 A2))))
+++++
try destruct IHA1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
IHA2 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2)))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Disj A1 A2)))) (TrueQ v (Disj A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Disj A1 A2)))) (TrueQ v (Neg (Disj A1 A2))))
+++++
try destruct IHA2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Disj A1 A2)))) (TrueQ v (Disj A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Disj A1 A2)))) (TrueQ v (Neg (Disj A1 A2))))
+++++
split.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2))
*****
eq (TrueQ v (NNFtoPropF (MakeNNF (Disj A1 A2)))) (TrueQ v (Disj A1 A2))
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (orb (TrueQ v A1) (TrueQ v A2))
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (orb (TrueQ v A1) (TrueQ v A2))
+++++
try rewrite H.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v A1) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (orb (TrueQ v A1) (TrueQ v A2))
+++++
try rewrite H0.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v A1) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (orb (TrueQ v A1) (TrueQ v A2))
+++++
try rewrite H1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v A1) (TrueQ v A2)) (orb (TrueQ v A1) (TrueQ v A2))
+++++
try rewrite H2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v A1) (TrueQ v A2)) (orb (TrueQ v A1) (TrueQ v A2))
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2))
*****
eq (TrueQ v (NNFtoPropF (MakeNNFN (Disj A1 A2)))) (TrueQ v (Neg (Disj A1 A2)))
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try rewrite H.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try rewrite H0.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (orb (negb (TrueQ v A1)) false) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try rewrite H1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (orb (negb (TrueQ v A1)) false) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try rewrite H2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (orb (negb (TrueQ v A1)) false) (orb (negb (TrueQ v A2)) false)) (orb (negb (orb (TrueQ v A1) (TrueQ v A2))) false)
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (orb (negb (TrueQ v A1)) false) (orb (negb (TrueQ v A2)) false)) (orb (negb (orb (TrueQ v A1) (TrueQ v A2))) false)
+++++
repeat rewrite orb_false_r.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (negb (orb (TrueQ v A1) (TrueQ v A2)))
+++++
repeat rewrite orb_false_l.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (negb (orb (TrueQ v A1) (TrueQ v A2)))
+++++
try rewrite negb_andb.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (negb (orb (TrueQ v A1) (TrueQ v A2)))
+++++
try rewrite negb_orb.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.
try rewrite negb_orb.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (andb (negb (TrueQ v A1)) (negb (TrueQ v A2)))
+++++
try rewrite negb_involutive.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.
try rewrite negb_orb.
try rewrite negb_involutive.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (negb (TrueQ v A1)) (negb (TrueQ v A2))) (andb (negb (TrueQ v A1)) (negb (TrueQ v A2)))
+++++
reflexivity.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
IHA1 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1)))
IHA2 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2)))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Impl A1 A2)))) (TrueQ v (Impl A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Impl A1 A2)))) (TrueQ v (Neg (Impl A1 A2))))
+++++
try destruct IHA.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
IHA1 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1)))
IHA2 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2)))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Impl A1 A2)))) (TrueQ v (Impl A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Impl A1 A2)))) (TrueQ v (Neg (Impl A1 A2))))
+++++
try destruct IHA1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
IHA2 : and (eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2))\n (eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2)))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Impl A1 A2)))) (TrueQ v (Impl A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Impl A1 A2)))) (TrueQ v (Neg (Impl A1 A2))))
+++++
try destruct IHA2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2))
*****
and (eq (TrueQ v (NNFtoPropF (MakeNNF (Impl A1 A2)))) (TrueQ v (Impl A1 A2))) (eq (TrueQ v (NNFtoPropF (MakeNNFN (Impl A1 A2)))) (TrueQ v (Neg (Impl A1 A2))))
+++++
split.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2))
*****
eq (TrueQ v (NNFtoPropF (MakeNNF (Impl A1 A2)))) (TrueQ v (Impl A1 A2))
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
try rewrite H.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
try rewrite H0.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (orb (negb (TrueQ v A1)) false) (TrueQ v (NNFtoPropF (MakeNNF A2)))) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
try rewrite H1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (orb (negb (TrueQ v A1)) false) (TrueQ v A2)) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
try rewrite H2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (orb (negb (TrueQ v A1)) false) (TrueQ v A2)) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (orb (negb (TrueQ v A1)) false) (TrueQ v A2)) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
repeat rewrite orb_false_r.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (TrueQ v A2)) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
repeat rewrite orb_false_l.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (TrueQ v A2)) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
try rewrite negb_andb.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (TrueQ v A2)) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
try rewrite negb_orb.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.
try rewrite negb_orb.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (TrueQ v A2)) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
try rewrite negb_involutive.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.
try rewrite negb_orb.
try rewrite negb_involutive.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (orb (negb (TrueQ v A1)) (TrueQ v A2)) (orb (negb (TrueQ v A1)) (TrueQ v A2))
+++++
reflexivity.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1))) (TrueQ v (Neg A1))
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2))) (TrueQ v (Neg A2))
*****
eq (TrueQ v (NNFtoPropF (MakeNNFN (Impl A1 A2)))) (TrueQ v (Neg (Impl A1 A2)))
+++++
simpl in *.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (negb (TrueQ v A1)) (TrueQ v A2))) false)
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (negb (TrueQ v A1)) (TrueQ v A2))) false)
+++++
try rewrite H.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (negb (TrueQ v A1)) (TrueQ v A2))) false)
+++++
try rewrite H0.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (negb (TrueQ v A1)) (TrueQ v A2))) false)
+++++
try rewrite H1.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (TrueQ v (NNFtoPropF (MakeNNFN A2)))) (orb (negb (orb (negb (TrueQ v A1)) (TrueQ v A2))) false)
+++++
try rewrite H2.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (orb (negb (TrueQ v A2)) false)) (orb (negb (orb (negb (TrueQ v A1)) (TrueQ v A2))) false)
+++++
try trivial.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (orb (negb (TrueQ v A2)) false)) (orb (negb (orb (negb (TrueQ v A1)) (TrueQ v A2))) false)
+++++
repeat rewrite orb_false_r.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (negb (TrueQ v A2))) (negb (orb (negb (TrueQ v A1)) (TrueQ v A2)))
+++++
repeat rewrite orb_false_l.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (negb (TrueQ v A2))) (negb (orb (negb (TrueQ v A1)) (TrueQ v A2)))
+++++
try rewrite negb_andb.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (negb (TrueQ v A2))) (negb (orb (negb (TrueQ v A1)) (TrueQ v A2)))
+++++
try rewrite negb_orb.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.
try rewrite negb_orb.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (negb (TrueQ v A2))) (andb (negb (negb (TrueQ v A1))) (negb (TrueQ v A2)))
+++++
try rewrite negb_involutive.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.
try destruct IHA.
try destruct IHA1.
try destruct IHA2.
split.
simpl in *.
try trivial.
try rewrite H.
try rewrite H0.
try rewrite H1.
try rewrite H2.
try trivial.
repeat rewrite orb_false_r.
repeat rewrite orb_false_l.
try rewrite negb_andb.
try rewrite negb_orb.
try rewrite negb_involutive.

*****
v : forall _ : PropVars, bool
A1, A2 : PropF
H : eq (TrueQ v (NNFtoPropF (MakeNNF A1))) (TrueQ v A1)
H0 : eq (TrueQ v (NNFtoPropF (MakeNNFN A1)))\n (orb (negb (TrueQ v A1)) false)
H1 : eq (TrueQ v (NNFtoPropF (MakeNNF A2))) (TrueQ v A2)
H2 : eq (TrueQ v (NNFtoPropF (MakeNNFN A2)))\n (orb (negb (TrueQ v A2)) false)
*****
eq (andb (TrueQ v A1) (negb (TrueQ v A2))) (andb (TrueQ v A1) (negb (TrueQ v A2)))
+++++
reflexivity.
-----
Lemma NNF_equiv_valid : forall v A, TrueQ v (NNFtoPropF (MakeNNF A))=TrueQ v A /\\ TrueQ v (NNFtoPropF (MakeNNFN A))=TrueQ v ¬A.
intros v A.
induction A.

*****

*****

+++++
Qed.
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = \n                                        TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).

*****

*****
forall (v : forall _ : PropVars, bool) (ll1 ll2 : list (list Literal)), eq (TrueQ v (CNFtoPropF (app ll1 ll2))) (andb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
+++++
intros.
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).
intros.

*****
v : forall _ : PropVars, bool
ll1, ll2 : list (list Literal)
*****
eq (TrueQ v (CNFtoPropF (app ll1 ll2))) (andb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
+++++
induction ll1.
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.

*****
v : forall _ : PropVars, bool
ll2 : list (list Literal)
*****
eq (TrueQ v (CNFtoPropF (app nil ll2))) (andb (TrueQ v (CNFtoPropF nil)) (TrueQ v (CNFtoPropF ll2)))
+++++
simpl.
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.

*****
v : forall _ : PropVars, bool
ll2 : list (list Literal)
*****
eq (TrueQ v (CNFtoPropF ll2)) (TrueQ v (CNFtoPropF ll2))
+++++
reflexivity.
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.

*****
v : forall _ : PropVars, bool
a : list Literal
ll1, ll2 : list (list Literal)
IHll1 : eq (TrueQ v (CNFtoPropF (app ll1 ll2)))\n (andb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (TrueQ v (CNFtoPropF (app (cons a ll1) ll2))) (andb (TrueQ v (CNFtoPropF (cons a ll1))) (TrueQ v (CNFtoPropF ll2)))
+++++
simpl.
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.

*****
v : forall _ : PropVars, bool
a : list Literal
ll1, ll2 : list (list Literal)
IHll1 : eq (TrueQ v (CNFtoPropF (app ll1 ll2)))\n (andb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top (app ll1 ll2)))) (andb (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll1))) (TrueQ v (CNFtoPropF ll2)))
+++++
unfold CNFtoPropF in IHll1 at 1.
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF in IHll1 at 1.

*****
v : forall _ : PropVars, bool
a : list Literal
ll1, ll2 : list (list Literal)
IHll1 : eq\n (TrueQ v\n (map_fold_right ClausetoPropF Conj Top (app ll1 ll2)))\n (andb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top (app ll1 ll2)))) (andb (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll1))) (TrueQ v (CNFtoPropF ll2)))
+++++
rewrite IHll1.
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF in IHll1 at 1.
rewrite IHll1.

*****
v : forall _ : PropVars, bool
a : list Literal
ll1, ll2 : list (list Literal)
IHll1 : eq\n (TrueQ v\n (map_fold_right ClausetoPropF Conj Top (app ll1 ll2)))\n (andb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (andb (TrueQ v (ClausetoPropF a)) (andb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))) (andb (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll1))) (TrueQ v (CNFtoPropF ll2)))
+++++
apply andb_assoc.
-----
Lemma CNF_and_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (ll1 ++ ll2)) = TrueQ v (CNFtoPropF ll1) && TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.

*****

*****

+++++
Qed.
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = \n                                            TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).

*****

*****
forall (v : forall _ : PropVars, bool) (l1 l2 : list Literal), eq (TrueQ v (ClausetoPropF (app l1 l2))) (orb (TrueQ v (ClausetoPropF l1)) (TrueQ v (ClausetoPropF l2)))
+++++
intros.
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).
intros.

*****
v : forall _ : PropVars, bool
l1, l2 : list Literal
*****
eq (TrueQ v (ClausetoPropF (app l1 l2))) (orb (TrueQ v (ClausetoPropF l1)) (TrueQ v (ClausetoPropF l2)))
+++++
induction l1.
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).
intros.
induction l1.

*****
v : forall _ : PropVars, bool
l2 : list Literal
*****
eq (TrueQ v (ClausetoPropF (app nil l2))) (orb (TrueQ v (ClausetoPropF nil)) (TrueQ v (ClausetoPropF l2)))
+++++
simpl.
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).
intros.
induction l1.
simpl.

*****
v : forall _ : PropVars, bool
l2 : list Literal
*****
eq (TrueQ v (ClausetoPropF l2)) (TrueQ v (ClausetoPropF l2))
+++++
reflexivity.
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).
intros.
induction l1.

*****
v : forall _ : PropVars, bool
a : Literal
l1, l2 : list Literal
IHl1 : eq (TrueQ v (ClausetoPropF (app l1 l2)))\n (orb (TrueQ v (ClausetoPropF l1))\n (TrueQ v (ClausetoPropF l2)))
*****
eq (TrueQ v (ClausetoPropF (app (cons a l1) l2))) (orb (TrueQ v (ClausetoPropF (cons a l1))) (TrueQ v (ClausetoPropF l2)))
+++++
simpl.
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).
intros.
induction l1.
simpl.

*****
v : forall _ : PropVars, bool
a : Literal
l1, l2 : list Literal
IHl1 : eq (TrueQ v (ClausetoPropF (app l1 l2)))\n (orb (TrueQ v (ClausetoPropF l1))\n (TrueQ v (ClausetoPropF l2)))
*****
eq (orb (TrueQ v (LiteraltoPropF a)) (TrueQ v (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)))) (orb (orb (TrueQ v (LiteraltoPropF a)) (TrueQ v (map_fold_right LiteraltoPropF Disj Bot l1))) (TrueQ v (ClausetoPropF l2)))
+++++
unfold ClausetoPropF in IHl1 at 1.
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF in IHl1 at 1.

*****
v : forall _ : PropVars, bool
a : Literal
l1, l2 : list Literal
IHl1 : eq\n (TrueQ v\n (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)))\n (orb (TrueQ v (ClausetoPropF l1))\n (TrueQ v (ClausetoPropF l2)))
*****
eq (orb (TrueQ v (LiteraltoPropF a)) (TrueQ v (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)))) (orb (orb (TrueQ v (LiteraltoPropF a)) (TrueQ v (map_fold_right LiteraltoPropF Disj Bot l1))) (TrueQ v (ClausetoPropF l2)))
+++++
rewrite IHl1.
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF in IHl1 at 1.
rewrite IHl1.

*****
v : forall _ : PropVars, bool
a : Literal
l1, l2 : list Literal
IHl1 : eq\n (TrueQ v\n (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)))\n (orb (TrueQ v (ClausetoPropF l1))\n (TrueQ v (ClausetoPropF l2)))
*****
eq (orb (TrueQ v (LiteraltoPropF a)) (orb (TrueQ v (ClausetoPropF l1)) (TrueQ v (ClausetoPropF l2)))) (orb (orb (TrueQ v (LiteraltoPropF a)) (TrueQ v (map_fold_right LiteraltoPropF Disj Bot l1))) (TrueQ v (ClausetoPropF l2)))
+++++
apply orb_assoc.
-----
Lemma CNF_or_clause_valid : forall v l1 l2, TrueQ v (ClausetoPropF (l1++l2)) = TrueQ v (ClausetoPropF l1) || TrueQ v (ClausetoPropF l2).
intros.
induction l1.

*****

*****

+++++
Qed.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = \n                                            TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).

*****

*****
forall (v : forall _ : PropVars, bool) (l : Clause) (ll : CNF), eq (TrueQ v (CNFtoPropF (AddClause l ll))) (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))
+++++
intros.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.

*****
v : forall _ : PropVars, bool
l : Clause
ll : CNF
*****
eq (TrueQ v (CNFtoPropF (AddClause l ll))) (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))
+++++
induction ll.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.

*****
v : forall _ : PropVars, bool
l : Clause
*****
eq (TrueQ v (CNFtoPropF (AddClause l nil))) (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF nil)))
+++++
simpl.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.
simpl.

*****
v : forall _ : PropVars, bool
l : Clause
*****
eq true (orb (TrueQ v (ClausetoPropF l)) true)
+++++
rewrite orb_true_r.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.
simpl.
rewrite orb_true_r.

*****
v : forall _ : PropVars, bool
l : Clause
*****
eq true true
+++++
reflexivity.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.

*****
v : forall _ : PropVars, bool
l, a : Clause
ll : list Clause
IHll : eq (TrueQ v (CNFtoPropF (AddClause l ll)))\n (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))
*****
eq (TrueQ v (CNFtoPropF (AddClause l (cons a ll)))) (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF (cons a ll))))
+++++
simpl.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.
simpl.

*****
v : forall _ : PropVars, bool
l, a : Clause
ll : list Clause
IHll : eq (TrueQ v (CNFtoPropF (AddClause l ll)))\n (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))
*****
eq (andb (TrueQ v (ClausetoPropF (app l a))) (TrueQ v (map_fold_right ClausetoPropF Conj Top (AddClause l ll)))) (orb (TrueQ v (ClausetoPropF l)) (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll))))
+++++
unfold CNFtoPropF in IHll at 1.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF in IHll at 1.

*****
v : forall _ : PropVars, bool
l, a : Clause
ll : list Clause
IHll : eq\n (TrueQ v\n (map_fold_right ClausetoPropF Conj Top (AddClause l ll)))\n (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))
*****
eq (andb (TrueQ v (ClausetoPropF (app l a))) (TrueQ v (map_fold_right ClausetoPropF Conj Top (AddClause l ll)))) (orb (TrueQ v (ClausetoPropF l)) (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll))))
+++++
rewrite IHll.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF in IHll at 1.
rewrite IHll.

*****
v : forall _ : PropVars, bool
l, a : Clause
ll : list Clause
IHll : eq\n (TrueQ v\n (map_fold_right ClausetoPropF Conj Top (AddClause l ll)))\n (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))
*****
eq (andb (TrueQ v (ClausetoPropF (app l a))) (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))) (orb (TrueQ v (ClausetoPropF l)) (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll))))
+++++
rewrite CNF_or_clause_valid.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF in IHll at 1.
rewrite IHll.
rewrite CNF_or_clause_valid.

*****
v : forall _ : PropVars, bool
l, a : Clause
ll : list Clause
IHll : eq\n (TrueQ v\n (map_fold_right ClausetoPropF Conj Top (AddClause l ll)))\n (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))
*****
eq (andb (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (ClausetoPropF a))) (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))) (orb (TrueQ v (ClausetoPropF l)) (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll))))
+++++
rewrite orb_andb_distrib_r.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF in IHll at 1.
rewrite IHll.
rewrite CNF_or_clause_valid.
rewrite orb_andb_distrib_r.

*****
v : forall _ : PropVars, bool
l, a : Clause
ll : list Clause
IHll : eq\n (TrueQ v\n (map_fold_right ClausetoPropF Conj Top (AddClause l ll)))\n (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))
*****
eq (andb (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (ClausetoPropF a))) (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (CNFtoPropF ll)))) (andb (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (ClausetoPropF a))) (orb (TrueQ v (ClausetoPropF l)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll))))
+++++
reflexivity.
-----
Lemma CNF_add_clause_valid : forall v l ll, TrueQ v (CNFtoPropF (AddClause l ll)) = TrueQ v (ClausetoPropF l) || TrueQ v (CNFtoPropF ll).
intros.
induction ll.

*****

*****

+++++
Qed.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = \n                                       TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).

*****

*****
forall (v : forall _ : PropVars, bool) (ll1 ll2 : CNF), eq (TrueQ v (CNFtoPropF (Disjunct ll1 ll2))) (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
+++++
intros.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.

*****
v : forall _ : PropVars, bool
ll1, ll2 : CNF
*****
eq (TrueQ v (CNFtoPropF (Disjunct ll1 ll2))) (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
+++++
induction ll1.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.

*****
v : forall _ : PropVars, bool
ll2 : CNF
*****
eq (TrueQ v (CNFtoPropF (Disjunct nil ll2))) (orb (TrueQ v (CNFtoPropF nil)) (TrueQ v (CNFtoPropF ll2)))
+++++
simpl.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.

*****
v : forall _ : PropVars, bool
ll2 : CNF
*****
eq true true
+++++
reflexivity.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.

*****
v : forall _ : PropVars, bool
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : eq (TrueQ v (CNFtoPropF (Disjunct ll1 ll2)))\n (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (TrueQ v (CNFtoPropF (Disjunct (cons a ll1) ll2))) (orb (TrueQ v (CNFtoPropF (cons a ll1))) (TrueQ v (CNFtoPropF ll2)))
+++++
simpl.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.

*****
v : forall _ : PropVars, bool
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : eq (TrueQ v (CNFtoPropF (Disjunct ll1 ll2)))\n (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (TrueQ v (CNFtoPropF (app (AddClause a ll2) (Disjunct ll1 ll2)))) (orb (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll1))) (TrueQ v (CNFtoPropF ll2)))
+++++
rewrite CNF_and_valid.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.
rewrite CNF_and_valid.

*****
v : forall _ : PropVars, bool
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : eq (TrueQ v (CNFtoPropF (Disjunct ll1 ll2)))\n (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (andb (TrueQ v (CNFtoPropF (AddClause a ll2))) (TrueQ v (CNFtoPropF (Disjunct ll1 ll2)))) (orb (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll1))) (TrueQ v (CNFtoPropF ll2)))
+++++
rewrite IHll1.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.
rewrite CNF_and_valid.
rewrite IHll1.

*****
v : forall _ : PropVars, bool
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : eq (TrueQ v (CNFtoPropF (Disjunct ll1 ll2)))\n (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (andb (TrueQ v (CNFtoPropF (AddClause a ll2))) (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))) (orb (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll1))) (TrueQ v (CNFtoPropF ll2)))
+++++
rewrite CNF_add_clause_valid.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.
rewrite CNF_and_valid.
rewrite IHll1.
rewrite CNF_add_clause_valid.

*****
v : forall _ : PropVars, bool
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : eq (TrueQ v (CNFtoPropF (Disjunct ll1 ll2)))\n (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (andb (orb (TrueQ v (ClausetoPropF a)) (TrueQ v (CNFtoPropF ll2))) (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))) (orb (andb (TrueQ v (ClausetoPropF a)) (TrueQ v (map_fold_right ClausetoPropF Conj Top ll1))) (TrueQ v (CNFtoPropF ll2)))
+++++
rewrite orb_andb_distrib_l.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.
simpl.
rewrite CNF_and_valid.
rewrite IHll1.
rewrite CNF_add_clause_valid.
rewrite orb_andb_distrib_l.

*****
v : forall _ : PropVars, bool
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : eq (TrueQ v (CNFtoPropF (Disjunct ll1 ll2)))\n (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))
*****
eq (andb (orb (TrueQ v (ClausetoPropF a)) (TrueQ v (CNFtoPropF ll2))) (orb (TrueQ v (CNFtoPropF ll1)) (TrueQ v (CNFtoPropF ll2)))) (andb (orb (TrueQ v (ClausetoPropF a)) (TrueQ v (CNFtoPropF ll2))) (orb (TrueQ v (map_fold_right ClausetoPropF Conj Top ll1)) (TrueQ v (CNFtoPropF ll2))))
+++++
reflexivity.
-----
Lemma CNF_or_valid : forall v ll1 ll2, TrueQ v (CNFtoPropF (Disjunct ll1 ll2)) = TrueQ v (CNFtoPropF ll1) || TrueQ v (CNFtoPropF ll2).
intros.
induction ll1.

*****

*****

+++++
Qed.
-----
Theorem CNF_equiv_valid : forall v A, TrueQ v (CNFtoPropF (MakeCNF A)) = TrueQ v (NNFtoPropF A).
-----
Theorem CNF_equiv_valid : forall v A, TrueQ v (CNFtoPropF (MakeCNF A)) = TrueQ v (NNFtoPropF A).

*****

*****
forall (v : forall _ : PropVars, bool) (A : NNF), eq (TrueQ v (CNFtoPropF (MakeCNF A))) (TrueQ v (NNFtoPropF A))
+++++
intros;induction A;simpl;try reflexivity;try (destruct (v p);simpl;reflexivity;fail); [rewrite CNF_and_valid|rewrite CNF_or_valid];rewrite IHA1;rewrite IHA2;reflexivity.
-----
Theorem CNF_equiv_valid : forall v A, TrueQ v (CNFtoPropF (MakeCNF A)) = TrueQ v (NNFtoPropF A).
intros;induction A;simpl;try reflexivity;try (destruct (v p);simpl;reflexivity;fail); [rewrite CNF_and_valid|rewrite CNF_or_valid];rewrite IHA1;rewrite IHA2;reflexivity.

*****

*****

+++++
Qed.
-----
Definition Countervaluation l P := if (in_dec Literal_eqdec (LNeg P) l) then true else false.
-----
Definition Validates v Δ := exists A, In A Δ /\ Is_true (TrueQ v A).
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).

*****

*****
forall (v : forall _ : PropVars, bool) (m : list Literal) (_ : Is_true (TrueQ v (ClausetoPropF m))), Validates v (map LiteraltoPropF m)
+++++
intros.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.

*****
v : forall _ : PropVars, bool
m : list Literal
H : Is_true (TrueQ v (ClausetoPropF m))
*****
Validates v (map LiteraltoPropF m)
+++++
induction m.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.

*****
v : forall _ : PropVars, bool
H : Is_true (TrueQ v (ClausetoPropF nil))
*****
Validates v (map LiteraltoPropF nil)
+++++
contradiction.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : Is_true (TrueQ v (ClausetoPropF (cons a m)))
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
*****
Validates v (map LiteraltoPropF (cons a m))
+++++
simpl in H.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : Is_true\n (orb (TrueQ v (LiteraltoPropF a))\n (TrueQ v (map_fold_right LiteraltoPropF Disj Bot m)))
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
*****
Validates v (map LiteraltoPropF (cons a m))
+++++
case_bool v (LiteraltoPropF a).
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : True
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) true
*****
Validates v (cons (LiteraltoPropF a) (map LiteraltoPropF m))
+++++
exists (LiteraltoPropF a).
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).
exists (LiteraltoPropF a).

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : True
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) true
*****
and (In (LiteraltoPropF a) (cons (LiteraltoPropF a) (map LiteraltoPropF m))) (Is_true (TrueQ v (LiteraltoPropF a)))
+++++
split.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).
exists (LiteraltoPropF a).
split.

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : True
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) true
*****
In (LiteraltoPropF a) (cons (LiteraltoPropF a) (map LiteraltoPropF m))
+++++
in_solve.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).
exists (LiteraltoPropF a).
split.

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : True
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) true
*****
Is_true (TrueQ v (LiteraltoPropF a))
+++++
rewrite H0.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).
exists (LiteraltoPropF a).
split.
rewrite H0.

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : True
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) true
*****
Is_true true
+++++
trivial.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : Is_true (TrueQ v (map_fold_right LiteraltoPropF Disj Bot m))
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) false
*****
Validates v (cons (LiteraltoPropF a) (map LiteraltoPropF m))
+++++
destruct (IHm H) as (?&?&?).
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).
destruct (IHm H) as (?&?&?).

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : Is_true (TrueQ v (map_fold_right LiteraltoPropF Disj Bot m))
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) false
x : PropF
H1 : In x (map LiteraltoPropF m)
H2 : Is_true (TrueQ v x)
*****
Validates v (cons (LiteraltoPropF a) (map LiteraltoPropF m))
+++++
exists x.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).
destruct (IHm H) as (?&?&?).
exists x.

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : Is_true (TrueQ v (map_fold_right LiteraltoPropF Disj Bot m))
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) false
x : PropF
H1 : In x (map LiteraltoPropF m)
H2 : Is_true (TrueQ v x)
*****
and (In x (cons (LiteraltoPropF a) (map LiteraltoPropF m))) (Is_true (TrueQ v x))
+++++
split.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).
destruct (IHm H) as (?&?&?).
exists x.
split.

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : Is_true (TrueQ v (map_fold_right LiteraltoPropF Disj Bot m))
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) false
x : PropF
H1 : In x (map LiteraltoPropF m)
H2 : Is_true (TrueQ v x)
*****
In x (cons (LiteraltoPropF a) (map LiteraltoPropF m))
+++++
in_solve.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.
simpl in H.
case_bool v (LiteraltoPropF a).
destruct (IHm H) as (?&?&?).
exists x.
split.

*****
v : forall _ : PropVars, bool
a : Literal
m : list Literal
H : Is_true (TrueQ v (map_fold_right LiteraltoPropF Disj Bot m))
IHm : forall _ : Is_true (TrueQ v (ClausetoPropF m)),\n Validates v (map LiteraltoPropF m)
H0 : eq (TrueQ v (LiteraltoPropF a)) false
x : PropF
H1 : In x (map LiteraltoPropF m)
H2 : Is_true (TrueQ v x)
*****
Is_true (TrueQ v x)
+++++
assumption.
-----
Lemma TrueQ_impl_Validates : forall v m, Is_true (TrueQ v (ClausetoPropF m)) -> Validates v (map LiteraltoPropF m).
intros.
induction m.

*****

*****

+++++
Qed.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.

*****

*****
forall (l : list Literal) (_ : Validates (Countervaluation l) (map LiteraltoPropF l)), Valid_Clause l
+++++
intros l (A&H&K).
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).

*****
l : list Literal
A : PropF
H : In A (map LiteraltoPropF l)
K : Is_true (TrueQ (Countervaluation l) A)
*****
Valid_Clause l
+++++
apply in_map_iff in H as (p&?&H).
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).

*****
l : list Literal
A : PropF
p : Literal
H0 : eq (LiteraltoPropF p) A
H : In p l
K : Is_true (TrueQ (Countervaluation l) A)
*****
Valid_Clause l
+++++
subst.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.

*****
l : list Literal
p : Literal
H : In p l
K : Is_true (TrueQ (Countervaluation l) (LiteraltoPropF p))
*****
Valid_Clause l
+++++
destruct p.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.

*****
l : list Literal
p : PropVars
H : In (LPos p) l
K : Is_true (TrueQ (Countervaluation l) (LiteraltoPropF (LPos p)))
*****
Valid_Clause l
+++++
unfold Countervaluation in K.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.

*****
l : list Literal
p : PropVars
H : In (LPos p) l
K : Is_true\n (TrueQ\n (fun P : PropVars =>\n if in_dec Literal_eqdec (LNeg P) l then true else false)\n (LiteraltoPropF (LPos p)))
*****
Valid_Clause l
+++++
simpl in K.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.

*****
l : list Literal
p : PropVars
H : In (LPos p) l
K : Is_true (if in_dec Literal_eqdec (LNeg p) l then true else false)
*****
Valid_Clause l
+++++
destruct (in_dec Literal_eqdec (LNeg p) l).
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.
destruct (in_dec Literal_eqdec (LNeg p) l).

*****
l : list Literal
p : PropVars
H : In (LPos p) l
i : In (LNeg p) l
K : Is_true true
*****
Valid_Clause l
+++++
right.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.
destruct (in_dec Literal_eqdec (LNeg p) l).
right.

*****
l : list Literal
p : PropVars
H : In (LPos p) l
i : In (LNeg p) l
K : Is_true true
*****
ex (fun A : PropVars => and (In (LPos A) l) (In (LNeg A) l))
+++++
eauto.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.
destruct (in_dec Literal_eqdec (LNeg p) l).

*****
l : list Literal
p : PropVars
H : In (LPos p) l
n : not (In (LNeg p) l)
K : Is_true false
*****
Valid_Clause l
+++++
contradiction.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.

*****
l : list Literal
p : PropVars
H : In (LNeg p) l
K : Is_true (TrueQ (Countervaluation l) (LiteraltoPropF (LNeg p)))
*****
Valid_Clause l
+++++
unfold Countervaluation in K.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.

*****
l : list Literal
p : PropVars
H : In (LNeg p) l
K : Is_true\n (TrueQ\n (fun P : PropVars =>\n if in_dec Literal_eqdec (LNeg P) l then true else false)\n (LiteraltoPropF (LNeg p)))
*****
Valid_Clause l
+++++
simpl in K.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.

*****
l : list Literal
p : PropVars
H : In (LNeg p) l
K : Is_true\n (orb\n (negb\n (if in_dec Literal_eqdec (LNeg p) l then true else false))\n false)
*****
Valid_Clause l
+++++
destruct (in_dec Literal_eqdec (LNeg p) l).
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.
destruct (in_dec Literal_eqdec (LNeg p) l).

*****
l : list Literal
p : PropVars
H, i : In (LNeg p) l
K : Is_true (orb (negb true) false)
*****
Valid_Clause l
+++++
contradiction.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.
destruct (in_dec Literal_eqdec (LNeg p) l).

*****
l : list Literal
p : PropVars
H : In (LNeg p) l
n : not (In (LNeg p) l)
K : Is_true (orb (negb false) false)
*****
Valid_Clause l
+++++
contradiction.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.

*****
l : list Literal
H : In LBot l
K : Is_true (TrueQ (Countervaluation l) (LiteraltoPropF LBot))
*****
Valid_Clause l
+++++
unfold Countervaluation in K.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.

*****
l : list Literal
H : In LBot l
K : Is_true\n (TrueQ\n (fun P : PropVars =>\n if in_dec Literal_eqdec (LNeg P) l then true else false)\n (LiteraltoPropF LBot))
*****
Valid_Clause l
+++++
simpl in K.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.

*****
l : list Literal
H : In LBot l
K : False
*****
Valid_Clause l
+++++
contradiction.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.

*****
l : list Literal
H : In LTop l
K : Is_true (TrueQ (Countervaluation l) (LiteraltoPropF LTop))
*****
Valid_Clause l
+++++
unfold Countervaluation in K.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.

*****
l : list Literal
H : In LTop l
K : Is_true\n (TrueQ\n (fun P : PropVars =>\n if in_dec Literal_eqdec (LNeg P) l then true else false)\n (LiteraltoPropF LTop))
*****
Valid_Clause l
+++++
simpl in K.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.

*****
K : True
H : In LTop l
l : list Literal
*****
Valid_Clause l
+++++
left.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.
unfold Countervaluation in K.
simpl in K.
left.

*****
K : True
H : In LTop l
l : list Literal
*****
In LTop l
+++++
assumption.
-----
Lemma Validated_valid : forall l, Validates (Countervaluation l) (map LiteraltoPropF l) -> Valid_Clause l.
intros l (A&H&K).
apply in_map_iff in H as (p&?&H).
subst.
destruct p.

*****

*****

+++++
Qed.
-----
Theorem Clause_valid : forall l, Valid (ClausetoPropF l) -> Valid_Clause l.
-----
Theorem Clause_valid : forall l, Valid (ClausetoPropF l) -> Valid_Clause l.

*****

*****
forall (l : list Literal) (_ : Valid (ClausetoPropF l)), Valid_Clause l
+++++
intros.
-----
Theorem Clause_valid : forall l, Valid (ClausetoPropF l) -> Valid_Clause l.
intros.

*****
l : list Literal
H : Valid (ClausetoPropF l)
*****
Valid_Clause l
+++++
apply Validated_valid.
-----
Theorem Clause_valid : forall l, Valid (ClausetoPropF l) -> Valid_Clause l.
intros.
apply Validated_valid.

*****
l : list Literal
H : Valid (ClausetoPropF l)
*****
Validates (Countervaluation l) (map LiteraltoPropF l)
+++++
apply TrueQ_impl_Validates.
-----
Theorem Clause_valid : forall l, Valid (ClausetoPropF l) -> Valid_Clause l.
intros.
apply Validated_valid.
apply TrueQ_impl_Validates.

*****
l : list Literal
H : Valid (ClausetoPropF l)
*****
Is_true (TrueQ (Countervaluation l) (ClausetoPropF l))
+++++
apply H.
-----
Theorem Clause_valid : forall l, Valid (ClausetoPropF l) -> Valid_Clause l.
intros.
apply Validated_valid.
apply TrueQ_impl_Validates.
apply H.

*****
l : list Literal
H : Valid (ClausetoPropF l)
*****
Satisfies (Countervaluation l) nil
+++++
intros ? Q.
-----
Theorem Clause_valid : forall l, Valid (ClausetoPropF l) -> Valid_Clause l.
intros.
apply Validated_valid.
apply TrueQ_impl_Validates.
apply H.
intros ? Q.

*****
l : list Literal
H : Valid (ClausetoPropF l)
A : PropF
Q : In A nil
*****
Is_true (TrueQ (Countervaluation l) A)
+++++
destruct Q.
-----
Theorem Clause_valid : forall l, Valid (ClausetoPropF l) -> Valid_Clause l.
intros.
apply Validated_valid.
apply TrueQ_impl_Validates.
apply H.
intros ? Q.
destruct Q.

*****

*****

+++++
Qed.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.

*****

*****
forall (ll : list (list Literal)) (_ : Valid (CNFtoPropF ll)), Valid_CNF ll
+++++
induction ll.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.

*****

*****
forall _ : Valid (CNFtoPropF nil), Valid_CNF nil
+++++
intros ? ? H0.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.

*****
H : Valid (CNFtoPropF nil)
l : Clause
H0 : In l nil
*****
Valid_Clause l
+++++
destruct H0.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
*****
forall _ : Valid (CNFtoPropF (cons a ll)), Valid_CNF (cons a ll)
+++++
intros ? ? H0.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l (cons a ll)
*****
Valid_Clause l
+++++
destruct H0.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : eq a l
*****
Valid_Clause l
+++++
subst.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.

*****
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
l : Clause
H : Valid (CNFtoPropF (cons l ll))
*****
Valid_Clause l
+++++
apply Clause_valid.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply Clause_valid.

*****
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
l : Clause
H : Valid (CNFtoPropF (cons l ll))
*****
Valid (ClausetoPropF l)
+++++
intros v K.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply Clause_valid.
intros v K.

*****
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
l : Clause
H : Valid (CNFtoPropF (cons l ll))
v : forall _ : PropVars, bool
K : Satisfies v nil
*****
Is_true (TrueQ v (ClausetoPropF l))
+++++
remember (H v K) as i eqn:x.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply Clause_valid.
intros v K.
remember (H v K) as i eqn:x.

*****
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
l : Clause
H : Valid (CNFtoPropF (cons l ll))
v : forall _ : PropVars, bool
K : Satisfies v nil
i : Is_true (TrueQ v (CNFtoPropF (cons l ll)))
x : eq i (H v K)
*****
Is_true (TrueQ v (ClausetoPropF l))
+++++
clear x.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply Clause_valid.
intros v K.
remember (H v K) as i eqn:x.
clear x.

*****
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
l : Clause
H : Valid (CNFtoPropF (cons l ll))
v : forall _ : PropVars, bool
K : Satisfies v nil
i : Is_true (TrueQ v (CNFtoPropF (cons l ll)))
*****
Is_true (TrueQ v (ClausetoPropF l))
+++++
simpl in i.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply Clause_valid.
intros v K.
remember (H v K) as i eqn:x.
clear x.
simpl in i.

*****
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
l : Clause
H : Valid (CNFtoPropF (cons l ll))
v : forall _ : PropVars, bool
K : Satisfies v nil
i : Is_true\n (andb (TrueQ v (ClausetoPropF l))\n (TrueQ v (map_fold_right ClausetoPropF Conj Top ll)))
*****
Is_true (TrueQ v (ClausetoPropF l))
+++++
case_bool v (ClausetoPropF l).
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l ll
*****
Valid_Clause l
+++++
subst.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l ll
*****
Valid_Clause l
+++++
apply IHll.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply IHll.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l ll
*****
Valid (CNFtoPropF ll)
+++++
intros v K.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply IHll.
intros v K.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l ll
v : forall _ : PropVars, bool
K : Satisfies v nil
*****
Is_true (TrueQ v (CNFtoPropF ll))
+++++
remember (H v K).
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply IHll.
intros v K.
remember (H v K).

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l ll
v : forall _ : PropVars, bool
K : Satisfies v nil
i : Is_true (TrueQ v (CNFtoPropF (cons a ll)))
Heqi : eq i (H v K)
*****
Is_true (TrueQ v (CNFtoPropF ll))
+++++
eapply proj2.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply IHll.
intros v K.
remember (H v K).
eapply proj2.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l ll
v : forall _ : PropVars, bool
K : Satisfies v nil
i : Is_true (TrueQ v (CNFtoPropF (cons a ll)))
Heqi : eq i (H v K)
*****
and ?A (Is_true (TrueQ v (CNFtoPropF ll)))
+++++
apply andb_prop_elim.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply IHll.
intros v K.
remember (H v K).
eapply proj2.
apply andb_prop_elim.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l ll
v : forall _ : PropVars, bool
K : Satisfies v nil
i : Is_true (TrueQ v (CNFtoPropF (cons a ll)))
Heqi : eq i (H v K)
*****
Is_true (andb ?a (TrueQ v (CNFtoPropF ll)))
+++++
rewrite <- CNF_and_valid.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply IHll.
intros v K.
remember (H v K).
eapply proj2.
apply andb_prop_elim.
rewrite <- CNF_and_valid.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l ll
v : forall _ : PropVars, bool
K : Satisfies v nil
i : Is_true (TrueQ v (CNFtoPropF (cons a ll)))
Heqi : eq i (H v K)
*****
Is_true (TrueQ v (CNFtoPropF (app ?Goal0 ll)))
+++++
change (a::ll) with ([a]++ll) in H.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply IHll.
intros v K.
remember (H v K).
eapply proj2.
apply andb_prop_elim.
rewrite <- CNF_and_valid.
change (a::ll) with ([a]++ll) in H.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (app (cons a nil) ll))
l : Clause
H0 : In l ll
v : forall _ : PropVars, bool
K : Satisfies v nil
i : Is_true (TrueQ v (CNFtoPropF (cons a ll)))
Heqi : eq i (H v K)
*****
Is_true (TrueQ v (CNFtoPropF (app ?Goal0 ll)))
+++++
eapply H.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply IHll.
intros v K.
remember (H v K).
eapply proj2.
apply andb_prop_elim.
rewrite <- CNF_and_valid.
change (a::ll) with ([a]++ll) in H.
eapply H.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (app (cons a nil) ll))
l : Clause
H0 : In l ll
v : forall _ : PropVars, bool
K : Satisfies v nil
i : Is_true (TrueQ v (CNFtoPropF (cons a ll)))
Heqi : eq i (H v K)
*****
Satisfies v nil
+++++
assumption.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.
intros ? ? H0.
destruct H0.
subst.
apply IHll.

*****
a : list Literal
ll : list (list Literal)
IHll : forall _ : Valid (CNFtoPropF ll), Valid_CNF ll
H : Valid (CNFtoPropF (cons a ll))
l : Clause
H0 : In l ll
*****
In l ll
+++++
assumption.
-----
Theorem CNF_valid : forall ll, Valid (CNFtoPropF ll) -> Valid_CNF ll.
induction ll.

*****

*****

+++++
Qed.
-----
Lemma Clause_provable_3 : forall a l1 l2 Γ, In (LiteraltoPropF a) Γ -> Γ ⊢ ClausetoPropF (l1++a::l2).
-----
Lemma Clause_provable_3 : forall a l1 l2 Γ, In (LiteraltoPropF a) Γ -> Γ ⊢ ClausetoPropF (l1++a::l2).

*****

*****
forall (a : Literal) (l1 l2 : list Literal) (Γ : list PropF) (_ : In (LiteraltoPropF a) Γ), Nc Γ (ClausetoPropF (app l1 (cons a l2)))
+++++
intros.
-----
Lemma Clause_provable_3 : forall a l1 l2 Γ, In (LiteraltoPropF a) Γ -> Γ ⊢ ClausetoPropF (l1++a::l2).
intros.

*****
a : Literal
l1, l2 : list Literal
Γ : list PropF
H : In (LiteraltoPropF a) Γ
*****
Nc Γ (ClausetoPropF (app l1 (cons a l2)))
+++++
induction l1.
-----
Lemma Clause_provable_3 : forall a l1 l2 Γ, In (LiteraltoPropF a) Γ -> Γ ⊢ ClausetoPropF (l1++a::l2).
intros.
induction l1.

*****
a : Literal
l2 : list Literal
Γ : list PropF
H : In (LiteraltoPropF a) Γ
*****
Nc Γ (ClausetoPropF (app nil (cons a l2)))
+++++
apply OrI1.
-----
Lemma Clause_provable_3 : forall a l1 l2 Γ, In (LiteraltoPropF a) Γ -> Γ ⊢ ClausetoPropF (l1++a::l2).
intros.
induction l1.
apply OrI1.

*****
a : Literal
l2 : list Literal
Γ : list PropF
H : In (LiteraltoPropF a) Γ
*****
Nc Γ (LiteraltoPropF a)
+++++
is_ass.
-----
Lemma Clause_provable_3 : forall a l1 l2 Γ, In (LiteraltoPropF a) Γ -> Γ ⊢ ClausetoPropF (l1++a::l2).
intros.
induction l1.

*****
a, a0 : Literal
l1, l2 : list Literal
Γ : list PropF
H : In (LiteraltoPropF a) Γ
IHl1 : Nc Γ (ClausetoPropF (app l1 (cons a l2)))
*****
Nc Γ (ClausetoPropF (app (cons a0 l1) (cons a l2)))
+++++
apply OrI2.
-----
Lemma Clause_provable_3 : forall a l1 l2 Γ, In (LiteraltoPropF a) Γ -> Γ ⊢ ClausetoPropF (l1++a::l2).
intros.
induction l1.
apply OrI2.

*****
a, a0 : Literal
l1, l2 : list Literal
Γ : list PropF
H : In (LiteraltoPropF a) Γ
IHl1 : Nc Γ (ClausetoPropF (app l1 (cons a l2)))
*****
Nc Γ ((fix map_fold_right (A B : Type) (f : forall _ : B, A) (g : forall (_ : A) (_ : A), A) (a : A) (l : list B) {struct l} : A := match l with | nil => a | cons b l2 => g (f b) (map_fold_right A B f g a l2) end) PropF Literal LiteraltoPropF Disj Bot ((fix app (l m : list Literal) {struct l} : list Literal := match l with | nil => m | cons a l1 => cons a (app l1 m) end) l1 (cons a l2)))
+++++
assumption.
-----
Lemma Clause_provable_3 : forall a l1 l2 Γ, In (LiteraltoPropF a) Γ -> Γ ⊢ ClausetoPropF (l1++a::l2).
intros.
induction l1.

*****

*****

+++++
Qed.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).

*****

*****
forall (a : Literal) (l1 l2 l3 : list Literal), Provable (ClausetoPropF (app l1 (cons (Bar a) (app l2 (cons a l3)))))
+++++
intros.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.

*****
a : Literal
l1, l2, l3 : list Literal
*****
Provable (ClausetoPropF (app l1 (cons (Bar a) (app l2 (cons a l3)))))
+++++
induction l1.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.

*****
a : Literal
l2, l3 : list Literal
*****
Provable (ClausetoPropF (app nil (cons (Bar a) (app l2 (cons a l3)))))
+++++
apply BotC.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.

*****
a : Literal
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (app nil (cons (Bar a) (app l2 (cons a l3)))))) nil) Bot
+++++
mp.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.

*****
a : Literal
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (app nil (cons (Bar a) (app l2 (cons a l3)))))) nil) (Impl ?A Bot)
+++++
is_ass.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.

*****
a : Literal
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (app nil (cons (Bar a) (app l2 (cons a l3)))))) nil) (ClausetoPropF (app nil (cons (Bar a) (app l2 (cons a l3)))))
+++++
destruct a.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (app nil (cons (Bar (LPos p)) (app l2 (cons (LPos p) l3)))))) nil) (ClausetoPropF (app nil (cons (Bar (LPos p)) (app l2 (cons (LPos p) l3)))))
+++++
simpl.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons (LNeg p) (app l2 (cons (LPos p) l3))))) nil) (ClausetoPropF (cons (LNeg p) (app l2 (cons (LPos p) l3))))
+++++
apply OrI1.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons (LNeg p) (app l2 (cons (LPos p) l3))))) nil) (LiteraltoPropF (LNeg p))
+++++
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (app nil (cons (Bar (LNeg p)) (app l2 (cons (LNeg p) l3)))))) nil) (ClausetoPropF (app nil (cons (Bar (LNeg p)) (app l2 (cons (LNeg p) l3)))))
+++++
simpl.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil) (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))
+++++
apply OrI1.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil) (LiteraltoPropF (LPos p))
+++++
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil) (LiteraltoPropF (LPos p))
+++++
apply BotC.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (LiteraltoPropF (LPos p))) (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil)) Bot
+++++
mp.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (LiteraltoPropF (LPos p))) (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil)) (Impl ?A Bot)
+++++
constructor.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.
constructor.

*****
p : PropVars
l2, l3 : list Literal
*****
In (Impl ?A Bot) (cons (Neg (LiteraltoPropF (LPos p))) (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil))
+++++
constructor 2.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.
constructor.
constructor 2.

*****
p : PropVars
l2, l3 : list Literal
*****
In (Impl ?A Bot) (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil)
+++++
in_solve.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (LiteraltoPropF (LPos p))) (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil)) (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))
+++++
apply OrI2.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.
apply OrI2.

*****
p : PropVars
l2, l3 : list Literal
*****
Nc (cons (Neg (LiteraltoPropF (LPos p))) (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil)) ((fix map_fold_right (A B : Type) (f : forall _ : B, A) (g : forall (_ : A) (_ : A), A) (a : A) (l : list B) {struct l} : A := match l with | nil => a | cons b l2 => g (f b) (map_fold_right A B f g a l2) end) PropF Literal LiteraltoPropF Disj Bot (app l2 (cons (LNeg p) l3)))
+++++
apply Clause_provable_3.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.
apply OrI2.
apply Clause_provable_3.

*****
p : PropVars
l2, l3 : list Literal
*****
In (LiteraltoPropF (LNeg p)) (cons (Neg (LiteraltoPropF (LPos p))) (cons (Neg (ClausetoPropF (cons (LPos p) (app l2 (cons (LNeg p) l3))))) nil))
+++++
in_solve.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (app nil (cons (Bar LBot) (app l2 (cons LBot l3)))))) nil) (ClausetoPropF (app nil (cons (Bar LBot) (app l2 (cons LBot l3)))))
+++++
simpl.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons LTop (app l2 (cons LBot l3))))) nil) (ClausetoPropF (cons LTop (app l2 (cons LBot l3))))
+++++
apply OrI1.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons LTop (app l2 (cons LBot l3))))) nil) (LiteraltoPropF LTop)
+++++
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (app nil (cons (Bar LTop) (app l2 (cons LTop l3)))))) nil) (ClausetoPropF (app nil (cons (Bar LTop) (app l2 (cons LTop l3)))))
+++++
simpl.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil) (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))
+++++
apply OrI1.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil) (LiteraltoPropF LBot)
+++++
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil) (LiteraltoPropF LBot)
+++++
apply BotC.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (LiteraltoPropF LBot)) (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil)) Bot
+++++
mp.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (LiteraltoPropF LBot)) (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil)) (Impl ?A Bot)
+++++
constructor.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.
constructor.

*****
l2, l3 : list Literal
*****
In (Impl ?A Bot) (cons (Neg (LiteraltoPropF LBot)) (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil))
+++++
constructor 2.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.
constructor.
constructor 2.

*****
l2, l3 : list Literal
*****
In (Impl ?A Bot) (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil)
+++++
in_solve.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (LiteraltoPropF LBot)) (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil)) (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))
+++++
apply OrI2.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.
apply OrI2.

*****
l2, l3 : list Literal
*****
Nc (cons (Neg (LiteraltoPropF LBot)) (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil)) ((fix map_fold_right (A B : Type) (f : forall _ : B, A) (g : forall (_ : A) (_ : A), A) (a : A) (l : list B) {struct l} : A := match l with | nil => a | cons b l2 => g (f b) (map_fold_right A B f g a l2) end) PropF Literal LiteraltoPropF Disj Bot (app l2 (cons LTop l3)))
+++++
apply Clause_provable_3.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply BotC.
mp.
destruct a.
simpl.
apply OrI1.
try (apply ImpI;mp;[is_ass|apply OrI2;apply Clause_provable_3;in_solve]).
apply BotC.
mp.
apply OrI2.
apply Clause_provable_3.

*****
l2, l3 : list Literal
*****
In (LiteraltoPropF LTop) (cons (Neg (LiteraltoPropF LBot)) (cons (Neg (ClausetoPropF (cons LBot (app l2 (cons LTop l3))))) nil))
+++++
in_solve.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.

*****
a, a0 : Literal
l1, l2, l3 : list Literal
IHl1 : Provable\n (ClausetoPropF (app l1 (cons (Bar a) (app l2 (cons a l3)))))
*****
Provable (ClausetoPropF (app (cons a0 l1) (cons (Bar a) (app l2 (cons a l3)))))
+++++
apply OrI2.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.
apply OrI2.

*****
a, a0 : Literal
l1, l2, l3 : list Literal
IHl1 : Provable\n (ClausetoPropF (app l1 (cons (Bar a) (app l2 (cons a l3)))))
*****
Nc nil ((fix map_fold_right (A B : Type) (f : forall _ : B, A) (g : forall (_ : A) (_ : A), A) (a : A) (l : list B) {struct l} : A := match l with | nil => a | cons b l2 => g (f b) (map_fold_right A B f g a l2) end) PropF Literal LiteraltoPropF Disj Bot ((fix app (l m : list Literal) {struct l} : list Literal := match l with | nil => m | cons a l1 => cons a (app l1 m) end) l1 (cons (Bar a) (app l2 (cons a l3)))))
+++++
assumption.
-----
Lemma Clause_provable_2 : forall a l1 l2 l3, Provable (ClausetoPropF (l1++(Bar a)::l2++a::l3)).
intros.
induction l1.

*****

*****

+++++
Qed.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).

*****

*****
forall (l : Clause) (_ : Valid_Clause l), Provable (ClausetoPropF l)
+++++
intros ? [?|(?&?&?)].
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].

*****
l : Clause
H : In LTop l
*****
Provable (ClausetoPropF l)
+++++
apply in_split in H as (?&?&?).
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).

*****
l : Clause
x, x0 : list Literal
H : eq l (app x (cons LTop x0))
*****
Provable (ClausetoPropF l)
+++++
subst.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.

*****
x, x0 : list Literal
*****
Provable (ClausetoPropF (app x (cons LTop x0)))
+++++
induction x.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
induction x.

*****
x0 : list Literal
*****
Provable (ClausetoPropF (app nil (cons LTop x0)))
+++++
simpl.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
induction x.
simpl.

*****
x0 : list Literal
*****
Provable (ClausetoPropF (cons LTop x0))
+++++
apply OrI1.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
induction x.
simpl.
apply OrI1.

*****
x0 : list Literal
*****
Nc nil (LiteraltoPropF LTop)
+++++
simpl.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
induction x.
simpl.
apply OrI1.
simpl.

*****
x0 : list Literal
*****
Nc nil (Neg Bot)
+++++
apply ImpI.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
induction x.
simpl.
apply OrI1.
simpl.
apply ImpI.

*****
x0 : list Literal
*****
Nc (cons Bot nil) Bot
+++++
is_ass.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
induction x.

*****
a : Literal
x, x0 : list Literal
IHx : Provable (ClausetoPropF (app x (cons LTop x0)))
*****
Provable (ClausetoPropF (app (cons a x) (cons LTop x0)))
+++++
simpl.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
induction x.
simpl.

*****
a : Literal
x, x0 : list Literal
IHx : Provable (ClausetoPropF (app x (cons LTop x0)))
*****
Provable (ClausetoPropF (cons a (app x (cons LTop x0))))
+++++
apply OrI2.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
induction x.
simpl.
apply OrI2.

*****
a : Literal
x, x0 : list Literal
IHx : Provable (ClausetoPropF (app x (cons LTop x0)))
*****
Nc nil ((fix map_fold_right (A B : Type) (f : forall _ : B, A) (g : forall (_ : A) (_ : A), A) (a : A) (l : list B) {struct l} : A := match l with | nil => a | cons b l2 => g (f b) (map_fold_right A B f g a l2) end) PropF Literal LiteraltoPropF Disj Bot (app x (cons LTop x0)))
+++++
apply IHx.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].

*****
l : Clause
x : PropVars
H : In (LPos x) l
H0 : In (LNeg x) l
*****
Provable (ClausetoPropF l)
+++++
apply in_split in H as (?&?&?).
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).

*****
l : Clause
x : PropVars
x0, x1 : list Literal
H : eq l (app x0 (cons (LPos x) x1))
H0 : In (LNeg x) l
*****
Provable (ClausetoPropF l)
+++++
subst.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.

*****
x : PropVars
x0, x1 : list Literal
H0 : In (LNeg x) (app x0 (cons (LPos x) x1))
*****
Provable (ClausetoPropF (app x0 (cons (LPos x) x1)))
+++++
apply in_app_or in H0 as [].
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].

*****
x : PropVars
x0, x1 : list Literal
H : In (LNeg x) x0
*****
Provable (ClausetoPropF (app x0 (cons (LPos x) x1)))
+++++
apply in_split in H as (?&?&?).
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].
apply in_split in H as (?&?&?).

*****
x : PropVars
x0, x1, x2, x3 : list Literal
H : eq x0 (app x2 (cons (LNeg x) x3))
*****
Provable (ClausetoPropF (app x0 (cons (LPos x) x1)))
+++++
subst.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].
apply in_split in H as (?&?&?).
subst.

*****
x : PropVars
x1, x2, x3 : list Literal
*****
Provable (ClausetoPropF (app (app x2 (cons (LNeg x) x3)) (cons (LPos x) x1)))
+++++
rewrite app_ass.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].
apply in_split in H as (?&?&?).
subst.
rewrite app_ass.

*****
x : PropVars
x1, x2, x3 : list Literal
*****
Provable (ClausetoPropF (app x2 (app (cons (LNeg x) x3) (cons (LPos x) x1))))
+++++
apply (Clause_provable_2 (LPos x)).
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].

*****
x : PropVars
x0, x1 : list Literal
H : In (LNeg x) (cons (LPos x) x1)
*****
Provable (ClausetoPropF (app x0 (cons (LPos x) x1)))
+++++
inversion H.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].
inversion H.

*****
x : PropVars
x0, x1 : list Literal
H : In (LNeg x) (cons (LPos x) x1)
H0 : eq (LPos x) (LNeg x)
*****
Provable (ClausetoPropF (app x0 (cons (LPos x) x1)))
+++++
discriminate.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].
inversion H.

*****
x : PropVars
x0, x1 : list Literal
H : In (LNeg x) (cons (LPos x) x1)
H0 : In (LNeg x) x1
*****
Provable (ClausetoPropF (app x0 (cons (LPos x) x1)))
+++++
idtac.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].
inversion H.
idtac.

*****
x : PropVars
x0, x1 : list Literal
H : In (LNeg x) (cons (LPos x) x1)
H0 : In (LNeg x) x1
*****
Provable (ClausetoPropF (app x0 (cons (LPos x) x1)))
+++++
apply in_split in H0 as (?&?&?).
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].
inversion H.
idtac.
apply in_split in H0 as (?&?&?).

*****
x : PropVars
x0, x1 : list Literal
H : In (LNeg x) (cons (LPos x) x1)
x2, x3 : list Literal
H0 : eq x1 (app x2 (cons (LNeg x) x3))
*****
Provable (ClausetoPropF (app x0 (cons (LPos x) x1)))
+++++
subst.
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].
apply in_split in H as (?&?&?).
subst.
apply in_app_or in H0 as [].
inversion H.
idtac.
apply in_split in H0 as (?&?&?).
subst.

*****
x : PropVars
x0, x2, x3 : list Literal
H : In (LNeg x) (cons (LPos x) (app x2 (cons (LNeg x) x3)))
*****
Provable (ClausetoPropF (app x0 (cons (LPos x) (app x2 (cons (LNeg x) x3)))))
+++++
apply (Clause_provable_2 (LNeg x)).
-----
Theorem Clause_provable : forall l, Valid_Clause l -> Provable (ClausetoPropF l).
intros ? [?|(?&?&?)].

*****

*****

+++++
Qed.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).

*****

*****
forall (ll : list Clause) (_ : Valid_CNF ll), Provable (CNFtoPropF ll)
+++++
intros.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.

*****
ll : list Clause
H : Valid_CNF ll
*****
Provable (CNFtoPropF ll)
+++++
induction ll.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.

*****
H : Valid_CNF nil
*****
Provable (CNFtoPropF nil)
+++++
unfold CNFtoPropF.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.

*****
H : Valid_CNF nil
*****
Provable (map_fold_right ClausetoPropF Conj Top nil)
+++++
simpl.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.

*****
H : Valid_CNF nil
*****
Provable Top
+++++
apply ImpI.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
apply ImpI.

*****
H : Valid_CNF nil
*****
Nc (cons Bot nil) Bot
+++++
is_ass.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
*****
Provable (CNFtoPropF (cons a ll))
+++++
unfold CNFtoPropF.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
*****
Provable (map_fold_right ClausetoPropF Conj Top (cons a ll))
+++++
simpl.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
*****
Provable (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll))
+++++
eapply AndI.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
*****
Nc nil (ClausetoPropF a)
+++++
apply Clause_provable.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.
apply Clause_provable.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
*****
Valid_Clause a
+++++
apply H.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.
apply Clause_provable.
apply H.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
*****
In a (cons a ll)
+++++
constructor.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.
apply Clause_provable.
apply H.
constructor.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
*****
eq a a
+++++
reflexivity.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
*****
Nc nil (map_fold_right ClausetoPropF Conj Top ll)
+++++
apply IHll.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.
apply IHll.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
*****
Valid_CNF ll
+++++
intro.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.
apply IHll.
intro.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
l : Clause
*****
forall _ : In l ll, Valid_Clause l
+++++
intro.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.
apply IHll.
intro.
intro.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
l : Clause
H0 : In l ll
*****
Valid_Clause l
+++++
apply H.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.
apply IHll.
intro.
intro.
apply H.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
l : Clause
H0 : In l ll
*****
In l (cons a ll)
+++++
constructor 2.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.
unfold CNFtoPropF.
simpl.
eapply AndI.
apply IHll.
intro.
intro.
apply H.
constructor 2.

*****
a : Clause
ll : list Clause
H : Valid_CNF (cons a ll)
IHll : forall _ : Valid_CNF ll, Provable (CNFtoPropF ll)
l : Clause
H0 : In l ll
*****
In l ll
+++++
assumption.
-----
Theorem CNF_provable : forall ll, Valid_CNF ll -> Provable (CNFtoPropF ll).
intros.
induction ll.

*****

*****

+++++
Qed.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.

*****

*****
forall (A1 A2 B1 B2 : PropF) (Γ : list PropF) (_ : Provable (Impl A1 A2)) (_ : Provable (Impl B1 B2)) (_ : In (Disj A1 B1) Γ), Nc Γ (Disj A2 B2)
+++++
intros.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H : Provable (Impl A1 A2)
H0 : Provable (Impl B1 B2)
H1 : In (Disj A1 B1) Γ
*****
Nc Γ (Disj A2 B2)
+++++
prov_impl_in H.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H0 : Provable (Impl B1 B2)
H1 : In (Disj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
*****
Nc Γ (Disj A2 B2)
+++++
prov_impl_in H0.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.
prov_impl_in H0.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Disj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc Γ (Disj A2 B2)
+++++
eapply OrE.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.
prov_impl_in H0.
eapply OrE.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Disj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc Γ (Disj ?A ?B)
+++++
is_ass.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.
prov_impl_in H0.
eapply OrE.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Disj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc (cons A1 Γ) (Disj A2 B2)
+++++
apply OrI1.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.
prov_impl_in H0.
eapply OrE.
apply OrI1.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Disj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc (cons A1 Γ) A2
+++++
apply K.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.
prov_impl_in H0.
eapply OrE.
apply OrI1.
apply K.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Disj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc (cons A1 Γ) A1
+++++
is_ass.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.
prov_impl_in H0.
eapply OrE.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Disj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc (cons B1 Γ) (Disj A2 B2)
+++++
apply OrI2.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.
prov_impl_in H0.
eapply OrE.
apply OrI2.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Disj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc (cons B1 Γ) B2
+++++
apply K0.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.
prov_impl_in H0.
eapply OrE.
apply OrI2.
apply K0.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Disj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc (cons B1 Γ) B1
+++++
is_ass.
-----
Lemma prov_or : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∨B1) Γ -> Γ ⊢ A2∨B2.
intros.
prov_impl_in H.
prov_impl_in H0.
eapply OrE.

*****

*****

+++++
Qed.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).

*****

*****
forall ll1 ll2 : list (list Literal), Provable (Impl (CNFtoPropF (app ll1 ll2)) (Conj (CNFtoPropF ll1) (CNFtoPropF ll2)))
+++++
intros.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.

*****
ll1, ll2 : list (list Literal)
*****
Provable (Impl (CNFtoPropF (app ll1 ll2)) (Conj (CNFtoPropF ll1) (CNFtoPropF ll2)))
+++++
induction ll1.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.

*****
ll2 : list (list Literal)
*****
Provable (Impl (CNFtoPropF (app nil ll2)) (Conj (CNFtoPropF nil) (CNFtoPropF ll2)))
+++++
simpl.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.

*****
ll2 : list (list Literal)
*****
Provable (Impl (CNFtoPropF ll2) (Conj (CNFtoPropF nil) (CNFtoPropF ll2)))
+++++
unfold CNFtoPropF at 2.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF at 2.

*****
ll2 : list (list Literal)
*****
Provable (Impl (CNFtoPropF ll2) (Conj (map_fold_right ClausetoPropF Conj Top nil) (CNFtoPropF ll2)))
+++++
unfold ClausetoPropF.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF at 2.
unfold ClausetoPropF.

*****
ll2 : list (list Literal)
*****
Provable (Impl (CNFtoPropF ll2) (Conj (map_fold_right (map_fold_right LiteraltoPropF Disj Bot) Conj Top nil) (CNFtoPropF ll2)))
+++++
simpl.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF at 2.
unfold ClausetoPropF.
simpl.

*****
ll2 : list (list Literal)
*****
Provable (Impl (CNFtoPropF ll2) (Conj Top (CNFtoPropF ll2)))
+++++
apply ImpI.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF at 2.
unfold ClausetoPropF.
simpl.
apply ImpI.

*****
ll2 : list (list Literal)
*****
Nc (cons (CNFtoPropF ll2) nil) (Conj Top (CNFtoPropF ll2))
+++++
apply AndI.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF at 2.
unfold ClausetoPropF.
simpl.
apply ImpI.
apply AndI.

*****
ll2 : list (list Literal)
*****
Nc (cons (CNFtoPropF ll2) nil) Top
+++++
unfold Top.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF at 2.
unfold ClausetoPropF.
simpl.
apply ImpI.
apply AndI.
unfold Top.

*****
ll2 : list (list Literal)
*****
Nc (cons (CNFtoPropF ll2) nil) (Neg Bot)
+++++
unfold Neg.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF at 2.
unfold ClausetoPropF.
simpl.
apply ImpI.
apply AndI.
unfold Top.
unfold Neg.

*****
ll2 : list (list Literal)
*****
Nc (cons (CNFtoPropF ll2) nil) (Impl Bot Bot)
+++++
apply ImpI.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF at 2.
unfold ClausetoPropF.
simpl.
apply ImpI.
apply AndI.
unfold Top.
unfold Neg.
apply ImpI.

*****
ll2 : list (list Literal)
*****
Nc (cons Bot (cons (CNFtoPropF ll2) nil)) Bot
+++++
is_ass.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF at 2.
unfold ClausetoPropF.
simpl.
apply ImpI.
apply AndI.

*****
ll2 : list (list Literal)
*****
Nc (cons (CNFtoPropF ll2) nil) (CNFtoPropF ll2)
+++++
is_ass.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.

*****
a : list Literal
ll1, ll2 : list (list Literal)
IHll1 : Provable\n (Impl (CNFtoPropF (app ll1 ll2))\n (Conj (CNFtoPropF ll1) (CNFtoPropF ll2)))
*****
Provable (Impl (CNFtoPropF (app (cons a ll1) ll2)) (Conj (CNFtoPropF (cons a ll1)) (CNFtoPropF ll2)))
+++++
simpl.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.

*****
a : list Literal
ll1, ll2 : list (list Literal)
IHll1 : Provable\n (Impl (CNFtoPropF (app ll1 ll2))\n (Conj (CNFtoPropF ll1) (CNFtoPropF ll2)))
*****
Provable (Impl (CNFtoPropF (cons a (app ll1 ll2))) (Conj (CNFtoPropF (cons a ll1)) (CNFtoPropF ll2)))
+++++
prov_impl_in IHll1.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Provable (Impl (CNFtoPropF (cons a (app ll1 ll2))) (Conj (CNFtoPropF (cons a ll1)) (CNFtoPropF ll2)))
+++++
apply ImpI.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF (cons a (app ll1 ll2))) nil) (Conj (CNFtoPropF (cons a ll1)) (CNFtoPropF ll2))
+++++
apply AndI.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF (cons a (app ll1 ll2))) nil) (CNFtoPropF (cons a ll1))
+++++
unfold CNFtoPropF.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
unfold CNFtoPropF.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (map_fold_right ClausetoPropF Conj Top (cons a (app ll1 ll2))) nil) (map_fold_right ClausetoPropF Conj Top (cons a ll1))
+++++
simpl.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
unfold CNFtoPropF.
simpl.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top (app ll1 ll2))) nil) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll1))
+++++
apply AndI.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
unfold CNFtoPropF.
simpl.
apply AndI.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top (app ll1 ll2))) nil) (ClausetoPropF a)
+++++
eapply AndE1.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
unfold CNFtoPropF.
simpl.
apply AndI.
eapply AndE1.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top (app ll1 ll2))) nil) (Conj (ClausetoPropF a) ?B)
+++++
is_ass.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
unfold CNFtoPropF.
simpl.
apply AndI.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top (app ll1 ll2))) nil) (map_fold_right ClausetoPropF Conj Top ll1)
+++++
eapply AndE1.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
unfold CNFtoPropF.
simpl.
apply AndI.
eapply AndE1.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top (app ll1 ll2))) nil) (Conj (map_fold_right ClausetoPropF Conj Top ll1) ?B)
+++++
apply K.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
unfold CNFtoPropF.
simpl.
apply AndI.
eapply AndE1.
apply K.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top (app ll1 ll2))) nil) (CNFtoPropF (app ll1 ll2))
+++++
eapply AndE2.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
unfold CNFtoPropF.
simpl.
apply AndI.
eapply AndE1.
apply K.
eapply AndE2.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top (app ll1 ll2))) nil) (Conj ?A (CNFtoPropF (app ll1 ll2)))
+++++
is_ass.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF (cons a (app ll1 ll2))) nil) (CNFtoPropF ll2)
+++++
eapply AndE2.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
eapply AndE2.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF (cons a (app ll1 ll2))) nil) (Conj ?A (CNFtoPropF ll2))
+++++
apply K.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
eapply AndE2.
apply K.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF (cons a (app ll1 ll2))) nil) (CNFtoPropF (app ll1 ll2))
+++++
eapply AndE2.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply AndI.
eapply AndE2.
apply K.
eapply AndE2.

*****
a : list Literal
ll1, ll2 : list (list Literal)
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (app ll1 ll2))),\n Nc Γ (Conj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF (cons a (app ll1 ll2))) nil) (Conj ?A (CNFtoPropF (app ll1 ll2)))
+++++
is_ass.
-----
Lemma CNF_and_prov : forall ll1 ll2, Provable (CNFtoPropF (ll1 ++ ll2) → CNFtoPropF ll1 ∧ CNFtoPropF ll2).
intros.
induction ll1.

*****

*****

+++++
Qed.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).

*****

*****
forall l1 l2 : list Literal, Provable (Impl (ClausetoPropF (app l1 l2)) (Disj (ClausetoPropF l1) (ClausetoPropF l2)))
+++++
intros.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.

*****
l1, l2 : list Literal
*****
Provable (Impl (ClausetoPropF (app l1 l2)) (Disj (ClausetoPropF l1) (ClausetoPropF l2)))
+++++
induction l1.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.

*****
l2 : list Literal
*****
Provable (Impl (ClausetoPropF (app nil l2)) (Disj (ClausetoPropF nil) (ClausetoPropF l2)))
+++++
simpl.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.

*****
l2 : list Literal
*****
Provable (Impl (ClausetoPropF l2) (Disj (ClausetoPropF nil) (ClausetoPropF l2)))
+++++
unfold ClausetoPropF.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.

*****
l2 : list Literal
*****
Provable (Impl (map_fold_right LiteraltoPropF Disj Bot l2) (Disj (map_fold_right LiteraltoPropF Disj Bot nil) (map_fold_right LiteraltoPropF Disj Bot l2)))
+++++
simpl.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.

*****
l2 : list Literal
*****
Provable (Impl (map_fold_right LiteraltoPropF Disj Bot l2) (Disj Bot (map_fold_right LiteraltoPropF Disj Bot l2)))
+++++
apply ImpI.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
apply ImpI.

*****
l2 : list Literal
*****
Nc (cons (map_fold_right LiteraltoPropF Disj Bot l2) nil) (Disj Bot (map_fold_right LiteraltoPropF Disj Bot l2))
+++++
eapply OrI2.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
apply ImpI.
eapply OrI2.

*****
l2 : list Literal
*****
Nc (cons (map_fold_right LiteraltoPropF Disj Bot l2) nil) (map_fold_right LiteraltoPropF Disj Bot l2)
+++++
is_ass.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.

*****
a : Literal
l1, l2 : list Literal
IHl1 : Provable\n (Impl (ClausetoPropF (app l1 l2))\n (Disj (ClausetoPropF l1) (ClausetoPropF l2)))
*****
Provable (Impl (ClausetoPropF (app (cons a l1) l2)) (Disj (ClausetoPropF (cons a l1)) (ClausetoPropF l2)))
+++++
simpl.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.

*****
a : Literal
l1, l2 : list Literal
IHl1 : Provable\n (Impl (ClausetoPropF (app l1 l2))\n (Disj (ClausetoPropF l1) (ClausetoPropF l2)))
*****
Provable (Impl (ClausetoPropF (cons a (app l1 l2))) (Disj (ClausetoPropF (cons a l1)) (ClausetoPropF l2)))
+++++
unfold ClausetoPropF.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.

*****
a : Literal
l1, l2 : list Literal
IHl1 : Provable\n (Impl (ClausetoPropF (app l1 l2))\n (Disj (ClausetoPropF l1) (ClausetoPropF l2)))
*****
Provable (Impl (map_fold_right LiteraltoPropF Disj Bot (cons a (app l1 l2))) (Disj (map_fold_right LiteraltoPropF Disj Bot (cons a l1)) (map_fold_right LiteraltoPropF Disj Bot l2)))
+++++
simpl.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.

*****
a : Literal
l1, l2 : list Literal
IHl1 : Provable\n (Impl (ClausetoPropF (app l1 l2))\n (Disj (ClausetoPropF l1) (ClausetoPropF l2)))
*****
Provable (Impl (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) (Disj (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot l1)) (map_fold_right LiteraltoPropF Disj Bot l2)))
+++++
prov_impl_in IHl1.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Provable (Impl (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) (Disj (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot l1)) (map_fold_right LiteraltoPropF Disj Bot l2)))
+++++
apply ImpI.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil) (Disj (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot l1)) (map_fold_right LiteraltoPropF Disj Bot l2))
+++++
eapply OrE.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil) (Disj ?A ?B)
+++++
is_ass.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (LiteraltoPropF a) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil)) (Disj (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot l1)) (map_fold_right LiteraltoPropF Disj Bot l2))
+++++
do 2 eapply OrI1.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.
do 2 eapply OrI1.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (LiteraltoPropF a) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil)) (LiteraltoPropF a)
+++++
is_ass.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil)) (Disj (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot l1)) (map_fold_right LiteraltoPropF Disj Bot l2))
+++++
apply OrE with (ClausetoPropF l1) (ClausetoPropF l2).
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.
apply OrE with (ClausetoPropF l1) (ClausetoPropF l2).

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil)) (Disj (ClausetoPropF l1) (ClausetoPropF l2))
+++++
apply K.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.
apply OrE with (ClausetoPropF l1) (ClausetoPropF l2).
apply K.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil)) (ClausetoPropF (app l1 l2))
+++++
is_ass.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.
apply OrE with (ClausetoPropF l1) (ClausetoPropF l2).

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (ClausetoPropF l1) (cons (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil))) (Disj (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot l1)) (map_fold_right LiteraltoPropF Disj Bot l2))
+++++
apply OrI1.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.
apply OrE with (ClausetoPropF l1) (ClausetoPropF l2).
apply OrI1.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (ClausetoPropF l1) (cons (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil))) (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot l1))
+++++
apply OrI2.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.
apply OrE with (ClausetoPropF l1) (ClausetoPropF l2).
apply OrI1.
apply OrI2.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (ClausetoPropF l1) (cons (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil))) (map_fold_right LiteraltoPropF Disj Bot l1)
+++++
is_ass.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.
apply OrE with (ClausetoPropF l1) (ClausetoPropF l2).

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (ClausetoPropF l2) (cons (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil))) (Disj (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot l1)) (map_fold_right LiteraltoPropF Disj Bot l2))
+++++
apply OrI2.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.
simpl.
unfold ClausetoPropF.
simpl.
prov_impl_in IHl1.
apply ImpI.
eapply OrE.
apply OrE with (ClausetoPropF l1) (ClausetoPropF l2).
apply OrI2.

*****
a : Literal
l1, l2 : list Literal
K : forall (Γ : list PropF) (_ : Nc Γ (ClausetoPropF (app l1 l2))),\n Nc Γ (Disj (ClausetoPropF l1) (ClausetoPropF l2))
*****
Nc (cons (ClausetoPropF l2) (cons (map_fold_right LiteraltoPropF Disj Bot (app l1 l2)) (cons (Disj (LiteraltoPropF a) (map_fold_right LiteraltoPropF Disj Bot (app l1 l2))) nil))) (map_fold_right LiteraltoPropF Disj Bot l2)
+++++
is_ass.
-----
Lemma CNF_or_clause_prov : forall l1 l2, Provable (ClausetoPropF (l1++l2) → ClausetoPropF l1 ∨ ClausetoPropF l2).
intros.
induction l1.

*****

*****

+++++
Qed.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).

*****

*****
forall (l : Clause) (ll : CNF), Provable (Impl (CNFtoPropF (AddClause l ll)) (Disj (ClausetoPropF l) (CNFtoPropF ll)))
+++++
intros.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.

*****
l : Clause
ll : CNF
*****
Provable (Impl (CNFtoPropF (AddClause l ll)) (Disj (ClausetoPropF l) (CNFtoPropF ll)))
+++++
induction ll.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.

*****
l : Clause
*****
Provable (Impl (CNFtoPropF (AddClause l nil)) (Disj (ClausetoPropF l) (CNFtoPropF nil)))
+++++
simpl.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.

*****
l : Clause
*****
Provable (Impl (CNFtoPropF nil) (Disj (ClausetoPropF l) (CNFtoPropF nil)))
+++++
unfold CNFtoPropF.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.

*****
l : Clause
*****
Provable (Impl (map_fold_right ClausetoPropF Conj Top nil) (Disj (ClausetoPropF l) (map_fold_right ClausetoPropF Conj Top nil)))
+++++
simpl.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.

*****
l : Clause
*****
Provable (Impl Top (Disj (ClausetoPropF l) Top))
+++++
apply ImpI.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
apply ImpI.

*****
l : Clause
*****
Nc (cons Top nil) (Disj (ClausetoPropF l) Top)
+++++
eapply OrI2.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
apply ImpI.
eapply OrI2.

*****
l : Clause
*****
Nc (cons Top nil) Top
+++++
is_ass.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.

*****
l, a : Clause
ll : list Clause
IHll : Provable\n (Impl (CNFtoPropF (AddClause l ll))\n (Disj (ClausetoPropF l) (CNFtoPropF ll)))
*****
Provable (Impl (CNFtoPropF (AddClause l (cons a ll))) (Disj (ClausetoPropF l) (CNFtoPropF (cons a ll))))
+++++
simpl.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.

*****
l, a : Clause
ll : list Clause
IHll : Provable\n (Impl (CNFtoPropF (AddClause l ll))\n (Disj (ClausetoPropF l) (CNFtoPropF ll)))
*****
Provable (Impl (CNFtoPropF (cons (app l a) (AddClause l ll))) (Disj (ClausetoPropF l) (CNFtoPropF (cons a ll))))
+++++
unfold CNFtoPropF.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.

*****
l, a : Clause
ll : list Clause
IHll : Provable\n (Impl (CNFtoPropF (AddClause l ll))\n (Disj (ClausetoPropF l) (CNFtoPropF ll)))
*****
Provable (Impl (map_fold_right ClausetoPropF Conj Top (cons (app l a) (AddClause l ll))) (Disj (ClausetoPropF l) (map_fold_right ClausetoPropF Conj Top (cons a ll))))
+++++
simpl.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.

*****
l, a : Clause
ll : list Clause
IHll : Provable\n (Impl (CNFtoPropF (AddClause l ll))\n (Disj (ClausetoPropF l) (CNFtoPropF ll)))
*****
Provable (Impl (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) (Disj (ClausetoPropF l) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll))))
+++++
prov_impl_in IHll.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Provable (Impl (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) (Disj (ClausetoPropF l) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll))))
+++++
apply ImpI.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil) (Disj (ClausetoPropF l) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll)))
+++++
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil) (Disj (ClausetoPropF l) (ClausetoPropF a))
+++++
eapply prov_impl.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
eapply prov_impl.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Provable (Impl ?A (Disj (ClausetoPropF l) (ClausetoPropF a)))
+++++
apply CNF_or_clause_prov.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
eapply prov_impl.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil) (ClausetoPropF (app l a))
+++++
eapply AndE1.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
eapply prov_impl.
eapply AndE1.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil) (Conj (ClausetoPropF (app l a)) ?B)
+++++
is_ass.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (ClausetoPropF l) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil)) (Disj (ClausetoPropF l) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll)))
+++++
apply OrI1.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrI1.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (ClausetoPropF l) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil)) (ClausetoPropF l)
+++++
is_ass.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil)) (Disj (ClausetoPropF l) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll)))
+++++
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil)) (Disj (ClausetoPropF l) (CNFtoPropF ll))
+++++
apply K.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).
apply K.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil)) (CNFtoPropF (AddClause l ll))
+++++
eapply AndE2.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).
apply K.
eapply AndE2.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil)) (Conj ?A (CNFtoPropF (AddClause l ll)))
+++++
is_ass.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (ClausetoPropF l) (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil))) (Disj (ClausetoPropF l) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll)))
+++++
apply OrI1.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).
apply OrI1.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (ClausetoPropF l) (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil))) (ClausetoPropF l)
+++++
is_ass.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (CNFtoPropF ll) (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil))) (Disj (ClausetoPropF l) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll)))
+++++
apply OrI2.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).
apply OrI2.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (CNFtoPropF ll) (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil))) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll))
+++++
apply AndI.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).
apply OrI2.
apply AndI.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (CNFtoPropF ll) (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil))) (ClausetoPropF a)
+++++
is_ass.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll.
apply ImpI.
apply OrE with (ClausetoPropF l) (ClausetoPropF a).
apply OrE with (ClausetoPropF l) (CNFtoPropF ll).
apply OrI2.
apply AndI.

*****
l, a : Clause
ll : list Clause
K : forall (Γ : list PropF) (_ : Nc Γ (CNFtoPropF (AddClause l ll))),\n Nc Γ (Disj (ClausetoPropF l) (CNFtoPropF ll))
*****
Nc (cons (CNFtoPropF ll) (cons (ClausetoPropF a) (cons (Conj (ClausetoPropF (app l a)) (map_fold_right ClausetoPropF Conj Top (AddClause l ll))) nil))) (map_fold_right ClausetoPropF Conj Top ll)
+++++
is_ass.
-----
Lemma CNF_add_clause_prov : forall l ll, Provable (CNFtoPropF (AddClause l ll) → ClausetoPropF l ∨ CNFtoPropF ll).
intros.
induction ll.

*****

*****

+++++
Qed.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).

*****

*****
forall ll1 ll2 : CNF, Provable (Impl (CNFtoPropF (Disjunct ll1 ll2)) (Disj (CNFtoPropF ll1) (CNFtoPropF ll2)))
+++++
intros.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.

*****
ll1, ll2 : CNF
*****
Provable (Impl (CNFtoPropF (Disjunct ll1 ll2)) (Disj (CNFtoPropF ll1) (CNFtoPropF ll2)))
+++++
induction ll1.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.

*****
ll2 : CNF
*****
Provable (Impl (CNFtoPropF (Disjunct nil ll2)) (Disj (CNFtoPropF nil) (CNFtoPropF ll2)))
+++++
simpl.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.

*****
ll2 : CNF
*****
Provable (Impl (CNFtoPropF nil) (Disj (CNFtoPropF nil) (CNFtoPropF ll2)))
+++++
unfold CNFtoPropF.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.

*****
ll2 : CNF
*****
Provable (Impl (map_fold_right ClausetoPropF Conj Top nil) (Disj (map_fold_right ClausetoPropF Conj Top nil) (map_fold_right ClausetoPropF Conj Top ll2)))
+++++
simpl.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.

*****
ll2 : CNF
*****
Provable (Impl Top (Disj Top (map_fold_right ClausetoPropF Conj Top ll2)))
+++++
apply ImpI.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
apply ImpI.

*****
ll2 : CNF
*****
Nc (cons Top nil) (Disj Top (map_fold_right ClausetoPropF Conj Top ll2))
+++++
eapply OrI1.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
apply ImpI.
eapply OrI1.

*****
ll2 : CNF
*****
Nc (cons Top nil) Top
+++++
is_ass.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : Provable\n (Impl (CNFtoPropF (Disjunct ll1 ll2))\n (Disj (CNFtoPropF ll1) (CNFtoPropF ll2)))
*****
Provable (Impl (CNFtoPropF (Disjunct (cons a ll1) ll2)) (Disj (CNFtoPropF (cons a ll1)) (CNFtoPropF ll2)))
+++++
simpl.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : Provable\n (Impl (CNFtoPropF (Disjunct ll1 ll2))\n (Disj (CNFtoPropF ll1) (CNFtoPropF ll2)))
*****
Provable (Impl (CNFtoPropF (app (AddClause a ll2) (Disjunct ll1 ll2))) (Disj (CNFtoPropF (cons a ll1)) (CNFtoPropF ll2)))
+++++
unfold CNFtoPropF.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : Provable\n (Impl (CNFtoPropF (Disjunct ll1 ll2))\n (Disj (CNFtoPropF ll1) (CNFtoPropF ll2)))
*****
Provable (Impl (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) (Disj (map_fold_right ClausetoPropF Conj Top (cons a ll1)) (map_fold_right ClausetoPropF Conj Top ll2)))
+++++
simpl.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
IHll1 : Provable\n (Impl (CNFtoPropF (Disjunct ll1 ll2))\n (Disj (CNFtoPropF ll1) (CNFtoPropF ll2)))
*****
Provable (Impl (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) (Disj (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll1)) (map_fold_right ClausetoPropF Conj Top ll2)))
+++++
prov_impl_in IHll1.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Provable (Impl (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) (Disj (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll1)) (map_fold_right ClausetoPropF Conj Top ll2)))
+++++
apply ImpI.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil) (Disj (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll1)) (map_fold_right ClausetoPropF Conj Top ll2))
+++++
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil) (Disj (ClausetoPropF a) (CNFtoPropF ll2))
+++++
eapply prov_impl.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
eapply prov_impl.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Provable (Impl ?A (Disj (ClausetoPropF a) (CNFtoPropF ll2)))
+++++
apply CNF_add_clause_prov.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
eapply prov_impl.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil) (CNFtoPropF (AddClause a ll2))
+++++
idtac.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
eapply prov_impl.
idtac.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil) (CNFtoPropF (AddClause a ll2))
+++++
eapply AndE1.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
eapply prov_impl.
idtac.
eapply AndE1.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil) (Conj (CNFtoPropF (AddClause a ll2)) ?B)
+++++
eapply prov_impl.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
eapply prov_impl.
idtac.
eapply AndE1.
eapply prov_impl.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Provable (Impl ?A (Conj (CNFtoPropF (AddClause a ll2)) ?B))
+++++
apply CNF_and_prov.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
eapply prov_impl.
idtac.
eapply AndE1.
eapply prov_impl.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil) (CNFtoPropF (app (AddClause a ll2) ?ll2))
+++++
is_ass.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil)) (Disj (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll1)) (map_fold_right ClausetoPropF Conj Top ll2))
+++++
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil)) (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
+++++
apply K.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).
apply K.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil)) (CNFtoPropF (Disjunct ll1 ll2))
+++++
eapply AndE2.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).
apply K.
eapply AndE2.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil)) (Conj ?A (CNFtoPropF (Disjunct ll1 ll2)))
+++++
eapply prov_impl.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).
apply K.
eapply AndE2.
eapply prov_impl.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Provable (Impl ?A0 (Conj ?A (CNFtoPropF (Disjunct ll1 ll2))))
+++++
apply CNF_and_prov.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).
apply K.
eapply AndE2.
eapply prov_impl.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil)) (CNFtoPropF (app ?ll1 (Disjunct ll1 ll2)))
+++++
is_ass.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF ll1) (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil))) (Disj (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll1)) (map_fold_right ClausetoPropF Conj Top ll2))
+++++
apply OrI1.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).
apply OrI1.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF ll1) (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil))) (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll1))
+++++
apply AndI.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).
apply OrI1.
apply AndI.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF ll1) (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil))) (ClausetoPropF a)
+++++
is_ass.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).
apply OrI1.
apply AndI.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF ll1) (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil))) (map_fold_right ClausetoPropF Conj Top ll1)
+++++
is_ass.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF ll2) (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil))) (Disj (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll1)) (map_fold_right ClausetoPropF Conj Top ll2))
+++++
apply OrI2.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrE with (CNFtoPropF ll1) (CNFtoPropF ll2).
apply OrI2.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF ll2) (cons (ClausetoPropF a) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil))) (map_fold_right ClausetoPropF Conj Top ll2)
+++++
is_ass.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF ll2) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil)) (Disj (Conj (ClausetoPropF a) (map_fold_right ClausetoPropF Conj Top ll1)) (map_fold_right ClausetoPropF Conj Top ll2))
+++++
apply OrI2.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.
simpl.
unfold CNFtoPropF.
simpl.
prov_impl_in IHll1.
apply ImpI.
apply OrE with (ClausetoPropF a) (CNFtoPropF ll2).
apply OrI2.

*****
a : Clause
ll1 : list Clause
ll2 : CNF
K : forall (Γ : list PropF)\n (_ : Nc Γ (CNFtoPropF (Disjunct ll1 ll2))),\n Nc Γ (Disj (CNFtoPropF ll1) (CNFtoPropF ll2))
*****
Nc (cons (CNFtoPropF ll2) (cons (map_fold_right ClausetoPropF Conj Top (app (AddClause a ll2) (Disjunct ll1 ll2))) nil)) (map_fold_right ClausetoPropF Conj Top ll2)
+++++
is_ass.
-----
Lemma CNF_or_prov : forall ll1 ll2, Provable (CNFtoPropF (Disjunct ll1 ll2) → CNFtoPropF ll1 ∨ CNFtoPropF ll2).
intros.
induction ll1.

*****

*****

+++++
Qed.
-----
Theorem CNF_impl_prov : forall A, Provable (CNFtoPropF (MakeCNF A) → NNFtoPropF A).
-----
Theorem CNF_impl_prov : forall A, Provable (CNFtoPropF (MakeCNF A) → NNFtoPropF A).

*****

*****
forall A : NNF, Provable (Impl (CNFtoPropF (MakeCNF A)) (NNFtoPropF A))
+++++
induction A;simpl; try (unfold CNFtoPropF; unfold ClausetoPropF;simpl; apply ImpI;eapply OrE; [eapply AndE1;is_ass| is_ass| apply BotC;is_ass];fail).
-----
Theorem CNF_impl_prov : forall A, Provable (CNFtoPropF (MakeCNF A) → NNFtoPropF A).
induction A;simpl; try (unfold CNFtoPropF; unfold ClausetoPropF;simpl; apply ImpI;eapply OrE; [eapply AndE1;is_ass| is_ass| apply BotC;is_ass];fail).

*****
A1, A2 : NNF
IHA1 : Provable (Impl (CNFtoPropF (MakeCNF A1)) (NNFtoPropF A1))
IHA2 : Provable (Impl (CNFtoPropF (MakeCNF A2)) (NNFtoPropF A2))
*****
Provable (Impl (CNFtoPropF (app (MakeCNF A1) (MakeCNF A2))) (Conj (NNFtoPropF A1) (NNFtoPropF A2)))
+++++
apply ImpI;apply AndI;(eapply prov_impl;[eassumption|]); [eapply AndE1|eapply AndE2];(eapply prov_impl;[apply CNF_and_prov|is_ass]).
-----
Theorem CNF_impl_prov : forall A, Provable (CNFtoPropF (MakeCNF A) → NNFtoPropF A).
induction A;simpl; try (unfold CNFtoPropF; unfold ClausetoPropF;simpl; apply ImpI;eapply OrE; [eapply AndE1;is_ass| is_ass| apply BotC;is_ass];fail).
apply ImpI;apply AndI;(eapply prov_impl;[eassumption|]); [eapply AndE1|eapply AndE2];(eapply prov_impl;[apply CNF_and_prov|is_ass]).

*****
A1, A2 : NNF
IHA1 : Provable (Impl (CNFtoPropF (MakeCNF A1)) (NNFtoPropF A1))
IHA2 : Provable (Impl (CNFtoPropF (MakeCNF A2)) (NNFtoPropF A2))
*****
Provable (Impl (CNFtoPropF (Disjunct (MakeCNF A1) (MakeCNF A2))) (Disj (NNFtoPropF A1) (NNFtoPropF A2)))
+++++
apply ImpI;eapply prov_impl.
-----
Theorem CNF_impl_prov : forall A, Provable (CNFtoPropF (MakeCNF A) → NNFtoPropF A).
induction A;simpl; try (unfold CNFtoPropF; unfold ClausetoPropF;simpl; apply ImpI;eapply OrE; [eapply AndE1;is_ass| is_ass| apply BotC;is_ass];fail).
apply ImpI;apply AndI;(eapply prov_impl;[eassumption|]); [eapply AndE1|eapply AndE2];(eapply prov_impl;[apply CNF_and_prov|is_ass]).
apply ImpI;eapply prov_impl.

*****
A1, A2 : NNF
IHA1 : Provable (Impl (CNFtoPropF (MakeCNF A1)) (NNFtoPropF A1))
IHA2 : Provable (Impl (CNFtoPropF (MakeCNF A2)) (NNFtoPropF A2))
*****
Provable (Impl ?A (Disj (NNFtoPropF A1) (NNFtoPropF A2)))
+++++
apply ImpI;eapply prov_or;try eassumption;in_solve.
-----
Theorem CNF_impl_prov : forall A, Provable (CNFtoPropF (MakeCNF A) → NNFtoPropF A).
induction A;simpl; try (unfold CNFtoPropF; unfold ClausetoPropF;simpl; apply ImpI;eapply OrE; [eapply AndE1;is_ass| is_ass| apply BotC;is_ass];fail).
apply ImpI;apply AndI;(eapply prov_impl;[eassumption|]); [eapply AndE1|eapply AndE2];(eapply prov_impl;[apply CNF_and_prov|is_ass]).
apply ImpI;eapply prov_impl.
apply ImpI;eapply prov_or;try eassumption;in_solve.

*****
A1, A2 : NNF
IHA1 : Provable (Impl (CNFtoPropF (MakeCNF A1)) (NNFtoPropF A1))
IHA2 : Provable (Impl (CNFtoPropF (MakeCNF A2)) (NNFtoPropF A2))
*****
Nc (cons (CNFtoPropF (Disjunct (MakeCNF A1) (MakeCNF A2))) nil) (Disj (CNFtoPropF (MakeCNF A1)) (CNFtoPropF (MakeCNF A2)))
+++++
eapply prov_impl;[apply CNF_or_prov|is_ass].
-----
Theorem CNF_impl_prov : forall A, Provable (CNFtoPropF (MakeCNF A) → NNFtoPropF A).
induction A;simpl; try (unfold CNFtoPropF; unfold ClausetoPropF;simpl; apply ImpI;eapply OrE; [eapply AndE1;is_ass| is_ass| apply BotC;is_ass];fail).
apply ImpI;apply AndI;(eapply prov_impl;[eassumption|]); [eapply AndE1|eapply AndE2];(eapply prov_impl;[apply CNF_and_prov|is_ass]).
apply ImpI;eapply prov_impl.
apply ImpI;eapply prov_or;try eassumption;in_solve.
eapply prov_impl;[apply CNF_or_prov|is_ass].

*****

*****

+++++
Qed.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.

*****

*****
forall (A1 A2 B1 B2 : PropF) (Γ : list PropF) (_ : Provable (Impl A1 A2)) (_ : Provable (Impl B1 B2)) (_ : In (Conj A1 B1) Γ), Nc Γ (Conj A2 B2)
+++++
intros.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H : Provable (Impl A1 A2)
H0 : Provable (Impl B1 B2)
H1 : In (Conj A1 B1) Γ
*****
Nc Γ (Conj A2 B2)
+++++
prov_impl_in H.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.
prov_impl_in H.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H0 : Provable (Impl B1 B2)
H1 : In (Conj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
*****
Nc Γ (Conj A2 B2)
+++++
prov_impl_in H0.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.
prov_impl_in H.
prov_impl_in H0.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Conj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc Γ (Conj A2 B2)
+++++
apply AndI.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.
prov_impl_in H.
prov_impl_in H0.
apply AndI.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Conj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc Γ A2
+++++
apply K.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.
prov_impl_in H.
prov_impl_in H0.
apply AndI.
apply K.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Conj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc Γ A1
+++++
eapply AndE1.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.
prov_impl_in H.
prov_impl_in H0.
apply AndI.
apply K.
eapply AndE1.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Conj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc Γ (Conj A1 ?B)
+++++
is_ass.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.
prov_impl_in H.
prov_impl_in H0.
apply AndI.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Conj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc Γ B2
+++++
apply K0.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.
prov_impl_in H.
prov_impl_in H0.
apply AndI.
apply K0.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Conj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc Γ B1
+++++
eapply AndE2.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.
prov_impl_in H.
prov_impl_in H0.
apply AndI.
apply K0.
eapply AndE2.

*****
A1, A2, B1, B2 : PropF
Γ : list PropF
H1 : In (Conj A1 B1) Γ
K : forall (Γ : list PropF) (_ : Nc Γ A1), Nc Γ A2
K0 : forall (Γ : list PropF) (_ : Nc Γ B1), Nc Γ B2
*****
Nc Γ (Conj ?A B1)
+++++
is_ass.
-----
Lemma prov_and : forall A1 A2 B1 B2 Γ, Provable (A1 → A2) -> Provable (B1 → B2) -> In (A1∧B1) Γ -> Γ ⊢ A2∧B2.
intros.
prov_impl_in H.
prov_impl_in H0.
apply AndI.

*****

*****

+++++
Qed.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF  A) →  A) /\\n                                Provable (NNFtoPropF (MakeNNFN A) → ¬A).
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).

*****

*****
forall A : PropF, and (Provable (Impl (NNFtoPropF (MakeNNF A)) A)) (Provable (Impl (NNFtoPropF (MakeNNFN A)) (Neg A)))
+++++
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Conj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNF A2))) nil) (Conj A1 A2)
+++++
eapply prov_and;try eassumption;in_solve.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNFN A2))) nil) (Neg (Conj A1 A2))
+++++
apply ImpI.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Conj A1 A2) (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNFN A2))) nil)) Bot
+++++
apply OrE with ¬A1 ¬A2.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Conj A1 A2) (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNFN A2))) nil)) (Disj (Neg A1) (Neg A2))
+++++
eapply prov_or;try eassumption;in_solve.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Neg A1) (cons (Conj A1 A2) (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNFN A2))) nil))) Bot
+++++
mp;[|eapply AndE1];is_ass.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Neg A2) (cons (Conj A1 A2) (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNFN A2))) nil))) Bot
+++++
mp;[|eapply AndE2];is_ass.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Disj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNF A2))) nil) (Disj A1 A2)
+++++
eapply prov_or;try eassumption;in_solve.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Conj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNFN A2))) nil) (Neg (Disj A1 A2))
+++++
apply ImpI.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Disj A1 A2) (cons (Conj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNFN A2))) nil)) Bot
+++++
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons A1 (cons (Disj A1 A2) (cons (Conj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNFN A2))) nil))) (NNFtoPropF (MakeNNFN A1))
+++++
eapply AndE1;is_ass.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons A2 (cons (Disj A1 A2) (cons (Conj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNFN A2))) nil))) (NNFtoPropF (MakeNNFN A2))
+++++
eapply AndE2;is_ass.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNF A2))) nil) (Impl A1 A2)
+++++
apply ImpI.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons A1 (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNF A2))) nil)) A2
+++++
apply OrE with ¬A1 A2.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons A1 (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNF A2))) nil)) (Disj (Neg A1) A2)
+++++
eapply prov_or;try eassumption;in_solve.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Neg A1) (cons A1 (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNF A2))) nil))) A2
+++++
apply BotC.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Neg A2) (cons (Neg A1) (cons A1 (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNF A2))) nil)))) Bot
+++++
eapply ImpE with A1;is_ass.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons A2 (cons A1 (cons (Disj (NNFtoPropF (MakeNNFN A1)) (NNFtoPropF (MakeNNF A2))) nil))) A2
+++++
is_ass.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.
is_ass.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Conj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNFN A2))) nil) (Neg (Impl A1 A2))
+++++
apply ImpI.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.
is_ass.
apply ImpI.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Impl A1 A2) (cons (Conj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNFN A2))) nil)) Bot
+++++
apply ImpE with A2.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.
is_ass.
apply ImpI.
apply ImpE with A2.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Impl A1 A2) (cons (Conj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNFN A2))) nil)) (Impl A2 Bot)
+++++
eapply prov_impl;try eassumption.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.
is_ass.
apply ImpI.
apply ImpE with A2.
eapply prov_impl;try eassumption.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Impl A1 A2) (cons (Conj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNFN A2))) nil)) (NNFtoPropF (MakeNNFN A2))
+++++
eapply AndE2;is_ass.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.
is_ass.
apply ImpI.
apply ImpE with A2.
eapply prov_impl;try eassumption.
eapply AndE2;is_ass.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Impl A1 A2) (cons (Conj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNFN A2))) nil)) A2
+++++
mp.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.
is_ass.
apply ImpI.
apply ImpE with A2.
eapply prov_impl;try eassumption.
eapply AndE2;is_ass.
mp.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Impl A1 A2) (cons (Conj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNFN A2))) nil)) (Impl ?A A2)
+++++
is_ass.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.
is_ass.
apply ImpI.
apply ImpE with A2.
eapply prov_impl;try eassumption.
eapply AndE2;is_ass.
mp.
is_ass.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Impl A1 A2) (cons (Conj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNFN A2))) nil)) A1
+++++
eapply prov_impl;try eassumption.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.
is_ass.
apply ImpI.
apply ImpE with A2.
eapply prov_impl;try eassumption.
eapply AndE2;is_ass.
mp.
is_ass.
eapply prov_impl;try eassumption.

*****
A1, A2 : PropF
H : Provable (Impl (NNFtoPropF (MakeNNF A1)) A1)
H0 : Provable (Impl (NNFtoPropF (MakeNNFN A1)) (Neg A1))
H1 : Provable (Impl (NNFtoPropF (MakeNNF A2)) A2)
H2 : Provable (Impl (NNFtoPropF (MakeNNFN A2)) (Neg A2))
*****
Nc (cons (Impl A1 A2) (cons (Conj (NNFtoPropF (MakeNNF A1)) (NNFtoPropF (MakeNNFN A2))) nil)) (NNFtoPropF (MakeNNF A1))
+++++
eapply AndE1;is_ass.
-----
Lemma NNF_impl_prov : forall A, Provable (NNFtoPropF (MakeNNF A) → A) /\\ Provable (NNFtoPropF (MakeNNFN A) → ¬A).
induction A;simpl;split;try destruct IHA;try destruct IHA1;try destruct IHA2;apply ImpI;try (is_ass;fail).
eapply prov_and;try eassumption;in_solve.
apply ImpI.
apply OrE with ¬A1 ¬A2.
eapply prov_or;try eassumption;in_solve.
mp;[|eapply AndE1];is_ass.
mp;[|eapply AndE2];is_ass.
eapply prov_or;try eassumption;in_solve.
apply ImpI.
eapply OrE;[is_ass|mp;[|is_ass];eapply prov_impl;try eassumption..].
eapply AndE1;is_ass.
eapply AndE2;is_ass.
apply ImpI.
apply OrE with ¬A1 A2.
eapply prov_or;try eassumption;in_solve.
apply BotC.
eapply ImpE with A1;is_ass.
is_ass.
apply ImpI.
apply ImpE with A2.
eapply prov_impl;try eassumption.
eapply AndE2;is_ass.
mp.
is_ass.
eapply prov_impl;try eassumption.
eapply AndE1;is_ass.

*****

*****

+++++
Qed.
-----
Theorem Completeness : Prop_Completeness.
-----
Theorem Completeness : Prop_Completeness.

*****

*****
Prop_Completeness
+++++
do 2 intro.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.

*****
A : PropF
H : Valid A
*****
Provable A
+++++
mp.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.

*****
A : PropF
H : Valid A
*****
Nc nil (Impl ?A A)
+++++
apply NNF_impl_prov.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.

*****
A : PropF
H : Valid A
*****
Nc nil (NNFtoPropF (MakeNNF A))
+++++
mp.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.
mp.

*****
A : PropF
H : Valid A
*****
Nc nil (Impl ?A (NNFtoPropF (MakeNNF A)))
+++++
apply CNF_impl_prov.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.
mp.

*****
A : PropF
H : Valid A
*****
Nc nil (CNFtoPropF (MakeCNF (MakeNNF A)))
+++++
apply CNF_provable.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.
mp.
apply CNF_provable.

*****
A : PropF
H : Valid A
*****
Valid_CNF (MakeCNF (MakeNNF A))
+++++
apply CNF_valid.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.
mp.
apply CNF_provable.
apply CNF_valid.

*****
A : PropF
H : Valid A
*****
Valid (CNFtoPropF (MakeCNF (MakeNNF A)))
+++++
intros ? ?.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.
mp.
apply CNF_provable.
apply CNF_valid.
intros ? ?.

*****
A : PropF
H : Valid A
v : forall _ : PropVars, bool
H0 : Satisfies v nil
*****
Is_true (TrueQ v (CNFtoPropF (MakeCNF (MakeNNF A))))
+++++
rewrite CNF_equiv_valid.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.
mp.
apply CNF_provable.
apply CNF_valid.
intros ? ?.
rewrite CNF_equiv_valid.

*****
A : PropF
H : Valid A
v : forall _ : PropVars, bool
H0 : Satisfies v nil
*****
Is_true (TrueQ v (NNFtoPropF (MakeNNF A)))
+++++
rewrite ((and_ind (fun A _ => A)) (NNF_equiv_valid v A)).
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.
mp.
apply CNF_provable.
apply CNF_valid.
intros ? ?.
rewrite CNF_equiv_valid.
rewrite ((and_ind (fun A _ => A)) (NNF_equiv_valid v A)).

*****
A : PropF
H : Valid A
v : forall _ : PropVars, bool
H0 : Satisfies v nil
*****
Is_true (TrueQ v A)
+++++
apply H.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.
mp.
apply CNF_provable.
apply CNF_valid.
intros ? ?.
rewrite CNF_equiv_valid.
rewrite ((and_ind (fun A _ => A)) (NNF_equiv_valid v A)).
apply H.

*****
A : PropF
H : Valid A
v : forall _ : PropVars, bool
H0 : Satisfies v nil
*****
Satisfies v nil
+++++
assumption.
-----
Theorem Completeness : Prop_Completeness.
do 2 intro.
mp.

*****

*****

+++++
Qed.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.

*****

*****
forall (Γ : list PropF) (A : PropF), iff (Nc Γ A) (Models Γ A)
+++++
split.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.

*****
Γ : list PropF
A : PropF
*****
forall _ : Nc Γ A, Models Γ A
+++++
apply Soundness_general.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.

*****
Γ : list PropF
A : PropF
*****
forall _ : Models Γ A, Nc Γ A
+++++
revert A.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.

*****
Γ : list PropF
*****
forall (A : PropF) (_ : Models Γ A), Nc Γ A
+++++
induction Γ.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.

*****

*****
forall (A : PropF) (_ : Models nil A), Nc nil A
+++++
apply Completeness.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
*****
forall (A : PropF) (_ : Models (cons a Γ) A), Nc (cons a Γ) A
+++++
intros.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
*****
Nc (cons a Γ) A
+++++
apply deduction.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
*****
Nc Γ (Impl a A)
+++++
apply IHΓ.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
*****
Models Γ (Impl a A)
+++++
intros ? ?.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
*****
Is_true (TrueQ v (Impl a A))
+++++
case_bool v a.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) true
*****
Is_true (orb (negb (TrueQ v a)) (TrueQ v A))
+++++
rewrite H1.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) true
*****
Is_true (orb (negb true) (TrueQ v A))
+++++
simpl.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) true
*****
Is_true (TrueQ v A)
+++++
apply H.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.
apply H.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) true
*****
Satisfies v (cons a Γ)
+++++
intros ? ?.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.
apply H.
intros ? ?.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) true
A0 : PropF
H2 : In A0 (cons a Γ)
*****
Is_true (TrueQ v A0)
+++++
destruct H2.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.
apply H.
intros ? ?.
destruct H2.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) true
A0 : PropF
H2 : eq a A0
*****
Is_true (TrueQ v A0)
+++++
subst.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.
apply H.
intros ? ?.
destruct H2.
subst.

*****
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A, A0 : PropF
H : Models (cons A0 Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v A0) true
*****
Is_true (TrueQ v A0)
+++++
rewrite H1.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.
apply H.
intros ? ?.
destruct H2.
subst.
rewrite H1.

*****
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A, A0 : PropF
H : Models (cons A0 Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v A0) true
*****
Is_true true
+++++
exact I.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.
apply H.
intros ? ?.
destruct H2.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) true
A0 : PropF
H2 : In A0 Γ
*****
Is_true (TrueQ v A0)
+++++
subst.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.
apply H.
intros ? ?.
destruct H2.
subst.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) true
A0 : PropF
H2 : In A0 Γ
*****
Is_true (TrueQ v A0)
+++++
apply H0.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.
apply H.
intros ? ?.
destruct H2.
subst.
apply H0.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) true
A0 : PropF
H2 : In A0 Γ
*****
In A0 Γ
+++++
in_solve.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) false
*****
Is_true (orb (negb (TrueQ v a)) (TrueQ v A))
+++++
rewrite H1.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) false
*****
Is_true (orb (negb false) (TrueQ v A))
+++++
simpl.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.
revert A.
induction Γ.
intros.
apply deduction.
apply IHΓ.
intros ? ?.
case_bool v a.
rewrite H1.
simpl.

*****
a : PropF
Γ : list PropF
IHΓ : forall (A : PropF) (_ : Models Γ A), Nc Γ A
A : PropF
H : Models (cons a Γ) A
v : forall _ : PropVars, bool
H0 : Satisfies v Γ
H1 : eq (TrueQ v a) false
*****
True
+++++
exact I.
-----
Theorem prov_equiv_models : forall Γ A, Γ ⊢ A <-> Γ ⊨ A.
split.

*****

*****

+++++
Qed.
-----
Print Assumptions prov_equiv_models.
-----
End complete_mod.
-----
