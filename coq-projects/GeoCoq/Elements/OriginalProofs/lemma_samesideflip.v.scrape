Require Export GeoCoq.Elements.OriginalProofs.lemma_NCorder.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral}.
-----
Lemma lemma_samesideflip : \n   forall A B P Q, \n   OS P Q A B ->\n   OS P Q B A.
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.

*****
Ax1 : euclidean_neutral
*****
forall (A B P Q : Point) (_ : OS P Q A B), OS P Q B A
+++++
Proof.
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.
Proof.

*****
Ax1 : euclidean_neutral
*****
forall (A B P Q : Point) (_ : OS P Q A B), OS P Q B A
+++++
intros.
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.
Proof.
intros.

*****
H : OS P Q A B
A,B,P,Q : Point
Ax1 : euclidean_neutral
*****
OS P Q B A
+++++
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\ Col A B q /\ BetS P p r /\ BetS Q q r /\ nCol A B P /\ nCol A B Q)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B q /\\ BetS P p r /\\ BetS Q q r /\\ nCol A B P /\\ nCol A B Q)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.

*****
H5 : nCol A B Q
H4 : nCol A B P
H3 : BetS Q q r
H2 : BetS P p r
H1 : Col A B q
H0 : Col A B p
p,q,r : Point
H : OS P Q A B
A,B,P,Q : Point
Ax1 : euclidean_neutral
*****
OS P Q B A
+++++
assert (Col B A p) by (forward_using lemma_collinearorder).
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B q /\\ BetS P p r /\\ BetS Q q r /\\ nCol A B P /\\ nCol A B Q)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (Col B A p) by (forward_using lemma_collinearorder).

*****
H6 : Col B A p
H5 : nCol A B Q
H4 : nCol A B P
H3 : BetS Q q r
H2 : BetS P p r
H1 : Col A B q
H0 : Col A B p
p,q,r : Point
H : OS P Q A B
A,B,P,Q : Point
Ax1 : euclidean_neutral
*****
OS P Q B A
+++++
assert (Col B A q) by (forward_using lemma_collinearorder).
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B q /\\ BetS P p r /\\ BetS Q q r /\\ nCol A B P /\\ nCol A B Q)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B A q) by (forward_using lemma_collinearorder).

*****
H7 : Col B A q
H6 : Col B A p
H5 : nCol A B Q
H4 : nCol A B P
H3 : BetS Q q r
H2 : BetS P p r
H1 : Col A B q
H0 : Col A B p
p,q,r : Point
H : OS P Q A B
A,B,P,Q : Point
Ax1 : euclidean_neutral
*****
OS P Q B A
+++++
assert (nCol B A P) by (forward_using lemma_NCorder).
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B q /\\ BetS P p r /\\ BetS Q q r /\\ nCol A B P /\\ nCol A B Q)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B A q) by (forward_using lemma_collinearorder).
assert (nCol B A P) by (forward_using lemma_NCorder).

*****
H8 : nCol B A P
H7 : Col B A q
H6 : Col B A p
H5 : nCol A B Q
H4 : nCol A B P
H3 : BetS Q q r
H2 : BetS P p r
H1 : Col A B q
H0 : Col A B p
p,q,r : Point
H : OS P Q A B
A,B,P,Q : Point
Ax1 : euclidean_neutral
*****
OS P Q B A
+++++
assert (nCol B A Q) by (forward_using lemma_NCorder).
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B q /\\ BetS P p r /\\ BetS Q q r /\\ nCol A B P /\\ nCol A B Q)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B A q) by (forward_using lemma_collinearorder).
assert (nCol B A P) by (forward_using lemma_NCorder).
assert (nCol B A Q) by (forward_using lemma_NCorder).

*****
H9 : nCol B A Q
H8 : nCol B A P
H7 : Col B A q
H6 : Col B A p
H5 : nCol A B Q
H4 : nCol A B P
H3 : BetS Q q r
H2 : BetS P p r
H1 : Col A B q
H0 : Col A B p
p,q,r : Point
H : OS P Q A B
A,B,P,Q : Point
Ax1 : euclidean_neutral
*****
OS P Q B A
+++++
assert (OS P Q B A) by (conclude_def OS ).
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B q /\\ BetS P p r /\\ BetS Q q r /\\ nCol A B P /\\ nCol A B Q)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B A q) by (forward_using lemma_collinearorder).
assert (nCol B A P) by (forward_using lemma_NCorder).
assert (nCol B A Q) by (forward_using lemma_NCorder).
assert (OS P Q B A) by (conclude_def OS ).

*****
H10 : OS P Q B A
H9 : nCol B A Q
H8 : nCol B A P
H7 : Col B A q
H6 : Col B A p
H5 : nCol A B Q
H4 : nCol A B P
H3 : BetS Q q r
H2 : BetS P p r
H1 : Col A B q
H0 : Col A B p
p,q,r : Point
H : OS P Q A B
A,B,P,Q : Point
Ax1 : euclidean_neutral
*****
OS P Q B A
+++++
close.
-----
Lemma lemma_samesideflip : forall A B P Q, OS P Q A B -> OS P Q B A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B q /\\ BetS P p r /\\ BetS Q q r /\\ nCol A B P /\\ nCol A B Q)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B A q) by (forward_using lemma_collinearorder).
assert (nCol B A P) by (forward_using lemma_NCorder).
assert (nCol B A Q) by (forward_using lemma_NCorder).
assert (OS P Q B A) by (conclude_def OS ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
